{
    "version": "https://jsonfeed.org/version/1",
    "title": "玖忆 • All posts by \"jwt\" category",
    "description": "我本微末凡尘、可也心向天空",
    "home_page_url": "https://wait-you.github.io",
    "items": [
        {
            "id": "https://wait-you.github.io/2023/06/06/JWT/",
            "url": "https://wait-you.github.io/2023/06/06/JWT/",
            "title": "JWT",
            "date_published": "2023-06-06T00:46:17.000Z",
            "content_html": "<h1 id=\"jwt-实战教程\"><a class=\"markdownIt-Anchor\" href=\"#jwt-实战教程\">#</a> JWT 实战教程</h1>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200726102546868.png\"\n                      alt=\"image-20200726102546868\"\n                ></p>\n<h2 id=\"1什么是jwt\"><a class=\"markdownIt-Anchor\" href=\"#1什么是jwt\">#</a> 1. 什么是 JWT</h2>\n<p>JSON Web Token (JWT) is an open standard (<a class=\"link\"   href=\"https://tools.ietf.org/html/rfc7519\" >RFC 7519 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. This information can be verified and trusted because it is digitally signed. JWTs can be signed using a secret (with the <strong>HMAC</strong> algorithm) or a public/private key pair using <strong>RSA</strong> or <strong>ECDSA</strong>.</p>\n<p>​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t—[摘自官网]</p>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 1.翻译</span></span><br><span class=\"line\"><span class=\"bullet\">-</span>  官网地址: https://jwt.io/introduction/</span><br><span class=\"line\"><span class=\"bullet\">-</span>  翻译: jsonwebtoken（JWT）是一个开放标准（rfc7519），它定义了一种紧凑的、自包含的方式，用于在各方之间以JSON对象安全地传输信息。此信息可以验证和信任，因为它是数字签名的。jwt可以使用秘密（使用HMAC算法）或使用RSA或ECDSA的公钥/私钥对进行签名</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\"># 2.通俗解释</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> JWT简称JSON Web Token,也就是通过JSON形式作为Web应用中的令牌,用于在各方之间安全地将信息作为JSON对象传输。在数据传输过程中还可以完成数据加密、签名等相关处理。</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"2jwt能做什么\"><a class=\"markdownIt-Anchor\" href=\"#2jwt能做什么\">#</a> 2.JWT 能做什么</h2>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 1.授权</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> 这是使用JWT的最常见方案。一旦用户登录，每个后续请求将包括JWT，从而允许用户访问该令牌允许的路由，服务和资源。单点登录是当今广泛使用JWT的一项功能，因为它的开销很小并且可以在不同的域中轻松使用。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\"># 2.信息交换</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> JSON Web Token是在各方之间安全地传输信息的好方法。因为可以对JWT进行签名（例如，使用公钥/私钥对），所以您可以确保发件人是他们所说的人。此外，由于签名是使用标头和有效负载计算的，因此您还可以验证内容是否遭到篡改。</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"3为什么是jwt\"><a class=\"markdownIt-Anchor\" href=\"#3为什么是jwt\">#</a> 3. 为什么是 JWT</h2>\n<h3 id=\"基于传统的session认证\"><a class=\"markdownIt-Anchor\" href=\"#基于传统的session认证\">#</a> 基于传统的 Session 认证</h3>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 1.认证方式</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> 我们知道，http协议本身是一种无状态的协议，而这就意味着如果用户向我们的应用提供了用户名和密码来进行用户认证，那么下一次请求时，用户还要再一次进行用户认证才行，因为根据http协议，我们并不能知道是哪个用户发出的请求，所以为了让我们的应用能识别是哪个用户发出的请求，我们只能在服务器存储一份用户登录的信息，这份登录信息会在响应时传递给浏览器，告诉其保存为cookie,以便下次请求时发送给我们的应用，这样我们的应用就能识别请求来自哪个用户了,这就是传统的基于session认证。</span><br><span class=\"line\">t</span><br><span class=\"line\"><span class=\"section\"># 2.认证流程</span></span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200726103959013.png\"\n                      alt=\"image-20200726103959013\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 3.暴露问题</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> 1.每个用户经过我们的应用认证之后，我们的应用都要在服务端做一次记录，以方便用户下次请求的鉴别，通常而言session都是保存在内存中，而随着认证用户的增多，服务端的开销会明显增大</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> 2.用户认证之后，服务端做认证记录，如果认证的记录被保存在内存中的话，这意味着用户下次请求还必须要请求在这台服务器上,这样才能拿到授权的资源，这样在分布式的应用上，相应的限制了负载均衡器的能力。这也意味着限制了应用的扩展能力。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> 3.因为是基于cookie来进行用户识别的, cookie如果被截获，用户就会很容易受到跨站请求伪造的攻击。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> 4.在前后端分离系统中就更加痛苦:如下图所示</span><br><span class=\"line\"><span class=\"code\">\t也就是说前后端分离在应用解耦后增加了部署的复杂性。通常用户一次请求就要转发多次。如果用session 每次携带sessionid 到服务\t器，服务器还要查询用户信息。同时如果用户很多。这些信息存储在服务器内存中，给服务器增加负担。还有就是CSRF（跨站伪造请求攻\t击）攻击，session是基于cookie进行用户识别的, cookie如果被截获，用户就会很容易受到跨站请求伪造的攻击。还有就是\t     sessionid就是一个特征值，表达的信息不够丰富。不容易扩展。而且如果你后端应用是多节点部署。那么就需要实现session共享机制。\t不方便集群应用。</span></span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200804212240422.png\"\n                      alt=\"image-20200804212240422\"\n                ></p>\n<h3 id=\"基于jwt认证\"><a class=\"markdownIt-Anchor\" href=\"#基于jwt认证\">#</a> 基于 JWT 认证</h3>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200726183248298.png\"\n                      alt=\"image-20200726183248298\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 1.认证流程</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> 首先，前端通过Web表单将自己的用户名和密码发送到后端的接口。这一过程一般是一个HTTP POST请求。建议的方式是通过SSL加密的传输（https协议），从而避免敏感信息被嗅探。</span><br><span class=\"line\"><span class=\"bullet\">-</span> 后端核对用户名和密码成功后，将用户的id等其他信息作为JWT Payload（负载），将其与头部分别进行Base64编码拼接后签名，形成一个JWT(Token)。形成的JWT就是一个形同lll.zzz.xxx的字符串。 token head.payload.singurater</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> 后端将JWT字符串作为登录成功的返回结果返回给前端。前端可以将返回的结果保存在localStorage或sessionStorage上，退出登录时前端删除保存的JWT即可。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> 前端在每次请求时将JWT放入HTTP Header中的Authorization位。(解决XSS和XSRF问题) HEADER</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> 后端检查是否存在，如存在验证JWT的有效性。例如，检查签名是否正确；检查Token是否过期；检查Token的接收方是否是自己（可选）。</span><br><span class=\"line\"><span class=\"bullet\">-</span> 验证通过后后端使用JWT中包含的用户信息进行其他逻辑操作，返回相应结果。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\"># 2.jwt优势</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> 简洁(Compact): 可以通过URL，POST参数或者在HTTP header发送，因为数据量小，传输速度也很快</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> 自包含(Self-contained)：负载中包含了所有用户所需要的信息，避免了多次查询数据库</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> 因为Token是以JSON加密的形式保存在客户端的，所以JWT是跨语言的，原则上任何web形式都支持。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> 不需要在服务端保存会话信息，特别适用于分布式微服务。</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"4jwt的结构是什么\"><a class=\"markdownIt-Anchor\" href=\"#4jwt的结构是什么\">#</a> 4.JWT 的结构是什么？</h2>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">token   string  ====&gt;  header.payload.singnature   token   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\"># 1.令牌组成</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> 1.标头(Header)</span><br><span class=\"line\"><span class=\"bullet\">-</span> 2.有效载荷(Payload)</span><br><span class=\"line\"><span class=\"bullet\">-</span> 3.签名(Signature)</span><br><span class=\"line\"><span class=\"bullet\">-</span> 因此，JWT通常如下所示:xxxxx.yyyyy.zzzzz   Header.Payload.Signature</span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 2.Header</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> 标头通常由两部分组成：令牌的类型（即JWT）和所使用的签名算法，例如HMAC SHA256或RSA。它会使用 Base64 编码组成 JWT 结构的第一部分。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> 注意:Base64是一种编码，也就是说，它是可以被翻译回原来的样子来的。它并不是一种加密过程。</span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Json\"><figure class=\"iseeu highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;alg&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;HS256&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;typ&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;JWT&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 3.Payload</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> 令牌的第二部分是有效负载，其中包含声明。声明是有关实体（通常是用户）和其他数据的声明。同样的，它会使用 Base64 编码组成 JWT 结构的第二部分</span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Json\"><figure class=\"iseeu highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;sub&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;1234567890&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;John Doe&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;admin&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 4.Signature</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> 前面两部分都是使用 Base64 进行编码的，即前端可以解开知道里面的信息。Signature 需要使用编码后的 header 和 payload 以及我们提供的一个密钥，然后使用 header 中指定的签名算法（HS256）进行签名。签名的作用是保证 JWT 没有被篡改过</span><br><span class=\"line\"><span class=\"bullet\">-</span> 如:</span><br><span class=\"line\"><span class=\"code\">\tHMACSHA256(base64UrlEncode(header) + &quot;.&quot; + base64UrlEncode(payload),secret);</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\"><span class=\"section\"># 签名目的</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> 最后一步签名的过程，实际上是对头部以及负载内容进行签名，防止内容被窜改。如果有人对头部以及负载的内容解码之后进行修改，再进行编码，最后加上之前的签名组合形成新的JWT的话，那么服务器端会判断出新的头部和负载形成的签名和JWT附带上的签名是不一样的。如果要对新的头部和负载进行签名，在不知道服务器加密时用的密钥的话，得出来的签名也是不一样的。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\"># 信息安全问题</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> 在这里大家一定会问一个问题：Base64是一种编码，是可逆的，那么我的信息不就被暴露了吗？</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> 是的。所以，在JWT中，不应该在负载里面加入任何敏感的数据。在上面的例子中，我们传输的是用户的User ID。这个值实际上不是什么敏\t感内容，一般情况下被知道也是安全的。但是像密码这样的内容就不能被放在JWT中了。如果将用户的密码放在了JWT中，那么怀有恶意的第\t三方通过Base64解码就能很快地知道你的密码了。因此JWT适合用于向Web应用传递一些非敏感信息。JWT还经常用于设计用户认证和授权系\t统，甚至实现Web应用的单点登录。</span><br></pre></td></tr></table></figure></div>\n<p>![image-20200726181136113](…/…/…/…/ 笔记 / JWT 实战教程.assets/image-20200726181136113.png)</p>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 5.放在一起</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> 输出是三个由点分隔的Base64-URL字符串，可以在HTML和HTTP环境中轻松传递这些字符串，与基于XML的标准（例如SAML）相比，它更紧凑。</span><br><span class=\"line\"><span class=\"bullet\">-</span> 简洁(Compact)</span><br><span class=\"line\"><span class=\"code\">\t可以通过URL, POST 参数或者在 HTTP header 发送，因为数据量小，传输速度快</span></span><br><span class=\"line\"><span class=\"code\">- 自包含(Self-contained)</span></span><br><span class=\"line\"><span class=\"code\">\t负载中包含了所有用户所需要的信息，避免了多次查询数据库</span></span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200726124257203.png\"\n                      alt=\"image-20200726124257203\"\n                ></p>\n<h2 id=\"5使用jwt\"><a class=\"markdownIt-Anchor\" href=\"#5使用jwt\">#</a> 5. 使用 JWT</h2>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 1.引入依赖</span></span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--引入jwt--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.auth0<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>java-jwt<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.4.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 2.生成token</span></span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Calendar</span> <span class=\"variable\">instance</span> <span class=\"operator\">=</span> Calendar.getInstance();</span><br><span class=\"line\">instance.add(Calendar.SECOND, <span class=\"number\">90</span>);</span><br><span class=\"line\"><span class=\"comment\">//生成令牌</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">token</span> <span class=\"operator\">=</span> JWT.create()</span><br><span class=\"line\">  .withClaim(<span class=\"string\">&quot;username&quot;</span>, <span class=\"string\">&quot;张三&quot;</span>)<span class=\"comment\">//设置自定义用户名</span></span><br><span class=\"line\">  .withExpiresAt(instance.getTime())<span class=\"comment\">//设置过期时间</span></span><br><span class=\"line\">  .sign(Algorithm.HMAC256(<span class=\"string\">&quot;token!Q2W#E$RW&quot;</span>));<span class=\"comment\">//设置签名 保密 复杂</span></span><br><span class=\"line\"><span class=\"comment\">//输出令牌</span></span><br><span class=\"line\">System.out.println(token);</span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> 生成结果</span><br><span class=\"line\">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdWQiOlsicGhvbmUiLCIxNDMyMzIzNDEzNCJdLCJleHAiOjE1OTU3Mzk0NDIsInVzZXJuYW1lIjoi5byg5LiJIn0.aHmE3RNqvAjFr<span class=\"emphasis\">_dvyn_</span>sD2VJ46P7EGiS5OBMO<span class=\"emphasis\">_TI5jg</span></span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 3.根据令牌和签名解析数据</span></span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">JWTVerifier</span> <span class=\"variable\">jwtVerifier</span> <span class=\"operator\">=</span> JWT.require(Algorithm.HMAC256(<span class=\"string\">&quot;token!Q2W#E$RW&quot;</span>)).build();</span><br><span class=\"line\"><span class=\"type\">DecodedJWT</span> <span class=\"variable\">decodedJWT</span> <span class=\"operator\">=</span> jwtVerifier.verify(token);</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;用户名: &quot;</span> + decodedJWT.getClaim(<span class=\"string\">&quot;username&quot;</span>).asString());</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;过期时间: &quot;</span>+decodedJWT.getExpiresAt());</span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 4.常见异常信息</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> SignatureVerificationException:\t\t\t\t签名不一致异常</span><br><span class=\"line\"><span class=\"bullet\">-</span> TokenExpiredException:    \t\t\t\t\t\t令牌过期异常</span><br><span class=\"line\"><span class=\"bullet\">-</span> AlgorithmMismatchException:\t\t\t\t\t\t算法不匹配异常</span><br><span class=\"line\"><span class=\"bullet\">-</span> InvalidClaimException:\t\t\t\t\t\t\t\t失效的payload异常</span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200805184517282.png\"\n                      alt=\"image-20200805184517282\"\n                ></p>\n<h2 id=\"6封装工具类\"><a class=\"markdownIt-Anchor\" href=\"#6封装工具类\">#</a> 6. 封装工具类</h2>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JWTUtils</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">TOKEN</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;token!Q@W3e4r&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 生成token</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> map  //传入payload</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 返回token</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">getToken</span><span class=\"params\">(Map&lt;String,String&gt; map)</span>&#123;</span><br><span class=\"line\">        JWTCreator.<span class=\"type\">Builder</span> <span class=\"variable\">builder</span> <span class=\"operator\">=</span> JWT.create();</span><br><span class=\"line\">        map.forEach((k,v)-&gt;&#123;</span><br><span class=\"line\">            builder.withClaim(k,v);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"type\">Calendar</span> <span class=\"variable\">instance</span> <span class=\"operator\">=</span> Calendar.getInstance();</span><br><span class=\"line\">        instance.add(Calendar.SECOND,<span class=\"number\">7</span>);</span><br><span class=\"line\">        builder.withExpiresAt(instance.getTime());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder.sign(Algorithm.HMAC256(TOKEN)).toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 验证token</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> token</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">verify</span><span class=\"params\">(String token)</span>&#123;</span><br><span class=\"line\">        JWT.require(Algorithm.HMAC256(TOKEN)).build().verify(token);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取token中payload</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> token</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> DecodedJWT <span class=\"title function_\">getToken</span><span class=\"params\">(String token)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JWT.require(Algorithm.HMAC256(TOKEN)).build().verify(token);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"7整合springboot\"><a class=\"markdownIt-Anchor\" href=\"#7整合springboot\">#</a> 7. 整合 springboot</h2>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 0.搭建springboot+mybatis+jwt环境</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> 引入依赖</span><br><span class=\"line\"><span class=\"bullet\">-</span> 编写配置</span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--引入jwt--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.auth0<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>java-jwt<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.4.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--引入mybatis--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.spring.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.1.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--引入lombok--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.18.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--引入druid--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>druid<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.19<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--引入mysql--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.38<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Properties\"><figure class=\"iseeu highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server.port</span>=<span class=\"string\">8989</span></span><br><span class=\"line\"><span class=\"attr\">spring.application.name</span>=<span class=\"string\">jwt</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring.datasource.type</span>=<span class=\"string\">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class=\"line\"><span class=\"attr\">spring.datasource.driver-class-name</span>=<span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\"><span class=\"attr\">spring.datasource.url</span>=<span class=\"string\">jdbc:mysql://localhost:3306/jwt?characterEncoding=UTF-8</span></span><br><span class=\"line\"><span class=\"attr\">spring.datasource.username</span>=<span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"attr\">spring.datasource.password</span>=<span class=\"string\">root</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">mybatis.type-aliases-package</span>=<span class=\"string\">com.baizhi.entity</span></span><br><span class=\"line\"><span class=\"attr\">mybatis.mapper-locations</span>=<span class=\"string\">classpath:com/baizhi/mapper/*.xml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">logging.level.com.baizhi.dao</span>=<span class=\"string\">debug</span></span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 1.开发数据库</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> 这里采用最简单的表结构验证JWT使用</span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200805212226422.png\"\n                      alt=\"image-20200805212226422\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Sql\"><figure class=\"iseeu highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> IF <span class=\"keyword\">EXISTS</span> `<span class=\"keyword\">user</span>`;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> `<span class=\"keyword\">user</span>` (</span><br><span class=\"line\">  `id` <span class=\"type\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> AUTO_INCREMENT COMMENT <span class=\"string\">&#x27;主键&#x27;</span>,</span><br><span class=\"line\">  `name` <span class=\"type\">varchar</span>(<span class=\"number\">80</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;用户名&#x27;</span>,</span><br><span class=\"line\">  `password` <span class=\"type\">varchar</span>(<span class=\"number\">40</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;用户密码&#x27;</span>,</span><br><span class=\"line\">  <span class=\"keyword\">PRIMARY</span> KEY (`id`)</span><br><span class=\"line\">) ENGINE<span class=\"operator\">=</span>InnoDB AUTO_INCREMENT<span class=\"operator\">=</span><span class=\"number\">2</span> <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8;</span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 2.开发entity</span></span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@Accessors(chain=true)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200805213539471.png\"\n                      alt=\"image-20200805213539471\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 3.开发DAO接口和mapper.xml</span></span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserDAO</span> &#123;</span><br><span class=\"line\">    User <span class=\"title function_\">login</span><span class=\"params\">(User user)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200805213603655.png\"\n                      alt=\"image-20200805213603655\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">&quot;com.baizhi.dao.UserDAO&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--这里就写的简单点了毕竟不是重点--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;login&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;User&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;User&quot;</span>&gt;</span></span><br><span class=\"line\">        select * from user where name=#&#123;name&#125; and password = #&#123;password&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200805213628252.png\"\n                      alt=\"image-20200805213628252\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 4.开发Service 接口以及实现类</span></span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserService</span> &#123;</span><br><span class=\"line\">    User <span class=\"title function_\">login</span><span class=\"params\">(User user)</span>;<span class=\"comment\">//登录接口</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200805213648147.png\"\n                      alt=\"image-20200805213648147\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"meta\">@Transactional</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">UserService</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserDAO userDAO;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"meta\">@Transactional(propagation = Propagation.SUPPORTS)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> User <span class=\"title function_\">login</span><span class=\"params\">(User user)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">userDB</span> <span class=\"operator\">=</span> userDAO.login(user);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(userDB!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> userDB;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span>  <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;登录失败~~&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200805213704965.png\"\n                      alt=\"image-20200805213704965\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 5.开发controller</span></span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService userService;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/user/login&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Map&lt;String,Object&gt; <span class=\"title function_\">login</span><span class=\"params\">(User user)</span> &#123;</span><br><span class=\"line\">        Map&lt;String,Object&gt; result = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;用户名: [&#123;&#125;]&quot;</span>, user.getName());</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;密码: [&#123;&#125;]&quot;</span>, user.getPassword());</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">User</span> <span class=\"variable\">userDB</span> <span class=\"operator\">=</span> userService.login(user);</span><br><span class=\"line\">            Map&lt;String, String&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();<span class=\"comment\">//用来存放payload</span></span><br><span class=\"line\">            map.put(<span class=\"string\">&quot;id&quot;</span>,userDB.getId());</span><br><span class=\"line\">            map.put(<span class=\"string\">&quot;username&quot;</span>, userDB.getName());</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">token</span> <span class=\"operator\">=</span> JWTUtils.getToken(map);</span><br><span class=\"line\">            result.put(<span class=\"string\">&quot;state&quot;</span>,<span class=\"literal\">true</span>);</span><br><span class=\"line\">            result.put(<span class=\"string\">&quot;msg&quot;</span>,<span class=\"string\">&quot;登录成功!!!&quot;</span>);</span><br><span class=\"line\">            result.put(<span class=\"string\">&quot;token&quot;</span>,token); <span class=\"comment\">//成功返回token信息</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            result.put(<span class=\"string\">&quot;state&quot;</span>,<span class=\"string\">&quot;false&quot;</span>);</span><br><span class=\"line\">            result.put(<span class=\"string\">&quot;msg&quot;</span>,e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200805214235426.png\"\n                      alt=\"image-20200805214235426\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 6.数据库添加测试数据启动项目</span></span><br></pre></td></tr></table></figure></div>\n<p>![image-20200805214324868](…/…/…/…/ 笔记 / JWT 实战教程.assets/image-20200805214324868.png)</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200805214424786.png\"\n                      alt=\"image-20200805214424786\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 7.通过postman模拟登录失败</span></span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200805214610668.png\"\n                      alt=\"image-20200805214610668\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 8.通过postman模拟登录成功</span></span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200805214749469.png\"\n                      alt=\"image-20200805214749469\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 9.编写测试接口</span></span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PostMapping(&quot;/test/test&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Map&lt;String, Object&gt; <span class=\"title function_\">test</span><span class=\"params\">(String token)</span> &#123;</span><br><span class=\"line\">  Map&lt;String, Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    JWTUtils.verify(token);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;msg&quot;</span>, <span class=\"string\">&quot;验证通过~~~&quot;</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;state&quot;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (TokenExpiredException e) &#123;</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;state&quot;</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;msg&quot;</span>, <span class=\"string\">&quot;Token已经过期!!!&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (SignatureVerificationException e)&#123;</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;state&quot;</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;msg&quot;</span>, <span class=\"string\">&quot;签名错误!!!&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (AlgorithmMismatchException e)&#123;</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;state&quot;</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;msg&quot;</span>, <span class=\"string\">&quot;加密算法不匹配!!!&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;state&quot;</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;msg&quot;</span>, <span class=\"string\">&quot;无效token~~&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200805215119590.png\"\n                      alt=\"image-20200805215119590\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 10.通过postman请求接口</span></span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200805215337303.png\"\n                      alt=\"image-20200805215337303\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200805215451442.png\"\n                      alt=\"image-20200805215451442\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 11.问题?</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> 使用上述方式每次都要传递token数据,每个方法都需要验证token代码冗余,不够灵活? 如何优化</span><br><span class=\"line\"><span class=\"bullet\">-</span> 使用拦截器进行优化</span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">preHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">  <span class=\"type\">String</span> <span class=\"variable\">token</span> <span class=\"operator\">=</span> request.getHeader(<span class=\"string\">&quot;token&quot;</span>);</span><br><span class=\"line\">  Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    JWTUtils.verify(token);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (TokenExpiredException e) &#123;</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;state&quot;</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;msg&quot;</span>, <span class=\"string\">&quot;Token已经过期!!!&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (SignatureVerificationException e)&#123;</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;state&quot;</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;msg&quot;</span>, <span class=\"string\">&quot;签名错误!!!&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (AlgorithmMismatchException e)&#123;</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;state&quot;</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;msg&quot;</span>, <span class=\"string\">&quot;加密算法不匹配!!!&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;state&quot;</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;msg&quot;</span>, <span class=\"string\">&quot;无效token~~&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"type\">String</span> <span class=\"variable\">json</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectMapper</span>().writeValueAsString(map);</span><br><span class=\"line\">  response.setContentType(<span class=\"string\">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class=\"line\">  response.getWriter().println(json);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InterceptorConfig</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">WebMvcConfigurer</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addInterceptors</span><span class=\"params\">(InterceptorRegistry registry)</span> &#123;</span><br><span class=\"line\">        registry.addInterceptor(<span class=\"keyword\">new</span> <span class=\"title class_\">JwtTokenInterceptor</span>()).</span><br><span class=\"line\">          excludePathPatterns(<span class=\"string\">&quot;/user/**&quot;</span>)</span><br><span class=\"line\">          .addPathPatterns(<span class=\"string\">&quot;/**&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n",
            "tags": [
                "JWT"
            ]
        }
    ]
}
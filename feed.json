{
    "version": "https://jsonfeed.org/version/1",
    "title": "玖忆",
    "description": "我本微末凡尘、可也心向天空",
    "home_page_url": "https://wait-you.github.io",
    "items": [
        {
            "id": "https://wait-you.github.io/2023/06/19/Java%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/",
            "url": "https://wait-you.github.io/2023/06/19/Java%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/",
            "title": "Java最佳实践",
            "date_published": "2023-06-19T04:41:10.000Z",
            "content_html": "<h1 id=\"最佳实践\"><a class=\"markdownIt-Anchor\" href=\"#最佳实践\">#</a> 最佳实践</h1>\n<h2 id=\"初始化gradle工程引入单元测试\"><a class=\"markdownIt-Anchor\" href=\"#初始化gradle工程引入单元测试\">#</a> 初始化 Gradle 工程，引入单元测试</h2>\n<h3 id=\"软件运行环境\"><a class=\"markdownIt-Anchor\" href=\"#软件运行环境\">#</a> 软件运行环境：</h3>\n<ul>\n<li>语言：Java17\n<ul>\n<li>最新的 LTS 版本</li>\n<li>一些新的语言特性：\n<ul>\n<li>var 关键字来声明变量，Java 编译器可以在编译期间就去通过类型推断来判断出类型</li>\n<li>record 类似于 Kotlin 中的 data class</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>构建工具：Gradle\n<ul>\n<li>不像 maven 完全是使用 XML 去编写的工程配置文件</li>\n<li>可以在里面创建一些我们需要的构建脚本，更灵活</li>\n</ul>\n</li>\n<li>module 方式管理代码库\n<ul>\n<li>当面对维护一个多工程的项目时，比如前端、后端、微服务可以在同一个窗口管理项目</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"初始化gradle工程\"><a class=\"markdownIt-Anchor\" href=\"#初始化gradle工程\">#</a> 初始化 Gradle 工程</h3>\n<h4 id=\"使用idea创建gradle工程\"><a class=\"markdownIt-Anchor\" href=\"#使用idea创建gradle工程\">#</a> 使用 idea 创建 Gradle 工程</h4>\n<h4 id=\"使用命令行方式创建gradle工程\"><a class=\"markdownIt-Anchor\" href=\"#使用命令行方式创建gradle工程\">#</a> 使用命令行方式创建 Gradle 工程</h4>\n<blockquote>\n<p>使用 Kotlin 作为 DSL 来定义 Gradle 的脚本，因为 Kotlin 是一个静态语言，相对于动态语言，它可以在编译期间有更多的编译器带来的提示</p>\n</blockquote>\n<ol>\n<li>\n<p>创建  <code>settings.gradle.kts</code></p>\n</li>\n<li>\n<p>执行 <code>gradle wrapper [--gradle-version=7.5.1]</code>  命令， <code>gradle wrapper</code>  会帮我们把 gradle 去包一层用 gradlew 命令去代替 gradle 命令，这样的话，需要更新 gradle 版本的时候，只需要更新 wrapper 的配置文件即可，这样就可以在不同的版本里面去随意切换并我的 wrapper 被提交到代码仓库以后，其他的协同开发者他去拉取了仓库， 可以保证不同的人在本地构建使用的 Gradle 版本都是一致的</p>\n</li>\n<li>\n<p>创建  <code> build.gradle.kts</code>  ，gradle 可以左很多事情，构建是他的做核心的工作，告诉我这个脚本如何去把我的源码去编译成字节码 ，然后构建成哪些 jar 包，以及他里面有哪些依赖，这些都是在 <code>build.gradle</code>  里面去定义的。gradle 包含很多插件，他预先帮我们设置了很多的 gradle task，比如 Java</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>plugins <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    java</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    `java<span class=\"token operator\">-</span>library` <span class=\"token comment\">// 编写类库</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    application <span class=\"token comment\">// 应用 增加一些应用打包的应用构建的 task</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n<li>\n<p>导入依赖</p>\n</li>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>dependencies <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">testImplementation</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"org.junit.jupiter:junit-jupiter-api:5.9.3\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">testImplementation</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"org.junit.jupiter:junit-jupiter-engine:5.9.3\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">1</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>统一 Java 版本，如果不声明默认使用机器的 Java 版本</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>java <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    toolchain <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        languageVersion<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>JavaLanguageVersion<span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">17</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">2</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"添加spring支持设置-git-hooks\"><a class=\"markdownIt-Anchor\" href=\"#添加spring支持设置-git-hooks\">#</a> 添加 Spring 支持，设置 Git Hooks</h2>\n<h3 id=\"导入依赖\"><a class=\"markdownIt-Anchor\" href=\"#导入依赖\">#</a> 导入依赖</h3>\n<p>当导入 springboot 依赖时往往需要重复写 starter 的版本，可以使用之前提到的 bom 文件的方式导入</p>\n<ol>\n<li>\n<p>引入 springboot 插件</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>plugins <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    java</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"org.springframework.boot\"</span></span><span class=\"token punctuation\">)</span> version <span class=\"token string-literal singleline\"><span class=\"token string\">\"2.6.4\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">3</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>整体效果</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>gradle<span class=\"token punctuation\">.</span>plugin<span class=\"token punctuation\">.</span>SpringBootPlugin</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>plugins <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    java</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"org.springframework.boot\"</span></span><span class=\"token punctuation\">)</span> version <span class=\"token string-literal singleline\"><span class=\"token string\">\"2.6.4\"</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>repositories <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">mavenCentral</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>dependencies <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">implementation</span><span class=\"token punctuation\">(</span><span class=\"token function\">platform</span><span class=\"token punctuation\">(</span>SpringBootPlugin<span class=\"token punctuation\">.</span>BOM_COORDINATES<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">implementation</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"org.springframework.boot:spring-boot-starter\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">implementation</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"org.springframework.boot:spring-boot-starter-web\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">implementation</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"org.springframework.boot:spring-boot-starter-actuator\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">testImplementation</span><span class=\"token punctuation\">(</span><span class=\"token function\">platform</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"org.junit:junit-bom:5.9.3\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">testImplementation</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"org.junit.jupiter:junit-jupiter-api\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">testImplementation</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"org.junit.jupiter:junit-jupiter-engine\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">testImplementation</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"org.springframework.boot:spring-boot-starter-test\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>java <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    toolchain <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        languageVersion<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>JavaLanguageVersion<span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">17</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>tasks <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    test <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token function\">useJUnitPlatform</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">4</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"设置-githooks\"><a class=\"markdownIt-Anchor\" href=\"#设置-githooks\">#</a> 设置 GitHooks</h3>\n<p>不管是任何的开发人员在本地进行提交代码的时候，测试总应该是通过了，我们不能允许没有通过测试的代码被提交到我们的远程仓库去。</p>\n<p>可以使用 Git 的 Hooks 实现这个功能</p>\n<p>.git 文件夹下有一个 hooks 文件夹里面有很多的示例文件，比如 pre-commit.sample，即在这个文件中写的 bash 脚本会在我们进行提交的时候被执行，如果脚本执行失败的话，那这次提交不会成功</p>\n<p>通常在项目中建立一个 githooks 目录， 建立一个 pre-commit 文件</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202306181036725.png\"\n                      alt=\"image-20230618103634630\"\n                ></p>\n<p>pre-commit 内容</p>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">usr/bin/env sh</span></span><br><span class=\"line\"></span><br><span class=\"line\">git stash -qku</span><br><span class=\"line\">./gradlew clean check</span><br><span class=\"line\">RESULT=$?</span><br><span class=\"line\">git stash pop -q</span><br><span class=\"line\">exit $RESULT</span><br></pre></td></tr></table></figure></div>\n<p><code>git stash -qku</code>  是一个 Git 命令，用于将当前未提交的更改保存到一个临时区域中，以便稍后可以恢复这些更改。</p>\n<p>其中， <code>-q</code>  参数表示在执行命令时不输出任何提示信息； <code>-k</code>  参数表示在执行  <code>git stash</code>  命令时，不保存已经被 Git 跟踪的文件（即忽略  <code>.gitignore</code>  文件中指定的文件）； <code>-u</code>  参数表示在执行  <code>git stash</code>  命令时，同时保存未被 Git 跟踪的文件。</p>\n<p><code>git stash pop -q</code>  是一个 Git 命令，它的作用是将最近一次保存在 Git 存储区（stash）中的修改应用到当前分支，并从存储区中删除该次保存。其中  <code>-q</code>  选项表示以安静模式（quiet）运行，即不在控制台输出任何信息。</p>\n<p>更改其为可执行文件</p>\n<p>安装 gitHooks</p>\n<ol>\n<li>\n<p>将这个文件 copy 到我们的.git 目录下的 hooks 文件夹下，之后只要成员提交代码 hooks 里面的代码都会被执行，但是当我们更新了这个命令，比如安全检查、安全代码扫描，那么所有成员都需要重新将这个文件 copy 到目录下</p>\n</li>\n<li>\n<p>比较推荐的是 直接将 git 的 hooks 文件夹配置到该文件夹下</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> config core.hooksPath githooks</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>--code￼6--<span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ol>\n<p>设计仓储接口</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">QuestionRepository</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">JpaRepository</span>&lt;Question, String&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"测试\"><a class=\"markdownIt-Anchor\" href=\"#测试\">#</a> 测试</h3>\n<p>此时我们只需要测试仓储层的方法，所以可以用 <code>DataJpaTest</code>  这样一个注解来只启动跟 data-jpa 相关的 bean, 这样的话可以使我们的测试更生资源、更快速得去完成测试</p>\n<p>引入数据库驱动包</p>\n<h4 id=\"数据库迁移\"><a class=\"markdownIt-Anchor\" href=\"#数据库迁移\">#</a> 数据库迁移</h4>\n<p>引入 flyway 组件</p>\n<ul>\n<li>\n<p>数据库的迁移或者 data 的 migration</p>\n</li>\n<li>\n<p>我们可以比较方便的去定义我们每一次数据库的 schema 的变更，通过版本管理的方式，在每次启动应用的时候，他会去构建我们的数据库的 schema</p>\n</li>\n<li>\n<p>在资源目录下定义 db/migration 文件夹，在此目录下定义 sql 脚本</p>\n<ul>\n<li>\n<p>​\t<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202306181420013.png\"\n                      alt=\"image-20230618142008933\"\n                ></p>\n</li>\n<li>\n<div class=\"highlight-container\" data-rel=\"Sql\"><figure class=\"iseeu highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> question</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    id           <span class=\"token keyword\">serial</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    questionerId <span class=\"token keyword\">text</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    title        <span class=\"token keyword\">text</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    detail       <span class=\"token keyword\">text</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token comment\">--code￼8--></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"测试容器\"><a class=\"markdownIt-Anchor\" href=\"#测试容器\">#</a> 测试容器</h4>\n<p>但是 application.yml 只是我们在运行期间它指定的这个数据源，如果我们想要在测试环境下去指定数据源，测试环境仍然是无法连接到这个数据库的，并且我们也不应该让我们的测试去依赖一个我们本地机器上的数据库</p>\n<ol>\n<li>\n<p>spring 默认的会有一个 H2 的数据库，h2 是一个 <code>in-memory</code>  的数据库，他会在数据库中模拟 postgres 运行</p>\n<ul>\n<li>比较简单</li>\n<li>并且不需要额外的其他依赖，就可以立刻启动这个数据库</li>\n<li>但是 H2 毕竟是另外一种数据库，他并不是我们实际生产中的数据库，两种数据库的实现方式可能是完全不同的，那他有很多的语法的支持以及查询的效果都可能不一样，可能会导致我们在测试里面可以通过的代码到实际生产中却有其他的 bug</li>\n</ul>\n</li>\n<li>\n<p>使用一个 叫做 test-containers 框架</p>\n<ul>\n<li>\n<p>帮助我们在启动测试的时候通过 java-docker 这样一个库连接到本地的 docker-socks 上，并且通过 docker 去启动一个对应的容器，然后在测试期间去连接这个容器进行我们的测试，这个容器可以是一个真实的 mysql 容器，运行结束以后这个容器就会销毁</p>\n</li>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">testImplementation</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"org.testcontainers:testcontainers:1.16.3\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">testImplementation</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"org.testcontainers:mysql:1.16.3\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">9</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">-</span> 每次编写仓储测试的时候都需要引入三个注解</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token operator\">-</span> ```java</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation builtin\">@DataJpaTest</span> <span class=\"token comment\">//jpa 测试</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation builtin\">@Import</span><span class=\"token punctuation\">(</span>DatabaseTestConfiguration<span class=\"token punctuation\">.</span>class<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 引入容器和自定义数据源配置</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation builtin\">@AutoConfigureTestDatabase</span><span class=\"token punctuation\">(</span>replace <span class=\"token operator\">=</span> NONE<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 排除 spring 默认的 testDatabase</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">10</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ol>\n<p>完整测试类</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@JpaRepositoryTest</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">RequisitionRepositoryTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> QuestionRepository questionRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 测试仓储接口能够正确保存question并注入id</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">repository_should_successfully_save_question</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">var</span> <span class=\"variable\">question</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Question</span>(<span class=\"string\">&quot;UID_0001&quot;</span>, <span class=\"string\">&quot;A test title&quot;</span>, <span class=\"string\">&quot;A test detail&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">var</span> <span class=\"variable\">savedQuestion</span> <span class=\"operator\">=</span> questionRepository.save(question);</span><br><span class=\"line\"></span><br><span class=\"line\">        assertThat(savedQuestion.getId(), is(notNullValue()));</span><br><span class=\"line\">        assertThat(savedQuestion.getQuestionerId(), equalTo(question.getQuestionerId()));</span><br><span class=\"line\">        assertThat(savedQuestion.getTitle(), equalTo(question.getTitle()));</span><br><span class=\"line\">        assertThat(savedQuestion.getDetail(), equalTo(question.getDetail()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"代码静态检查测试业务方法\"><a class=\"markdownIt-Anchor\" href=\"#代码静态检查测试业务方法\">#</a> 代码静态检查，测试业务方法</h2>\n<h3 id=\"通用配置和环境配置分离\"><a class=\"markdownIt-Anchor\" href=\"#通用配置和环境配置分离\">#</a> 通用配置和环境配置分离</h3>\n<p>项目的 Spring 配置文件 <code>application.yml</code> , 这个文件中，我们之前配置了数据库的地址以及用户名密码，并且这个文件会被 Git 提交到远程仓库，但这种作法是不被推荐的</p>\n<ul>\n<li>对于代码库，他应该是一个与环境无关的纯代码的库</li>\n<li>而配置文件有很多配置是与环境相关的，比如说数据库地址，数据库用户名和密码，在不同的开发手中，他的本机端口可能不是 3306，用户名密码不同</li>\n<li>运行在测试环境和生产环境中的代码，，那他使用的配置也不会是现在配置的这一套东西，这一段配置理论上来说，不应该被提交到远程，</li>\n</ul>\n<p>通常来讲我们会新建一个本地配置，将环境相关配置放在本地配置文件中，这个文件我们是不希望被提交到远程仓库的，我们应该在.gitignore 里面去添加这个文件</p>\n<div class=\"highlight-container\" data-rel=\"Yml\"><figure class=\"iseeu highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">### idea</span></span><br><span class=\"line\"><span class=\"string\">/.idea</span></span><br><span class=\"line\"><span class=\"string\">*.iml</span></span><br><span class=\"line\"><span class=\"string\">*.ipr</span></span><br><span class=\"line\"><span class=\"string\">/out</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### gradle</span></span><br><span class=\"line\"><span class=\"string\">/.gradle</span></span><br><span class=\"line\"><span class=\"string\">/build</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### Environment Configuration</span></span><br><span class=\"line\"><span class=\"string\">application-*.yml</span></span><br></pre></td></tr></table></figure></div>\n<p>向仓库中提交一个可以供参考的模板配置文件，只是去指定一个模板，而不是让不同的开发使用他  <code>application-env.template.yml</code></p>\n<div class=\"highlight-container\" data-rel=\"Yml\"><figure class=\"iseeu highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">### idea</span></span><br><span class=\"line\"><span class=\"string\">/.idea</span></span><br><span class=\"line\"><span class=\"string\">*.iml</span></span><br><span class=\"line\"><span class=\"string\">*.ipr</span></span><br><span class=\"line\"><span class=\"string\">/out</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### gradle</span></span><br><span class=\"line\"><span class=\"string\">/.gradle</span></span><br><span class=\"line\"><span class=\"string\">/build</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### Environment Configuration</span></span><br><span class=\"line\"><span class=\"string\">application-*.yml</span></span><br><span class=\"line\"><span class=\"type\">!application</span><span class=\"string\">-env.template.yml</span></span><br></pre></td></tr></table></figure></div>\n<h3 id=\"静态检查\"><a class=\"markdownIt-Anchor\" href=\"#静态检查\">#</a> 静态检查</h3>\n<p>增加 checkStyle 插件</p>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins &#123;</span><br><span class=\"line\">    java</span><br><span class=\"line\">    id(<span class=\"string\">&quot;org.springframework.boot&quot;</span>) version <span class=\"string\">&quot;2.6.4&quot;</span></span><br><span class=\"line\">    checkstyle</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>添加配置</p>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">checkstyle &#123;</span><br><span class=\"line\">    maxWarnings = <span class=\"number\">0</span> <span class=\"comment\">//最大警告数,即项目里不允许有不符合checkStyle规范的代码存在</span></span><br><span class=\"line\">    toolVersion = <span class=\"string\">&quot;10.0&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>在项目的根目录中新增 checkStyle 配置文件</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202306181921279.png\"\n                      alt=\"image-20230618192117216\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE module PUBLIC</span><br><span class=\"line\">        &quot;-//Checkstyle//DTD Checkstyle Configuration 1.3//EN&quot;</span><br><span class=\"line\">        &quot;https://checkstyle.org/dtds/configuration_1_3.dtd&quot;&gt;</span><br><span class=\"line\">&lt;module name=&quot;Checker&quot;&gt;</span><br><span class=\"line\">    &lt;property name=&quot;charset&quot; value=&quot;UTF-8&quot;/&gt;</span><br><span class=\"line\">    &lt;property name=&quot;severity&quot; value=&quot;warning&quot;/&gt;</span><br><span class=\"line\">    &lt;property name=&quot;fileExtensions&quot; value=&quot;java, properties, xml&quot;/&gt;</span><br><span class=\"line\">    &lt;module name=&quot;BeforeExecutionExclusionFileFilter&quot;&gt;</span><br><span class=\"line\">        &lt;property name=&quot;fileNamePattern&quot; value=&quot;module\\-info\\.java$&quot;/&gt;</span><br><span class=\"line\">    &lt;/module&gt;</span><br><span class=\"line\">    &lt;module name=&quot;FileTabCharacter&quot;&gt;</span><br><span class=\"line\">        &lt;property name=&quot;eachLine&quot; value=&quot;true&quot;/&gt;</span><br><span class=\"line\">    &lt;/module&gt;</span><br><span class=\"line\">    &lt;module name=&quot;LineLength&quot;&gt;</span><br><span class=\"line\">        &lt;property name=&quot;fileExtensions&quot; value=&quot;java&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;max&quot; value=&quot;160&quot;/&gt;</span><br><span class=\"line\">        &lt;property name=&quot;ignorePattern&quot; value=&quot;^package.*|^import.*|a href|href|http://|https://|ftp://&quot;/&gt;</span><br><span class=\"line\">    &lt;/module&gt;</span><br><span class=\"line\">    &lt;module name=&quot;TreeWalker&quot;&gt;</span><br><span class=\"line\">        &lt;module name=&quot;UnusedImports&quot;/&gt;</span><br><span class=\"line\">        &lt;module name=&quot;OuterTypeFilename&quot;/&gt;</span><br><span class=\"line\">        &lt;module name=&quot;IllegalTokenText&quot;&gt;</span><br><span class=\"line\">            &lt;property name=&quot;tokens&quot; value=&quot;STRING_LITERAL, CHAR_LITERAL&quot;/&gt;</span><br><span class=\"line\">            &lt;property name=&quot;format&quot; value=&quot;\\\\u00(09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\\\(0(10|11|12|14|15|42|47)|134)&quot;/&gt;</span><br><span class=\"line\">            &lt;property name=&quot;message&quot; value=&quot;Consider using special escape sequence instead of octal value or Unicode escaped value.&quot;/&gt;</span><br><span class=\"line\">        &lt;/module&gt;</span><br><span class=\"line\">        &lt;module name=&quot;AvoidEscapedUnicodeCharacters&quot;&gt;</span><br><span class=\"line\">            &lt;property name=&quot;allowEscapesForControlCharacters&quot; value=&quot;true&quot;/&gt;</span><br><span class=\"line\">            &lt;property name=&quot;allowByTailComment&quot; value=&quot;true&quot;/&gt;</span><br><span class=\"line\">            &lt;property name=&quot;allowNonPrintableEscapes&quot; value=&quot;true&quot;/&gt;</span><br><span class=\"line\">        &lt;/module&gt;</span><br><span class=\"line\">        &lt;module name=&quot;AvoidStarImport&quot;/&gt;</span><br><span class=\"line\">        &lt;module name=&quot;OneTopLevelClass&quot;/&gt;</span><br><span class=\"line\">        &lt;module name=&quot;NoLineWrap&quot;&gt;</span><br><span class=\"line\">            &lt;property name=&quot;tokens&quot; value=&quot;PACKAGE_DEF, IMPORT, STATIC_IMPORT&quot;/&gt;</span><br><span class=\"line\">        &lt;/module&gt;</span><br><span class=\"line\">        &lt;module name=&quot;EmptyBlock&quot;&gt;</span><br><span class=\"line\">            &lt;property name=&quot;option&quot; value=&quot;TEXT&quot;/&gt;</span><br><span class=\"line\">            &lt;property name=&quot;tokens&quot; value=&quot;LITERAL_TRY, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_SWITCH&quot;/&gt;</span><br><span class=\"line\">        &lt;/module&gt;</span><br><span class=\"line\">        &lt;module name=&quot;LeftCurly&quot;&gt;</span><br><span class=\"line\">            &lt;property name=&quot;tokens&quot; value=&quot;ANNOTATION_DEF, CLASS_DEF, CTOR_DEF, ENUM_CONSTANT_DEF, ENUM_DEF, INTERFACE_DEF, LAMBDA, LITERAL_CASE, LITERAL_CATCH,</span><br><span class=\"line\">             LITERAL_DEFAULT, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_TRY,</span><br><span class=\"line\">             LITERAL_WHILE, METHOD_DEF, OBJBLOCK, STATIC_INIT, RECORD_DEF, COMPACT_CTOR_DEF&quot;/&gt;</span><br><span class=\"line\">        &lt;/module&gt;</span><br><span class=\"line\">        &lt;module name=&quot;RightCurly&quot;&gt;</span><br><span class=\"line\">            &lt;property name=&quot;id&quot; value=&quot;RightCurlySame&quot;/&gt;</span><br><span class=\"line\">            &lt;property name=&quot;tokens&quot; value=&quot;LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_DO&quot;/&gt;</span><br><span class=\"line\">        &lt;/module&gt;</span><br><span class=\"line\">        &lt;module name=&quot;RightCurly&quot;&gt;</span><br><span class=\"line\">            &lt;property name=&quot;id&quot; value=&quot;RightCurlyAlone&quot;/&gt;</span><br><span class=\"line\">            &lt;property name=&quot;option&quot; value=&quot;alone&quot;/&gt;</span><br><span class=\"line\">            &lt;property name=&quot;tokens&quot;</span><br><span class=\"line\">                      value=&quot;CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, STATIC_INIT, INSTANCE_INIT, ANNOTATION_DEF, ENUM_DEF, INTERFACE_DEF, RECORD_DEF, COMPACT_CTOR_DEF&quot;/&gt;</span><br><span class=\"line\">        &lt;/module&gt;</span><br><span class=\"line\">        &lt;module name=&quot;SuppressionXpathSingleFilter&quot;&gt;</span><br><span class=\"line\">            &lt;property name=&quot;id&quot; value=&quot;RightCurlyAlone&quot;/&gt;</span><br><span class=\"line\">            &lt;property name=&quot;query&quot; value=&quot;//RCURLY[parent::SLIST[count(./*)=1] or preceding-sibling::*[last()][self::LCURLY]]&quot;/&gt;</span><br><span class=\"line\">        &lt;/module&gt;</span><br><span class=\"line\">        &lt;module name=&quot;WhitespaceAfter&quot;&gt;</span><br><span class=\"line\">            &lt;property name=&quot;tokens&quot; value=&quot;COMMA, SEMI, TYPECAST, LITERAL_IF, LITERAL_ELSE, LITERAL_WHILE, LITERAL_DO, LITERAL_FOR, DO_WHILE&quot;/&gt;</span><br><span class=\"line\">        &lt;/module&gt;</span><br><span class=\"line\">        &lt;module name=&quot;WhitespaceAround&quot;&gt;</span><br><span class=\"line\">            &lt;property name=&quot;allowEmptyConstructors&quot; value=&quot;true&quot;/&gt;</span><br><span class=\"line\">            &lt;property name=&quot;allowEmptyLambdas&quot; value=&quot;true&quot;/&gt;</span><br><span class=\"line\">            &lt;property name=&quot;allowEmptyMethods&quot; value=&quot;true&quot;/&gt;</span><br><span class=\"line\">            &lt;property name=&quot;allowEmptyTypes&quot; value=&quot;true&quot;/&gt;</span><br><span class=\"line\">            &lt;property name=&quot;allowEmptyLoops&quot; value=&quot;true&quot;/&gt;</span><br><span class=\"line\">            &lt;property name=&quot;ignoreEnhancedForColon&quot; value=&quot;false&quot;/&gt;</span><br><span class=\"line\">            &lt;property name=&quot;tokens&quot; value=&quot;ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN, DO_WHILE,</span><br><span class=\"line\">            EQUAL, GE, GT, LAMBDA, LAND, LCURLY, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN,</span><br><span class=\"line\">            LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN,</span><br><span class=\"line\">            QUESTION, RCURLY, SL, SLIST, SL_ASSIGN, SR, SR_ASSIGN, STAR, STAR_ASSIGN, LITERAL_ASSERT, TYPE_EXTENSION_AND&quot;/&gt;</span><br><span class=\"line\">            &lt;message key=&quot;ws.notFollowed&quot;</span><br><span class=\"line\">                     value=&quot;WhitespaceAround: &#x27;&#x27;&#123;0&#125;&#x27;&#x27; is not followed by whitespace. Empty blocks may only be represented as &#x27;&#123;&#125;&#x27; when not part of a multi-block statement (4.1.3)&quot;/&gt;</span><br><span class=\"line\">            &lt;message key=&quot;ws.notPreceded&quot; value=&quot;WhitespaceAround: &#x27;&#x27;&#123;0&#125;&#x27;&#x27; is not preceded with whitespace.&quot;/&gt;</span><br><span class=\"line\">        &lt;/module&gt;</span><br><span class=\"line\">        &lt;module name=&quot;OneStatementPerLine&quot;/&gt;</span><br><span class=\"line\">        &lt;module name=&quot;MultipleVariableDeclarations&quot;/&gt;</span><br><span class=\"line\">        &lt;module name=&quot;ArrayTypeStyle&quot;/&gt;</span><br><span class=\"line\">        &lt;module name=&quot;MissingSwitchDefault&quot;/&gt;</span><br><span class=\"line\">        &lt;module name=&quot;FallThrough&quot;/&gt;</span><br><span class=\"line\">        &lt;module name=&quot;UpperEll&quot;/&gt;</span><br><span class=\"line\">        &lt;module name=&quot;ModifierOrder&quot;/&gt;</span><br><span class=\"line\">        &lt;module name=&quot;EmptyLineSeparator&quot;&gt;</span><br><span class=\"line\">            &lt;property name=&quot;tokens&quot; value=&quot;PACKAGE_DEF, IMPORT, STATIC_IMPORT, CLASS_DEF, INTERFACE_DEF, ENUM_DEF, STATIC_INIT, INSTANCE_INIT, METHOD_DEF, CTOR_DEF, VARIABLE_DEF, RECORD_DEF, COMPACT_CTOR_DEF&quot;/&gt;</span><br><span class=\"line\">            &lt;property name=&quot;allowNoEmptyLineBetweenFields&quot; value=&quot;true&quot;/&gt;</span><br><span class=\"line\">            &lt;property name=&quot;allowMultipleEmptyLinesInsideClassMembers&quot; value=&quot;false&quot;/&gt;</span><br><span class=\"line\">            &lt;property name=&quot;allowMultipleEmptyLines&quot; value=&quot;false&quot;/&gt;</span><br><span class=\"line\">        &lt;/module&gt;</span><br><span class=\"line\">        &lt;module name=&quot;SeparatorWrap&quot;&gt;</span><br><span class=\"line\">            &lt;property name=&quot;id&quot; value=&quot;SeparatorWrapDot&quot;/&gt;</span><br><span class=\"line\">            &lt;property name=&quot;tokens&quot; value=&quot;DOT&quot;/&gt;</span><br><span class=\"line\">            &lt;property name=&quot;option&quot; value=&quot;nl&quot;/&gt;</span><br><span class=\"line\">        &lt;/module&gt;</span><br><span class=\"line\">        &lt;module name=&quot;SeparatorWrap&quot;&gt;</span><br><span class=\"line\">            &lt;property name=&quot;id&quot; value=&quot;SeparatorWrapComma&quot;/&gt;</span><br><span class=\"line\">            &lt;property name=&quot;tokens&quot; value=&quot;COMMA&quot;/&gt;</span><br><span class=\"line\">            &lt;property name=&quot;option&quot; value=&quot;EOL&quot;/&gt;</span><br><span class=\"line\">        &lt;/module&gt;</span><br><span class=\"line\">        &lt;module name=&quot;SeparatorWrap&quot;&gt;</span><br><span class=\"line\">            &lt;property name=&quot;id&quot; value=&quot;SeparatorWrapEllipsis&quot;/&gt;</span><br><span class=\"line\">            &lt;property name=&quot;tokens&quot; value=&quot;ELLIPSIS&quot;/&gt;</span><br><span class=\"line\">            &lt;property name=&quot;option&quot; value=&quot;EOL&quot;/&gt;</span><br><span class=\"line\">        &lt;/module&gt;</span><br><span class=\"line\">        &lt;module name=&quot;SeparatorWrap&quot;&gt;</span><br><span class=\"line\">            &lt;property name=&quot;id&quot; value=&quot;SeparatorWrapArrayDeclarator&quot;/&gt;</span><br><span class=\"line\">            &lt;property name=&quot;tokens&quot; value=&quot;ARRAY_DECLARATOR&quot;/&gt;</span><br><span class=\"line\">            &lt;property name=&quot;option&quot; value=&quot;EOL&quot;/&gt;</span><br><span class=\"line\">        &lt;/module&gt;</span><br><span class=\"line\">        &lt;module name=&quot;SeparatorWrap&quot;&gt;</span><br><span class=\"line\">            &lt;property name=&quot;id&quot; value=&quot;SeparatorWrapMethodRef&quot;/&gt;</span><br><span class=\"line\">            &lt;property name=&quot;tokens&quot; value=&quot;METHOD_REF&quot;/&gt;</span><br><span class=\"line\">            &lt;property name=&quot;option&quot; value=&quot;nl&quot;/&gt;</span><br><span class=\"line\">        &lt;/module&gt;</span><br><span class=\"line\">        &lt;module name=&quot;PackageName&quot;&gt;</span><br><span class=\"line\">            &lt;property name=&quot;format&quot; value=&quot;^[a-z]+(\\.[a-z][a-z0-9]*)*$&quot;/&gt;</span><br><span class=\"line\">            &lt;message key=&quot;name.invalidPattern&quot; value=&quot;Package name &#x27;&#x27;&#123;0&#125;&#x27;&#x27; must match pattern &#x27;&#x27;&#123;1&#125;&#x27;&#x27;.&quot;/&gt;</span><br><span class=\"line\">        &lt;/module&gt;</span><br><span class=\"line\">        &lt;module name=&quot;TypeName&quot;&gt;</span><br><span class=\"line\">            &lt;property name=&quot;tokens&quot; value=&quot;CLASS_DEF, INTERFACE_DEF, ENUM_DEF, ANNOTATION_DEF, RECORD_DEF&quot;/&gt;</span><br><span class=\"line\">            &lt;message key=&quot;name.invalidPattern&quot; value=&quot;Type name &#x27;&#x27;&#123;0&#125;&#x27;&#x27; must match pattern &#x27;&#x27;&#123;1&#125;&#x27;&#x27;.&quot;/&gt;</span><br><span class=\"line\">        &lt;/module&gt;</span><br><span class=\"line\">        &lt;module name=&quot;MemberName&quot;&gt;</span><br><span class=\"line\">            &lt;property name=&quot;format&quot; value=&quot;^[a-z][a-z0-9][a-zA-Z0-9]*$&quot;/&gt;</span><br><span class=\"line\">            &lt;message key=&quot;name.invalidPattern&quot; value=&quot;Member name &#x27;&#x27;&#123;0&#125;&#x27;&#x27; must match pattern &#x27;&#x27;&#123;1&#125;&#x27;&#x27;.&quot;/&gt;</span><br><span class=\"line\">        &lt;/module&gt;</span><br><span class=\"line\">        &lt;module name=&quot;ParameterName&quot;&gt;</span><br><span class=\"line\">            &lt;property name=&quot;format&quot; value=&quot;^[a-z]([a-z0-9][a-zA-Z0-9]*)?$&quot;/&gt;</span><br><span class=\"line\">            &lt;message key=&quot;name.invalidPattern&quot; value=&quot;Parameter name &#x27;&#x27;&#123;0&#125;&#x27;&#x27; must match pattern &#x27;&#x27;&#123;1&#125;&#x27;&#x27;.&quot;/&gt;</span><br><span class=\"line\">        &lt;/module&gt;</span><br><span class=\"line\">        &lt;module name=&quot;LambdaParameterName&quot;&gt;</span><br><span class=\"line\">            &lt;property name=&quot;format&quot; value=&quot;^[a-z]([a-z0-9][a-zA-Z0-9]*)?$&quot;/&gt;</span><br><span class=\"line\">            &lt;message key=&quot;name.invalidPattern&quot; value=&quot;Lambda parameter name &#x27;&#x27;&#123;0&#125;&#x27;&#x27; must match pattern &#x27;&#x27;&#123;1&#125;&#x27;&#x27;.&quot;/&gt;</span><br><span class=\"line\">        &lt;/module&gt;</span><br><span class=\"line\">        &lt;module name=&quot;CatchParameterName&quot;&gt;</span><br><span class=\"line\">            &lt;property name=&quot;format&quot; value=&quot;^[a-z]([a-z0-9][a-zA-Z0-9]*)?$&quot;/&gt;</span><br><span class=\"line\">            &lt;message key=&quot;name.invalidPattern&quot; value=&quot;Catch parameter name &#x27;&#x27;&#123;0&#125;&#x27;&#x27; must match pattern &#x27;&#x27;&#123;1&#125;&#x27;&#x27;.&quot;/&gt;</span><br><span class=\"line\">        &lt;/module&gt;</span><br><span class=\"line\">        &lt;module name=&quot;LocalVariableName&quot;&gt;</span><br><span class=\"line\">            &lt;property name=&quot;format&quot; value=&quot;^[a-z]([a-z0-9][a-zA-Z0-9]*)?$&quot;/&gt;</span><br><span class=\"line\">            &lt;message key=&quot;name.invalidPattern&quot; value=&quot;Local variable name &#x27;&#x27;&#123;0&#125;&#x27;&#x27; must match pattern &#x27;&#x27;&#123;1&#125;&#x27;&#x27;.&quot;/&gt;</span><br><span class=\"line\">        &lt;/module&gt;</span><br><span class=\"line\">        &lt;module name=&quot;PatternVariableName&quot;&gt;</span><br><span class=\"line\">            &lt;property name=&quot;format&quot; value=&quot;^[a-z]([a-z0-9][a-zA-Z0-9]*)?$&quot;/&gt;</span><br><span class=\"line\">            &lt;message key=&quot;name.invalidPattern&quot; value=&quot;Pattern variable name &#x27;&#x27;&#123;0&#125;&#x27;&#x27; must match pattern &#x27;&#x27;&#123;1&#125;&#x27;&#x27;.&quot;/&gt;</span><br><span class=\"line\">        &lt;/module&gt;</span><br><span class=\"line\">        &lt;module name=&quot;ClassTypeParameterName&quot;&gt;</span><br><span class=\"line\">            &lt;property name=&quot;format&quot; value=&quot;(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)&quot;/&gt;</span><br><span class=\"line\">            &lt;message key=&quot;name.invalidPattern&quot; value=&quot;Class type name &#x27;&#x27;&#123;0&#125;&#x27;&#x27; must match pattern &#x27;&#x27;&#123;1&#125;&#x27;&#x27;.&quot;/&gt;</span><br><span class=\"line\">        &lt;/module&gt;</span><br><span class=\"line\">        &lt;module name=&quot;RecordTypeParameterName&quot;&gt;</span><br><span class=\"line\">            &lt;property name=&quot;format&quot; value=&quot;(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)&quot;/&gt;</span><br><span class=\"line\">            &lt;message key=&quot;name.invalidPattern&quot; value=&quot;Record type name &#x27;&#x27;&#123;0&#125;&#x27;&#x27; must match pattern &#x27;&#x27;&#123;1&#125;&#x27;&#x27;.&quot;/&gt;</span><br><span class=\"line\">        &lt;/module&gt;</span><br><span class=\"line\">        &lt;module name=&quot;MethodTypeParameterName&quot;&gt;</span><br><span class=\"line\">            &lt;property name=&quot;format&quot; value=&quot;(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)&quot;/&gt;</span><br><span class=\"line\">            &lt;message key=&quot;name.invalidPattern&quot; value=&quot;Method type name &#x27;&#x27;&#123;0&#125;&#x27;&#x27; must match pattern &#x27;&#x27;&#123;1&#125;&#x27;&#x27;.&quot;/&gt;</span><br><span class=\"line\">        &lt;/module&gt;</span><br><span class=\"line\">        &lt;module name=&quot;NoFinalizer&quot;/&gt;</span><br><span class=\"line\">        &lt;module name=&quot;GenericWhitespace&quot;&gt;</span><br><span class=\"line\">            &lt;message key=&quot;ws.followed&quot; value=&quot;GenericWhitespace &#x27;&#x27;&#123;0&#125;&#x27;&#x27; is followed by whitespace.&quot;/&gt;</span><br><span class=\"line\">            &lt;message key=&quot;ws.preceded&quot; value=&quot;GenericWhitespace &#x27;&#x27;&#123;0&#125;&#x27;&#x27; is preceded with whitespace.&quot;/&gt;</span><br><span class=\"line\">            &lt;message key=&quot;ws.illegalFollow&quot; value=&quot;GenericWhitespace &#x27;&#x27;&#123;0&#125;&#x27;&#x27; should followed by whitespace.&quot;/&gt;</span><br><span class=\"line\">            &lt;message key=&quot;ws.notPreceded&quot; value=&quot;GenericWhitespace &#x27;&#x27;&#123;0&#125;&#x27;&#x27; is not preceded with whitespace.&quot;/&gt;</span><br><span class=\"line\">        &lt;/module&gt;</span><br><span class=\"line\">        &lt;module name=&quot;Indentation&quot;&gt;</span><br><span class=\"line\">            &lt;property name=&quot;basicOffset&quot; value=&quot;4&quot;/&gt;</span><br><span class=\"line\">            &lt;property name=&quot;braceAdjustment&quot; value=&quot;4&quot;/&gt;</span><br><span class=\"line\">            &lt;property name=&quot;caseIndent&quot; value=&quot;4&quot;/&gt;</span><br><span class=\"line\">            &lt;property name=&quot;throwsIndent&quot; value=&quot;4&quot;/&gt;</span><br><span class=\"line\">            &lt;property name=&quot;lineWrappingIndentation&quot; value=&quot;4&quot;/&gt;</span><br><span class=\"line\">            &lt;property name=&quot;arrayInitIndent&quot; value=&quot;4&quot;/&gt;</span><br><span class=\"line\">        &lt;/module&gt;</span><br><span class=\"line\">        &lt;module name=&quot;AbbreviationAsWordInName&quot;&gt;</span><br><span class=\"line\">            &lt;property name=&quot;ignoreFinal&quot; value=&quot;false&quot;/&gt;</span><br><span class=\"line\">            &lt;property name=&quot;allowedAbbreviationLength&quot; value=&quot;0&quot;/&gt;</span><br><span class=\"line\">            &lt;property name=&quot;tokens&quot;</span><br><span class=\"line\">                      value=&quot;CLASS_DEF, INTERFACE_DEF, ENUM_DEF, ANNOTATION_DEF, ANNOTATION_FIELD_DEF, PARAMETER_DEF, VARIABLE_DEF, METHOD_DEF, PATTERN_VARIABLE_DEF, RECORD_DEF, RECORD_COMPONENT_DEF&quot;/&gt;</span><br><span class=\"line\">        &lt;/module&gt;</span><br><span class=\"line\">        &lt;module name=&quot;OverloadMethodsDeclarationOrder&quot;/&gt;</span><br><span class=\"line\">        &lt;module name=&quot;VariableDeclarationUsageDistance&quot;/&gt;</span><br><span class=\"line\">        &lt;module name=&quot;MethodParamPad&quot;&gt;</span><br><span class=\"line\">            &lt;property name=&quot;tokens&quot; value=&quot;CTOR_DEF, LITERAL_NEW, METHOD_CALL, METHOD_DEF, SUPER_CTOR_CALL, ENUM_CONSTANT_DEF, RECORD_DEF&quot;/&gt;</span><br><span class=\"line\">        &lt;/module&gt;</span><br><span class=\"line\">        &lt;module name=&quot;NoWhitespaceBefore&quot;&gt;</span><br><span class=\"line\">            &lt;property name=&quot;tokens&quot; value=&quot;COMMA, SEMI, POST_INC, POST_DEC, DOT, LABELED_STAT, METHOD_REF&quot;/&gt;</span><br><span class=\"line\">            &lt;property name=&quot;allowLineBreaks&quot; value=&quot;true&quot;/&gt;</span><br><span class=\"line\">        &lt;/module&gt;</span><br><span class=\"line\">        &lt;module name=&quot;ParenPad&quot;&gt;</span><br><span class=\"line\">            &lt;property name=&quot;tokens&quot;</span><br><span class=\"line\">                      value=&quot;ANNOTATION, ANNOTATION_FIELD_DEF, CTOR_CALL, CTOR_DEF, DOT, ENUM_CONSTANT_DEF, EXPR, LITERAL_CATCH, LITERAL_DO, LITERAL_FOR, LITERAL_IF, LITERAL_NEW, LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_WHILE, METHOD_CALL, METHOD_DEF, QUESTION, RESOURCE_SPECIFICATION, SUPER_CTOR_CALL, LAMBDA, RECORD_DEF&quot;/&gt;</span><br><span class=\"line\">        &lt;/module&gt;</span><br><span class=\"line\">        &lt;module name=&quot;OperatorWrap&quot;&gt;</span><br><span class=\"line\">            &lt;property name=&quot;option&quot; value=&quot;NL&quot;/&gt;</span><br><span class=\"line\">            &lt;property name=&quot;tokens&quot;</span><br><span class=\"line\">                      value=&quot;BAND, BOR, BSR, BXOR, DIV, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR, LT, MINUS, MOD, NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR, METHOD_REF, TYPE_EXTENSION_AND &quot;/&gt;</span><br><span class=\"line\">        &lt;/module&gt;</span><br><span class=\"line\">        &lt;module name=&quot;AnnotationLocation&quot;&gt;</span><br><span class=\"line\">            &lt;property name=&quot;id&quot; value=&quot;AnnotationLocationMostCases&quot;/&gt;</span><br><span class=\"line\">            &lt;property name=&quot;tokens&quot; value=&quot;CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF, RECORD_DEF, COMPACT_CTOR_DEF&quot;/&gt;</span><br><span class=\"line\">        &lt;/module&gt;</span><br><span class=\"line\">        &lt;module name=&quot;AnnotationLocation&quot;&gt;</span><br><span class=\"line\">            &lt;property name=&quot;id&quot; value=&quot;AnnotationLocationVariables&quot;/&gt;</span><br><span class=\"line\">            &lt;property name=&quot;tokens&quot; value=&quot;VARIABLE_DEF&quot;/&gt;</span><br><span class=\"line\">            &lt;property name=&quot;allowSamelineMultipleAnnotations&quot; value=&quot;true&quot;/&gt;</span><br><span class=\"line\">        &lt;/module&gt;</span><br><span class=\"line\">        &lt;module name=&quot;NonEmptyAtclauseDescription&quot;/&gt;</span><br><span class=\"line\">&lt;!--        &lt;module name=&quot;InvalidJavadocPosition&quot;/&gt;--&gt;</span><br><span class=\"line\">&lt;!--        &lt;module name=&quot;JavadocTagContinuationIndentation&quot;/&gt;--&gt;</span><br><span class=\"line\">&lt;!--        &lt;module name=&quot;SummaryJavadoc&quot;&gt;--&gt;</span><br><span class=\"line\">&lt;!--            &lt;property name=&quot;forbiddenSummaryFragments&quot; value=&quot;^@return the *|^This method returns |^A [&#123;]@code [a-zA-Z0-9]+[&#125;]( is a )&quot;/&gt;--&gt;</span><br><span class=\"line\">&lt;!--        &lt;/module&gt;--&gt;</span><br><span class=\"line\">&lt;!--        &lt;module name=&quot;JavadocParagraph&quot;/&gt;--&gt;</span><br><span class=\"line\">        &lt;module name=&quot;RequireEmptyLineBeforeBlockTagGroup&quot;/&gt;</span><br><span class=\"line\">        &lt;module name=&quot;AtclauseOrder&quot;&gt;</span><br><span class=\"line\">            &lt;property name=&quot;tagOrder&quot; value=&quot;@param, @return, @throws, @deprecated&quot;/&gt;</span><br><span class=\"line\">            &lt;property name=&quot;target&quot; value=&quot;CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF, VARIABLE_DEF&quot;/&gt;</span><br><span class=\"line\">        &lt;/module&gt;</span><br><span class=\"line\">        &lt;module name=&quot;MethodName&quot;&gt;</span><br><span class=\"line\">            &lt;property name=&quot;format&quot; value=&quot;^[a-z][a-z0-9][a-zA-Z0-9_]*$&quot;/&gt;</span><br><span class=\"line\">            &lt;message key=&quot;name.invalidPattern&quot; value=&quot;Method name &#x27;&#x27;&#123;0&#125;&#x27;&#x27; must match pattern &#x27;&#x27;&#123;1&#125;&#x27;&#x27;.&quot;/&gt;</span><br><span class=\"line\">        &lt;/module&gt;</span><br><span class=\"line\">&lt;!--        &lt;module name=&quot;SingleLineJavadoc&quot;/&gt;--&gt;</span><br><span class=\"line\">        &lt;module name=&quot;EmptyCatchBlock&quot;&gt;</span><br><span class=\"line\">            &lt;property name=&quot;exceptionVariableName&quot; value=&quot;expected&quot;/&gt;</span><br><span class=\"line\">        &lt;/module&gt;</span><br><span class=\"line\">        &lt;module name=&quot;CommentsIndentation&quot;&gt;</span><br><span class=\"line\">            &lt;property name=&quot;tokens&quot; value=&quot;SINGLE_LINE_COMMENT, BLOCK_COMMENT_BEGIN&quot;/&gt;</span><br><span class=\"line\">        &lt;/module&gt;</span><br><span class=\"line\">        &lt;module name=&quot;SuppressionXpathFilter&quot;&gt;</span><br><span class=\"line\">            &lt;property name=&quot;file&quot; value=&quot;$&#123;org.checkstyle.google.suppressionxpathfilter.config&#125;&quot; default=&quot;checkstyle-xpath-suppressions.xml&quot;/&gt;</span><br><span class=\"line\">            &lt;property name=&quot;optional&quot; value=&quot;true&quot;/&gt;</span><br><span class=\"line\">        &lt;/module&gt;</span><br><span class=\"line\">    &lt;/module&gt;</span><br><span class=\"line\">&lt;/module&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<p>执行 <code>./gradlew check</code>  会去执行除了 测试方法的 task 方法外，还会去执行类似 checkStyle 这样的一些检查插件，在 check 的时候就会对静态样式进行检查</p>\n<h3 id=\"业务开发\"><a class=\"markdownIt-Anchor\" href=\"#业务开发\">#</a> 业务开发</h3>\n<h4 id=\"record-纪录类\"><a class=\"markdownIt-Anchor\" href=\"#record-纪录类\">#</a> record 纪录类</h4>\n<p>对于纯 pojo 而言，在 Java16 之后可以使用 record 记录类来创建，类似于 Kotlin 的 data class 类型，使用时会自动生成他的所有字段的 get 方法，并且这些字段都是 immutable 的，即无法修改的</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>: 创建问题命令</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: DuJinliang</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span>: 2023/6/18</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">record</span> <span class=\"title class_\">CreateQuestionCmd</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">        String questionerId,</span></span><br><span class=\"line\"><span class=\"params\">        String title,</span></span><br><span class=\"line\"><span class=\"params\">        String detail</span></span><br><span class=\"line\"><span class=\"params\">)</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"spring-注入\"><a class=\"markdownIt-Anchor\" href=\"#spring-注入\">#</a> spring 注入</h3>\n<p>如果使用字段注入的话，使用 <code>@Autowired</code>  对 Spring 框架的依赖时比较重的，如果没有依赖 Spring 框架很难去初始化这样一个对象，并且尝试对这样的 bean 进行测试的话，甚至都无法很好的构造出来，因为 Spring 可能还要通过反射去注入的，那么比较的推荐的就是通过构造器的方式注入，为了防止我们创建对应的构造器这件事，比较推荐的是将这种字段全部都声明为 final 类型</p>\n<ul>\n<li>使用 final 的优点，没有办法在业务代码中去替换调实现</li>\n<li>强制要求把参数放到构造器上，这样的话帮我们不要忘记写这个方法，有了构造方法 spring 才能通过构造器的方式注入 bean</li>\n</ul>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Transactional</span></span><br><span class=\"line\"><span class=\"meta\">@Service(&quot;questionCommandServiceImpl&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">QuestionCommandServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">QuestionCommandService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> QuestionRepository questionRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">QuestionCommandServiceImpl</span><span class=\"params\">(QuestionRepository questionRepository)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.questionRepository = questionRepository;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> QuestionCreateResult <span class=\"title function_\">createQuestion</span><span class=\"params\">(CreateQuestionCmd cmd)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">var</span> <span class=\"variable\">question</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Question</span>(cmd.questionerId(), cmd.title(), cmd.detail());</span><br><span class=\"line\">        questionRepository.save(question);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">QuestionCreateResult</span>(question.getId());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"事务边界\"><a class=\"markdownIt-Anchor\" href=\"#事务边界\">#</a> 事务边界</h3>\n<p>添加事务边界，应用服务的每一个方法其实就可以理解为我们的一个最小的事务单元，在类上加一个  <code>@Transactional</code>  注解，这样每当我们调用一个方法的时候，他就会开启一个事务</p>\n<ul>\n<li>spring data jpa 有一个默认的参数\n<ul>\n<li>open-in-view : true</li>\n<li>他的意思是指，jpa 会在每个 web 请求进来的时候就会开启一个数据库的连接会话，开启一个事务，直到请求结束，session 关闭，事务才会关闭提交，</li>\n<li>如果这个配置开启的话，我们内容创建的手动声明的事务是被覆盖的</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"测试-2\"><a class=\"markdownIt-Anchor\" href=\"#测试-2\">#</a> 测试</h3>\n<p>使用 MockMvc 来帮我们编写这个测试，需要添加一个注解  <code>@WebMvcTest</code></p>\n<p>这里使用到了 Java17 的多行字符串的特性 “”&quot; “”“”</p>\n<p>在这个测试中，我们只启动了 WebMvc 这一层的 bean，他还需要依赖我们的应用服务，在测试的时候，我们不希望他把所有东西都启动起来，所以我们需要把应用服务 mock 掉， 所以只需要将他声明成一个  <code>@MockBean</code>  即可，这样 spring 就直接可以把他变成一个 mock 的状态了，之后我们就可以使用 given 的方式给他指定返回值</p>\n<p>但是使用这个字符串模板的话，可能会有一个缺点，如果对象比较复杂的话，会导致整个测试大段的代码都是定义了这个 json 对象，在测试的 resources 包下面去用文件去这些请求 body, 如果希望编写更多测试，也可以在编写更多 json 对象，也可以去继续完善这个测试，也可以写一些其他异常情况的测试也是一样的方式</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202306182028745.png\"\n                      alt=\"image-20230618202856687\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Json\"><figure class=\"iseeu highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;questionerId&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;UID_00001&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;title&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;A title for test&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;detail&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;A detail for test&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.wenhe9.question.interfaces.question.face.rest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> cn.wenhe9.question.domian.application.command.QuestionCommandService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> cn.wenhe9.question.domian.application.result.QuestionCreateResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.mock.mockito.MockBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.io.ClassPathResource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.MediaType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.test.web.servlet.MockMvc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.mockito.ArgumentMatchers.any;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.mockito.BDDMockito.given;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>:</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: DuJinliang</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span>: 2023/6/18</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@WebMvcTest</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">QuestionCommandRestControllerTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> MockMvc mockMvc;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@MockBean</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> QuestionCommandService questionCommandService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">should_return_ok_when_create_question</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">var</span> <span class=\"variable\">questionId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;1&quot;</span>;</span><br><span class=\"line\">        given(questionCommandService.createQuestion(any())).willReturn(<span class=\"keyword\">new</span> <span class=\"title class_\">QuestionCreateResult</span>(questionId));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">var</span> <span class=\"variable\">requestBody</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathResource</span>(<span class=\"string\">&quot;request/question/create-question/200-ok.json&quot;</span>).getInputStream().readAllBytes();</span><br><span class=\"line\"></span><br><span class=\"line\">        mockMvc</span><br><span class=\"line\">                .perform(</span><br><span class=\"line\">                    post(<span class=\"string\">&quot;/questions/&quot;</span>)</span><br><span class=\"line\">                            .contentType(MediaType.APPLICATION_JSON)</span><br><span class=\"line\">                            .content(requestBody)</span><br><span class=\"line\">                )</span><br><span class=\"line\">                .andExpect(status().isOk())</span><br><span class=\"line\">                .andExpect(jsonPath(<span class=\"string\">&quot;$.questionId&quot;</span>).value(questionId))</span><br><span class=\"line\">        ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n",
            "tags": [
                "Java 最佳实践"
            ]
        },
        {
            "id": "https://wait-you.github.io/2023/06/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/",
            "url": "https://wait-you.github.io/2023/06/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/",
            "title": "设计模式",
            "date_published": "2023-06-06T01:12:30.000Z",
            "content_html": "<h1 id=\"1设计模式\"><a class=\"markdownIt-Anchor\" href=\"#1设计模式\">#</a> 1，设计模式</h1>\n<h2 id=\"11-软件设计模式的产生背景\"><a class=\"markdownIt-Anchor\" href=\"#11-软件设计模式的产生背景\">#</a> 1.1 软件设计模式的产生背景</h2>\n<p>&quot;设计模式&quot; 最初并不是出现在软件设计中，而是被用于建筑领域的设计中。</p>\n<p>1977 年美国著名建筑大师、加利福尼亚大学伯克利分校环境结构中心主任 <code>克里斯托夫·亚历山大（Christopher Alexander）</code> 在他的著作《建筑模式语言：城镇、建筑、构造》中描述了一些常见的建筑设计问题，并提出了 253 种关于对城镇、邻里、住宅、花园和房间等进行设计的基本模式。</p>\n<p>1990 年软件工程界开始研讨设计模式的话题，后来召开了多次关于设计模式的研讨会。直到 1995 年，艾瑞克・伽马（ErichGamma）、理査德・海尔姆（Richard Helm）、拉尔夫・约翰森（Ralph Johnson）、约翰・威利斯迪斯（John Vlissides）等 4 位作者合作出版了《设计模式：可复用面向对象软件的基础》一书，在此书中收录了 23 个设计模式，这是设计模式领域里程碑的事件，导致了软件设计模式的突破。这 4 位作者在软件开发领域里也以他们的 “四人组”（Gang of Four，GoF）著称。</p>\n<h2 id=\"12-软件设计模式的概念\"><a class=\"markdownIt-Anchor\" href=\"#12-软件设计模式的概念\">#</a> 1.2 软件设计模式的概念</h2>\n<p>软件设计模式（Software Design Pattern），又称设计模式，是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。它描述了在软件设计过程中的一些不断重复发生的问题，以及该问题的解决方案。也就是说，它是解决特定问题的一系列套路，是前辈们的代码设计经验的总结，具有一定的普遍性，可以反复使用。</p>\n<h2 id=\"13-学习设计模式的必要性\"><a class=\"markdownIt-Anchor\" href=\"#13-学习设计模式的必要性\">#</a> 1.3 学习设计模式的必要性</h2>\n<p>设计模式的本质是面向对象设计原则的实际运用，是对类的封装性、继承性和多态性以及类的关联关系和组合关系的充分理解。</p>\n<p>正确使用设计模式具有以下优点。</p>\n<ul>\n<li>可以提高程序员的思维能力、编程能力和设计能力。</li>\n<li>使程序设计更加标准化、代码编制更加工程化，使软件开发效率大大提高，从而缩短软件的开发周期。</li>\n<li>使设计的代码可重用性高、可读性强、可靠性高、灵活性好、可维护性强。</li>\n</ul>\n<h2 id=\"14-设计模式分类\"><a class=\"markdownIt-Anchor\" href=\"#14-设计模式分类\">#</a> 1.4 设计模式分类</h2>\n<ul>\n<li>\n<p><strong>创建型模式</strong></p>\n<p>用于描述 “怎样创建对象”，它的主要特点是 “将对象的创建与使用分离”。GoF（四人组）书中提供了单例、原型、工厂方法、抽象工厂、建造者等 5 种创建型模式。</p>\n</li>\n<li>\n<p><strong>结构型模式</strong></p>\n<p>用于描述如何将类或对象按某种布局组成更大的结构，GoF（四人组）书中提供了代理、适配器、桥接、装饰、外观、享元、组合等 7 种结构型模式。</p>\n</li>\n<li>\n<p><strong>行为型模式</strong></p>\n<p>用于描述类或对象之间怎样相互协作共同完成单个对象无法单独完成的任务，以及怎样分配职责。GoF（四人组）书中提供了模板方法、策略、命令、职责链、状态、观察者、中介者、迭代器、访问者、备忘录、解释器等 11 种行为型模式。</p>\n</li>\n</ul>\n<h1 id=\"2uml图\"><a class=\"markdownIt-Anchor\" href=\"#2uml图\">#</a> 2，UML 图</h1>\n<p>统一建模语言（Unified Modeling Language，UML）是用来设计软件的可视化建模语言。它的特点是简单、统一、图形化、能表达软件设计中的动态与静态信息。</p>\n<p>UML 从目标系统的不同角度出发，定义了用例图、类图、对象图、状态图、活动图、时序图、协作图、构件图、部署图等 9 种图。</p>\n<h2 id=\"21-类图概述\"><a class=\"markdownIt-Anchor\" href=\"#21-类图概述\">#</a> 2.1 类图概述</h2>\n<p>类图 (Class diagram) 是显示了模型的静态结构，特别是模型中存在的类、类的内部结构以及它们与其他类的关系等。类图不显示暂时性的信息。类图是面向对象建模的主要组成部分。</p>\n<h2 id=\"22-类图的作用\"><a class=\"markdownIt-Anchor\" href=\"#22-类图的作用\">#</a> 2.2 类图的作用</h2>\n<ul>\n<li>在软件工程中，类图是一种静态的结构图，描述了系统的类的集合，类的属性和类之间的关系，可以简化了人们对系统的理解；</li>\n<li>类图是系统分析和设计阶段的重要产物，是系统编码和测试的重要模型。</li>\n</ul>\n<h2 id=\"23-类图表示法\"><a class=\"markdownIt-Anchor\" href=\"#23-类图表示法\">#</a> 2.3 类图表示法</h2>\n<h3 id=\"231-类的表示方式\"><a class=\"markdownIt-Anchor\" href=\"#231-类的表示方式\">#</a> 2.3.1 类的表示方式</h3>\n<p>在 UML 类图中，类使用包含类名、属性 (field) 和方法 (method) 且带有分割线的矩形来表示，比如下图表示一个 Employee 类，它包含 name,age 和 address 这 3 个属性，以及 work () 方法。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420224700618.jpg\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p>属性 / 方法名称前加的加号和减号表示了这个属性 / 方法的可见性，UML 类图中表示可见性的符号有三种：</p>\n<ul>\n<li>\n<p>+：表示 public</p>\n</li>\n<li>\n<p>-：表示 private</p>\n</li>\n<li>\n<p>#：表示 protected</p>\n</li>\n</ul>\n<p>属性的完整表示方式是： <strong>可见性  名称 ：类型 [= 缺省值]</strong></p>\n<p>方法的完整表示方式是： <strong>可见性  名称 (参数列表) [ ： 返回类型]</strong></p>\n<blockquote>\n<p>注意：</p>\n<p>1，中括号中的内容表示是可选的</p>\n<p>2，也有将类型放在变量名前面，返回值类型放在方法名前面</p>\n</blockquote>\n<p><strong>举个栗子：</strong></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/2021042022474324.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p>上图 Demo 类定义了三个方法：</p>\n<ul>\n<li>method () 方法：修饰符为 public，没有参数，没有返回值。</li>\n<li>method1 () 方法：修饰符为 private，没有参数，返回值类型为 String。</li>\n<li>method2 () 方法：修饰符为 protected，接收两个参数，第一个参数类型为 int，第二个参数类型为 String，返回值类型是 int。</li>\n</ul>\n<h3 id=\"232-类与类之间关系的表示方式\"><a class=\"markdownIt-Anchor\" href=\"#232-类与类之间关系的表示方式\">#</a> 2.3.2 类与类之间关系的表示方式</h3>\n<h4 id=\"2321-关联关系\"><a class=\"markdownIt-Anchor\" href=\"#2321-关联关系\">#</a> 2.3.2.1 关联关系</h4>\n<p>关联关系是对象之间的一种引用关系，用于表示一类对象与另一类对象之间的联系，如老师和学生、师傅和徒弟、丈夫和妻子等。关联关系是类与类之间最常用的一种关系，分为一般关联关系、聚合关系和组合关系。我们先介绍一般关联。</p>\n<p>关联又可以分为单向关联，双向关联，自关联。</p>\n<p><strong>1，单向关联</strong></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420224803841.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p>在 UML 类图中单向关联用一个带箭头的实线表示。上图表示每个顾客都有一个地址，这通过让 Customer 类持有一个类型为 Address 的成员变量类实现。</p>\n<p><strong>2，双向关联</strong></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420224817932.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p>从上图中我们很容易看出，所谓的双向关联就是双方各自持有对方类型的成员变量。</p>\n<p>在 UML 类图中，双向关联用一个不带箭头的直线表示。上图中在 Customer 类中维护一个 List&lt;Product&gt;，表示一个顾客可以购买多个商品；在 Product 类中维护一个 Customer 类型的成员变量表示这个产品被哪个顾客所购买。</p>\n<p><strong>3，自关联</strong></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420224845698.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p>自关联在 UML 类图中用一个带有箭头且指向自身的线表示。上图的意思就是 Node 类包含类型为 Node 的成员变量，也就是 “自己包含自己”。</p>\n<h4 id=\"2322-聚合关系\"><a class=\"markdownIt-Anchor\" href=\"#2322-聚合关系\">#</a> 2.3.2.2 聚合关系</h4>\n<p>聚合关系是关联关系的一种，是强关联关系，是整体和部分之间的关系。</p>\n<p>聚合关系也是通过成员对象来实现的，其中成员对象是整体对象的一部分，但是成员对象可以脱离整体对象而独立存在。例如，学校与老师的关系，学校包含老师，但如果学校停办了，老师依然存在。</p>\n<p>在 UML 类图中，聚合关系可以用带空心菱形的实线来表示，菱形指向整体。下图所示是大学和教师的关系图：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420224909181.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<h4 id=\"2323-组合关系\"><a class=\"markdownIt-Anchor\" href=\"#2323-组合关系\">#</a> 2.3.2.3 组合关系</h4>\n<p>组合表示类之间的整体与部分的关系，但它是一种更强烈的聚合关系。</p>\n<p>在组合关系中，整体对象可以控制部分对象的生命周期，一旦整体对象不存在，部分对象也将不存在，部分对象不能脱离整体对象而存在。例如，头和嘴的关系，没有了头，嘴也就不存在了。</p>\n<p>在 UML 类图中，组合关系用带实心菱形的实线来表示，菱形指向整体。下图所示是头和嘴的关系图：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420224926483.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<h4 id=\"2324-依赖关系\"><a class=\"markdownIt-Anchor\" href=\"#2324-依赖关系\">#</a> 2.3.2.4 依赖关系</h4>\n<p>依赖关系是一种使用关系，它是对象之间耦合度最弱的一种关联方式，是临时性的关联。在代码中，某个类的方法通过局部变量、方法的参数或者对静态方法的调用来访问另一个类（被依赖类）中的某些方法来完成一些职责。</p>\n<p>在 UML 类图中，依赖关系使用带箭头的虚线来表示，箭头从使用类指向被依赖的类。下图所示是司机和汽车的关系图，司机驾驶汽车：</p>\n<p>[外<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420224942637.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<h4 id=\"2325-继承关系\"><a class=\"markdownIt-Anchor\" href=\"#2325-继承关系\">#</a> 2.3.2.5 继承关系</h4>\n<p>继承关系是对象之间耦合度最大的一种关系，表示一般与特殊的关系，是父类与子类之间的关系，是一种继承关系。</p>\n<p>在 UML 类图中，泛化关系用带空心三角箭头的实线来表示，箭头从子类指向父类。在代码实现时，使用面向对象的继承机制来实现泛化关系。例如，Student 类和 Teacher 类都是 Person 类的子类，其类图如下图所示：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/2021042022495933.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<h4 id=\"2326-实现关系\"><a class=\"markdownIt-Anchor\" href=\"#2326-实现关系\">#</a> 2.3.2.6 实现关系</h4>\n<p>实现关系是接口与实现类之间的关系。在这种关系中，类实现了接口，类中的操作实现了接口中所声明的所有的抽象操作。</p>\n<p>在 UML 类图中，实现关系使用带空心三角箭头的虚线来表示，箭头从实现类指向接口。例如，汽车和船实现了交通工具，其类图如图 9 所示。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420225015611.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<h1 id=\"3软件设计原则\"><a class=\"markdownIt-Anchor\" href=\"#3软件设计原则\">#</a> 3，软件设计原则</h1>\n<p>在软件开发中，为了提高软件系统的可维护性和可复用性，增加软件的可扩展性和灵活性，程序员要尽量根据 6 条原则来开发程序，从而提高软件开发效率、节约软件开发成本和维护成本。</p>\n<h2 id=\"31-开闭原则\"><a class=\"markdownIt-Anchor\" href=\"#31-开闭原则\">#</a> 3.1 开闭原则</h2>\n<p><strong>对扩展开放，对修改关闭</strong>。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。</p>\n<p>想要达到这样的效果，我们需要使用接口和抽象类。</p>\n<p>因为抽象灵活性好，适应性广，只要抽象的合理，可以基本保持软件架构的稳定。而软件中易变的细节可以从抽象派生来的实现类来进行扩展，当软件需要发生变化时，只需要根据需求重新派生一个实现类来扩展就可以了。</p>\n<p>下面以  <code>搜狗输入法</code>  的皮肤为例介绍开闭原则的应用。</p>\n<p>【例】 <code>搜狗输入法</code>  的皮肤设计。</p>\n<p>分析： <code>搜狗输入法</code>  的皮肤是输入法背景图片、窗口颜色和声音等元素的组合。用户可以根据自己的喜爱更换自己的输入法的皮肤，也可以从网上下载新的皮肤。这些皮肤有共同的特点，可以为其定义一个抽象类（AbstractSkin），而每个具体的皮肤（DefaultSpecificSkin 和 HeimaSpecificSkin）是其子类。用户窗体可以根据需要选择或者增加新的主题，而不需要修改原代码，所以它是满足开闭原则的。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420225039964.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<h2 id=\"32-里氏代换原则\"><a class=\"markdownIt-Anchor\" href=\"#32-里氏代换原则\">#</a> 3.2 里氏代换原则</h2>\n<p>里氏代换原则是面向对象设计的基本原则之一。</p>\n<p>里氏代换原则：任何基类可以出现的地方，子类一定可以出现。通俗理解：<strong>子类可以扩展父类的功能，但不能改变父类原有的功能。换句话说，子类继承父类时，除添加新的方法完成新增功能外，尽量不要重写父类的方法。</strong></p>\n<p>如果通过重写父类的方法来完成新的功能，这样写起来虽然简单，但是整个继承体系的可复用性会比较差，特别是运用多态比较频繁时，程序运行出错的概率会非常大。</p>\n<p>下面看一个里氏替换原则中经典的一个例子</p>\n<p>【例】正方形不是长方形。</p>\n<p>在数学领域里，正方形毫无疑问是长方形，它是一个长宽相等的长方形。所以，我们开发的一个与几何图形相关的软件系统，就可以顺理成章的让正方形继承自长方形。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420225133349.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p>代码如下：</p>\n<p><strong>长方形类（Rectangle）：</strong></p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Rectangle</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">double</span> length;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">double</span> width;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">getLength</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setLength</span><span class=\"params\">(<span class=\"type\">double</span> length)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.length = length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">getWidth</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> width;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setWidth</span><span class=\"params\">(<span class=\"type\">double</span> width)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.width = width;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p><strong>正方形（Square）：</strong></p>\n<p>由于正方形的长和宽相同，所以在方法 setLength 和 setWidth 中，对长度和宽度都需要赋相同值。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Square</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Rectangle</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setWidth</span><span class=\"params\">(<span class=\"type\">double</span> width)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.setLength(width);</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.setWidth(width);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setLength</span><span class=\"params\">(<span class=\"type\">double</span> length)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.setLength(length);</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.setWidth(length);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>类 RectangleDemo 是我们的软件系统中的一个组件，它有一个 resize 方法依赖基类 Rectangle，resize 方法是 RectandleDemo 类中的一个方法，用来实现宽度逐渐增长的效果。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RectangleDemo</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">resize</span><span class=\"params\">(Rectangle rectangle)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (rectangle.getWidth() &lt;= rectangle.getLength()) &#123;</span><br><span class=\"line\">            rectangle.setWidth(rectangle.getWidth() + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//打印长方形的长和宽</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printLengthAndWidth</span><span class=\"params\">(Rectangle rectangle)</span> &#123;</span><br><span class=\"line\">        System.out.println(rectangle.getLength());</span><br><span class=\"line\">        System.out.println(rectangle.getWidth());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Rectangle</span> <span class=\"variable\">rectangle</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Rectangle</span>();</span><br><span class=\"line\">        rectangle.setLength(<span class=\"number\">20</span>);</span><br><span class=\"line\">        rectangle.setWidth(<span class=\"number\">10</span>);</span><br><span class=\"line\">        resize(rectangle);</span><br><span class=\"line\">        printLengthAndWidth(rectangle);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;============&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Rectangle</span> <span class=\"variable\">rectangle1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Square</span>();</span><br><span class=\"line\">        rectangle1.setLength(<span class=\"number\">10</span>);</span><br><span class=\"line\">        resize(rectangle1);</span><br><span class=\"line\">        printLengthAndWidth(rectangle1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>我们运行一下这段代码就会发现，假如我们把一个普通长方形作为参数传入 resize 方法，就会看到长方形宽度逐渐增长的效果，当宽度大于长度，代码就会停止，这种行为的结果符合我们的预期；假如我们再把一个正方形作为参数传入 resize 方法后，就会看到正方形的宽度和长度都在不断增长，代码会一直运行下去，直至系统产生溢出错误。所以，普通的长方形是适合这段代码的，正方形不适合。<br>\n我们得出结论：在 resize 方法中，Rectangle 类型的参数是不能被 Square 类型的参数所代替，如果进行了替换就得不到预期结果。因此，Square 类和 Rectangle 类之间的继承关系违反了里氏代换原则，它们之间的继承关系不成立，正方形不是长方形。</p>\n<p>如何改进呢？此时我们需要重新设计他们之间的关系。抽象出来一个四边形接口 (Quadrilateral)，让 Rectangle 类和 Square 类实现 Quadrilateral 接口</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420225829652.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<h2 id=\"33-依赖倒转原则\"><a class=\"markdownIt-Anchor\" href=\"#33-依赖倒转原则\">#</a> 3.3 依赖倒转原则</h2>\n<p>高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象。简单的说就是要求对抽象进行编程，不要对实现进行编程，这样就降低了客户与实现模块间的耦合。</p>\n<p><strong>不应该依赖于具体的实现类，而依赖于该实现类的抽象父类或父接口</strong></p>\n<p>下面看一个例子来理解依赖倒转原则</p>\n<p>【例】组装电脑</p>\n<p>现要组装一台电脑，需要配件 cpu，硬盘，内存条。只有这些配置都有了，计算机才能正常的运行。选择 cpu 有很多选择，如 Intel，AMD 等，硬盘可以选择希捷，西数等，内存条可以选择金士顿，海盗船等。</p>\n<p><strong>类图如下：</strong></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420225857845.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p>代码如下：</p>\n<p><strong>希捷硬盘类（XiJieHardDisk）:</strong></p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">XiJieHardDisk</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">HardDisk</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">(String data)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;使用希捷硬盘存储数据&quot;</span> + data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">get</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;使用希捷希捷硬盘取数据&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;数据&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p><strong>Intel 处理器（IntelCpu）：</strong></p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">IntelCpu</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Cpu</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;使用Intel处理器&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p><strong>金士顿内存条（KingstonMemory）：</strong></p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">KingstonMemory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Memory</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;使用金士顿作为内存条&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p><strong>电脑（Computer）：</strong></p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Computer</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> XiJieHardDisk hardDisk;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> IntelCpu cpu;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> KingstonMemory memory;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> IntelCpu <span class=\"title function_\">getCpu</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cpu;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setCpu</span><span class=\"params\">(IntelCpu cpu)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.cpu = cpu;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> KingstonMemory <span class=\"title function_\">getMemory</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> memory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setMemory</span><span class=\"params\">(KingstonMemory memory)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.memory = memory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> XiJieHardDisk <span class=\"title function_\">getHardDisk</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hardDisk;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setHardDisk</span><span class=\"params\">(XiJieHardDisk hardDisk)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.hardDisk = hardDisk;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;计算机工作&quot;</span>);</span><br><span class=\"line\">        cpu.run();</span><br><span class=\"line\">        memory.save();</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">data</span> <span class=\"operator\">=</span> hardDisk.get();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;从硬盘中获取的数据为：&quot;</span> + data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p><strong>测试类（TestComputer）：</strong></p>\n<p>测试类用来组装电脑。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestComputer</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Computer</span> <span class=\"variable\">computer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Computer</span>();</span><br><span class=\"line\">        computer.setHardDisk(<span class=\"keyword\">new</span> <span class=\"title class_\">XiJieHardDisk</span>());</span><br><span class=\"line\">        computer.setCpu(<span class=\"keyword\">new</span> <span class=\"title class_\">IntelCpu</span>());</span><br><span class=\"line\">        computer.setMemory(<span class=\"keyword\">new</span> <span class=\"title class_\">KingstonMemory</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">        computer.run();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>上面代码可以看到已经组装了一台电脑，但是似乎组装的电脑的 cpu 只能是 Intel 的，内存条只能是金士顿的，硬盘只能是希捷的，这对用户肯定是不友好的，用户有了机箱肯定是想按照自己的喜好，选择自己喜欢的配件。</p>\n<p>根据依赖倒转原则进行改进：</p>\n<p>代码我们只需要修改 Computer 类，让 Computer 类依赖抽象（各个配件的接口），而不是依赖于各个组件具体的实现类。</p>\n<p><strong>类图如下：</strong><br>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420225916824.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p><strong>电脑（Computer）：</strong></p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Computer</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HardDisk hardDisk;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Cpu cpu;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Memory memory;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> HardDisk <span class=\"title function_\">getHardDisk</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hardDisk;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setHardDisk</span><span class=\"params\">(HardDisk hardDisk)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.hardDisk = hardDisk;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Cpu <span class=\"title function_\">getCpu</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cpu;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setCpu</span><span class=\"params\">(Cpu cpu)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.cpu = cpu;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Memory <span class=\"title function_\">getMemory</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> memory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setMemory</span><span class=\"params\">(Memory memory)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.memory = memory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;计算机工作&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>面向对象的开发很好的解决了这个问题，一般情况下抽象的变化概率很小，让用户程序依赖于抽象，实现的细节也依赖于抽象。即使实现细节不断变动，只要抽象不变，客户程序就不需要变化。这大大降低了客户程序与实现细节的耦合度。</p>\n<h2 id=\"34-接口隔离原则\"><a class=\"markdownIt-Anchor\" href=\"#34-接口隔离原则\">#</a> 3.4 接口隔离原则</h2>\n<p>客户端不应该被迫依赖于它不使用的方法；一个类对另一个类的依赖应该建立在最小的接口上。</p>\n<p><strong>实现一个接口时如果有自己用不到的方法是违背原则的，可以将接口的拆分成多个接口，实现类只需要实现自己所需要的接口即可</strong></p>\n<p>下面看一个例子来理解接口隔离原则</p>\n<p>【例】安全门案例</p>\n<p>我们需要创建一个 <code>黑马</code> 品牌的安全门，该安全门具有防火、防水、防盗的功能。可以将防火，防水，防盗功能提取成一个接口，形成一套规范。类图如下：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420225304649.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p>上面的设计我们发现了它存在的问题，黑马品牌的安全门具有防盗，防水，防火的功能。现在如果我们还需要再创建一个传智品牌的安全门，而该安全门只具有防盗、防水功能呢？很显然如果实现 SafetyDoor 接口就违背了接口隔离原则，那么我们如何进行修改呢？看如下类图：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420225241132.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p>代码如下：</p>\n<p><strong>AntiTheft（接口）：</strong></p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">AntiTheft</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">antiTheft</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p><strong>Fireproof（接口）：</strong></p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Fireproof</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">fireproof</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p><strong>Waterproof（接口）：</strong></p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Waterproof</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">waterproof</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p><strong>HeiMaSafetyDoor（类）：</strong></p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HeiMaSafetyDoor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AntiTheft</span>,Fireproof,Waterproof &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">antiTheft</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;防盗&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fireproof</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;防火&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">waterproof</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;防水&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p><strong>ItcastSafetyDoor（类）：</strong></p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ItcastSafetyDoor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AntiTheft</span>,Fireproof &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">antiTheft</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;防盗&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fireproof</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;防火&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"35-迪米特法则\"><a class=\"markdownIt-Anchor\" href=\"#35-迪米特法则\">#</a> 3.5 迪米特法则</h2>\n<p>迪米特法则又叫最少知识原则。</p>\n<p><strong>使用中介降低调用类和方法类的耦合度</strong></p>\n<p>只和你的直接朋友交谈，不跟 “陌生人” 说话（Talk only to your immediate friends and not to strangers）。</p>\n<p>其含义是：如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用。其目的是降低类之间的耦合度，提高模块的相对独立性。</p>\n<p>迪米特法则中的 “朋友” 是指：当前对象本身、当前对象的成员对象、当前对象所创建的对象、当前对象的方法参数等，这些对象同当前对象存在关联、聚合或组合关系，可以直接访问这些对象的方法。</p>\n<p>下面看一个例子来理解迪米特法则</p>\n<p>【例】明星与经纪人的关系实例</p>\n<p>明星由于全身心投入艺术，所以许多日常事务由经纪人负责处理，如和粉丝的见面会，和媒体公司的业务洽淡等。这里的经纪人是明星的朋友，而粉丝和媒体公司是陌生人，所以适合使用迪米特法则。</p>\n<p>类图如下：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/202104202259471.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p>代码如下：</p>\n<p><strong>明星类（Star）</strong></p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Star</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Star</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name=name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p><strong>粉丝类（Fans）</strong></p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Fans</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Fans</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name=name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p><strong>媒体公司类（Company）</strong></p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Company</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Company</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name=name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p><strong>经纪人类（Agent）</strong></p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Agent</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Star star;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Fans fans;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Company company;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setStar</span><span class=\"params\">(Star star)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.star = star;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setFans</span><span class=\"params\">(Fans fans)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.fans = fans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setCompany</span><span class=\"params\">(Company company)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.company = company;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">meeting</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(fans.getName() + <span class=\"string\">&quot;与明星&quot;</span> + star.getName() + <span class=\"string\">&quot;见面了。&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">business</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(company.getName() + <span class=\"string\">&quot;与明星&quot;</span> + star.getName() + <span class=\"string\">&quot;洽淡业务。&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"36-合成复用原则\"><a class=\"markdownIt-Anchor\" href=\"#36-合成复用原则\">#</a> 3.6 合成复用原则</h2>\n<p>合成复用原则是指：<strong>尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现。</strong></p>\n<p>通常类的复用分为继承复用和合成复用两种。</p>\n<p>继承复用虽然有简单和易实现的优点，但它也存在以下缺点：</p>\n<ol>\n<li>继承复用破坏了类的封装性。因为继承会将父类的实现细节暴露给子类，父类对子类是透明的，所以这种复用又称为 “白箱” 复用。</li>\n<li>子类与父类的耦合度高。父类的实现的任何改变都会导致子类的实现发生变化，这不利于类的扩展与维护。</li>\n<li>它限制了复用的灵活性。从父类继承而来的实现是静态的，在编译时已经定义，所以在运行时不可能发生变化。</li>\n</ol>\n<p>采用组合或聚合复用时，可以将已有对象纳入新对象中，使之成为新对象的一部分，新对象可以调用已有对象的功能，它有以下优点：</p>\n<ol>\n<li>它维持了类的封装性。因为成分对象的内部细节是新对象看不见的，所以这种复用又称为 “黑箱” 复用。</li>\n<li>对象间的耦合度低。可以在类的成员位置声明抽象。</li>\n<li>复用的灵活性高。这种复用可以在运行时动态进行，新对象可以动态地引用与成分对象类型相同的对象。</li>\n</ol>\n<p>下面看一个例子来理解合成复用原则</p>\n<p>【例】汽车分类管理程序</p>\n<p>汽车按 “动力源” 划分可分为汽油汽车、电动汽车等；按 “颜色” 划分可分为白色汽车、黑色汽车和红色汽车等。如果同时考虑这两种分类，其组合就很多。类图如下：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420230021873.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p>从上面类图我们可以看到使用继承复用产生了很多子类，如果现在又有新的动力源或者新的颜色的话，就需要再定义新的类。我们试着将继承复用改为聚合复用看一下。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420230052402.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<h1 id=\"4创建型模式\"><a class=\"markdownIt-Anchor\" href=\"#4创建型模式\">#</a> 4，创建型模式</h1>\n<p>创建型模式的主要关注点是 “怎样创建对象？”，它的主要特点是 “将对象的创建与使用分离”。</p>\n<p>这样可以降低系统的耦合度，使用者不需要关注对象的创建细节。</p>\n<p>创建型模式分为：</p>\n<ul>\n<li>单例模式</li>\n<li>工厂方法模式</li>\n<li>抽象工程模式</li>\n<li>原型模式</li>\n<li>建造者模式</li>\n</ul>\n<h2 id=\"41-单例设计模式\"><a class=\"markdownIt-Anchor\" href=\"#41-单例设计模式\">#</a> 4.1 单例设计模式</h2>\n<p>单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p>\n<p>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p>\n<h3 id=\"411-单例模式的结构\"><a class=\"markdownIt-Anchor\" href=\"#411-单例模式的结构\">#</a> 4.1.1 单例模式的结构</h3>\n<p>单例模式的主要有以下角色：</p>\n<ul>\n<li>单例类。只能创建一个实例的类</li>\n<li>访问类。使用单例类</li>\n</ul>\n<h3 id=\"412-单例模式的实现\"><a class=\"markdownIt-Anchor\" href=\"#412-单例模式的实现\">#</a> 4.1.2 单例模式的实现</h3>\n<blockquote>\n<p>单例设计模式分类两种：</p>\n<p>饿汉式：类加载就会导致该单实例对象被创建</p>\n<p>懒汉式：类加载不会导致该单实例对象被创建，而是首次使用该对象时才会创建</p>\n</blockquote>\n<ol>\n<li>\n<p>饿汉式 - 方式 1（静态变量方式）</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 饿汉式</span></span><br><span class=\"line\"><span class=\"comment\"> *      静态变量创建类的对象</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//私有构造方法</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span><span class=\"params\">()</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//在成员位置创建该类的对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">Singleton</span> <span class=\"variable\">instance</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//对外提供静态方法获取该对象</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p><font color='red'>说明：</font></p>\n<p>该方式在成员位置声明 Singleton 类型的静态变量，并创建 Singleton 类的对象 instance。instance 对象是随着类的加载而创建的。如果该对象足够大的话，而一直没有使用就会造成内存的浪费。</p>\n</li>\n<li>\n<p>饿汉式 - 方式 2（静态代码块方式）</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 恶汉式</span></span><br><span class=\"line\"><span class=\"comment\"> *      在静态代码块中创建该类对象</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//私有构造方法</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span><span class=\"params\">()</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//在成员位置创建该类的对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        instance = <span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//对外提供静态方法获取该对象</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p><font color='red'>说明：</font></p>\n<p>该方式在成员位置声明 Singleton 类型的静态变量，而对象的创建是在静态代码块中，也是对着类的加载而创建。所以和饿汉式的方式 1 基本上一样，当然该方式也存在内存浪费问题。</p>\n</li>\n<li>\n<p>懒汉式 - 方式 1（线程不安全）</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 懒汉式</span></span><br><span class=\"line\"><span class=\"comment\"> *  线程不安全</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//私有构造方法</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span><span class=\"params\">()</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//在成员位置创建该类的对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//对外提供静态方法获取该对象</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(instance == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p><font color='red'>说明：</font></p>\n<p>从上面代码我们可以看出该方式在成员位置声明 Singleton 类型的静态变量，并没有进行对象的赋值操作，那么什么时候赋值的呢？当调用 getInstance () 方法获取 Singleton 类的对象的时候才创建 Singleton 类的对象，这样就实现了懒加载的效果。但是，如果是多线程环境，会出现线程安全问题。</p>\n</li>\n<li>\n<p>懒汉式 - 方式 2（线程安全）</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 懒汉式</span></span><br><span class=\"line\"><span class=\"comment\"> *  线程安全</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//私有构造方法</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span><span class=\"params\">()</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//在成员位置创建该类的对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//对外提供静态方法获取该对象</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> Singleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(instance == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p><font color='red'>说明：</font></p>\n<p>该方式也实现了懒加载效果，同时又解决了线程安全问题。但是在 getInstance () 方法上添加了 synchronized 关键字，导致该方法的执行效果特别低。从上面代码我们可以看出，其实就是在初始化 instance 的时候才会出现线程安全问题，一旦初始化完成就不存在了。</p>\n</li>\n<li>\n<p>懒汉式 - 方式 3（双重检查锁）</p>\n<p>再来讨论一下懒汉模式中加锁的问题，对于  <code>getInstance()</code>  方法来说，绝大部分的操作都是读操作，读操作是线程安全的，所以我们没必让每个线程必须持有锁才能调用该方法，我们需要调整加锁的时机。由此也产生了一种新的实现模式：双重检查锁模式</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 双重检查方式</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span> &#123; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//私有构造方法</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span><span class=\"params\">()</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//对外提供静态方法获取该对象</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//第一次判断，如果instance不为null，不进入抢锁阶段，直接返回实例</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(instance == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (Singleton.class) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//抢到锁之后再次判断是否为null</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(instance == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    instance = <span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>双重检查锁模式是一种非常好的单例实现模式，解决了单例、性能、线程安全问题，上面的双重检测锁模式看上去完美无缺，其实是存在问题，在多线程的情况下，可能会出现空指针问题，出现问题的原因是 JVM 在实例化对象的时候会进行优化和指令重排序操作。</p>\n<p>要解决双重检查锁模式带来空指针异常的问题，只需要使用  <code>volatile</code>  关键字， <code>volatile</code>  关键字可以保证可见性和有序性。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 双重检查方式</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//私有构造方法</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span><span class=\"params\">()</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> Singleton instance;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//对外提供静态方法获取该对象</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//第一次判断，如果instance不为null，不进入抢锁阶段，直接返回实际</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(instance == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (Singleton.class) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//抢到锁之后再次判断是否为空</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(instance == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    instance = <span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p><font color=\"red\">小结：</font></p>\n<p>添加  <code>volatile</code>  关键字之后的双重检查锁模式是一种比较好的单例实现模式，能够保证在多线程的情况下线程安全也不会有性能问题。</p>\n</li>\n<li>\n<p>懒汉式 - 方式 4（静态内部类方式）</p>\n<p>静态内部类单例模式中实例由内部类创建，由于 JVM 在加载外部类的过程中，是不会加载静态内部类的，只有内部类的属性 / 方法被调用时才会被加载，并初始化其静态属性。静态属性由于被  <code>static</code>  修饰，保证只被实例化一次，并且严格保证实例化顺序。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 静态内部类方式</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//私有构造方法</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span><span class=\"params\">()</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SingletonHolder</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Singleton</span> <span class=\"variable\">INSTANCE</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//对外提供静态方法获取该对象</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> SingletonHolder.INSTANCE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p><font color='red'>说明：</font></p>\n<p>第一次加载 Singleton 类时不会去初始化 INSTANCE，只有第一次调用 getInstance，虚拟机加载 SingletonHolder</p>\n<p>并初始化 INSTANCE，这样不仅能确保线程安全，也能保证 Singleton 类的唯一性。</p>\n<p><font color=\"red\">小结：</font></p>\n<p>静态内部类单例模式是一种优秀的单例模式，是开源项目中比较常用的一种单例模式。在没有加任何锁的情况下，保证了多线程下的安全，并且没有任何性能影响和空间的浪费。</p>\n</li>\n<li>\n<p>枚举方式</p>\n<p>枚举类实现单例模式是极力推荐的单例实现模式，因为枚举类型是线程安全的，并且只会装载一次，设计者充分的利用了枚举的这个特性来实现单例模式，枚举的写法非常简单，而且枚举类型是所用单例实现中唯一一种不会被破坏的单例实现模式。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 枚举方式</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">Singleton</span> &#123;</span><br><span class=\"line\">    INSTANCE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p><font color='red'>说明：</font></p>\n<p>枚举方式属于恶汉式方式。</p>\n</li>\n</ol>\n<h3 id=\"413-存在的问题\"><a class=\"markdownIt-Anchor\" href=\"#413-存在的问题\">#</a> 4.1.3 存在的问题</h3>\n<h4 id=\"4131-问题演示\"><a class=\"markdownIt-Anchor\" href=\"#4131-问题演示\">#</a> 4.1.3.1 问题演示</h4>\n<p>破坏单例模式：</p>\n<p>使上面定义的单例类（Singleton）可以创建多个对象，枚举方式除外。有两种方式，分别是序列化和反射。</p>\n<ul>\n<li>\n<p>序列化反序列化</p>\n<p><strong>Singleton 类：</strong></p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//私有构造方法</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span><span class=\"params\">()</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SingletonHolder</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Singleton</span> <span class=\"variable\">INSTANCE</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//对外提供静态方法获取该对象</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> SingletonHolder.INSTANCE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p><strong>Test 类：</strong></p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">//往文件中写对象</span></span><br><span class=\"line\">        <span class=\"comment\">//writeObject2File();</span></span><br><span class=\"line\">        <span class=\"comment\">//从文件中读取对象</span></span><br><span class=\"line\">        <span class=\"type\">Singleton</span> <span class=\"variable\">s1</span> <span class=\"operator\">=</span> readObjectFromFile();</span><br><span class=\"line\">        <span class=\"type\">Singleton</span> <span class=\"variable\">s2</span> <span class=\"operator\">=</span> readObjectFromFile();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//判断两个反序列化后的对象是否是同一个对象</span></span><br><span class=\"line\">        System.out.println(s1 == s2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton <span class=\"title function_\">readObjectFromFile</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建对象输入流对象</span></span><br><span class=\"line\">        <span class=\"type\">ObjectInputStream</span> <span class=\"variable\">ois</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;C:\\\\Users\\\\Think\\\\Desktop\\\\a.txt&quot;</span>));</span><br><span class=\"line\">        <span class=\"comment\">//第一个读取Singleton对象</span></span><br><span class=\"line\">        <span class=\"type\">Singleton</span> <span class=\"variable\">instance</span> <span class=\"operator\">=</span> (Singleton) ois.readObject();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">writeObject2File</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取Singleton类的对象</span></span><br><span class=\"line\">        <span class=\"type\">Singleton</span> <span class=\"variable\">instance</span> <span class=\"operator\">=</span> Singleton.getInstance();</span><br><span class=\"line\">        <span class=\"comment\">//创建对象输出流</span></span><br><span class=\"line\">        <span class=\"type\">ObjectOutputStream</span> <span class=\"variable\">oos</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectOutputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;C:\\\\Users\\\\Think\\\\Desktop\\\\a.txt&quot;</span>));</span><br><span class=\"line\">        <span class=\"comment\">//将instance对象写出到文件中</span></span><br><span class=\"line\">        oos.writeObject(instance);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<blockquote>\n<p>上面代码运行结果是 <code>false</code> ，表明序列化和反序列化已经破坏了单例设计模式。</p>\n</blockquote>\n</li>\n<li>\n<p>反射</p>\n<p><strong>Singleton 类：</strong></p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//私有构造方法</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span><span class=\"params\">()</span> &#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> Singleton instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//对外提供静态方法获取该对象</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(instance != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (Singleton.class) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(instance != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p><strong>Test 类：</strong></p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取Singleton类的字节码对象</span></span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">clazz</span> <span class=\"operator\">=</span> Singleton.class;</span><br><span class=\"line\">        <span class=\"comment\">//获取Singleton类的私有无参构造方法对象</span></span><br><span class=\"line\">        <span class=\"type\">Constructor</span> <span class=\"variable\">constructor</span> <span class=\"operator\">=</span> clazz.getDeclaredConstructor();</span><br><span class=\"line\">        <span class=\"comment\">//取消访问检查</span></span><br><span class=\"line\">        constructor.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建Singleton类的对象s1</span></span><br><span class=\"line\">        <span class=\"type\">Singleton</span> <span class=\"variable\">s1</span> <span class=\"operator\">=</span> (Singleton) constructor.newInstance();</span><br><span class=\"line\">        <span class=\"comment\">//创建Singleton类的对象s2</span></span><br><span class=\"line\">        <span class=\"type\">Singleton</span> <span class=\"variable\">s2</span> <span class=\"operator\">=</span> (Singleton) constructor.newInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//判断通过反射创建的两个Singleton对象是否是同一个对象</span></span><br><span class=\"line\">        System.out.println(s1 == s2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<blockquote>\n<p>上面代码运行结果是 <code>false</code> ，表明序列化和反序列化已经破坏了单例设计模式</p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p><font color=\"red\">注意：</font>枚举方式不会出现这两个问题。</p>\n</blockquote>\n<h4 id=\"4132-问题的解决\"><a class=\"markdownIt-Anchor\" href=\"#4132-问题的解决\">#</a> 4.1.3.2 问题的解决</h4>\n<ul>\n<li>\n<p>序列化、反序列方式破坏单例模式的解决方法</p>\n<p>在 Singleton 类中添加 <code>readResolve()</code>  方法，在反序列化时被反射调用，如果定义了这个方法，就返回这个方法的值，如果没有定义，则返回新 new 出来的对象。</p>\n<p><strong>Singleton 类：</strong></p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//私有构造方法</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span><span class=\"params\">()</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SingletonHolder</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Singleton</span> <span class=\"variable\">INSTANCE</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//对外提供静态方法获取该对象</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> SingletonHolder.INSTANCE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 下面是为了解决序列化反序列化破解单例模式</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object <span class=\"title function_\">readResolve</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> SingletonHolder.INSTANCE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p><strong>源码解析：</strong></p>\n<p>ObjectInputStream 类</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Object <span class=\"title function_\">readObject</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException, ClassNotFoundException&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">// if nested read, passHandle contains handle of enclosing object</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">outerHandle</span> <span class=\"operator\">=</span> passHandle;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> readObject0(<span class=\"literal\">false</span>);<span class=\"comment\">//重点查看readObject0方法</span></span><br><span class=\"line\">    .....</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">private</span> Object <span class=\"title function_\">readObject0</span><span class=\"params\">(<span class=\"type\">boolean</span> unshared)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (tc) &#123;</span><br><span class=\"line\">\t\t\t...</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> TC_OBJECT:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> checkResolve(readOrdinaryObject(unshared));<span class=\"comment\">//重点查看readOrdinaryObject方法</span></span><br><span class=\"line\">\t\t\t...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        depth--;</span><br><span class=\"line\">        bin.setBlockDataMode(oldMode);</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">private</span> Object <span class=\"title function_\">readOrdinaryObject</span><span class=\"params\">(<span class=\"type\">boolean</span> unshared)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t<span class=\"comment\">//isInstantiable 返回true，执行 desc.newInstance()，通过反射创建新的单例类，</span></span><br><span class=\"line\">    obj = desc.isInstantiable() ? desc.newInstance() : <span class=\"literal\">null</span>; </span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">// 在Singleton类中添加 readResolve 方法后 desc.hasReadResolveMethod() 方法执行结果为true</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj != <span class=\"literal\">null</span> &amp;&amp; handles.lookupException(passHandle) == <span class=\"literal\">null</span> &amp;&amp; desc.hasReadResolveMethod()) &#123;</span><br><span class=\"line\">    \t<span class=\"comment\">// 通过反射调用 Singleton 类中的 readResolve 方法，将返回值赋值给rep变量</span></span><br><span class=\"line\">    \t<span class=\"comment\">// 这样多次调用ObjectInputStream类中的readObject方法，继而就会调用我们定义的readResolve方法，所以返回的是同一个对象。</span></span><br><span class=\"line\">    \t<span class=\"type\">Object</span> <span class=\"variable\">rep</span> <span class=\"operator\">=</span> desc.invokeReadResolve(obj);</span><br><span class=\"line\">     \t...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n</li>\n<li>\n<p>反射方式破解单例的解决方法</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//私有构造方法</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">           反射破解单例模式需要添加的代码</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(instance != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> Singleton instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//对外提供静态方法获取该对象</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(instance != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (Singleton.class) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(instance != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p><font color=\"red\">说明:</font></p>\n<p>这种方式比较好理解。当通过反射方式调用构造方法进行创建创建时，直接抛异常。不运行此中操作。</p>\n</li>\n</ul>\n<h3 id=\"414-jdk源码解析-runtime类\"><a class=\"markdownIt-Anchor\" href=\"#414-jdk源码解析-runtime类\">#</a> 4.1.4 JDK 源码解析 - Runtime 类</h3>\n<p>Runtime 类就是使用的单例设计模式。</p>\n<ol>\n<li>\n<p>通过源代码查看使用的是哪儿种单例模式</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Runtime</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">Runtime</span> <span class=\"variable\">currentRuntime</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Runtime</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns the runtime object associated with the current Java application.</span></span><br><span class=\"line\"><span class=\"comment\">     * Most of the methods of class &lt;code&gt;Runtime&lt;/code&gt; are instance</span></span><br><span class=\"line\"><span class=\"comment\">     * methods and must be invoked with respect to the current runtime object.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span>  the &lt;code&gt;Runtime&lt;/code&gt; object associated with the current</span></span><br><span class=\"line\"><span class=\"comment\">     *          Java application.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Runtime <span class=\"title function_\">getRuntime</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> currentRuntime;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** Don&#x27;t let anyone else instantiate this class */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Runtime</span><span class=\"params\">()</span> &#123;&#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>从上面源代码中可以看出 Runtime 类使用的是恶汉式（静态属性）方式来实现单例模式的。</p>\n</li>\n<li>\n<p>使用 Runtime 类中的方法</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RuntimeDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取Runtime类对象</span></span><br><span class=\"line\">        <span class=\"type\">Runtime</span> <span class=\"variable\">runtime</span> <span class=\"operator\">=</span> Runtime.getRuntime();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//返回 Java 虚拟机中的内存总量。</span></span><br><span class=\"line\">        System.out.println(runtime.totalMemory());</span><br><span class=\"line\">        <span class=\"comment\">//返回 Java 虚拟机试图使用的最大内存量。</span></span><br><span class=\"line\">        System.out.println(runtime.maxMemory());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建一个新的进程执行指定的字符串命令，返回进程对象</span></span><br><span class=\"line\">        <span class=\"type\">Process</span> <span class=\"variable\">process</span> <span class=\"operator\">=</span> runtime.exec(<span class=\"string\">&quot;ipconfig&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//获取命令执行后的结果，通过输入流获取</span></span><br><span class=\"line\">        <span class=\"type\">InputStream</span> <span class=\"variable\">inputStream</span> <span class=\"operator\">=</span> process.getInputStream();</span><br><span class=\"line\">        <span class=\"type\">byte</span>[] arr = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">1024</span> * <span class=\"number\">1024</span>* <span class=\"number\">100</span>];</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> inputStream.read(arr);</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(arr,<span class=\"number\">0</span>,b,<span class=\"string\">&quot;gbk&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n</li>\n</ol>\n<h2 id=\"42-工厂模式\"><a class=\"markdownIt-Anchor\" href=\"#42-工厂模式\">#</a> 4.2 工厂模式</h2>\n<h3 id=\"421-概述\"><a class=\"markdownIt-Anchor\" href=\"#421-概述\">#</a> 4.2.1 概述</h3>\n<p>需求：设计一个咖啡店点餐系统。</p>\n<p>设计一个咖啡类（Coffee），并定义其两个子类（美式咖啡【AmericanCoffee】和拿铁咖啡【LatteCoffee】）；再设计一个咖啡店类（CoffeeStore），咖啡店具有点咖啡的功能。</p>\n<p>具体类的设计如下：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420230134217.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p>在 java 中，万物皆对象，这些对象都需要创建，如果创建的时候直接 new 该对象，就会对该对象耦合严重，假如我们要更换对象，所有 new 对象的地方都需要修改一遍，这显然违背了软件设计的开闭原则。如果我们使用工厂来生产对象，我们就只和工厂打交道就可以了，彻底和对象解耦，如果要更换对象，直接在工厂里更换该对象即可，达到了与对象解耦的目的；所以说，工厂模式最大的优点就是：<strong>解耦</strong>。</p>\n<p>在本教程中会介绍三种工厂的使用</p>\n<ul>\n<li>简单工厂模式（不属于 GOF 的 23 种经典设计模式）</li>\n<li>工厂方法模式</li>\n<li>抽象工厂模式</li>\n</ul>\n<h3 id=\"422-简单工厂模式\"><a class=\"markdownIt-Anchor\" href=\"#422-简单工厂模式\">#</a> 4.2.2 简单工厂模式</h3>\n<p>简单工厂不是一种设计模式，反而比较像是一种编程习惯。</p>\n<h4 id=\"4221-结构\"><a class=\"markdownIt-Anchor\" href=\"#4221-结构\">#</a> 4.2.2.1 结构</h4>\n<p>简单工厂包含如下角色：</p>\n<ul>\n<li>抽象产品 ：定义了产品的规范，描述了产品的主要特性和功能。</li>\n<li>具体产品 ：实现或者继承抽象产品的子类</li>\n<li>具体工厂 ：提供了创建产品的方法，调用者通过该方法来获取产品。</li>\n</ul>\n<h4 id=\"4222-实现\"><a class=\"markdownIt-Anchor\" href=\"#4222-实现\">#</a> 4.2.2.2 实现</h4>\n<p>现在使用简单工厂对上面案例进行改进，类图如下：<br>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420230250942.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p>工厂类代码如下：</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SimpleCoffeeFactory</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Coffee <span class=\"title function_\">createCoffee</span><span class=\"params\">(String type)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Coffee</span> <span class=\"variable\">coffee</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"string\">&quot;americano&quot;</span>.equals(type)) &#123;</span><br><span class=\"line\">            coffee = <span class=\"keyword\">new</span> <span class=\"title class_\">AmericanoCoffee</span>();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"string\">&quot;latte&quot;</span>.equals(type)) &#123;</span><br><span class=\"line\">            coffee = <span class=\"keyword\">new</span> <span class=\"title class_\">LatteCoffee</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> coffee;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>工厂（factory）处理创建对象的细节，一旦有了 SimpleCoffeeFactory，CoffeeStore 类中的 orderCoffee () 就变成此对象的客户，后期如果需要 Coffee 对象直接从工厂中获取即可。这样也就解除了和 Coffee 实现类的耦合，同时又产生了新的耦合，CoffeeStore 对象和 SimpleCoffeeFactory 工厂对象的耦合，工厂对象和商品对象的耦合。</p>\n<p>后期如果再加新品种的咖啡，我们势必要需求修改 SimpleCoffeeFactory 的代码，违反了开闭原则。工厂类的客户端可能有很多，比如创建美团外卖等，这样只需要修改工厂类的代码，省去其他的修改操作。</p>\n<h4 id=\"4224-优缺点\"><a class=\"markdownIt-Anchor\" href=\"#4224-优缺点\">#</a> 4.2.2.4 优缺点</h4>\n<p><strong>优点：</strong></p>\n<p>封装了创建对象的过程，可以通过参数直接获取对象。把对象的创建和业务逻辑层分开，这样以后就避免了修改客户代码，如果要实现新产品直接修改工厂类，而不需要在原代码中修改，这样就降低了客户代码修改的可能性，更加容易扩展。</p>\n<p><strong>缺点：</strong></p>\n<p>增加新产品时还是需要修改工厂类的代码，违背了 “开闭原则”。</p>\n<h4 id=\"4223-扩展\"><a class=\"markdownIt-Anchor\" href=\"#4223-扩展\">#</a> 4.2.2.3 扩展</h4>\n<p><strong>静态工厂</strong></p>\n<p>在开发中也有一部分人将工厂类中的创建对象的功能定义为静态的，这个就是静态工厂模式，它也不是 23 种设计模式中的。代码如下：</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SimpleCoffeeFactory</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Coffee <span class=\"title function_\">createCoffee</span><span class=\"params\">(String type)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Coffee</span> <span class=\"variable\">coffee</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"string\">&quot;americano&quot;</span>.equals(type)) &#123;</span><br><span class=\"line\">            coffee = <span class=\"keyword\">new</span> <span class=\"title class_\">AmericanoCoffee</span>();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"string\">&quot;latte&quot;</span>.equals(type)) &#123;</span><br><span class=\"line\">            coffee = <span class=\"keyword\">new</span> <span class=\"title class_\">LatteCoffee</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> coffe;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"423-工厂方法模式\"><a class=\"markdownIt-Anchor\" href=\"#423-工厂方法模式\">#</a> 4.2.3 工厂方法模式</h3>\n<p>针对上例中的缺点，使用工厂方法模式就可以完美的解决，完全遵循开闭原则。</p>\n<h4 id=\"4231-概念\"><a class=\"markdownIt-Anchor\" href=\"#4231-概念\">#</a> 4.2.3.1 概念</h4>\n<p>定义一个用于创建对象的接口，让子类决定实例化哪个产品类对象。工厂方法使一个产品类的实例化延迟到其工厂的子类。</p>\n<h4 id=\"4232-结构\"><a class=\"markdownIt-Anchor\" href=\"#4232-结构\">#</a> 4.2.3.2 结构</h4>\n<p>工厂方法模式的主要角色：</p>\n<ul>\n<li>抽象工厂（Abstract Factory）：提供了创建产品的接口，调用者通过它访问具体工厂的工厂方法来创建产品。</li>\n<li>具体工厂（ConcreteFactory）：主要是实现抽象工厂中的抽象方法，完成具体产品的创建。</li>\n<li>抽象产品（Product）：定义了产品的规范，描述了产品的主要特性和功能。</li>\n<li>具体产品（ConcreteProduct）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它同具体工厂之间一一对应。</li>\n</ul>\n<h4 id=\"4233-实现\"><a class=\"markdownIt-Anchor\" href=\"#4233-实现\">#</a> 4.2.3.3 实现</h4>\n<p>使用工厂方法模式对上例进行改进，类图如下：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420230327522.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p>代码如下：</p>\n<p>抽象工厂：</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">CoffeeFactory</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Coffee <span class=\"title function_\">createCoffee</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>具体工厂：</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LatteCoffeeFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">CoffeeFactory</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Coffee <span class=\"title function_\">createCoffee</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LatteCoffee</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AmericanCoffeeFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">CoffeeFactory</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Coffee <span class=\"title function_\">createCoffee</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AmericanCoffee</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>咖啡店类：</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CoffeeStore</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> CoffeeFactory factory;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">CoffeeStore</span><span class=\"params\">(CoffeeFactory factory)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.factory = factory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Coffee <span class=\"title function_\">orderCoffee</span><span class=\"params\">(String type)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Coffee</span> <span class=\"variable\">coffee</span> <span class=\"operator\">=</span> factory.createCoffee();</span><br><span class=\"line\">        coffee.addMilk();</span><br><span class=\"line\">        coffee.addsugar();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> coffee;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>从以上的编写的代码可以看到，要增加产品类时也要相应地增加工厂类，不需要修改工厂类的代码了，这样就解决了简单工厂模式的缺点。</p>\n<p>工厂方法模式是简单工厂模式的进一步抽象。由于使用了多态性，工厂方法模式保持了简单工厂模式的优点，而且克服了它的缺点。</p>\n<h4 id=\"4234-优缺点\"><a class=\"markdownIt-Anchor\" href=\"#4234-优缺点\">#</a> 4.2.3.4 优缺点</h4>\n<p><strong>优点：</strong></p>\n<ul>\n<li>用户只需要知道具体工厂的名称就可得到所要的产品，无须知道产品的具体创建过程；</li>\n<li>在系统增加新的产品时只需要添加具体产品类和对应的具体工厂类，无须对原工厂进行任何修改，满足开闭原则；</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>每增加一个产品就要增加一个具体产品类和一个对应的具体工厂类，这增加了系统的复杂度。</li>\n</ul>\n<h3 id=\"424-抽象工厂模式\"><a class=\"markdownIt-Anchor\" href=\"#424-抽象工厂模式\">#</a> 4.2.4 抽象工厂模式</h3>\n<p>前面介绍的工厂方法模式中考虑的是一类产品的生产，如畜牧场只养动物、电视机厂只生产电视机、传智播客只培养计算机软件专业的学生等。</p>\n<p>这些工厂只生产同种类产品，同种类产品称为同等级产品，也就是说：工厂方法模式只考虑生产同等级的产品，但是在现实生活中许多工厂是综合型的工厂，能生产多等级（种类） 的产品，如电器厂既生产电视机又生产洗衣机或空调，大学既有软件专业又有生物专业等。</p>\n<p>本节要介绍的抽象工厂模式将考虑多等级产品的生产，将同一个具体工厂所生产的位于不同等级的一组产品称为一个产品族，下图所示横轴是产品等级，也就是同一类产品；纵轴是产品族，也就是同一品牌的产品，同一品牌的产品产自同一个工厂。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420230400215.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420230428784.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<h4 id=\"4241-概念\"><a class=\"markdownIt-Anchor\" href=\"#4241-概念\">#</a> 4.2.4.1 概念</h4>\n<p>是一种为访问类提供一个创建一组相关或相互依赖对象的接口，且访问类无须指定所要产品的具体类就能得到同族的不同等级的产品的模式结构。</p>\n<p>抽象工厂模式是工厂方法模式的升级版本，工厂方法模式只生产一个等级的产品，而抽象工厂模式可生产多个等级的产品。</p>\n<h4 id=\"4242-结构\"><a class=\"markdownIt-Anchor\" href=\"#4242-结构\">#</a> 4.2.4.2 结构</h4>\n<p>抽象工厂模式的主要角色如下：</p>\n<ul>\n<li>抽象工厂（Abstract Factory）：提供了创建产品的接口，它包含多个创建产品的方法，可以创建多个不同等级的产品。</li>\n<li>具体工厂（Concrete Factory）：主要是实现抽象工厂中的多个抽象方法，完成具体产品的创建。</li>\n<li>抽象产品（Product）：定义了产品的规范，描述了产品的主要特性和功能，抽象工厂模式有多个抽象产品。</li>\n<li>具体产品（ConcreteProduct）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它 同具体工厂之间是多对一的关系。</li>\n</ul>\n<h4 id=\"4242-实现\"><a class=\"markdownIt-Anchor\" href=\"#4242-实现\">#</a> 4.2.4.2 实现</h4>\n<p>现咖啡店业务发生改变，不仅要生产咖啡还要生产甜点，如提拉米苏、抹茶慕斯等，要是按照工厂方法模式，需要定义提拉米苏类、抹茶慕斯类、提拉米苏工厂、抹茶慕斯工厂、甜点工厂类，很容易发生类爆炸情况。其中拿铁咖啡、美式咖啡是一个产品等级，都是咖啡；提拉米苏、抹茶慕斯也是一个产品等级；拿铁咖啡和提拉米苏是同一产品族（也就是都属于意大利风味），美式咖啡和抹茶慕斯是同一产品族（也就是都属于美式风味）。所以这个案例可以使用抽象工厂模式实现。类图如下：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420230453918.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p>代码如下：</p>\n<p>抽象工厂：</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">DessertFactory</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Coffee <span class=\"title function_\">createCoffee</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Dessert <span class=\"title function_\">createDessert</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>具体工厂：</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//美式甜点工厂</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AmericanDessertFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">DessertFactory</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Coffee <span class=\"title function_\">createCoffee</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AmericanCoffee</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Dessert <span class=\"title function_\">createDessert</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MatchaMousse</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//意大利风味甜点工厂</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ItalyDessertFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">DessertFactory</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Coffee <span class=\"title function_\">createCoffee</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LatteCoffee</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Dessert <span class=\"title function_\">createDessert</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Tiramisu</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>如果要加同一个产品族的话，只需要再加一个对应的工厂类即可，不需要修改其他的类。</p>\n<h4 id=\"4243-优缺点\"><a class=\"markdownIt-Anchor\" href=\"#4243-优缺点\">#</a> 4.2.4.3 优缺点</h4>\n<p><strong>优点：</strong></p>\n<p>当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。</p>\n<p><strong>缺点：</strong></p>\n<p>当产品族中需要增加一个新的产品时，所有的工厂类都需要进行修改。</p>\n<h4 id=\"4244-使用场景\"><a class=\"markdownIt-Anchor\" href=\"#4244-使用场景\">#</a> 4.2.4.4 使用场景</h4>\n<ul>\n<li>\n<p>当需要创建的对象是一系列相互关联或相互依赖的产品族时，如电器工厂中的电视机、洗衣机、空调等。</p>\n</li>\n<li>\n<p>系统中有多个产品族，但每次只使用其中的某一族产品。如有人只喜欢穿某一个品牌的衣服和鞋。</p>\n</li>\n<li>\n<p>系统中提供了产品的类库，且所有产品的接口相同，客户端不依赖产品实例的创建细节和内部结构。</p>\n</li>\n</ul>\n<p>如：输入法换皮肤，一整套一起换。生成不同操作系统的程序。</p>\n<h3 id=\"425-模式扩展\"><a class=\"markdownIt-Anchor\" href=\"#425-模式扩展\">#</a> 4.2.5 模式扩展</h3>\n<p><strong>简单工厂 + 配置文件解除耦合</strong></p>\n<p>可以通过工厂模式 + 配置文件的方式解除工厂对象和产品对象的耦合。在工厂类中加载配置文件中的全类名，并创建对象进行存储，客户端如果需要对象，直接进行获取即可。</p>\n<p>第一步：定义配置文件</p>\n<p>为了演示方便，我们使用 properties 文件作为配置文件，名称为 bean.properties</p>\n<div class=\"highlight-container\" data-rel=\"Properties\"><figure class=\"iseeu highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">american</span>=<span class=\"string\">com.itheima.pattern.factory.config_factory.AmericanCoffee</span></span><br><span class=\"line\"><span class=\"attr\">latte</span>=<span class=\"string\">com.itheima.pattern.factory.config_factory.LatteCoffee</span></span><br></pre></td></tr></table></figure></div>\n<p>第二步：改进工厂类</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CoffeeFactory</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Map&lt;String,Coffee&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Properties</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Properties</span>();</span><br><span class=\"line\">        <span class=\"type\">InputStream</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> CoffeeFactory.class.getClassLoader().getResourceAsStream(<span class=\"string\">&quot;bean.properties&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            p.load(is);</span><br><span class=\"line\">            <span class=\"comment\">//遍历Properties集合对象</span></span><br><span class=\"line\">            Set&lt;Object&gt; keys = p.keySet();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Object key : keys) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//根据键获取值（全类名）</span></span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">className</span> <span class=\"operator\">=</span> p.getProperty((String) key);</span><br><span class=\"line\">                <span class=\"comment\">//获取字节码对象</span></span><br><span class=\"line\">                <span class=\"type\">Class</span> <span class=\"variable\">clazz</span> <span class=\"operator\">=</span> Class.forName(className);</span><br><span class=\"line\">                <span class=\"type\">Coffee</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> (Coffee) clazz.newInstance();</span><br><span class=\"line\">                map.put((String)key,obj);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Coffee <span class=\"title function_\">createCoffee</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> map.get(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>静态成员变量用来存储创建的对象（键存储的是名称，值存储的是对应的对象），而读取配置文件以及创建对象写在静态代码块中，目的就是只需要执行一次。</p>\n<h3 id=\"426-jdk源码解析-collectioniterator方法\"><a class=\"markdownIt-Anchor\" href=\"#426-jdk源码解析-collectioniterator方法\">#</a> 4.2.6 JDK 源码解析 - Collection.iterator 方法</h3>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        List&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        list.add(<span class=\"string\">&quot;令狐冲&quot;</span>);</span><br><span class=\"line\">        list.add(<span class=\"string\">&quot;风清扬&quot;</span>);</span><br><span class=\"line\">        list.add(<span class=\"string\">&quot;任我行&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取迭代器对象</span></span><br><span class=\"line\">        Iterator&lt;String&gt; it = list.iterator();</span><br><span class=\"line\">        <span class=\"comment\">//使用迭代器遍历</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(it.hasNext()) &#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">ele</span> <span class=\"operator\">=</span> it.next();</span><br><span class=\"line\">            System.out.println(ele);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>对上面的代码大家应该很熟，使用迭代器遍历集合，获取集合中的元素。而单列集合获取迭代器的方法就使用到了工厂方法模式。我们看通过类图看看结构：<br>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420230516219.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p>Collection 接口是抽象工厂类，ArrayList 是具体的工厂类；Iterator 接口是抽象商品类，ArrayList 类中的 Iter 内部类是具体的商品类。在具体的工厂类中 iterator () 方法创建具体的商品类的对象。</p>\n<blockquote>\n<p>另：</p>\n<p>1,DateForamt 类中的 getInstance () 方法使用的是工厂模式；</p>\n<p>2,Calendar 类中的 getInstance () 方法使用的是工厂模式；</p>\n</blockquote>\n<h2 id=\"43-原型模式\"><a class=\"markdownIt-Anchor\" href=\"#43-原型模式\">#</a> 4.3 原型模式</h2>\n<h3 id=\"431-概述\"><a class=\"markdownIt-Anchor\" href=\"#431-概述\">#</a> 4.3.1 概述</h3>\n<p>用一个已经创建的实例作为原型，通过复制该原型对象来创建一个和原型对象相同的新对象。</p>\n<h3 id=\"432-结构\"><a class=\"markdownIt-Anchor\" href=\"#432-结构\">#</a> 4.3.2 结构</h3>\n<p>原型模式包含如下角色：</p>\n<ul>\n<li>抽象原型类：规定了具体原型对象必须实现的的 clone () 方法。</li>\n<li>具体原型类：实现抽象原型类的 clone () 方法，它是可被复制的对象。</li>\n<li>访问类：使用具体原型类中的 clone () 方法来复制新的对象。</li>\n</ul>\n<p>接口类图如下：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420225344619.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<h3 id=\"433-实现\"><a class=\"markdownIt-Anchor\" href=\"#433-实现\">#</a> 4.3.3 实现</h3>\n<p>原型模式的克隆分为浅克隆和深克隆。</p>\n<blockquote>\n<p>浅克隆：创建一个新对象，新对象的属性和原来对象完全相同，对于非基本类型属性，仍指向原有属性所指向的对象的内存地址。</p>\n<p>深克隆：创建一个新对象，属性中引用的其他对象也会被克隆，不再指向原有对象地址。</p>\n</blockquote>\n<p>Java 中的 Object 类中提供了  <code>clone()</code>  方法来实现浅克隆。 Cloneable 接口是上面的类图中的抽象原型类，而实现了 Cloneable 接口的子实现类就是具体的原型类。代码如下：</p>\n<p><strong>Realizetype（具体的原型类）：</strong></p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Realizetype</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Cloneable</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Realizetype</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;具体的原型对象创建完成！&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Realizetype <span class=\"title function_\">clone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> CloneNotSupportedException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;具体原型复制成功！&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (Realizetype) <span class=\"built_in\">super</span>.clone();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p><strong>PrototypeTest（测试访问类）：</strong></p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PrototypeTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> CloneNotSupportedException &#123;</span><br><span class=\"line\">        <span class=\"type\">Realizetype</span> <span class=\"variable\">r1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Realizetype</span>();</span><br><span class=\"line\">        <span class=\"type\">Realizetype</span> <span class=\"variable\">r2</span> <span class=\"operator\">=</span> r1.clone();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;对象r1和r2是同一个对象？&quot;</span> + (r1 == r2));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"434-案例\"><a class=\"markdownIt-Anchor\" href=\"#434-案例\">#</a> 4.3.4 案例</h3>\n<p><strong>用原型模式生成 “三好学生” 奖状</strong></p>\n<p>同一学校的 “三好学生” 奖状除了获奖人姓名不同，其他都相同，可以使用原型模式复制多个 “三好学生” 奖状出来，然后在修改奖状上的名字即可。</p>\n<p>类图如下：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420230558335.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p>代码如下：</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//奖状类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Citation</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Cloneable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">show</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(name + <span class=\"string\">&quot;同学：在2020学年第一学期中表现优秀，被评为三好学生。特发此状！&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Citation <span class=\"title function_\">clone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> CloneNotSupportedException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (Citation) <span class=\"built_in\">super</span>.clone();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//测试访问类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CitationTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> CloneNotSupportedException &#123;</span><br><span class=\"line\">        <span class=\"type\">Citation</span> <span class=\"variable\">c1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Citation</span>();</span><br><span class=\"line\">        c1.setName(<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//复制奖状</span></span><br><span class=\"line\">        <span class=\"type\">Citation</span> <span class=\"variable\">c2</span> <span class=\"operator\">=</span> c1.clone();</span><br><span class=\"line\">        <span class=\"comment\">//将奖状的名字修改李四</span></span><br><span class=\"line\">        c2.setName(<span class=\"string\">&quot;李四&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        c1.show();</span><br><span class=\"line\">        c2.show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"435-使用场景\"><a class=\"markdownIt-Anchor\" href=\"#435-使用场景\">#</a> 4.3.5 使用场景</h3>\n<ul>\n<li>对象的创建非常复杂，可以使用原型模式快捷的创建对象。</li>\n<li>性能和安全要求比较高。</li>\n</ul>\n<h3 id=\"436-扩展深克隆\"><a class=\"markdownIt-Anchor\" href=\"#436-扩展深克隆\">#</a> 4.3.6 扩展（深克隆）</h3>\n<p>将上面的 “三好学生” 奖状的案例中 Citation 类的 name 属性修改为 Student 类型的属性。代码如下：</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//奖状类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Citation</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Cloneable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Student stu;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Student <span class=\"title function_\">getStu</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stu;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setStu</span><span class=\"params\">(Student stu)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.stu = stu;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">show</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(stu.getName() + <span class=\"string\">&quot;同学：在2020学年第一学期中表现优秀，被评为三好学生。特发此状！&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Citation <span class=\"title function_\">clone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> CloneNotSupportedException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (Citation) <span class=\"built_in\">super</span>.clone();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//学生类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String address;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Student</span><span class=\"params\">(String name, String address)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.address = address;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Student</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getAddress</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> address;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAddress</span><span class=\"params\">(String address)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.address = address;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//测试类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CitationTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> CloneNotSupportedException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Citation</span> <span class=\"variable\">c1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Citation</span>();</span><br><span class=\"line\">        <span class=\"type\">Student</span> <span class=\"variable\">stu</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>(<span class=\"string\">&quot;张三&quot;</span>, <span class=\"string\">&quot;西安&quot;</span>);</span><br><span class=\"line\">        c1.setStu(stu);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//复制奖状</span></span><br><span class=\"line\">        <span class=\"type\">Citation</span> <span class=\"variable\">c2</span> <span class=\"operator\">=</span> c1.clone();</span><br><span class=\"line\">        <span class=\"comment\">//获取c2奖状所属学生对象</span></span><br><span class=\"line\">        <span class=\"type\">Student</span> <span class=\"variable\">stu1</span> <span class=\"operator\">=</span> c2.getStu();</span><br><span class=\"line\">        stu1.setName(<span class=\"string\">&quot;李四&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//判断stu对象和stu1对象是否是同一个对象</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;stu和stu1是同一个对象？&quot;</span> + (stu == stu1));</span><br><span class=\"line\"></span><br><span class=\"line\">        c1.show();</span><br><span class=\"line\">        c2.show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>运行结果为：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420230626476.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p><font color=\"red\">说明：</font></p>\n<pre><code>stu对象和stu1对象是同一个对象，就会产生将stu1对象中name属性值改为“李四”，两个Citation（奖状）对象中显示的都是李四。这就是浅克隆的效果，对具体原型类（Citation）中的引用类型的属性进行引用的复制。这种情况需要使用深克隆，而进行深克隆需要使用对象流。代码如下：\n</code></pre>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CitationTest1</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">Citation</span> <span class=\"variable\">c1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Citation</span>();</span><br><span class=\"line\">        <span class=\"type\">Student</span> <span class=\"variable\">stu</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>(<span class=\"string\">&quot;张三&quot;</span>, <span class=\"string\">&quot;西安&quot;</span>);</span><br><span class=\"line\">        c1.setStu(stu);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建对象输出流对象</span></span><br><span class=\"line\">        <span class=\"type\">ObjectOutputStream</span> <span class=\"variable\">oos</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectOutputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;C:\\\\Users\\\\Think\\\\Desktop\\\\b.txt&quot;</span>));</span><br><span class=\"line\">        <span class=\"comment\">//将c1对象写出到文件中</span></span><br><span class=\"line\">        oos.writeObject(c1);</span><br><span class=\"line\">        oos.close();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建对象出入流对象</span></span><br><span class=\"line\">        <span class=\"type\">ObjectInputStream</span> <span class=\"variable\">ois</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;C:\\\\Users\\\\Think\\\\Desktop\\\\b.txt&quot;</span>));</span><br><span class=\"line\">        <span class=\"comment\">//读取对象</span></span><br><span class=\"line\">        <span class=\"type\">Citation</span> <span class=\"variable\">c2</span> <span class=\"operator\">=</span> (Citation) ois.readObject();</span><br><span class=\"line\">        <span class=\"comment\">//获取c2奖状所属学生对象</span></span><br><span class=\"line\">        <span class=\"type\">Student</span> <span class=\"variable\">stu1</span> <span class=\"operator\">=</span> c2.getStu();</span><br><span class=\"line\">        stu1.setName(<span class=\"string\">&quot;李四&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//判断stu对象和stu1对象是否是同一个对象</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;stu和stu1是同一个对象？&quot;</span> + (stu == stu1));</span><br><span class=\"line\"></span><br><span class=\"line\">        c1.show();</span><br><span class=\"line\">        c2.show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>运行结果为：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420230646842.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<blockquote>\n<p>注意：Citation 类和 Student 类必须实现 Serializable 接口，否则会抛 NotSerializableException 异常。</p>\n</blockquote>\n<h2 id=\"45-建造者模式\"><a class=\"markdownIt-Anchor\" href=\"#45-建造者模式\">#</a> 4.5 建造者模式</h2>\n<h3 id=\"441-概述\"><a class=\"markdownIt-Anchor\" href=\"#441-概述\">#</a> 4.4.1 概述</h3>\n<p>将一个复杂对象的构建与表示分离，使得同样的构建过程可以创建不同的表示。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420230712930.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<ul>\n<li>分离了部件的构造 (由 Builder 来负责) 和装配 (由 Director 负责)。 从而可以构造出复杂的对象。这个模式适用于：某个对象的构建过程复杂的情况。</li>\n<li>由于实现了构建和装配的解耦。不同的构建器，相同的装配，也可以做出不同的对象；相同的构建器，不同的装配顺序也可以做出不同的对象。也就是实现了构建算法、装配算法的解耦，实现了更好的复用。</li>\n<li>建造者模式可以将部件和其组装过程分开，一步一步创建一个复杂的对象。用户只需要指定复杂对象的类型就可以得到该对象，而无须知道其内部的具体构造细节。</li>\n</ul>\n<h3 id=\"442-结构\"><a class=\"markdownIt-Anchor\" href=\"#442-结构\">#</a> 4.4.2 结构</h3>\n<p>建造者（Builder）模式包含如下角色：</p>\n<ul>\n<li>\n<p>抽象建造者类（Builder）：这个接口规定要实现复杂对象的那些部分的创建，并不涉及具体的部件对象的创建。</p>\n</li>\n<li>\n<p>具体建造者类（ConcreteBuilder）：实现 Builder 接口，完成复杂产品的各个部件的具体创建方法。在构造过程完成后，提供产品的实例。</p>\n</li>\n<li>\n<p>产品类（Product）：要创建的复杂对象。</p>\n</li>\n<li>\n<p>指挥者类（Director）：调用具体建造者来创建复杂对象的各个部分，在指导者中不涉及具体产品的信息，只负责保证对象各部分完整创建或按某种顺序创建。</p>\n</li>\n</ul>\n<p>类图如下：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420230740577.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<h3 id=\"443-实例\"><a class=\"markdownIt-Anchor\" href=\"#443-实例\">#</a> 4.4.3 实例</h3>\n<p><strong>创建共享单车</strong></p>\n<p>生产自行车是一个复杂的过程，它包含了车架，车座等组件的生产。而车架又有碳纤维，铝合金等材质的，车座有橡胶，真皮等材质。对于自行车的生产就可以使用建造者模式。</p>\n<p>这里 Bike 是产品，包含车架，车座等组件；Builder 是抽象建造者，MobikeBuilder 和 OfoBuilder 是具体的建造者；Director 是指挥者。类图如下：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/2021042023075989.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p>具体的代码如下：</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//自行车类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Bike</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String frame;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String seat;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getFrame</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> frame;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setFrame</span><span class=\"params\">(String frame)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.frame = frame;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getSeat</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> seat;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setSeat</span><span class=\"params\">(String seat)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.seat = seat;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 抽象 builder 类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Builder</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"type\">Bike</span> <span class=\"variable\">mBike</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Bike</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">buildFrame</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">buildSeat</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Bike <span class=\"title function_\">createBike</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//摩拜单车Builder类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MobikeBuilder</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Builder</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">buildFrame</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        mBike.setFrame(<span class=\"string\">&quot;铝合金车架&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">buildSeat</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        mBike.setSeat(<span class=\"string\">&quot;真皮车座&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Bike <span class=\"title function_\">createBike</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mBike;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ofo单车Builder类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OfoBuilder</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Builder</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">buildFrame</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        mBike.setFrame(<span class=\"string\">&quot;碳纤维车架&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">buildSeat</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        mBike.setSeat(<span class=\"string\">&quot;橡胶车座&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Bike <span class=\"title function_\">createBike</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mBike;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//指挥者类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Director</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Builder mBuilder;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Director</span><span class=\"params\">(Builder builder)</span> &#123;</span><br><span class=\"line\">        mBuilder = builder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Bike <span class=\"title function_\">construct</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        mBuilder.buildFrame();</span><br><span class=\"line\">        mBuilder.buildSeat();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mBuilder.createBike();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//测试类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Client</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        showBike(<span class=\"keyword\">new</span> <span class=\"title class_\">OfoBuilder</span>());</span><br><span class=\"line\">        showBike(<span class=\"keyword\">new</span> <span class=\"title class_\">MobikeBuilder</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">showBike</span><span class=\"params\">(Builder builder)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Director</span> <span class=\"variable\">director</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Director</span>(builder);</span><br><span class=\"line\">        <span class=\"type\">Bike</span> <span class=\"variable\">bike</span> <span class=\"operator\">=</span> director.construct();</span><br><span class=\"line\">        System.out.println(bike.getFrame());</span><br><span class=\"line\">        System.out.println(bike.getSeat());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p><strong>注意：</strong></p>\n<p>上面示例是 Builder 模式的常规用法，指挥者类 Director 在建造者模式中具有很重要的作用，它用于指导具体构建者如何构建产品，控制调用先后次序，并向调用者返回完整的产品类，但是有些情况下需要简化系统结构，可以把指挥者类和抽象建造者进行结合</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 抽象 builder 类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Builder</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"type\">Bike</span> <span class=\"variable\">mBike</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Bike</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">buildFrame</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">buildSeat</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Bike <span class=\"title function_\">createBike</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> Bike <span class=\"title function_\">construct</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.buildFrame();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.BuildSeat();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.createBike();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p><strong>说明：</strong></p>\n<p>这样做确实简化了系统结构，但同时也加重了抽象建造者类的职责，也不是太符合单一职责原则，如果 construct () 过于复杂，建议还是封装到 Director 中。</p>\n<h3 id=\"444-优缺点\"><a class=\"markdownIt-Anchor\" href=\"#444-优缺点\">#</a> 4.4.4 优缺点</h3>\n<p><strong>优点：</strong></p>\n<ul>\n<li>建造者模式的封装性很好。使用建造者模式可以有效的封装变化，在使用建造者模式的场景中，一般产品类和建造者类是比较稳定的，因此，将主要的业务逻辑封装在指挥者类中对整体而言可以取得比较好的稳定性。</li>\n<li>在建造者模式中，客户端不必知道产品内部组成的细节，将产品本身与产品的创建过程解耦，使得相同的创建过程可以创建不同的产品对象。</li>\n<li>可以更加精细地控制产品的创建过程 。将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰，也更方便使用程序来控制创建过程。</li>\n<li>建造者模式很容易进行扩展。如果有新的需求，通过实现一个新的建造者类就可以完成，基本上不用修改之前已经测试通过的代码，因此也就不会对原有功能引入风险。符合开闭原则。</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<p>造者模式所创建的产品一般具有较多的共同点，其组成部分相似，如果产品之间的差异性很大，则不适合使用建造者模式，因此其使用范围受到一定的限制。</p>\n<h3 id=\"445-使用场景\"><a class=\"markdownIt-Anchor\" href=\"#445-使用场景\">#</a> 4.4.5 使用场景</h3>\n<p>建造者（Builder）模式创建的是复杂对象，其产品的各个部分经常面临着剧烈的变化，但将它们组合在一起的算法却相对稳定，所以它通常在以下场合使用。</p>\n<ul>\n<li>创建的对象较复杂，由多个部件构成，各部件面临着复杂的变化，但构件间的建造顺序是稳定的。</li>\n<li>创建复杂对象的算法独立于该对象的组成部分以及它们的装配方式，即产品的构建过程和最终的表示是独立的。</li>\n</ul>\n<h3 id=\"446-模式扩展\"><a class=\"markdownIt-Anchor\" href=\"#446-模式扩展\">#</a> 4.4.6 模式扩展</h3>\n<p>建造者模式除了上面的用途外，在开发中还有一个常用的使用方式，就是当一个类构造器需要传入很多参数时，如果创建这个类的实例，代码可读性会非常差，而且很容易引入错误，此时就可以利用建造者模式进行重构。</p>\n<p>重构前代码如下：</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Phone</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String cpu;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String screen;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String memory;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String mainboard;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Phone</span><span class=\"params\">(String cpu, String screen, String memory, String mainboard)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.cpu = cpu;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.screen = screen;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.memory = memory;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.mainboard = mainboard;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getCpu</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cpu;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setCpu</span><span class=\"params\">(String cpu)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.cpu = cpu;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getScreen</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> screen;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setScreen</span><span class=\"params\">(String screen)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.screen = screen;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getMemory</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> memory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setMemory</span><span class=\"params\">(String memory)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.memory = memory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getMainboard</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mainboard;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setMainboard</span><span class=\"params\">(String mainboard)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.mainboard = mainboard;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Phone&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;cpu=&#x27;&quot;</span> + cpu + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, screen=&#x27;&quot;</span> + screen + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, memory=&#x27;&quot;</span> + memory + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, mainboard=&#x27;&quot;</span> + mainboard + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Client</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//构建Phone对象</span></span><br><span class=\"line\">        <span class=\"type\">Phone</span> <span class=\"variable\">phone</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Phone</span>(<span class=\"string\">&quot;intel&quot;</span>,<span class=\"string\">&quot;三星屏幕&quot;</span>,<span class=\"string\">&quot;金士顿&quot;</span>,<span class=\"string\">&quot;华硕&quot;</span>);</span><br><span class=\"line\">        System.out.println(phone);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>上面在客户端代码中构建 Phone 对象，传递了四个参数，如果参数更多呢？代码的可读性及使用的成本就是比较高。</p>\n<p>重构后代码：</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Phone</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String cpu;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String screen;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String memory;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String mainboard;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Phone</span><span class=\"params\">(Builder builder)</span> &#123;</span><br><span class=\"line\">        cpu = builder.cpu;</span><br><span class=\"line\">        screen = builder.screen;</span><br><span class=\"line\">        memory = builder.memory;</span><br><span class=\"line\">        mainboard = builder.mainboard;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Builder</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String cpu;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String screen;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String memory;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String mainboard;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">Builder</span><span class=\"params\">()</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Builder <span class=\"title function_\">cpu</span><span class=\"params\">(String val)</span> &#123;</span><br><span class=\"line\">            cpu = val;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Builder <span class=\"title function_\">screen</span><span class=\"params\">(String val)</span> &#123;</span><br><span class=\"line\">            screen = val;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Builder <span class=\"title function_\">memory</span><span class=\"params\">(String val)</span> &#123;</span><br><span class=\"line\">            memory = val;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Builder <span class=\"title function_\">mainboard</span><span class=\"params\">(String val)</span> &#123;</span><br><span class=\"line\">            mainboard = val;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Phone <span class=\"title function_\">build</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Phone</span>(<span class=\"built_in\">this</span>);&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Phone&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;cpu=&#x27;&quot;</span> + cpu + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, screen=&#x27;&quot;</span> + screen + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, memory=&#x27;&quot;</span> + memory + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, mainboard=&#x27;&quot;</span> + mainboard + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Client</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Phone</span> <span class=\"variable\">phone</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Phone</span>.Builder()</span><br><span class=\"line\">                .cpu(<span class=\"string\">&quot;intel&quot;</span>)</span><br><span class=\"line\">                .mainboard(<span class=\"string\">&quot;华硕&quot;</span>)</span><br><span class=\"line\">                .memory(<span class=\"string\">&quot;金士顿&quot;</span>)</span><br><span class=\"line\">                .screen(<span class=\"string\">&quot;三星&quot;</span>)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">        System.out.println(phone);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>重构后的代码在使用起来更方便，某种程度上也可以提高开发效率。从软件设计上，对程序员的要求比较高。</p>\n<h2 id=\"46-创建者模式对比\"><a class=\"markdownIt-Anchor\" href=\"#46-创建者模式对比\">#</a> 4.6 创建者模式对比</h2>\n<h3 id=\"461-工厂方法模式vs建造者模式\"><a class=\"markdownIt-Anchor\" href=\"#461-工厂方法模式vs建造者模式\">#</a> 4.6.1 工厂方法模式 VS 建造者模式</h3>\n<p>工厂方法模式注重的是整体对象的创建方式；而建造者模式注重的是部件构建的过程，意在通过一步一步地精确构造创建出一个复杂的对象。</p>\n<p>我们举个简单例子来说明两者的差异，如要制造一个超人，如果使用工厂方法模式，直接产生出来的就是一个力大无穷、能够飞翔、内裤外穿的超人；而如果使用建造者模式，则需要组装手、头、脚、躯干等部分，然后再把内裤外穿，于是一个超人就诞生了。</p>\n<h3 id=\"462-抽象工厂模式vs建造者模式\"><a class=\"markdownIt-Anchor\" href=\"#462-抽象工厂模式vs建造者模式\">#</a> 4.6.2 抽象工厂模式 VS 建造者模式</h3>\n<p>抽象工厂模式实现对产品家族的创建，一个产品家族是这样的一系列产品：具有不同分类维度的产品组合，采用抽象工厂模式则是不需要关心构建过程，只关心什么产品由什么工厂生产即可。</p>\n<p>建造者模式则是要求按照指定的蓝图建造产品，它的主要目的是通过组装零配件而产生一个新产品。</p>\n<p>如果将抽象工厂模式看成汽车配件生产工厂，生产一个产品族的产品，那么建造者模式就是一个汽车组装工厂，通过对部件的组装可以返回一辆完整的汽车。</p>\n<h1 id=\"5结构型模式\"><a class=\"markdownIt-Anchor\" href=\"#5结构型模式\">#</a> 5，结构型模式</h1>\n<p>结构型模式描述如何将类或对象按某种布局组成更大的结构。它分为类结构型模式和对象结构型模式，前者采用继承机制来组织接口和类，后者釆用组合或聚合来组合对象。</p>\n<p>由于组合关系或聚合关系比继承关系耦合度低，满足 “合成复用原则”，所以对象结构型模式比类结构型模式具有更大的灵活性。</p>\n<p>结构型模式分为以下 7 种：</p>\n<ul>\n<li>代理模式</li>\n<li>适配器模式</li>\n<li>装饰者模式</li>\n<li>桥接模式</li>\n<li>外观模式</li>\n<li>组合模式</li>\n<li>享元模式</li>\n</ul>\n<h2 id=\"51-代理模式\"><a class=\"markdownIt-Anchor\" href=\"#51-代理模式\">#</a> 5.1 代理模式</h2>\n<h3 id=\"511-概述\"><a class=\"markdownIt-Anchor\" href=\"#511-概述\">#</a> 5.1.1 概述</h3>\n<p>由于某些原因需要给某对象提供一个代理以控制对该对象的访问。这时，访问对象不适合或者不能直接引用目标对象，代理对象作为访问对象和目标对象之间的中介。</p>\n<p>Java 中的代理按照代理类生成时机不同又分为静态代理和动态代理。静态代理代理类在编译期就生成，而动态代理代理类则是在 Java 运行时动态生成。动态代理又有 JDK 代理和 CGLib 代理两种。</p>\n<h3 id=\"512-结构\"><a class=\"markdownIt-Anchor\" href=\"#512-结构\">#</a> 5.1.2 结构</h3>\n<p>代理（Proxy）模式分为三种角色：</p>\n<ul>\n<li>抽象主题（Subject）类： 通过接口或抽象类声明真实主题和代理对象实现的业务方法。</li>\n<li>真实主题（Real Subject）类： 实现了抽象主题中的具体业务，是代理对象所代表的真实对象，是最终要引用的对象。</li>\n<li>代理（Proxy）类 ： 提供了与真实主题相同的接口，其内部含有对真实主题的引用，它可以访问、控制或扩展真实主题的功能。</li>\n</ul>\n<h3 id=\"513-静态代理\"><a class=\"markdownIt-Anchor\" href=\"#513-静态代理\">#</a> 5.1.3 静态代理</h3>\n<p>我们通过案例来感受一下静态代理。</p>\n<p>【例】火车站卖票</p>\n<p>如果要买火车票的话，需要去火车站买票，坐车到火车站，排队等一系列的操作，显然比较麻烦。而火车站在多个地方都有代售点，我们去代售点买票就方便很多了。这个例子其实就是典型的代理模式，火车站是目标对象，代售点是代理对象。类图如下：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420230823544.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p>代码如下：</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//卖票接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">SellTickets</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">sell</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//火车站  火车站具有卖票功能，所以需要实现SellTickets接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TrainStation</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">SellTickets</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sell</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;火车站卖票&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//代售点</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProxyPoint</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">SellTickets</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">TrainStation</span> <span class=\"variable\">station</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TrainStation</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sell</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;代理点收取一些服务费用&quot;</span>);</span><br><span class=\"line\">        station.sell();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//测试类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Client</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ProxyPoint</span> <span class=\"variable\">pp</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ProxyPoint</span>();</span><br><span class=\"line\">        pp.sell();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>从上面代码中可以看出测试类直接访问的是 ProxyPoint 类对象，也就是说 ProxyPoint 作为访问对象和目标对象的中介。同时也对 sell 方法进行了增强（代理点收取一些服务费用）。</p>\n<h3 id=\"514-jdk动态代理\"><a class=\"markdownIt-Anchor\" href=\"#514-jdk动态代理\">#</a> 5.1.4 JDK 动态代理</h3>\n<p>接下来我们使用动态代理实现上面案例，先说说 JDK 提供的动态代理。Java 中提供了一个动态代理类 Proxy，Proxy 并不是我们上述所说的代理对象的类，而是提供了一个创建代理对象的静态方法（newProxyInstance 方法）来获取代理对象。</p>\n<p>代码如下：</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//卖票接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">SellTickets</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">sell</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//火车站  火车站具有卖票功能，所以需要实现SellTickets接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TrainStation</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">SellTickets</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sell</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;火车站卖票&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//代理工厂，用来创建代理对象</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProxyFactory</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">TrainStation</span> <span class=\"variable\">station</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TrainStation</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> SellTickets <span class=\"title function_\">getProxyObject</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//使用Proxy获取代理对象</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            newProxyInstance()方法参数说明：</span></span><br><span class=\"line\"><span class=\"comment\">                ClassLoader loader ： 类加载器，用于加载代理类，使用真实对象的类加载器即可</span></span><br><span class=\"line\"><span class=\"comment\">                Class&lt;?&gt;[] interfaces ： 真实对象所实现的接口，代理模式真实对象和代理对象实现相同的接口</span></span><br><span class=\"line\"><span class=\"comment\">                InvocationHandler h ： 代理对象的调用处理程序</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"type\">SellTickets</span> <span class=\"variable\">sellTickets</span> <span class=\"operator\">=</span> (SellTickets) Proxy.newProxyInstance(station.getClass().getClassLoader(),</span><br><span class=\"line\">                station.getClass().getInterfaces(),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">InvocationHandler</span>() &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                        InvocationHandler中invoke方法参数说明：</span></span><br><span class=\"line\"><span class=\"comment\">                            proxy ： 代理对象</span></span><br><span class=\"line\"><span class=\"comment\">                            method ： 对应于在代理对象上调用的接口方法的 Method 实例</span></span><br><span class=\"line\"><span class=\"comment\">                            args ： 代理对象调用接口方法时传递的实际参数</span></span><br><span class=\"line\"><span class=\"comment\">                     */</span></span><br><span class=\"line\">                    <span class=\"keyword\">public</span> Object <span class=\"title function_\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        System.out.println(<span class=\"string\">&quot;代理点收取一些服务费用(JDK动态代理方式)&quot;</span>);</span><br><span class=\"line\">                        <span class=\"comment\">//执行真实对象</span></span><br><span class=\"line\">                        <span class=\"type\">Object</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> method.invoke(station, args);</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sellTickets;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//测试类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Client</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取代理对象</span></span><br><span class=\"line\">        <span class=\"type\">ProxyFactory</span> <span class=\"variable\">factory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ProxyFactory</span>();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"type\">SellTickets</span> <span class=\"variable\">proxyObject</span> <span class=\"operator\">=</span> factory.getProxyObject();</span><br><span class=\"line\">        proxyObject.sell();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p><font color=\"red\">使用了动态代理，我们思考下面问题：</font></p>\n<ul>\n<li>\n<p>ProxyFactory 是代理类吗？</p>\n<p>ProxyFactory 不是代理模式中所说的代理类，而代理类是程序在运行过程中动态的在内存中生成的类。通过阿里巴巴开源的 Java 诊断工具（Arthas【阿尔萨斯】）查看代理类的结构：</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.sun.proxy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.itheima.proxy.dynamic.jdk.SellTickets;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Proxy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.UndeclaredThrowableException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">$Proxy0</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Proxy</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">SellTickets</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Method m1;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Method m2;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Method m3;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Method m0;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> $Proxy0(InvocationHandler invocationHandler) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(invocationHandler);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            m1 = Class.forName(<span class=\"string\">&quot;java.lang.Object&quot;</span>).getMethod(<span class=\"string\">&quot;equals&quot;</span>, Class.forName(<span class=\"string\">&quot;java.lang.Object&quot;</span>));</span><br><span class=\"line\">            m2 = Class.forName(<span class=\"string\">&quot;java.lang.Object&quot;</span>).getMethod(<span class=\"string\">&quot;toString&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[<span class=\"number\">0</span>]);</span><br><span class=\"line\">            m3 = Class.forName(<span class=\"string\">&quot;com.itheima.proxy.dynamic.jdk.SellTickets&quot;</span>).getMethod(<span class=\"string\">&quot;sell&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[<span class=\"number\">0</span>]);</span><br><span class=\"line\">            m0 = Class.forName(<span class=\"string\">&quot;java.lang.Object&quot;</span>).getMethod(<span class=\"string\">&quot;hashCode&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[<span class=\"number\">0</span>]);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (NoSuchMethodException noSuchMethodException) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NoSuchMethodError</span>(noSuchMethodException.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (ClassNotFoundException classNotFoundException) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NoClassDefFoundError</span>(classNotFoundException.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">equals</span><span class=\"params\">(Object object)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (Boolean)<span class=\"built_in\">this</span>.h.invoke(<span class=\"built_in\">this</span>, m1, <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;object&#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Error | RuntimeException throwable) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> throwable;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Throwable throwable) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UndeclaredThrowableException</span>(throwable);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (String)<span class=\"built_in\">this</span>.h.invoke(<span class=\"built_in\">this</span>, m2, <span class=\"literal\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Error | RuntimeException throwable) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> throwable;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Throwable throwable) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UndeclaredThrowableException</span>(throwable);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"title function_\">hashCode</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (Integer)<span class=\"built_in\">this</span>.h.invoke(<span class=\"built_in\">this</span>, m0, <span class=\"literal\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Error | RuntimeException throwable) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> throwable;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Throwable throwable) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UndeclaredThrowableException</span>(throwable);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sell</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.h.invoke(<span class=\"built_in\">this</span>, m3, <span class=\"literal\">null</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Error | RuntimeException throwable) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> throwable;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Throwable throwable) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UndeclaredThrowableException</span>(throwable);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>从上面的类中，我们可以看到以下几个信息：</p>\n<ul>\n<li>代理类（$Proxy0）实现了 SellTickets。这也就印证了我们之前说的真实类和代理类实现同样的接口。</li>\n<li>代理类（$Proxy0）将我们提供了的匿名内部类对象传递给了父类。</li>\n</ul>\n</li>\n<li>\n<p>动态代理的执行流程是什么样？</p>\n<p>下面是摘取的重点代码：</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//程序运行过程中动态生成的代理类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">$Proxy0</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Proxy</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">SellTickets</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Method m3;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> $Proxy0(InvocationHandler invocationHandler) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(invocationHandler);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        m3 = Class.forName(<span class=\"string\">&quot;com.itheima.proxy.dynamic.jdk.SellTickets&quot;</span>).getMethod(<span class=\"string\">&quot;sell&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sell</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.h.invoke(<span class=\"built_in\">this</span>, m3, <span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Java提供的动态代理相关类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Proxy</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">java</span>.io.Serializable &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> InvocationHandler h;</span><br><span class=\"line\">\t </span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"title function_\">Proxy</span><span class=\"params\">(InvocationHandler h)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.h = h;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//代理工厂类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProxyFactory</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">TrainStation</span> <span class=\"variable\">station</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TrainStation</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> SellTickets <span class=\"title function_\">getProxyObject</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">SellTickets</span> <span class=\"variable\">sellTickets</span> <span class=\"operator\">=</span> (SellTickets) Proxy.newProxyInstance(station.getClass().getClassLoader(),</span><br><span class=\"line\">                station.getClass().getInterfaces(),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">InvocationHandler</span>() &#123;</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    <span class=\"keyword\">public</span> Object <span class=\"title function_\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        System.out.println(<span class=\"string\">&quot;代理点收取一些服务费用(JDK动态代理方式)&quot;</span>);</span><br><span class=\"line\">                        <span class=\"type\">Object</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> method.invoke(station, args);</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sellTickets;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//测试访问类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Client</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取代理对象</span></span><br><span class=\"line\">        <span class=\"type\">ProxyFactory</span> <span class=\"variable\">factory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ProxyFactory</span>();</span><br><span class=\"line\">        <span class=\"type\">SellTickets</span> <span class=\"variable\">proxyObject</span> <span class=\"operator\">=</span> factory.getProxyObject();</span><br><span class=\"line\">        proxyObject.sell();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n</li>\n</ul>\n<p>执行流程如下：</p>\n<pre><code>1. 在测试类中通过代理对象调用sell()方法\n2. 根据多态的特性，执行的是代理类（$Proxy0）中的sell()方法\n3. 代理类（$Proxy0）中的sell()方法中又调用了InvocationHandler接口的子实现类对象的invoke方法\n4. invoke方法通过反射执行了真实对象所属类(TrainStation)中的sell()方法\n</code></pre>\n<h3 id=\"515-cglib动态代理\"><a class=\"markdownIt-Anchor\" href=\"#515-cglib动态代理\">#</a> 5.1.5 CGLIB 动态代理</h3>\n<p>同样是上面的案例，我们再次使用 CGLIB 代理实现。</p>\n<p>如果没有定义 SellTickets 接口，只定义了 TrainStation (火车站类)。很显然 JDK 代理是无法使用了，因为 JDK 动态代理要求必须定义接口，对接口进行代理。</p>\n<p>CGLIB 是一个功能强大，高性能的代码生成包。它为没有实现接口的类提供代理，为 JDK 的动态代理提供了很好的补充。</p>\n<p>CGLIB 是第三方提供的包，所以需要引入 jar 包的坐标：</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>cglib<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>cglib<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n<p>代码如下：</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//火车站</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TrainStation</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sell</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;火车站卖票&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//代理工厂</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProxyFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">MethodInterceptor</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">TrainStation</span> <span class=\"variable\">target</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TrainStation</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> TrainStation <span class=\"title function_\">getProxyObject</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建Enhancer对象，类似于JDK动态代理的Proxy类，下一步就是设置几个参数</span></span><br><span class=\"line\">        <span class=\"type\">Enhancer</span> <span class=\"variable\">enhancer</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">Enhancer</span>();</span><br><span class=\"line\">        <span class=\"comment\">//设置父类的字节码对象</span></span><br><span class=\"line\">        enhancer.setSuperclass(target.getClass());</span><br><span class=\"line\">        <span class=\"comment\">//设置回调函数</span></span><br><span class=\"line\">        enhancer.setCallback(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">        <span class=\"comment\">//创建代理对象</span></span><br><span class=\"line\">        <span class=\"type\">TrainStation</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> (TrainStation) enhancer.create();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        intercept方法参数说明：</span></span><br><span class=\"line\"><span class=\"comment\">            o ： 代理对象</span></span><br><span class=\"line\"><span class=\"comment\">            method ： 真实对象中的方法的Method实例</span></span><br><span class=\"line\"><span class=\"comment\">            args ： 实际参数</span></span><br><span class=\"line\"><span class=\"comment\">            methodProxy ：代理对象中的方法的method实例</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> TrainStation <span class=\"title function_\">intercept</span><span class=\"params\">(Object o, Method method, Object[] args, MethodProxy methodProxy)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;代理点收取一些服务费用(CGLIB动态代理方式)&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">TrainStation</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> (TrainStation) methodProxy.invokeSuper(o, args);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//测试类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Client</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建代理工厂对象</span></span><br><span class=\"line\">        <span class=\"type\">ProxyFactory</span> <span class=\"variable\">factory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ProxyFactory</span>();</span><br><span class=\"line\">        <span class=\"comment\">//获取代理对象</span></span><br><span class=\"line\">        <span class=\"type\">TrainStation</span> <span class=\"variable\">proxyObject</span> <span class=\"operator\">=</span> factory.getProxyObject();</span><br><span class=\"line\"></span><br><span class=\"line\">        proxyObject.sell();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"516-三种代理的对比\"><a class=\"markdownIt-Anchor\" href=\"#516-三种代理的对比\">#</a> 5.1.6 三种代理的对比</h3>\n<ul>\n<li>\n<p>jdk 代理和 CGLIB 代理</p>\n<p>使用 CGLib 实现动态代理，CGLib 底层采用 ASM 字节码生成框架，使用字节码技术生成代理类，在 JDK1.6 之前比使用 Java 反射效率要高。唯一需要注意的是，CGLib 不能对声明为 final 的类或者方法进行代理，因为 CGLib 原理是动态生成被代理类的子类。</p>\n<p>在 JDK1.6、JDK1.7、JDK1.8 逐步对 JDK 动态代理优化之后，在调用次数较少的情况下，JDK 代理效率高于 CGLib 代理效率，只有当进行大量调用的时候，JDK1.6 和 JDK1.7 比 CGLib 代理效率低一点，但是到 JDK1.8 的时候，JDK 代理效率高于 CGLib 代理。所以如果有接口使用 JDK 动态代理，如果没有接口使用 CGLIB 代理。</p>\n</li>\n<li>\n<p>动态代理和静态代理</p>\n<p>动态代理与静态代理相比较，最大的好处是接口中声明的所有方法都被转移到调用处理器一个集中的方法中处理（InvocationHandler.invoke）。这样，在接口方法数量比较多的时候，我们可以进行灵活处理，而不需要像静态代理那样每一个方法进行中转。</p>\n<p>如果接口增加一个方法，静态代理模式除了所有实现类需要实现这个方法外，所有代理类也需要实现此方法。增加了代码维护的复杂度。而动态代理不会出现该问题</p>\n</li>\n</ul>\n<h3 id=\"517-优缺点\"><a class=\"markdownIt-Anchor\" href=\"#517-优缺点\">#</a> 5.1.7 优缺点</h3>\n<p><strong>优点：</strong></p>\n<ul>\n<li>代理模式在客户端与目标对象之间起到一个中介作用和保护目标对象的作用；</li>\n<li>代理对象可以扩展目标对象的功能；</li>\n<li>代理模式能将客户端与目标对象分离，在一定程度上降低了系统的耦合度；</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>增加了系统的复杂度；</li>\n</ul>\n<h3 id=\"518-使用场景\"><a class=\"markdownIt-Anchor\" href=\"#518-使用场景\">#</a> 5.1.8 使用场景</h3>\n<ul>\n<li>\n<p>远程（Remote）代理</p>\n<p>本地服务通过网络请求远程服务。为了实现本地到远程的通信，我们需要实现网络通信，处理其中可能的异常。为良好的代码设计和可维护性，我们将网络通信部分隐藏起来，只暴露给本地服务一个接口，通过该接口即可访问远程服务提供的功能，而不必过多关心通信部分的细节。</p>\n</li>\n<li>\n<p>防火墙（Firewall）代理</p>\n<p>当你将浏览器配置成使用代理功能时，防火墙就将你的浏览器的请求转给互联网；当互联网返回响应时，代理服务器再把它转给你的浏览器。</p>\n</li>\n<li>\n<p>保护（Protect or Access）代理</p>\n<p>控制对一个对象的访问，如果需要，可以给不同的用户提供不同级别的使用权限。</p>\n</li>\n</ul>\n<h2 id=\"52-适配器模式\"><a class=\"markdownIt-Anchor\" href=\"#52-适配器模式\">#</a> 5.2 适配器模式</h2>\n<h3 id=\"521-概述\"><a class=\"markdownIt-Anchor\" href=\"#521-概述\">#</a> 5.2.1 概述</h3>\n<p>如果去欧洲国家去旅游的话，他们的插座如下图最左边，是欧洲标准。而我们使用的插头如下图最右边的。因此我们的笔记本电脑，手机在当地不能直接充电。所以就需要一个插座转换器，转换器第 1 面插入当地的插座，第 2 面供我们充电，这样使得我们的插头在当地能使用。生活中这样的例子很多，手机充电器（将 220v 转换为 5v 的电压），读卡器等，其实就是使用到了适配器模式。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420225505709.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p><strong>定义：</strong></p>\n<pre><code>将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。\n\n适配器模式分为类适配器模式和对象适配器模式，前者类之间的耦合度比后者高，且要求程序员了解现有组件库中的相关组件的内部结构，所以应用相对较少些。\n</code></pre>\n<h3 id=\"522-结构\"><a class=\"markdownIt-Anchor\" href=\"#522-结构\">#</a> 5.2.2 结构</h3>\n<p>适配器模式（Adapter）包含以下主要角色：</p>\n<ul>\n<li>目标（Target）接口：当前系统业务所期待的接口，它可以是抽象类或接口。</li>\n<li>适配者（Adaptee）类：它是被访问和适配的现存组件库中的组件接口。</li>\n<li>适配器（Adapter）类：它是一个转换器，通过继承或引用适配者的对象，把适配者接口转换成目标接口，让客户按目标接口的格式访问适配者。</li>\n</ul>\n<h3 id=\"523-类适配器模式\"><a class=\"markdownIt-Anchor\" href=\"#523-类适配器模式\">#</a> 5.2.3 类适配器模式</h3>\n<p>实现方式：定义一个适配器类来实现当前系统的业务接口，同时又继承现有组件库中已经存在的组件。</p>\n<p>【例】读卡器</p>\n<p>现有一台电脑只能读取 SD 卡，而要读取 TF 卡中的内容的话就需要使用到适配器模式。创建一个读卡器，将 TF 卡中的内容读取出来。</p>\n<p>类图如下：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420230858629.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p>代码如下：</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//SD卡的接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">SDCard</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//读取SD卡方法</span></span><br><span class=\"line\">    String <span class=\"title function_\">readSD</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">//写入SD卡功能</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">writeSD</span><span class=\"params\">(String msg)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//SD卡实现类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SDCardImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">SDCard</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">readSD</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">msg</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;sd card read a msg :hello word SD&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">writeSD</span><span class=\"params\">(String msg)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;sd card write msg : &quot;</span> + msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//电脑类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Computer</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">readSD</span><span class=\"params\">(SDCard sdCard)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(sdCard == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NullPointerException</span>(<span class=\"string\">&quot;sd card null&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sdCard.readSD();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//TF卡接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">TFCard</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//读取TF卡方法</span></span><br><span class=\"line\">    String <span class=\"title function_\">readTF</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">//写入TF卡功能</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">writeTF</span><span class=\"params\">(String msg)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//TF卡实现类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TFCardImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">TFCard</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">readTF</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">msg</span> <span class=\"operator\">=</span><span class=\"string\">&quot;tf card read msg : hello word tf card&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">writeTF</span><span class=\"params\">(String msg)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;tf card write a msg : &quot;</span> + msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义适配器类（SD兼容TF）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SDAdapterTF</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">TFCardImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">SDCard</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">readSD</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;adapter read tf card &quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> readTF();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">writeSD</span><span class=\"params\">(String msg)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;adapter write tf card&quot;</span>);</span><br><span class=\"line\">        writeTF(msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//测试类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Client</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Computer</span> <span class=\"variable\">computer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Computer</span>();</span><br><span class=\"line\">        <span class=\"type\">SDCard</span> <span class=\"variable\">sdCard</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SDCardImpl</span>();</span><br><span class=\"line\">        System.out.println(computer.readSD(sdCard));</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;------------&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">SDAdapterTF</span> <span class=\"variable\">adapter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SDAdapterTF</span>();</span><br><span class=\"line\">        System.out.println(computer.readSD(adapter));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>类适配器模式违背了合成复用原则。类适配器是客户类有一个接口规范的情况下可用，反之不可用。</p>\n<h3 id=\"524-对象适配器模式\"><a class=\"markdownIt-Anchor\" href=\"#524-对象适配器模式\">#</a> 5.2.4 对象适配器模式</h3>\n<p>实现方式：对象适配器模式可釆用将现有组件库中已经实现的组件引入适配器类中，该类同时实现当前系统的业务接口。</p>\n<p>【例】读卡器</p>\n<p>我们使用对象适配器模式将读卡器的案例进行改写。类图如下：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420230923369.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p>代码如下：</p>\n<p>类适配器模式的代码，我们只需要修改适配器类（SDAdapterTF）和测试类。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建适配器对象（SD兼容TF）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SDAdapterTF</span>  <span class=\"keyword\">implements</span> <span class=\"title class_\">SDCard</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TFCard tfCard;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">SDAdapterTF</span><span class=\"params\">(TFCard tfCard)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.tfCard = tfCard;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">readSD</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;adapter read tf card &quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tfCard.readTF();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">writeSD</span><span class=\"params\">(String msg)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;adapter write tf card&quot;</span>);</span><br><span class=\"line\">        tfCard.writeTF(msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//测试类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Client</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Computer</span> <span class=\"variable\">computer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Computer</span>();</span><br><span class=\"line\">        <span class=\"type\">SDCard</span> <span class=\"variable\">sdCard</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SDCardImpl</span>();</span><br><span class=\"line\">        System.out.println(computer.readSD(sdCard));</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;------------&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">TFCard</span> <span class=\"variable\">tfCard</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TFCardImpl</span>();</span><br><span class=\"line\">        <span class=\"type\">SDAdapterTF</span> <span class=\"variable\">adapter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SDAdapterTF</span>(tfCard);</span><br><span class=\"line\">        System.out.println(computer.readSD(adapter));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<blockquote>\n<p>注意：还有一个适配器模式是接口适配器模式。当不希望实现一个接口中所有的方法时，可以创建一个抽象类 Adapter ，实现所有方法。而此时我们只需要继承该抽象类即可。</p>\n</blockquote>\n<h3 id=\"525-应用场景\"><a class=\"markdownIt-Anchor\" href=\"#525-应用场景\">#</a> 5.2.5 应用场景</h3>\n<ul>\n<li>以前开发的系统存在满足新系统功能需求的类，但其接口同新系统的接口不一致。</li>\n<li>使用第三方提供的组件，但组件接口定义和自己要求的接口定义不同。</li>\n</ul>\n<h3 id=\"526-jdk源码解析\"><a class=\"markdownIt-Anchor\" href=\"#526-jdk源码解析\">#</a> 5.2.6 JDK 源码解析</h3>\n<p>Reader（字符流）、InputStream（字节流）的适配使用的是 InputStreamReader。</p>\n<p>InputStreamReader 继承自 java.io 包中的 Reader，对他中的抽象的未实现的方法给出实现。如：</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">read</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sd.read();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">read</span><span class=\"params\">(<span class=\"type\">char</span> cbuf[], <span class=\"type\">int</span> offset, <span class=\"type\">int</span> length)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sd.read(cbuf, offset, length);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>如上代码中的 sd（StreamDecoder 类对象），在 Sun 的 JDK 实现中，实际的方法实现是对 sun.nio.cs.StreamDecoder 类的同名方法的调用封装。类结构图如下：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/2021042022553241.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p>从上图可以看出：</p>\n<ul>\n<li>InputStreamReader 是对同样实现了 Reader 的 StreamDecoder 的封装。</li>\n<li>StreamDecoder 不是 Java SE API 中的内容，是 Sun  JDK 给出的自身实现。但我们知道他们对构造方法中的字节流类（InputStream）进行封装，并通过该类进行了字节流和字符流之间的解码转换。</li>\n</ul>\n<p><font color=\"red\">结论：</font></p>\n<pre><code>从表层来看，InputStreamReader做了InputStream字节流类到Reader字符流之间的转换。而从如上Sun JDK中的实现类关系结构中可以看出，是StreamDecoder的设计实现在实际上采用了适配器模式。\n</code></pre>\n<h2 id=\"53-装饰者模式\"><a class=\"markdownIt-Anchor\" href=\"#53-装饰者模式\">#</a> 5.3 装饰者模式</h2>\n<h3 id=\"531-概述\"><a class=\"markdownIt-Anchor\" href=\"#531-概述\">#</a> 5.3.1 概述</h3>\n<p>我们先来看一个快餐店的例子。</p>\n<p>快餐店有炒面、炒饭这些快餐，可以额外附加鸡蛋、火腿、培根这些配菜，当然加配菜需要额外加钱，每个配菜的价钱通常不太一样，那么计算总价就会显得比较麻烦。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420231045990.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p>使用继承的方式存在的问题：</p>\n<ul>\n<li>\n<p>扩展性不好</p>\n<p>如果要再加一种配料（火腿肠），我们就会发现需要给 FriedRice 和 FriedNoodles 分别定义一个子类。如果要新增一个快餐品类（炒河粉）的话，就需要定义更多的子类。</p>\n</li>\n<li>\n<p>产生过多的子类</p>\n</li>\n</ul>\n<p><strong>定义：</strong></p>\n<pre><code>指在不改变现有对象结构的情况下，动态地给该对象增加一些职责（即增加其额外功能）的模式。\n</code></pre>\n<h3 id=\"532-结构\"><a class=\"markdownIt-Anchor\" href=\"#532-结构\">#</a> 5.3.2 结构</h3>\n<p>装饰（Decorator）模式中的角色：</p>\n<ul>\n<li>抽象构件（Component）角色 ：定义一个抽象接口以规范准备接收附加责任的对象。</li>\n<li>具体构件（Concrete  Component）角色 ：实现抽象构件，通过装饰角色为其添加一些职责。</li>\n<li>抽象装饰（Decorator）角色 ： 继承或实现抽象构件，并包含具体构件的实例，可以通过其子类扩展具体构件的功能。</li>\n<li>具体装饰（ConcreteDecorator）角色 ：实现抽象装饰的相关方法，并给具体构件对象添加附加的责任。</li>\n</ul>\n<h3 id=\"533-案例\"><a class=\"markdownIt-Anchor\" href=\"#533-案例\">#</a> 5.3.3 案例</h3>\n<p>我们使用装饰者模式对快餐店案例进行改进，体会装饰者模式的精髓。</p>\n<p>类图如下：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420231123895.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p>代码如下：</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//快餐接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FastFood</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">float</span> price;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String desc;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">FastFood</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">FastFood</span><span class=\"params\">(<span class=\"type\">float</span> price, String desc)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.price = price;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.desc = desc;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setPrice</span><span class=\"params\">(<span class=\"type\">float</span> price)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.price = price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">float</span> <span class=\"title function_\">getPrice</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getDesc</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> desc;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setDesc</span><span class=\"params\">(String desc)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.desc = desc;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"type\">float</span> <span class=\"title function_\">cost</span><span class=\"params\">()</span>;  <span class=\"comment\">//获取价格</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//炒饭</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FriedRice</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">FastFood</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">FriedRice</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(<span class=\"number\">10</span>, <span class=\"string\">&quot;炒饭&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">float</span> <span class=\"title function_\">cost</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getPrice();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//炒面</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FriedNoodles</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">FastFood</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">FriedNoodles</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(<span class=\"number\">12</span>, <span class=\"string\">&quot;炒面&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">float</span> <span class=\"title function_\">cost</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getPrice();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//配料类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Garnish</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">FastFood</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> FastFood fastFood;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> FastFood <span class=\"title function_\">getFastFood</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fastFood;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setFastFood</span><span class=\"params\">(FastFood fastFood)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.fastFood = fastFood;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Garnish</span><span class=\"params\">(FastFood fastFood, <span class=\"type\">float</span> price, String desc)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(price,desc);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.fastFood = fastFood;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//鸡蛋配料</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Egg</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Garnish</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Egg</span><span class=\"params\">(FastFood fastFood)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(fastFood,<span class=\"number\">1</span>,<span class=\"string\">&quot;鸡蛋&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">float</span> <span class=\"title function_\">cost</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getPrice() + getFastFood().getPrice();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getDesc</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.getDesc() + getFastFood().getDesc();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//培根配料</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Bacon</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Garnish</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Bacon</span><span class=\"params\">(FastFood fastFood)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">super</span>(fastFood,<span class=\"number\">2</span>,<span class=\"string\">&quot;培根&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">float</span> <span class=\"title function_\">cost</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getPrice() + getFastFood().getPrice();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getDesc</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.getDesc() + getFastFood().getDesc();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//测试类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Client</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//点一份炒饭</span></span><br><span class=\"line\">        <span class=\"type\">FastFood</span> <span class=\"variable\">food</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FriedRice</span>();</span><br><span class=\"line\">        <span class=\"comment\">//花费的价格</span></span><br><span class=\"line\">        System.out.println(food.getDesc() + <span class=\"string\">&quot; &quot;</span> + food.cost() + <span class=\"string\">&quot;元&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;========&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//点一份加鸡蛋的炒饭</span></span><br><span class=\"line\">        <span class=\"type\">FastFood</span> <span class=\"variable\">food1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FriedRice</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        food1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Egg</span>(food1);</span><br><span class=\"line\">        <span class=\"comment\">//花费的价格</span></span><br><span class=\"line\">        System.out.println(food1.getDesc() + <span class=\"string\">&quot; &quot;</span> + food1.cost() + <span class=\"string\">&quot;元&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;========&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//点一份加培根的炒面</span></span><br><span class=\"line\">        <span class=\"type\">FastFood</span> <span class=\"variable\">food2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FriedNoodles</span>();</span><br><span class=\"line\">        food2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Bacon</span>(food2);</span><br><span class=\"line\">        <span class=\"comment\">//花费的价格</span></span><br><span class=\"line\">        System.out.println(food2.getDesc() + <span class=\"string\">&quot; &quot;</span> + food2.cost() + <span class=\"string\">&quot;元&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p><strong>好处：</strong></p>\n<ul>\n<li>\n<p>饰者模式可以带来比继承更加灵活性的扩展功能，使用更加方便，可以通过组合不同的装饰者对象来获取具有不同行为状态的多样化的结果。装饰者模式比继承更具良好的扩展性，完美的遵循开闭原则，继承是静态的附加责任，装饰者则是动态的附加责任。</p>\n</li>\n<li>\n<p>装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。</p>\n</li>\n</ul>\n<h3 id=\"534-使用场景\"><a class=\"markdownIt-Anchor\" href=\"#534-使用场景\">#</a> 5.3.4 使用场景</h3>\n<ul>\n<li>\n<p>当不能采用继承的方式对系统进行扩充或者采用继承不利于系统扩展和维护时。</p>\n<p>不能采用继承的情况主要有两类：</p>\n<ul>\n<li>第一类是系统中存在大量独立的扩展，为支持每一种组合将产生大量的子类，使得子类数目呈爆炸性增长；</li>\n<li>第二类是因为类定义不能继承（如 final 类）</li>\n</ul>\n</li>\n<li>\n<p>在不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责。</p>\n</li>\n<li>\n<p>当对象的功能要求可以动态地添加，也可以再动态地撤销时。</p>\n</li>\n</ul>\n<h3 id=\"535-jdk源码解析\"><a class=\"markdownIt-Anchor\" href=\"#535-jdk源码解析\">#</a> 5.3.5 JDK 源码解析</h3>\n<p>IO 流中的包装类使用到了装饰者模式。BufferedInputStream，BufferedOutputStream，BufferedReader，BufferedWriter。</p>\n<p>我们以 BufferedWriter 举例来说明，先看看如何使用 BufferedWriter</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建BufferedWriter对象</span></span><br><span class=\"line\">        <span class=\"comment\">//创建FileWriter对象</span></span><br><span class=\"line\">        <span class=\"type\">FileWriter</span> <span class=\"variable\">fw</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileWriter</span>(<span class=\"string\">&quot;C:\\\\Users\\\\Think\\\\Desktop\\\\a.txt&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">BufferedWriter</span> <span class=\"variable\">bw</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedWriter</span>(fw);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//写数据</span></span><br><span class=\"line\">        bw.write(<span class=\"string\">&quot;hello Buffered&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        bw.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>使用起来感觉确实像是装饰者模式，接下来看它们的结构：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420231153608.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<blockquote>\n<p><font color=\"red\">小结：</font></p>\n<p>BufferedWriter 使用装饰者模式对 Writer 子实现类进行了增强，添加了缓冲区，提高了写数据的效率。</p>\n</blockquote>\n<h3 id=\"536-代理和装饰者的区别\"><a class=\"markdownIt-Anchor\" href=\"#536-代理和装饰者的区别\">#</a> 5.3.6 代理和装饰者的区别</h3>\n<p>静态代理和装饰者模式的区别：</p>\n<ul>\n<li>相同点：\n<ul>\n<li>都要实现与目标类相同的业务接口</li>\n<li>在两个类中都要声明目标对象</li>\n<li>都可以在不修改目标类的前提下增强目标方法</li>\n</ul>\n</li>\n<li>不同点：\n<ul>\n<li>目的不同<br>\n装饰者是为了增强目标对象<br>\n静态代理是为了保护和隐藏目标对象</li>\n<li>获取目标对象构建的地方不同<br>\n装饰者是由外界传递进来，可以通过构造方法传递<br>\n静态代理是在代理类内部创建，以此来隐藏目标对象</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"54-桥接模式\"><a class=\"markdownIt-Anchor\" href=\"#54-桥接模式\">#</a> 5.4 桥接模式</h2>\n<h3 id=\"541-概述\"><a class=\"markdownIt-Anchor\" href=\"#541-概述\">#</a> 5.4.1 概述</h3>\n<p>现在有一个需求，需要创建不同的图形，并且每个图形都有可能会有不同的颜色。我们可以利用继承的方式来设计类的关系：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/2021042022555665.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p>我们可以发现有很多的类，假如我们再增加一个形状或再增加一种颜色，就需要创建更多的类。</p>\n<p>试想，在一个有多种可能会变化的维度的系统中，用继承方式会造成类爆炸，扩展起来不灵活。每次在一个维度上新增一个具体实现都要增加多个子类。为了更加灵活的设计系统，我们此时可以考虑使用桥接模式。</p>\n<p><strong>定义：</strong></p>\n<pre><code>将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度。\n</code></pre>\n<h3 id=\"542-结构\"><a class=\"markdownIt-Anchor\" href=\"#542-结构\">#</a> 5.4.2 结构</h3>\n<p>桥接（Bridge）模式包含以下主要角色：</p>\n<ul>\n<li>抽象化（Abstraction）角色 ：定义抽象类，并包含一个对实现化对象的引用。</li>\n<li>扩展抽象化（Refined  Abstraction）角色 ：是抽象化角色的子类，实现父类中的业务方法，并通过组合关系调用实现化角色中的业务方法。</li>\n<li>实现化（Implementor）角色 ：定义实现化角色的接口，供扩展抽象化角色调用。</li>\n<li>具体实现化（Concrete Implementor）角色 ：给出实现化角色接口的具体实现。</li>\n</ul>\n<h3 id=\"543-案例\"><a class=\"markdownIt-Anchor\" href=\"#543-案例\">#</a> 5.4.3 案例</h3>\n<p>【例】视频播放器</p>\n<p>需要开发一个跨平台视频播放器，可以在不同操作系统平台（如 Windows、Mac、Linux 等）上播放多种格式的视频文件，常见的视频格式包括 RMVB、AVI、WMV 等。该播放器包含了两个维度，适合使用桥接模式。</p>\n<p>类图如下：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420231232717.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p>代码如下：</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//视频文件</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">VideoFile</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">decode</span><span class=\"params\">(String fileName)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//avi文件</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AVIFile</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">VideoFile</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">decode</span><span class=\"params\">(String fileName)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;avi视频文件：&quot;</span>+ fileName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//rmvb文件</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">REVBBFile</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">VideoFile</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">decode</span><span class=\"params\">(String fileName)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;rmvb文件：&quot;</span> + fileName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//操作系统版本</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OperatingSystemVersion</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> VideoFile videoFile;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">OperatingSystemVersion</span><span class=\"params\">(VideoFile videoFile)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.videoFile = videoFile;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">play</span><span class=\"params\">(String fileName)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Windows版本</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Windows</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">OperatingSystem</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Windows</span><span class=\"params\">(VideoFile videoFile)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(videoFile);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">play</span><span class=\"params\">(String fileName)</span> &#123;</span><br><span class=\"line\">        videoFile.decode(fileName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//mac版本</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Mac</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">OperatingSystemVersion</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Mac</span><span class=\"params\">(VideoFile videoFile)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(videoFile);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">play</span><span class=\"params\">(String fileName)</span> &#123;</span><br><span class=\"line\">\t\tvideoFile.decode(fileName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//测试类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Client</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">OperatingSystem</span> <span class=\"variable\">os</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Windows</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">AVIFile</span>());</span><br><span class=\"line\">        os.play(<span class=\"string\">&quot;战狼3&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p><strong>好处：</strong></p>\n<ul>\n<li>\n<p>桥接模式提高了系统的可扩充性，在两个变化维度中任意扩展一个维度，都不需要修改原有系统。</p>\n<p>如：如果现在还有一种视频文件类型 wmv，我们只需要再定义一个类实现 VideoFile 接口即可，其他类不需要发生变化。</p>\n</li>\n<li>\n<p>实现细节对客户透明</p>\n</li>\n</ul>\n<h3 id=\"544-使用场景\"><a class=\"markdownIt-Anchor\" href=\"#544-使用场景\">#</a> 5.4.4 使用场景</h3>\n<ul>\n<li>当一个类存在两个独立变化的维度，且这两个维度都需要进行扩展时。</li>\n<li>当一个系统不希望使用继承或因为多层次继承导致系统类的个数急剧增加时。</li>\n<li>当一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性时。避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系。</li>\n</ul>\n<h2 id=\"55-外观模式\"><a class=\"markdownIt-Anchor\" href=\"#55-外观模式\">#</a> 5.5 外观模式</h2>\n<h3 id=\"551-概述\"><a class=\"markdownIt-Anchor\" href=\"#551-概述\">#</a> 5.5.1 概述</h3>\n<p>有些人可能炒过股票，但其实大部分人都不太懂，这种没有足够了解证券知识的情况下做股票是很容易亏钱的，刚开始炒股肯定都会想，如果有个懂行的帮帮手就好，其实基金就是个好帮手，支付宝里就有许多的基金，它将投资者分散的资金集中起来，交由专业的经理人进行管理，投资于股票、债券、外汇等领域，而基金投资的收益归持有者所有，管理机构收取一定比例的托管管理费用。</p>\n<p><strong>定义：</strong></p>\n<pre><code>又名门面模式，是一种通过为多个复杂的子系统提供一个一致的接口，而使这些子系统更加容易被访问的模式。该模式对外有一个统一接口，外部应用程序不用关心内部子系统的具体的细节，这样会大大降低应用程序的复杂度，提高了程序的可维护性。\n\n外观（Facade）模式是“迪米特法则”的典型应用\n</code></pre>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420225633681.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<h3 id=\"552-结构\"><a class=\"markdownIt-Anchor\" href=\"#552-结构\">#</a> 5.5.2 结构</h3>\n<p>外观（Facade）模式包含以下主要角色：</p>\n<ul>\n<li>外观（Facade）角色：为多个子系统对外提供一个共同的接口。</li>\n<li>子系统（Sub System）角色：实现系统的部分功能，客户可以通过外观角色访问它。</li>\n</ul>\n<h3 id=\"553-案例\"><a class=\"markdownIt-Anchor\" href=\"#553-案例\">#</a> 5.5.3 案例</h3>\n<p>【例】智能家电控制</p>\n<p>小明的爷爷已经 60 岁了，一个人在家生活：每次都需要打开灯、打开电视、打开空调；睡觉时关闭灯、关闭电视、关闭空调；操作起来都比较麻烦。所以小明给爷爷买了智能音箱，可以通过语音直接控制这些智能家电的开启和关闭。类图如下：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420231302277.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p>代码如下：</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//灯类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Light</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">on</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;打开了灯....&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">off</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;关闭了灯....&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//电视类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TV</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">on</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;打开了电视....&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">off</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;关闭了电视....&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//控制类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AirCondition</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">on</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;打开了空调....&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">off</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;关闭了空调....&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//智能音箱</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SmartAppliancesFacade</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Light light;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TV tv;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> AirCondition airCondition;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">SmartAppliancesFacade</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        light = <span class=\"keyword\">new</span> <span class=\"title class_\">Light</span>();</span><br><span class=\"line\">        tv = <span class=\"keyword\">new</span> <span class=\"title class_\">TV</span>();</span><br><span class=\"line\">        airCondition = <span class=\"keyword\">new</span> <span class=\"title class_\">AirCondition</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">say</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(message.contains(<span class=\"string\">&quot;打开&quot;</span>)) &#123;</span><br><span class=\"line\">            on();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(message.contains(<span class=\"string\">&quot;关闭&quot;</span>)) &#123;</span><br><span class=\"line\">            off();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;我还听不懂你说的！！！&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//起床后一键开电器</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">on</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;起床了&quot;</span>);</span><br><span class=\"line\">        light.on();</span><br><span class=\"line\">        tv.on();</span><br><span class=\"line\">        airCondition.on();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//睡觉一键关电器</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">off</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;睡觉了&quot;</span>);</span><br><span class=\"line\">        light.off();</span><br><span class=\"line\">        tv.off();</span><br><span class=\"line\">        airCondition.off();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//测试类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Client</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建外观对象</span></span><br><span class=\"line\">        <span class=\"type\">SmartAppliancesFacade</span> <span class=\"variable\">facade</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SmartAppliancesFacade</span>();</span><br><span class=\"line\">        <span class=\"comment\">//客户端直接与外观对象进行交互</span></span><br><span class=\"line\">        facade.say(<span class=\"string\">&quot;打开家电&quot;</span>);</span><br><span class=\"line\">        facade.say(<span class=\"string\">&quot;关闭家电&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p><strong>好处：</strong></p>\n<ul>\n<li>降低了子系统与客户端之间的耦合度，使得子系统的变化不会影响调用它的客户类。</li>\n<li>对客户屏蔽了子系统组件，减少了客户处理的对象数目，并使得子系统使用起来更加容易。</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>不符合开闭原则，修改很麻烦</li>\n</ul>\n<h3 id=\"554-使用场景\"><a class=\"markdownIt-Anchor\" href=\"#554-使用场景\">#</a> 5.5.4 使用场景</h3>\n<ul>\n<li>对分层结构系统构建时，使用外观模式定义子系统中每层的入口点可以简化子系统之间的依赖关系。</li>\n<li>当一个复杂系统的子系统很多时，外观模式可以为系统设计一个简单的接口供外界访问。</li>\n<li>当客户端与多个子系统之间存在很大的联系时，引入外观模式可将它们分离，从而提高子系统的独立性和可移植性。</li>\n</ul>\n<h3 id=\"555-源码解析\"><a class=\"markdownIt-Anchor\" href=\"#555-源码解析\">#</a> 5.5.5 源码解析</h3>\n<p>使用 tomcat 作为 web 容器时，接收浏览器发送过来的请求，tomcat 会将请求信息封装成 ServletRequest 对象，如下图①处对象。但是大家想想 ServletRequest 是一个接口，它还有一个子接口 HttpServletRequest，而我们知道该 request 对象肯定是一个 HttpServletRequest 对象的子实现类对象，到底是哪个类的对象呢？可以通过输出 request 对象，我们就会发现是一个名为 RequestFacade 的类的对象。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420231358807.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p>RequestFacade 类就使用了外观模式。先看结构图：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420231425763.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p><strong>为什么在此处使用外观模式呢？</strong></p>\n<pre><code>定义 RequestFacade 类，分别实现 ServletRequest ，同时定义私有成员变量 Request ，并且方法的实现调用 Request  的实现。然后，将 RequestFacade上转为 ServletRequest  传给 servlet 的 service 方法，这样即使在 servlet 中被下转为 RequestFacade ，也不能访问私有成员变量对象中的方法。既用了 Request ，又能防止其中方法被不合理的访问。\n</code></pre>\n<h2 id=\"56-组合模式\"><a class=\"markdownIt-Anchor\" href=\"#56-组合模式\">#</a> 5.6 组合模式</h2>\n<h3 id=\"561-概述\"><a class=\"markdownIt-Anchor\" href=\"#561-概述\">#</a> 5.6.1 概述</h3>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420225707204.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<pre><code>对于这个图片肯定会非常熟悉，上图我们可以看做是一个文件系统，对于这样的结构我们称之为树形结构。在树形结构中可以通过调用某个方法来遍历整个树，当我们找到某个叶子节点后，就可以对叶子节点进行相关的操作。可以将这颗树理解成一个大的容器，容器里面包含很多的成员对象，这些成员对象即可是容器对象也可以是叶子对象。但是由于容器对象和叶子对象在功能上面的区别，使得我们在使用的过程中必须要区分容器对象和叶子对象，但是这样就会给客户带来不必要的麻烦，作为客户而已，它始终希望能够一致的对待容器对象和叶子对象。\n</code></pre>\n<p><strong>定义：</strong></p>\n<pre><code>又名部分整体模式，是用于把一组相似的对象当作一个单一的对象。组合模式依据树形结构来组合对象，用来表示部分以及整体层次。这种类型的设计模式属于结构型模式，它创建了对象组的树形结构。\n</code></pre>\n<h3 id=\"562-结构\"><a class=\"markdownIt-Anchor\" href=\"#562-结构\">#</a> 5.6.2 结构</h3>\n<p>组合模式主要包含三种角色：</p>\n<ul>\n<li>抽象根节点（Component）：定义系统各层次对象的共有方法和属性，可以预先定义一些默认行为和属性。</li>\n<li>树枝节点（Composite）：定义树枝节点的行为，存储子节点，组合树枝节点和叶子节点形成一个树形结构。</li>\n<li>叶子节点（Leaf）：叶子节点对象，其下再无分支，是系统层次遍历的最小单位。</li>\n</ul>\n<h3 id=\"563-案例实现\"><a class=\"markdownIt-Anchor\" href=\"#563-案例实现\">#</a> 5.6.3 案例实现</h3>\n<p>【例】软件菜单</p>\n<p>如下图，我们在访问别的一些管理系统时，经常可以看到类似的菜单。一个菜单可以包含菜单项（菜单项是指不再包含其他内容的菜单条目），也可以包含带有其他菜单项的菜单，因此使用组合模式描述菜单就很恰当，我们的需求是针对一个菜单，打印出其包含的所有菜单以及菜单项的名称。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420231509643.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p>要实现该案例，我们先画出类图：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420231525497.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p><strong>代码实现：</strong></p>\n<p>不管是菜单还是菜单项，都应该继承自统一的接口，这里姑且将这个统一的接口称为菜单组件。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//菜单组件  不管是菜单还是菜单项，都应该继承该类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MenuComponent</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"type\">int</span> level;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//添加菜单</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(MenuComponent menuComponent)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UnsupportedOperationException</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//移除菜单</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">remove</span><span class=\"params\">(MenuComponent menuComponent)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UnsupportedOperationException</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取指定的子菜单</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> MenuComponent <span class=\"title function_\">getChild</span><span class=\"params\">(<span class=\"type\">int</span> i)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UnsupportedOperationException</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取菜单名称</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">print</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UnsupportedOperationException</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>这里的 MenuComponent 定义为抽象类，因为有一些共有的属性和行为要在该类中实现，Menu 和 MenuItem 类就可以只覆盖自己感兴趣的方法，而不用搭理不需要或者不感兴趣的方法，举例来说，Menu 类可以包含子菜单，因此需要覆盖 add ()、remove ()、getChild () 方法，但是 MenuItem 就不应该有这些方法。这里给出的默认实现是抛出异常，你也可以根据自己的需要改写默认实现。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Menu</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">MenuComponent</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;MenuComponent&gt; menuComponentList;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Menu</span><span class=\"params\">(String name,<span class=\"type\">int</span> level)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.level = level;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        menuComponentList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;MenuComponent&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(MenuComponent menuComponent)</span> &#123;</span><br><span class=\"line\">        menuComponentList.add(menuComponent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">remove</span><span class=\"params\">(MenuComponent menuComponent)</span> &#123;</span><br><span class=\"line\">        menuComponentList.remove(menuComponent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> MenuComponent <span class=\"title function_\">getChild</span><span class=\"params\">(<span class=\"type\">int</span> i)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> menuComponentList.get(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">print</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; level; i++) &#123;</span><br><span class=\"line\">            System.out.print(<span class=\"string\">&quot;--&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(name);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (MenuComponent menuComponent : menuComponentList) &#123;</span><br><span class=\"line\">            menuComponent.print();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>Menu 类已经实现了除了 getName 方法的其他所有方法，因为 Menu 类具有添加菜单，移除菜单和获取子菜单的功能。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MenuItem</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">MenuComponent</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MenuItem</span><span class=\"params\">(String name,<span class=\"type\">int</span> level)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.level = level;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">print</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; level; i++) &#123;</span><br><span class=\"line\">            System.out.print(<span class=\"string\">&quot;--&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>MenuItem 是菜单项，不能再有子菜单，所以添加菜单，移除菜单和获取子菜单的功能并不能实现。</p>\n<h3 id=\"564-组合模式的分类\"><a class=\"markdownIt-Anchor\" href=\"#564-组合模式的分类\">#</a> 5.6.4 组合模式的分类</h3>\n<p>在使用组合模式时，根据抽象构件类的定义形式，我们可将组合模式分为透明组合模式和安全组合模式两种形式。</p>\n<ul>\n<li>\n<p>透明组合模式</p>\n<p>透明组合模式中，抽象根节点角色中声明了所有用于管理成员对象的方法，比如在示例中  <code>MenuComponent</code>  声明了  <code>add</code> 、 <code>remove</code>  、 <code>getChild</code>  方法，这样做的好处是确保所有的构件类都有相同的接口。透明组合模式也是组合模式的标准形式。</p>\n<p>透明组合模式的缺点是不够安全，因为叶子对象和容器对象在本质上是有区别的，叶子对象不可能有下一个层次的对象，即不可能包含成员对象，因此为其提供 add ()、remove () 等方法是没有意义的，这在编译阶段不会出错，但在运行阶段如果调用这些方法可能会出错（如果没有提供相应的错误处理代码）</p>\n</li>\n<li>\n<p>安全组合模式</p>\n<p>在安全组合模式中，在抽象构件角色中没有声明任何用于管理成员对象的方法，而是在树枝节点  <code>Menu</code>  类中声明并实现这些方法。安全组合模式的缺点是不够透明，因为叶子构件和容器构件具有不同的方法，且容器构件中那些用于管理成员对象的方法没有在抽象构件类中定义，因此客户端不能完全针对抽象编程，必须有区别地对待叶子构件和容器构件。</p>\n</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420231540386.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<h3 id=\"565-优点\"><a class=\"markdownIt-Anchor\" href=\"#565-优点\">#</a> 5.6.5 优点</h3>\n<ul>\n<li>组合模式可以清楚地定义分层次的复杂对象，表示对象的全部或部分层次，它让客户端忽略了层次的差异，方便对整个层次结构进行控制。</li>\n<li>客户端可以一致地使用一个组合结构或其中单个对象，不必关心处理的是单个对象还是整个组合结构，简化了客户端代码。</li>\n<li>在组合模式中增加新的树枝节点和叶子节点都很方便，无须对现有类库进行任何修改，符合 “开闭原则”。</li>\n<li>组合模式为树形结构的面向对象实现提供了一种灵活的解决方案，通过叶子节点和树枝节点的递归组合，可以形成复杂的树形结构，但对树形结构的控制却非常简单。</li>\n</ul>\n<h3 id=\"566-使用场景\"><a class=\"markdownIt-Anchor\" href=\"#566-使用场景\">#</a> 5.6.6 使用场景</h3>\n<p>组合模式正是应树形结构而生，所以组合模式的使用场景就是出现树形结构的地方。比如：文件目录显示，多级目录呈现等树形结构数据的操作。</p>\n<h2 id=\"57-享元模式\"><a class=\"markdownIt-Anchor\" href=\"#57-享元模式\">#</a> 5.7 享元模式</h2>\n<h3 id=\"571-概述\"><a class=\"markdownIt-Anchor\" href=\"#571-概述\">#</a> 5.7.1 概述</h3>\n<p><strong>定义：</strong></p>\n<pre><code>运用共享技术来有效地支持大量细粒度对象的复用。它通过共享已经存在的对象来大幅度减少需要创建的对象数量、避免大量相似对象的开销，从而提高系统资源的利用率。\n</code></pre>\n<h3 id=\"572-结构\"><a class=\"markdownIt-Anchor\" href=\"#572-结构\">#</a> 5.7.2 结构</h3>\n<p>享元（Flyweight ）模式中存在以下两种状态：</p>\n<ol>\n<li>内部状态，即不会随着环境的改变而改变的可共享部分。</li>\n<li>外部状态，指随环境改变而改变的不可以共享的部分。享元模式的实现要领就是区分应用中的这两种状态，并将外部状态外部化。</li>\n</ol>\n<p>享元模式的主要有以下角色：</p>\n<ul>\n<li>抽象享元角色（Flyweight）：通常是一个接口或抽象类，在抽象享元类中声明了具体享元类公共的方法，这些方法可以向外界提供享元对象的内部数据（内部状态），同时也可以通过这些方法来设置外部数据（外部状态）。</li>\n<li>具体享元（Concrete Flyweight）角色 ：它实现了抽象享元类，称为享元对象；在具体享元类中为内部状态提供了存储空间。通常我们可以结合单例模式来设计具体享元类，为每一个具体享元类提供唯一的享元对象。</li>\n<li>非享元（Unsharable Flyweight) 角色 ：并不是所有的抽象享元类的子类都需要被共享，不能被共享的子类可设计为非共享具体享元类；当需要一个非共享具体享元类的对象时可以直接通过实例化创建。</li>\n<li>享元工厂（Flyweight Factory）角色 ：负责创建和管理享元角色。当客户对象请求一个享元对象时，享元工厂检査系统中是否存在符合要求的享元对象，如果存在则提供给客户；如果不存在的话，则创建一个新的享元对象。</li>\n</ul>\n<h3 id=\"573-案例实现\"><a class=\"markdownIt-Anchor\" href=\"#573-案例实现\">#</a> 5.7.3 案例实现</h3>\n<p>【例】俄罗斯方块</p>\n<p>下面的图片是众所周知的俄罗斯方块中的一个个方块，如果在俄罗斯方块这个游戏中，每个不同的方块都是一个实例对象，这些对象就要占用很多的内存空间，下面利用享元模式进行实现。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420231600431.jpeg\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p><strong>先来看类图：</strong></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420231623551.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p><strong>代码如下：</strong></p>\n<p>俄罗斯方块有不同的形状，我们可以对这些形状向上抽取出 AbstractBox，用来定义共性的属性和行为。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AbstractBox</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> String <span class=\"title function_\">getShape</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">display</span><span class=\"params\">(String color)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;方块形状：&quot;</span> + <span class=\"built_in\">this</span>.getShape() + <span class=\"string\">&quot; 颜色：&quot;</span> + color);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>接下来就是定义不同的形状了，IBox 类、LBox 类、OBox 类等。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">IBox</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractBox</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getShape</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;I&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LBox</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractBox</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getShape</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;L&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OBox</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractBox</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getShape</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;O&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>提供了一个工厂类（BoxFactory），用来管理享元对象（也就是 AbstractBox 子类对象），该工厂类对象只需要一个，所以可以使用单例模式。并给工厂类提供一个获取形状的方法。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BoxFactory</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> HashMap&lt;String, AbstractBox&gt; map;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">BoxFactory</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;String, AbstractBox&gt;();</span><br><span class=\"line\">        <span class=\"type\">AbstractBox</span> <span class=\"variable\">iBox</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IBox</span>();</span><br><span class=\"line\">        <span class=\"type\">AbstractBox</span> <span class=\"variable\">lBox</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LBox</span>();</span><br><span class=\"line\">        <span class=\"type\">AbstractBox</span> <span class=\"variable\">oBox</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OBox</span>();</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;I&quot;</span>, iBox);</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;L&quot;</span>, lBox);</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;O&quot;</span>, oBox);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> BoxFactory <span class=\"title function_\">getInstance</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> SingletonHolder.INSTANCE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SingletonHolder</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">BoxFactory</span> <span class=\"variable\">INSTANCE</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BoxFactory</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> AbstractBox <span class=\"title function_\">getBox</span><span class=\"params\">(String key)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map.get(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"575-优缺点和使用场景\"><a class=\"markdownIt-Anchor\" href=\"#575-优缺点和使用场景\">#</a> 5.7.5 优缺点和使用场景</h3>\n<p><strong>1，优点</strong></p>\n<ul>\n<li>极大减少内存中相似或相同对象数量，节约系统资源，提供系统性能</li>\n<li>享元模式中的外部状态相对独立，且不影响内部状态</li>\n</ul>\n<p><strong>2，缺点：</strong></p>\n<p>为了使对象可以共享，需要将享元对象的部分状态外部化，分离内部状态和外部状态，使程序逻辑复杂</p>\n<p><strong>3，使用场景：</strong></p>\n<ul>\n<li>一个系统有大量相同或者相似的对象，造成内存的大量耗费。</li>\n<li>对象的大部分状态都可以外部化，可以将这些外部状态传入对象中。</li>\n<li>在使用享元模式时需要维护一个存储享元对象的享元池，而这需要耗费一定的系统资源，因此，应当在需要多次重复使用享元对象时才值得使用享元模式。</li>\n</ul>\n<h3 id=\"576-jdk源码解析\"><a class=\"markdownIt-Anchor\" href=\"#576-jdk源码解析\">#</a> 5.7.6 JDK 源码解析</h3>\n<p>Integer 类使用了享元模式。我们先看下面的例子：</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Integer</span> <span class=\"variable\">i1</span> <span class=\"operator\">=</span> <span class=\"number\">127</span>;</span><br><span class=\"line\">        <span class=\"type\">Integer</span> <span class=\"variable\">i2</span> <span class=\"operator\">=</span> <span class=\"number\">127</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;i1和i2对象是否是同一个对象？&quot;</span> + (i1 == i2));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Integer</span> <span class=\"variable\">i3</span> <span class=\"operator\">=</span> <span class=\"number\">128</span>;</span><br><span class=\"line\">        <span class=\"type\">Integer</span> <span class=\"variable\">i4</span> <span class=\"operator\">=</span> <span class=\"number\">128</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;i3和i4对象是否是同一个对象？&quot;</span> + (i3 == i4));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>运行上面代码，结果如下：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420231644366.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p>为什么第一个输出语句输出的是 true，第二个输出语句输出的是 false？通过反编译软件进行反编译，代码如下：</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Integer</span> <span class=\"variable\">i1</span> <span class=\"operator\">=</span> Integer.valueOf((<span class=\"type\">int</span>)<span class=\"number\">127</span>);</span><br><span class=\"line\">        Integer i2 Integer.valueOf((<span class=\"type\">int</span>)<span class=\"number\">127</span>);</span><br><span class=\"line\">        System.out.println((String)<span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>().append((String)<span class=\"string\">&quot;i1\\u548ci2\\u5bf9\\u8c61\\u662f\\u5426\\u662f\\u540c\\u4e00\\u4e2a\\u5bf9\\u8c61\\uff1f&quot;</span>).append((<span class=\"type\">boolean</span>)(i1 == i2)).toString());</span><br><span class=\"line\">        <span class=\"type\">Integer</span> <span class=\"variable\">i3</span> <span class=\"operator\">=</span> Integer.valueOf((<span class=\"type\">int</span>)<span class=\"number\">128</span>);</span><br><span class=\"line\">        <span class=\"type\">Integer</span> <span class=\"variable\">i4</span> <span class=\"operator\">=</span> Integer.valueOf((<span class=\"type\">int</span>)<span class=\"number\">128</span>);</span><br><span class=\"line\">        System.out.println((String)<span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>().append((String)<span class=\"string\">&quot;i3\\u548ci4\\u5bf9\\u8c61\\u662f\\u5426\\u662f\\u540c\\u4e00\\u4e2a\\u5bf9\\u8c61\\uff1f&quot;</span>).append((<span class=\"type\">boolean</span>)(i3 == i4)).toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>上面代码可以看到，直接给 Integer 类型的变量赋值基本数据类型数据的操作底层使用的是  <code>valueOf()</code>  ，所以只需要看该方法即可</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Integer</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Number</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Comparable</span>&lt;Integer&gt; &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Integer <span class=\"title function_\">valueOf</span><span class=\"params\">(<span class=\"type\">int</span> i)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">IntegerCache</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">low</span> <span class=\"operator\">=</span> -<span class=\"number\">128</span>;</span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> high;</span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Integer cache[];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">h</span> <span class=\"operator\">=</span> <span class=\"number\">127</span>;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">integerCacheHighPropValue</span> <span class=\"operator\">=</span></span><br><span class=\"line\">                sun.misc.VM.getSavedProperty(<span class=\"string\">&quot;java.lang.Integer.IntegerCache.high&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (integerCacheHighPropValue != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> parseInt(integerCacheHighPropValue);</span><br><span class=\"line\">                    i = Math.max(i, <span class=\"number\">127</span>);</span><br><span class=\"line\">                    <span class=\"comment\">// Maximum array size is Integer.MAX_VALUE</span></span><br><span class=\"line\">                    h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span>( NumberFormatException nfe) &#123;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            high = h;</span><br><span class=\"line\">            cache = <span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>[(high - low) + <span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> low;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; k &lt; cache.length; k++)</span><br><span class=\"line\">                cache[k] = <span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>(j++);</span><br><span class=\"line\">            <span class=\"comment\">// range [-128, 127] must be interned (JLS7 5.1.7)</span></span><br><span class=\"line\">            <span class=\"keyword\">assert</span> IntegerCache.high &gt;= <span class=\"number\">127</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"title function_\">IntegerCache</span><span class=\"params\">()</span> &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>可以看到  <code>Integer</code>  默认先创建并缓存  <code>-128 ~ 127</code>  之间数的  <code>Integer</code>  对象，当调用  <code>valueOf</code>  时如果参数在  <code>-128 ~ 127</code>  之间则计算下标并从缓存中返回，否则创建一个新的  <code>Integer</code>  对象。</p>\n<h1 id=\"6行为型模式\"><a class=\"markdownIt-Anchor\" href=\"#6行为型模式\">#</a> 6，行为型模式</h1>\n<p>行为型模式用于描述程序在运行时复杂的流程控制，即描述多个类或对象之间怎样相互协作共同完成单个对象都无法单独完成的任务，它涉及算法与对象间职责的分配。</p>\n<p>行为型模式分为类行为模式和对象行为模式，前者采用继承机制来在类间分派行为，后者采用组合或聚合在对象间分配行为。由于组合关系或聚合关系比继承关系耦合度低，满足 “合成复用原则”，所以对象行为模式比类行为模式具有更大的灵活性。</p>\n<p>行为型模式分为：</p>\n<ol>\n<li>模板方法模式</li>\n<li>策略模式</li>\n<li>命令模式</li>\n<li>职责链模式</li>\n<li>状态模式</li>\n<li>观察者模式</li>\n<li>中介者模式</li>\n<li>迭代器模式</li>\n<li>访问者模式</li>\n<li>备忘录模式</li>\n<li>解释器模式</li>\n</ol>\n<p>以上 11 种行为型模式，除了模板方法模式和解释器模式是类行为型模式，其他的全部属于对象行为型模式。</p>\n<h2 id=\"61-模板方法模式\"><a class=\"markdownIt-Anchor\" href=\"#61-模板方法模式\">#</a> 6.1 模板方法模式</h2>\n<h3 id=\"611-概述\"><a class=\"markdownIt-Anchor\" href=\"#611-概述\">#</a> 6.1.1 概述</h3>\n<p>在面向对象程序设计过程中，程序员常常会遇到这种情况：设计一个系统时知道了算法所需的关键步骤，而且确定了这些步骤的执行顺序，但某些步骤的具体实现还未知，或者说某些步骤的实现与具体的环境相关。</p>\n<p>例如，去银行办理业务一般要经过以下 4 个流程：取号、排队、办理具体业务、对银行工作人员进行评分等，其中取号、排队和对银行工作人员进行评分的业务对每个客户是一样的，可以在父类中实现，但是办理具体业务却因人而异，它可能是存款、取款或者转账等，可以延迟到子类中实现。</p>\n<p><strong>定义：</strong></p>\n<p>定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。</p>\n<h3 id=\"612-结构\"><a class=\"markdownIt-Anchor\" href=\"#612-结构\">#</a> 6.1.2 结构</h3>\n<p>模板方法（Template Method）模式包含以下主要角色：</p>\n<ul>\n<li>\n<p>抽象类（Abstract Class）：负责给出一个算法的轮廓和骨架。它由一个模板方法和若干个基本方法构成。</p>\n<ul>\n<li>\n<p>模板方法：定义了算法的骨架，按某种顺序调用其包含的基本方法。</p>\n</li>\n<li>\n<p>基本方法：是实现算法各个步骤的方法，是模板方法的组成部分。基本方法又可以分为三种：</p>\n<ul>\n<li>\n<p>抽象方法 (Abstract Method) ：一个抽象方法由抽象类声明、由其具体子类实现。</p>\n</li>\n<li>\n<p>具体方法 (Concrete Method) ：一个具体方法由一个抽象类或具体类声明并实现，其子类可以进行覆盖也可以直接继承。</p>\n</li>\n<li>\n<p>钩子方法 (Hook Method) ：在抽象类中已经实现，包括用于判断的逻辑方法和需要子类重写的空方法两种。</p>\n<p>一般钩子方法是用于判断的逻辑方法，这类方法名一般为 isXxx，返回值类型为 boolean 类型。</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>具体子类（Concrete Class）：实现抽象类中所定义的抽象方法和钩子方法，它们是一个顶级逻辑的组成步骤。</p>\n</li>\n</ul>\n<h3 id=\"613-案例实现\"><a class=\"markdownIt-Anchor\" href=\"#613-案例实现\">#</a> 6.1.3 案例实现</h3>\n<p>【例】炒菜</p>\n<p>炒菜的步骤是固定的，分为倒油、热油、倒蔬菜、倒调料品、翻炒等步骤。现通过模板方法模式来用代码模拟。类图如下：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420231706979.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p>代码如下：</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AbstractClass</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">cookProcess</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//第一步：倒油</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.pourOil();</span><br><span class=\"line\">        <span class=\"comment\">//第二步：热油</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.heatOil();</span><br><span class=\"line\">        <span class=\"comment\">//第三步：倒蔬菜</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.pourVegetable();</span><br><span class=\"line\">        <span class=\"comment\">//第四步：倒调味料</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.pourSauce();</span><br><span class=\"line\">        <span class=\"comment\">//第五步：翻炒</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.fry();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">pourOil</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;倒油&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//第二步：热油是一样的，所以直接实现</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">heatOil</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;热油&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//第三步：倒蔬菜是不一样的（一个下包菜，一个是下菜心）</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">pourVegetable</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//第四步：倒调味料是不一样</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">pourSauce</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//第五步：翻炒是一样的，所以直接实现</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fry</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;炒啊炒啊炒到熟啊&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConcreteClass_BaoCai</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractClass</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">pourVegetable</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;下锅的蔬菜是包菜&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">pourSauce</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;下锅的酱料是辣椒&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConcreteClass_CaiXin</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractClass</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">pourVegetable</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;下锅的蔬菜是菜心&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">pourSauce</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;下锅的酱料是蒜蓉&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Client</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//炒手撕包菜</span></span><br><span class=\"line\">        <span class=\"type\">ConcreteClass_BaoCai</span> <span class=\"variable\">baoCai</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ConcreteClass_BaoCai</span>();</span><br><span class=\"line\">        baoCai.cookProcess();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//炒蒜蓉菜心</span></span><br><span class=\"line\">        <span class=\"type\">ConcreteClass_CaiXin</span> <span class=\"variable\">caiXin</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ConcreteClass_CaiXin</span>();</span><br><span class=\"line\">        caiXin.cookProcess();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<blockquote>\n<p>注意：为防止恶意操作，一般模板方法都加上 final 关键词。</p>\n</blockquote>\n<h3 id=\"613-优缺点\"><a class=\"markdownIt-Anchor\" href=\"#613-优缺点\">#</a> 6.1.3 优缺点</h3>\n<p><strong>优点：</strong></p>\n<ul>\n<li>\n<p>提高代码复用性</p>\n<p>将相同部分的代码放在抽象的父类中，而将不同的代码放入不同的子类中。</p>\n</li>\n<li>\n<p>实现了反向控制</p>\n<p>通过一个父类调用其子类的操作，通过对子类的具体实现扩展不同的行为，实现了反向控制 ，并符合 “开闭原则”。</p>\n</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>对每个不同的实现都需要定义一个子类，这会导致类的个数增加，系统更加庞大，设计也更加抽象。</li>\n<li>父类中的抽象方法由子类实现，子类执行的结果会影响父类的结果，这导致一种反向的控制结构，它提高了代码阅读的难度。</li>\n</ul>\n<h3 id=\"614-适用场景\"><a class=\"markdownIt-Anchor\" href=\"#614-适用场景\">#</a> 6.1.4 适用场景</h3>\n<ul>\n<li>算法的整体步骤很固定，但其中个别部分易变时，这时候可以使用模板方法模式，将容易变的部分抽象出来，供子类实现。</li>\n<li>需要通过子类来决定父类算法中某个步骤是否执行，实现子类对父类的反向控制。</li>\n</ul>\n<h3 id=\"615-jdk源码解析\"><a class=\"markdownIt-Anchor\" href=\"#615-jdk源码解析\">#</a> 6.1.5 JDK 源码解析</h3>\n<p>InputStream 类就使用了模板方法模式。在 InputStream 类中定义了多个  <code>read()</code>  方法，如下：</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InputStream</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Closeable</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//抽象方法，要求子类必须重写</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"type\">int</span> <span class=\"title function_\">read</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">read</span><span class=\"params\">(<span class=\"type\">byte</span> b[])</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> read(b, <span class=\"number\">0</span>, b.length);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">read</span><span class=\"params\">(<span class=\"type\">byte</span> b[], <span class=\"type\">int</span> off, <span class=\"type\">int</span> len)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NullPointerException</span>();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (off &lt; <span class=\"number\">0</span> || len &lt; <span class=\"number\">0</span> || len &gt; b.length - off) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IndexOutOfBoundsException</span>();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (len == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> read(); <span class=\"comment\">//调用了无参的read方法，该方法是每次读取一个字节数据</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        b[off] = (<span class=\"type\">byte</span>)c;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (; i &lt; len ; i++) &#123;</span><br><span class=\"line\">                c = read();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (c == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                b[off + i] = (<span class=\"type\">byte</span>)c;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException ee) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>从上面代码可以看到，无参的  <code>read()</code>  方法是抽象方法，要求子类必须实现。而  <code>read(byte b[])</code>  方法调用了  <code>read(byte b[], int off, int len)</code>  方法，所以在此处重点看的方法是带三个参数的方法。</p>\n<p>在该方法中第 18 行、27 行，可以看到调用了无参的抽象的  <code>read()</code>  方法。</p>\n<p>总结如下： 在 InputStream 父类中已经定义好了读取一个字节数组数据的方法是每次读取一个字节，并将其存储到数组的第一个索引位置，读取 len 个字节数据。具体如何读取一个字节数据呢？由子类实现。</p>\n<h2 id=\"62-策略模式\"><a class=\"markdownIt-Anchor\" href=\"#62-策略模式\">#</a> 6.2 策略模式</h2>\n<h3 id=\"621-概述\"><a class=\"markdownIt-Anchor\" href=\"#621-概述\">#</a> 6.2.1 概述</h3>\n<p>先看下面的图片，我们去旅游选择出行模式有很多种，可以骑自行车、可以坐汽车、可以坐火车、可以坐飞机。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420231724170.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p>作为一个程序猿，开发需要选择一款开发工具，当然可以进行代码开发的工具有很多，可以选择 Idea 进行开发，也可以使用 eclipse 进行开发，也可以使用其他的一些开发工具。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420231753669.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p><strong>定义：</strong></p>\n<pre><code>该模式定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的变化不会影响使用算法的客户。策略模式属于对象行为模式，它通过对算法进行封装，把使用算法的责任和算法的实现分割开来，并委派给不同的对象对这些算法进行管理。\n</code></pre>\n<h3 id=\"622-结构\"><a class=\"markdownIt-Anchor\" href=\"#622-结构\">#</a> 6.2.2 结构</h3>\n<p>策略模式的主要角色如下：</p>\n<ul>\n<li>抽象策略（Strategy）类：这是一个抽象角色，通常由一个接口或抽象类实现。此角色给出所有的具体策略类所需的接口。</li>\n<li>具体策略（Concrete Strategy）类：实现了抽象策略定义的接口，提供具体的算法实现或行为。</li>\n<li>环境（Context）类：持有一个策略类的引用，最终给客户端调用。</li>\n</ul>\n<h3 id=\"623-案例实现\"><a class=\"markdownIt-Anchor\" href=\"#623-案例实现\">#</a> 6.2.3 案例实现</h3>\n<p>【例】促销活动</p>\n<p>一家百货公司在定年度的促销活动。针对不同的节日（春节、中秋节、圣诞节）推出不同的促销活动，由促销员将促销活动展示给客户。类图如下：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420231807973.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p>代码如下：</p>\n<p>定义百货公司所有促销活动的共同接口</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Strategy</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">show</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>定义具体策略角色（Concrete Strategy）：每个节日具体的促销活动</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//为春节准备的促销活动A</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StrategyA</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Strategy</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">show</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;买一送一&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//为中秋准备的促销活动B</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StrategyB</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Strategy</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">show</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;满200元减50元&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//为圣诞准备的促销活动C</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StrategyC</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Strategy</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">show</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;满1000元加一元换购任意200元以下商品&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>定义环境角色（Context）：用于连接上下文，即把促销活动推销给客户，这里可以理解为销售员</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SalesMan</span> &#123;                        </span><br><span class=\"line\">    <span class=\"comment\">//持有抽象策略角色的引用                              </span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Strategy strategy;                 </span><br><span class=\"line\">                                               </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">SalesMan</span><span class=\"params\">(Strategy strategy)</span> &#123;       </span><br><span class=\"line\">        <span class=\"built_in\">this</span>.strategy = strategy;              </span><br><span class=\"line\">    &#125;                                          </span><br><span class=\"line\">                                               </span><br><span class=\"line\">    <span class=\"comment\">//向客户展示促销活动                                </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">salesManShow</span><span class=\"params\">()</span>&#123;                </span><br><span class=\"line\">        strategy.show();                       </span><br><span class=\"line\">    &#125;                                          </span><br><span class=\"line\">&#125;                                              </span><br></pre></td></tr></table></figure></div>\n<h3 id=\"624-优缺点\"><a class=\"markdownIt-Anchor\" href=\"#624-优缺点\">#</a> 6.2.4 优缺点</h3>\n<p><strong>1，优点：</strong></p>\n<ul>\n<li>\n<p>策略类之间可以自由切换</p>\n<p>由于策略类都实现同一个接口，所以使它们之间可以自由切换。</p>\n</li>\n<li>\n<p>易于扩展</p>\n<p>增加一个新的策略只需要添加一个具体的策略类即可，基本不需要改变原有的代码，符合 “开闭原则 “</p>\n</li>\n<li>\n<p>避免使用多重条件选择语句（if else），充分体现面向对象设计思想。</p>\n</li>\n</ul>\n<p><strong>2，缺点：</strong></p>\n<ul>\n<li>客户端必须知道所有的策略类，并自行决定使用哪一个策略类。</li>\n<li>策略模式将造成产生很多策略类，可以通过使用享元模式在一定程度上减少对象的数量。</li>\n</ul>\n<h3 id=\"625-使用场景\"><a class=\"markdownIt-Anchor\" href=\"#625-使用场景\">#</a> 6.2.5 使用场景</h3>\n<ul>\n<li>一个系统需要动态地在几种算法中选择一种时，可将每个算法封装到策略类中。</li>\n<li>一个类定义了多种行为，并且这些行为在这个类的操作中以多个条件语句的形式出现，可将每个条件分支移入它们各自的策略类中以代替这些条件语句。</li>\n<li>系统中各算法彼此完全独立，且要求对客户隐藏具体算法的实现细节时。</li>\n<li>系统要求使用算法的客户不应该知道其操作的数据时，可使用策略模式来隐藏与算法相关的数据结构。</li>\n<li>多个类只区别在表现行为不同，可以使用策略模式，在运行时动态选择具体要执行的行为。</li>\n</ul>\n<h3 id=\"626-jdk源码解析\"><a class=\"markdownIt-Anchor\" href=\"#626-jdk源码解析\">#</a> 6.2.6 JDK 源码解析</h3>\n<p><code>Comparator</code>  中的策略模式。在 Arrays 类中有一个  <code>sort()</code>  方法，如下：</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Arrays</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"keyword\">void</span> <span class=\"title function_\">sort</span><span class=\"params\">(T[] a, Comparator&lt;? <span class=\"built_in\">super</span> T&gt; c)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            sort(a);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (LegacyMergeSort.userRequested)</span><br><span class=\"line\">                legacyMergeSort(a, c);</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                TimSort.sort(a, <span class=\"number\">0</span>, a.length, c, <span class=\"literal\">null</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>Arrays 就是一个环境角色类，这个 sort 方法可以传一个新策略让 Arrays 根据这个策略来进行排序。就比如下面的测试类。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">demo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Integer[] data = &#123;<span class=\"number\">12</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">        <span class=\"comment\">// 实现降序排序</span></span><br><span class=\"line\">        Arrays.sort(data, <span class=\"keyword\">new</span> <span class=\"title class_\">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compare</span><span class=\"params\">(Integer o1, Integer o2)</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> o2 - o1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        System.out.println(Arrays.toString(data)); <span class=\"comment\">//[12, 5, 4, 3, 2, 2, 1]</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>这里我们在调用 Arrays 的 sort 方法时，第二个参数传递的是 Comparator 接口的子实现类对象。所以 Comparator 充当的是抽象策略角色，而具体的子实现类充当的是具体策略角色。环境角色类（Arrays）应该持有抽象策略的引用来调用。那么，Arrays 类的 sort 方法到底有没有使用 Comparator 子实现类中的  <code>compare()</code>  方法吗？让我们继续查看 TimSort 类的  <code>sort()</code>  方法，代码如下：</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TimSort</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"keyword\">void</span> <span class=\"title function_\">sort</span><span class=\"params\">(T[] a, <span class=\"type\">int</span> lo, <span class=\"type\">int</span> hi, Comparator&lt;? <span class=\"built_in\">super</span> T&gt; c,</span></span><br><span class=\"line\"><span class=\"params\">                         T[] work, <span class=\"type\">int</span> workBase, <span class=\"type\">int</span> workLen)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> c != <span class=\"literal\">null</span> &amp;&amp; a != <span class=\"literal\">null</span> &amp;&amp; lo &gt;= <span class=\"number\">0</span> &amp;&amp; lo &lt;= hi &amp;&amp; hi &lt;= a.length;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">nRemaining</span>  <span class=\"operator\">=</span> hi - lo;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nRemaining &lt; <span class=\"number\">2</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;  <span class=\"comment\">// Arrays of size 0 and 1 are always sorted</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// If array is small, do a &quot;mini-TimSort&quot; with no merges</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nRemaining &lt; MIN_MERGE) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">initRunLen</span> <span class=\"operator\">=</span> countRunAndMakeAscending(a, lo, hi, c);</span><br><span class=\"line\">            binarySort(a, lo, hi, lo + initRunLen, c);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"type\">int</span> <span class=\"title function_\">countRunAndMakeAscending</span><span class=\"params\">(T[] a, <span class=\"type\">int</span> lo, <span class=\"type\">int</span> hi,Comparator&lt;? <span class=\"built_in\">super</span> T&gt; c)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> lo &lt; hi;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">runHi</span> <span class=\"operator\">=</span> lo + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (runHi == hi)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Find end of run, and reverse range if descending</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c.compare(a[runHi++], a[lo]) &lt; <span class=\"number\">0</span>) &#123; <span class=\"comment\">// Descending</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (runHi &lt; hi &amp;&amp; c.compare(a[runHi], a[runHi - <span class=\"number\">1</span>]) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                runHi++;</span><br><span class=\"line\">            reverseRange(a, lo, runHi);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;                              <span class=\"comment\">// Ascending</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (runHi &lt; hi &amp;&amp; c.compare(a[runHi], a[runHi - <span class=\"number\">1</span>]) &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">                runHi++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> runHi - lo;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>上面的代码中最终会跑到  <code>countRunAndMakeAscending()</code>  这个方法中。我们可以看见，只用了 compare 方法，所以在调用 Arrays.sort 方法只传具体 compare 重写方法的类对象就行，这也是 Comparator 接口中必须要子类实现的一个方法。</p>\n<h2 id=\"63-命令模式\"><a class=\"markdownIt-Anchor\" href=\"#63-命令模式\">#</a> 6.3 命令模式</h2>\n<h3 id=\"631-概述\"><a class=\"markdownIt-Anchor\" href=\"#631-概述\">#</a> 6.3.1 概述</h3>\n<p>日常生活中，我们出去吃饭都会遇到下面的场景。<br>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420231934811.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p><strong>定义：</strong></p>\n<p>将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分割开。这样两者之间通过命令对象进行沟通，这样方便将命令对象进行存储、传递、调用、增加与管理。</p>\n<h3 id=\"632-结构\"><a class=\"markdownIt-Anchor\" href=\"#632-结构\">#</a> 6.3.2 结构</h3>\n<p>命令模式包含以下主要角色：</p>\n<ul>\n<li>抽象命令类（Command）角色： 定义命令的接口，声明执行的方法。</li>\n<li>具体命令（Concrete  Command）角色：具体的命令，实现命令接口；通常会持有接收者，并调用接收者的功能来完成命令要执行的操作。</li>\n<li>实现者 / 接收者（Receiver）角色： 接收者，真正执行命令的对象。任何类都可能成为一个接收者，只要它能够实现命令要求实现的相应功能。</li>\n<li>调用者 / 请求者（Invoker）角色： 要求命令对象执行请求，通常会持有命令对象，可以持有很多的命令对象。这个是客户端真正触发命令并要求命令执行相应操作的地方，也就是说相当于使用命令对象的入口。</li>\n</ul>\n<h3 id=\"633-案例实现\"><a class=\"markdownIt-Anchor\" href=\"#633-案例实现\">#</a> 6.3.3 案例实现</h3>\n<p>将上面的案例用代码实现，那我们就需要分析命令模式的角色在该案例中由谁来充当。</p>\n<p>服务员： 就是调用者角色，由她来发起命令。</p>\n<p>资深大厨： 就是接收者角色，真正命令执行的对象。</p>\n<p>订单： 命令中包含订单。</p>\n<p>类图如下：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420231954390.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p>代码如下：</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Command</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">()</span>;<span class=\"comment\">//只需要定义一个统一的执行方法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OrderCommand</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Command</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//持有接受者对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> SeniorChef receiver;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Order order;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">OrderCommand</span><span class=\"params\">(SeniorChef receiver, Order order)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.receiver = receiver;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.order = order;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">()</span>  &#123;</span><br><span class=\"line\">        System.out.println(order.getDiningTable() + <span class=\"string\">&quot;桌的订单：&quot;</span>);</span><br><span class=\"line\">        Set&lt;String&gt; keys = order.getFoodDic().keySet();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String key : keys) &#123;</span><br><span class=\"line\">            receiver.makeFood(order.getFoodDic().get(key),key);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">100</span>);<span class=\"comment\">//停顿一下 模拟做饭的过程</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(order.getDiningTable() + <span class=\"string\">&quot;桌的饭弄好了&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Order</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 餐桌号码</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> diningTable;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 用来存储餐名并记录份数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, Integer&gt; foodDic = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;String, Integer&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getDiningTable</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> diningTable;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setDiningTable</span><span class=\"params\">(<span class=\"type\">int</span> diningTable)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.diningTable = diningTable;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Map&lt;String, Integer&gt; <span class=\"title function_\">getFoodDic</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> foodDic;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setFoodDic</span><span class=\"params\">(String name, <span class=\"type\">int</span> num)</span> &#123;</span><br><span class=\"line\">        foodDic.put(name,num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 资深大厨类 是命令的Receiver</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SeniorChef</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">makeFood</span><span class=\"params\">(<span class=\"type\">int</span> num,String foodName)</span> &#123;</span><br><span class=\"line\">        System.out.println(num + <span class=\"string\">&quot;份&quot;</span> + foodName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Waitor</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ArrayList&lt;Command&gt; commands;<span class=\"comment\">//可以持有很多的命令对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Waitor</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        commands = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setCommand</span><span class=\"params\">(Command cmd)</span>&#123;</span><br><span class=\"line\">        commands.add(cmd);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 发出命令 喊 订单来了，厨师开始执行</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">orderUp</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;美女服务员：叮咚，大厨，新订单来了.......&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; commands.size(); i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">Command</span> <span class=\"variable\">cmd</span> <span class=\"operator\">=</span> commands.get(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cmd != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                cmd.execute();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Client</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建2个order</span></span><br><span class=\"line\">        <span class=\"type\">Order</span> <span class=\"variable\">order1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Order</span>();</span><br><span class=\"line\">        order1.setDiningTable(<span class=\"number\">1</span>);</span><br><span class=\"line\">        order1.getFoodDic().put(<span class=\"string\">&quot;西红柿鸡蛋面&quot;</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">        order1.getFoodDic().put(<span class=\"string\">&quot;小杯可乐&quot;</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Order</span> <span class=\"variable\">order2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Order</span>();</span><br><span class=\"line\">        order2.setDiningTable(<span class=\"number\">3</span>);</span><br><span class=\"line\">        order2.getFoodDic().put(<span class=\"string\">&quot;尖椒肉丝盖饭&quot;</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">        order2.getFoodDic().put(<span class=\"string\">&quot;小杯雪碧&quot;</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建接收者</span></span><br><span class=\"line\">        SeniorChef receiver=<span class=\"keyword\">new</span> <span class=\"title class_\">SeniorChef</span>();</span><br><span class=\"line\">        <span class=\"comment\">//将订单和接收者封装成命令对象</span></span><br><span class=\"line\">        <span class=\"type\">OrderCommand</span> <span class=\"variable\">cmd1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OrderCommand</span>(receiver, order1);</span><br><span class=\"line\">        <span class=\"type\">OrderCommand</span> <span class=\"variable\">cmd2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OrderCommand</span>(receiver, order2);</span><br><span class=\"line\">        <span class=\"comment\">//创建调用者 waitor</span></span><br><span class=\"line\">        <span class=\"type\">Waitor</span> <span class=\"variable\">invoker</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Waitor</span>();</span><br><span class=\"line\">        invoker.setCommand(cmd1);</span><br><span class=\"line\">        invoker.setCommand(cmd2);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//将订单带到柜台 并向厨师喊 订单来了</span></span><br><span class=\"line\">        invoker.orderUp();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"634-优缺点\"><a class=\"markdownIt-Anchor\" href=\"#634-优缺点\">#</a> 6.3.4 优缺点</h3>\n<p><strong>1，优点：</strong></p>\n<ul>\n<li>降低系统的耦合度。命令模式能将调用操作的对象与实现该操作的对象解耦。</li>\n<li>增加或删除命令非常方便。采用命令模式增加与删除命令不会影响其他类，它满足 “开闭原则”，对扩展比较灵活。</li>\n<li>可以实现宏命令。命令模式可以与组合模式结合，将多个命令装配成一个组合命令，即宏命令。</li>\n<li>方便实现 Undo 和 Redo 操作。命令模式可以与后面介绍的备忘录模式结合，实现命令的撤销与恢复。</li>\n</ul>\n<p><strong>2，缺点：</strong></p>\n<ul>\n<li>使用命令模式可能会导致某些系统有过多的具体命令类。</li>\n<li>系统结构更加复杂。</li>\n</ul>\n<h3 id=\"635-使用场景\"><a class=\"markdownIt-Anchor\" href=\"#635-使用场景\">#</a> 6.3.5 使用场景</h3>\n<ul>\n<li>系统需要将请求调用者和请求接收者解耦，使得调用者和接收者不直接交互。</li>\n<li>系统需要在不同的时间指定请求、将请求排队和执行请求。</li>\n<li>系统需要支持命令的撤销 (Undo) 操作和恢复 (Redo) 操作。</li>\n</ul>\n<h3 id=\"636-jdk源码解析\"><a class=\"markdownIt-Anchor\" href=\"#636-jdk源码解析\">#</a> 6.3.6 JDK 源码解析</h3>\n<p>Runable 是一个典型命令模式，Runnable 担当命令的角色，Thread 充当的是调用者，start 方法就是其执行方法</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//命令接口(抽象命令角色)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//调用者</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Thread</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Runnable target;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">start</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (threadStatus != <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalThreadStateException</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        group.add(<span class=\"built_in\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">started</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            start0();</span><br><span class=\"line\">            started = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!started) &#123;</span><br><span class=\"line\">                    group.threadStartFailed(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Throwable ignore) &#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title function_\">start0</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>会调用一个 native 方法 start0 (), 调用系统方法，开启一个线程。而接收者是对程序员开放的，可以自己定义接收者。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * jdk Runnable 命令模式</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\tTurnOffThread ： 属于具体</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TurnOffThread</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">private</span> Receiver receiver;</span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"title function_\">TurnOffThread</span><span class=\"params\">(Receiver receiver)</span> &#123;</span><br><span class=\"line\">     \t<span class=\"built_in\">this</span>.receiver = receiver;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">     \treceiver.turnOFF();</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">         <span class=\"type\">Receiver</span> <span class=\"variable\">receiver</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Receiver</span>();</span><br><span class=\"line\">         <span class=\"type\">TurnOffThread</span> <span class=\"variable\">turnOffThread</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TurnOffThread</span>(receiver);</span><br><span class=\"line\">         <span class=\"type\">Thread</span> <span class=\"variable\">thread</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(turnOffThread);</span><br><span class=\"line\">         thread.start();</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"64-责任链模式\"><a class=\"markdownIt-Anchor\" href=\"#64-责任链模式\">#</a> 6.4 责任链模式</h2>\n<h3 id=\"641-概述\"><a class=\"markdownIt-Anchor\" href=\"#641-概述\">#</a> 6.4.1 概述</h3>\n<p>在现实生活中，常常会出现这样的事例：一个请求有多个对象可以处理，但每个对象的处理条件或权限不同。例如，公司员工请假，可批假的领导有部门负责人、副总经理、总经理等，但每个领导能批准的天数不同，员工必须根据自己要请假的天数去找不同的领导签名，也就是说员工必须记住每个领导的姓名、电话和地址等信息，这增加了难度。这样的例子还有很多，如找领导出差报销、生活中的 “击鼓传花” 游戏等。</p>\n<p><strong>定义：</strong></p>\n<p>又名职责链模式，为了避免请求发送者与多个请求处理者耦合在一起，将所有请求的处理者通过前一对象记住其下一个对象的引用而连成一条链；当有请求发生时，可将请求沿着这条链传递，直到有对象处理它为止。</p>\n<h3 id=\"642-结构\"><a class=\"markdownIt-Anchor\" href=\"#642-结构\">#</a> 6.4.2 结构</h3>\n<p>职责链模式主要包含以下角色:</p>\n<ul>\n<li>抽象处理者（Handler）角色：定义一个处理请求的接口，包含抽象处理方法和一个后继连接。</li>\n<li>具体处理者（Concrete Handler）角色：实现抽象处理者的处理方法，判断能否处理本次请求，如果可以处理请求则处理，否则将该请求转给它的后继者。</li>\n<li>客户类（Client）角色：创建处理链，并向链头的具体处理者对象提交请求，它不关心处理细节和请求的传递过程。</li>\n</ul>\n<h3 id=\"643-案例实现\"><a class=\"markdownIt-Anchor\" href=\"#643-案例实现\">#</a> 6.4.3 案例实现</h3>\n<p>现需要开发一个请假流程控制系统。请假一天以下的假只需要小组长同意即可；请假 1 天到 3 天的假还需要部门经理同意；请求 3 天到 7 天还需要总经理同意才行。</p>\n<p>类图如下：<br>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420232023190.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p>代码如下：</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//请假条</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LeaveRequest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;<span class=\"comment\">//姓名</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> num;<span class=\"comment\">//请假天数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String content;<span class=\"comment\">//请假内容</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">LeaveRequest</span><span class=\"params\">(String name, <span class=\"type\">int</span> num, String content)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.num = num;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.content = content;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getNum</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getContent</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> content;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//处理者抽象类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Handler</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">NUM_ONE</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">NUM_THREE</span> <span class=\"operator\">=</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">NUM_SEVEN</span> <span class=\"operator\">=</span> <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//该领导处理的请假天数区间</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> numStart;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> numEnd;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//领导上面还有领导</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Handler nextHandler;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//设置请假天数范围 上不封顶</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Handler</span><span class=\"params\">(<span class=\"type\">int</span> numStart)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.numStart = numStart;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//设置请假天数范围</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Handler</span><span class=\"params\">(<span class=\"type\">int</span> numStart, <span class=\"type\">int</span> numEnd)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.numStart = numStart;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.numEnd = numEnd;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//设置上级领导</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setNextHandler</span><span class=\"params\">(Handler nextHandler)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.nextHandler = nextHandler;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//提交请假条</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">submit</span><span class=\"params\">(LeaveRequest leave)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"number\">0</span> == <span class=\"built_in\">this</span>.numStart)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//如果请假天数达到该领导者的处理要求</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(leave.getNum() &gt;= <span class=\"built_in\">this</span>.numStart)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.handleLeave(leave);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//如果还有上级 并且请假天数超过了当前领导的处理范围</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"literal\">null</span> != <span class=\"built_in\">this</span>.nextHandler &amp;&amp; leave.getNum() &gt; numEnd)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.nextHandler.submit(leave);<span class=\"comment\">//继续提交</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;流程结束&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//各级领导处理请假条方法</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleLeave</span><span class=\"params\">(LeaveRequest leave)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//小组长</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GroupLeader</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Handler</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">GroupLeader</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//小组长处理1-3天的请假</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>(Handler.NUM_ONE, Handler.NUM_THREE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleLeave</span><span class=\"params\">(LeaveRequest leave)</span> &#123;</span><br><span class=\"line\">        System.out.println(leave.getName() + <span class=\"string\">&quot;请假&quot;</span> + leave.getNum() + <span class=\"string\">&quot;天,&quot;</span> + leave.getContent() + <span class=\"string\">&quot;。&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;小组长审批：同意。&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//部门经理</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Manager</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Handler</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Manager</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//部门经理处理3-7天的请假</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>(Handler.NUM_THREE, Handler.NUM_SEVEN);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleLeave</span><span class=\"params\">(LeaveRequest leave)</span> &#123;</span><br><span class=\"line\">        System.out.println(leave.getName() + <span class=\"string\">&quot;请假&quot;</span> + leave.getNum() + <span class=\"string\">&quot;天,&quot;</span> + leave.getContent() + <span class=\"string\">&quot;。&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;部门经理审批：同意。&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//总经理</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GeneralManager</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Handler</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">GeneralManager</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//部门经理处理7天以上的请假</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>(Handler.NUM_SEVEN);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleLeave</span><span class=\"params\">(LeaveRequest leave)</span> &#123;</span><br><span class=\"line\">        System.out.println(leave.getName() + <span class=\"string\">&quot;请假&quot;</span> + leave.getNum() + <span class=\"string\">&quot;天,&quot;</span> + leave.getContent() + <span class=\"string\">&quot;。&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;总经理审批：同意。&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//测试类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Client</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//请假条来一张</span></span><br><span class=\"line\">        <span class=\"type\">LeaveRequest</span> <span class=\"variable\">leave</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LeaveRequest</span>(<span class=\"string\">&quot;小花&quot;</span>,<span class=\"number\">5</span>,<span class=\"string\">&quot;身体不适&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//各位领导</span></span><br><span class=\"line\">        <span class=\"type\">GroupLeader</span> <span class=\"variable\">groupLeader</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">GroupLeader</span>();</span><br><span class=\"line\">        <span class=\"type\">Manager</span> <span class=\"variable\">manager</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Manager</span>();</span><br><span class=\"line\">        <span class=\"type\">GeneralManager</span> <span class=\"variable\">generalManager</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">GeneralManager</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        groupLeader.setNextHandler(manager);<span class=\"comment\">//小组长的领导是部门经理</span></span><br><span class=\"line\">        manager.setNextHandler(generalManager);<span class=\"comment\">//部门经理的领导是总经理</span></span><br><span class=\"line\">        <span class=\"comment\">//之所以在这里设置上级领导，是因为可以根据实际需求来更改设置，如果实战中上级领导人都是固定的，则可以移到领导实现类中。</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//提交申请</span></span><br><span class=\"line\">        groupLeader.submit(leave);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"644-优缺点\"><a class=\"markdownIt-Anchor\" href=\"#644-优缺点\">#</a> 6.4.4 优缺点</h3>\n<p><strong>1，优点：</strong></p>\n<ul>\n<li>\n<p>降低了对象之间的耦合度</p>\n<p>该模式降低了请求发送者和接收者的耦合度。</p>\n</li>\n<li>\n<p>增强了系统的可扩展性</p>\n<p>可以根据需要增加新的请求处理类，满足开闭原则。</p>\n</li>\n<li>\n<p>增强了给对象指派职责的灵活性</p>\n<p>当工作流程发生变化，可以动态地改变链内的成员或者修改它们的次序，也可动态地新增或者删除责任。</p>\n</li>\n<li>\n<p>责任链简化了对象之间的连接</p>\n<p>一个对象只需保持一个指向其后继者的引用，不需保持其他所有处理者的引用，这避免了使用众多的 if 或者 if・・・else 语句。</p>\n</li>\n<li>\n<p>责任分担</p>\n<p>每个类只需要处理自己该处理的工作，不能处理的传递给下一个对象完成，明确各类的责任范围，符合类的单一职责原则。</p>\n</li>\n</ul>\n<p><strong>2，缺点：</strong></p>\n<ul>\n<li>不能保证每个请求一定被处理。由于一个请求没有明确的接收者，所以不能保证它一定会被处理，该请求可能一直传到链的末端都得不到处理。</li>\n<li>对比较长的职责链，请求的处理可能涉及多个处理对象，系统性能将受到一定影响。</li>\n<li>职责链建立的合理性要靠客户端来保证，增加了客户端的复杂性，可能会由于职责链的错误设置而导致系统出错，如可能会造成循环调用。</li>\n</ul>\n<h3 id=\"645-源码解析\"><a class=\"markdownIt-Anchor\" href=\"#645-源码解析\">#</a> 6.4.5 源码解析</h3>\n<p>在 javaWeb 应用开发中，FilterChain 是职责链（过滤器）模式的典型应用，以下是 Filter 的模拟实现分析:</p>\n<ul>\n<li>\n<p>模拟 web 请求 Request 以及 web 响应 Response</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Request</span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Response</span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n</li>\n<li>\n<p>模拟 web 过滤器 Filter</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Filter</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doFilter</span><span class=\"params\">(Request req,Response res,FilterChain c)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n</li>\n<li>\n<p>模拟实现具体过滤器</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FirstFilter</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Filter</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doFilter</span><span class=\"params\">(Request request, Response response, FilterChain chain)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;过滤器1 前置处理&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 先执行所有request再倒序执行所有response</span></span><br><span class=\"line\">        chain.doFilter(request, response);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;过滤器1 后置处理&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SecondFilter</span>  <span class=\"keyword\">implements</span> <span class=\"title class_\">Filter</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doFilter</span><span class=\"params\">(Request request, Response response, FilterChain chain)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;过滤器2 前置处理&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 先执行所有request再倒序执行所有response</span></span><br><span class=\"line\">        chain.doFilter(request, response);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;过滤器2 后置处理&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n</li>\n<li>\n<p>模拟实现过滤器链 FilterChain</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FilterChain</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Filter&gt; filters = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;Filter&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 链式调用</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> FilterChain <span class=\"title function_\">addFilter</span><span class=\"params\">(Filter filter)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.filters.add(filter);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doFilter</span><span class=\"params\">(Request request, Response response)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index == filters.size()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">Filter</span> <span class=\"variable\">filter</span> <span class=\"operator\">=</span> filters.get(index);</span><br><span class=\"line\">        index++;</span><br><span class=\"line\">        filter.doFilter(request, response, <span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n</li>\n<li>\n<p>测试类</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Client</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Request</span>  <span class=\"variable\">req</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">Response</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span> ;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">FilterChain</span> <span class=\"variable\">filterChain</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FilterChain</span>();</span><br><span class=\"line\">        filterChain.addFilter(<span class=\"keyword\">new</span> <span class=\"title class_\">FirstFilter</span>()).addFilter(<span class=\"keyword\">new</span> <span class=\"title class_\">SecondFilter</span>());</span><br><span class=\"line\">        filterChain.doFilter(req,res);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n</li>\n</ul>\n<h2 id=\"65-状态模式\"><a class=\"markdownIt-Anchor\" href=\"#65-状态模式\">#</a> 6.5 状态模式</h2>\n<h3 id=\"651-概述\"><a class=\"markdownIt-Anchor\" href=\"#651-概述\">#</a> 6.5.1 概述</h3>\n<p>【例】通过按钮来控制一个电梯的状态，一个电梯有开门状态，关门状态，停止状态，运行状态。每一种状态改变，都有可能要根据其他状态来更新处理。例如，如果电梯门现在处于运行时状态，就不能进行开门操作，而如果电梯门是停止状态，就可以执行开门操作。</p>\n<p>类图如下：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420232039369.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p>代码如下：</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ILift</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//电梯的4个状态</span></span><br><span class=\"line\">    <span class=\"comment\">//开门状态</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">OPENING_STATE</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">//关门状态</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">CLOSING_STATE</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"comment\">//运行状态</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">RUNNING_STATE</span> <span class=\"operator\">=</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"comment\">//停止状态</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">STOPPING_STATE</span> <span class=\"operator\">=</span> <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//设置电梯的状态</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setState</span><span class=\"params\">(<span class=\"type\">int</span> state)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//电梯的动作</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">open</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">close</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">stop</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Lift</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ILift</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> state;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setState</span><span class=\"params\">(<span class=\"type\">int</span> state)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.state = state;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//执行关门动作</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">close</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (<span class=\"built_in\">this</span>.state) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> OPENING_STATE:</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;电梯关门了。。。&quot;</span>);<span class=\"comment\">//只有开门状态可以关闭电梯门，可以对应电梯状态表来看</span></span><br><span class=\"line\">                <span class=\"built_in\">this</span>.setState(CLOSING_STATE);<span class=\"comment\">//关门之后电梯就是关闭状态了</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> CLOSING_STATE:</span><br><span class=\"line\">                <span class=\"comment\">//do nothing //已经是关门状态，不能关门</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> RUNNING_STATE:</span><br><span class=\"line\">                <span class=\"comment\">//do nothing //运行时电梯门是关着的，不能关门</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> STOPPING_STATE:</span><br><span class=\"line\">                <span class=\"comment\">//do nothing //停止时电梯也是关着的，不能关门</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//执行开门动作</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">open</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (<span class=\"built_in\">this</span>.state) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> OPENING_STATE:<span class=\"comment\">//门已经开了，不能再开门了</span></span><br><span class=\"line\">                <span class=\"comment\">//do nothing</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> CLOSING_STATE:<span class=\"comment\">//关门状态，门打开:</span></span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;电梯门打开了。。。&quot;</span>);</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.setState(OPENING_STATE);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> RUNNING_STATE:</span><br><span class=\"line\">                <span class=\"comment\">//do nothing 运行时电梯不能开门</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> STOPPING_STATE:</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;电梯门开了。。。&quot;</span>);<span class=\"comment\">//电梯停了，可以开门了</span></span><br><span class=\"line\">                <span class=\"built_in\">this</span>.setState(OPENING_STATE);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//执行运行动作</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (<span class=\"built_in\">this</span>.state) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> OPENING_STATE:<span class=\"comment\">//电梯不能开着门就走</span></span><br><span class=\"line\">                <span class=\"comment\">//do nothing</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> CLOSING_STATE:<span class=\"comment\">//门关了，可以运行了</span></span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;电梯开始运行了。。。&quot;</span>);</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.setState(RUNNING_STATE);<span class=\"comment\">//现在是运行状态</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> RUNNING_STATE:</span><br><span class=\"line\">                <span class=\"comment\">//do nothing 已经是运行状态了</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> STOPPING_STATE:</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;电梯开始运行了。。。&quot;</span>);</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.setState(RUNNING_STATE);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//执行停止动作</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">stop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (<span class=\"built_in\">this</span>.state) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> OPENING_STATE: <span class=\"comment\">//开门的电梯已经是是停止的了(正常情况下)</span></span><br><span class=\"line\">                <span class=\"comment\">//do nothing</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> CLOSING_STATE:<span class=\"comment\">//关门时才可以停止</span></span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;电梯停止了。。。&quot;</span>);</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.setState(STOPPING_STATE);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> RUNNING_STATE:<span class=\"comment\">//运行时当然可以停止了</span></span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;电梯停止了。。。&quot;</span>);</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.setState(STOPPING_STATE);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> STOPPING_STATE:</span><br><span class=\"line\">                <span class=\"comment\">//do nothing</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Client</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Lift</span> <span class=\"variable\">lift</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Lift</span>();</span><br><span class=\"line\">        lift.setState(ILift.STOPPING_STATE);<span class=\"comment\">//电梯是停止的</span></span><br><span class=\"line\">        lift.open();<span class=\"comment\">//开门</span></span><br><span class=\"line\">        lift.close();<span class=\"comment\">//关门</span></span><br><span class=\"line\">        lift.run();<span class=\"comment\">//运行</span></span><br><span class=\"line\">        lift.stop();<span class=\"comment\">//停止</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>问题分析：</p>\n<ul>\n<li>使用了大量的 switch…case 这样的判断（if…else 也是一样)，使程序的可阅读性变差。</li>\n<li>扩展性很差。如果新加了断电的状态，我们需要修改上面判断逻辑</li>\n</ul>\n<p><strong>定义：</strong></p>\n<p>对有状态的对象，把复杂的 “判断逻辑” 提取到不同的状态对象中，允许状态对象在其内部状态发生改变时改变其行为。</p>\n<h3 id=\"652-结构\"><a class=\"markdownIt-Anchor\" href=\"#652-结构\">#</a> 6.5.2 结构</h3>\n<p>状态模式包含以下主要角色。</p>\n<ul>\n<li>环境（Context）角色：也称为上下文，它定义了客户程序需要的接口，维护一个当前状态，并将与状态相关的操作委托给当前状态对象来处理。</li>\n<li>抽象状态（State）角色：定义一个接口，用以封装环境对象中的特定状态所对应的行为。</li>\n<li>具体状态（Concrete  State）角色：实现抽象状态所对应的行为。</li>\n</ul>\n<h3 id=\"653-案例实现\"><a class=\"markdownIt-Anchor\" href=\"#653-案例实现\">#</a> 6.5.3 案例实现</h3>\n<p>对上述电梯的案例使用状态模式进行改进。类图如下：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420232053415.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p>代码如下：</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//抽象状态类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LiftState</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义一个环境角色，也就是封装状态的变化引起的功能变化</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Context context;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setContext</span><span class=\"params\">(Context context)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.context = context;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//电梯开门动作</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">open</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//电梯关门动作</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">close</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//电梯运行动作</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//电梯停止动作</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">stop</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//开启状态</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OpenningState</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">LiftState</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//开启当然可以关闭了，我就想测试一下电梯门开关功能</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">open</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;电梯门开启...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">close</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//状态修改</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>.context.setLiftState(Context.closeingState);</span><br><span class=\"line\">        <span class=\"comment\">//动作委托为CloseState来执行，也就是委托给了ClosingState子类执行这个动作</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>.context.getLiftState().close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//电梯门不能开着就跑，这里什么也不做</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//do nothing</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//开门状态已经是停止的了</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">stop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//do nothing</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//运行状态</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RunningState</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">LiftState</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//运行的时候开电梯门？你疯了！电梯不会给你开的</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">open</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//do nothing</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//电梯门关闭？这是肯定了</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">close</span><span class=\"params\">()</span> &#123;<span class=\"comment\">//虽然可以关门，但这个动作不归我执行</span></span><br><span class=\"line\">        <span class=\"comment\">//do nothing</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//这是在运行状态下要实现的方法</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;电梯正在运行...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//这个事绝对是合理的，光运行不停止还有谁敢做这个电梯？！估计只有上帝了</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">stop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.context.setLiftState(Context.stoppingState);</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.context.stop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//停止状态</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StoppingState</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">LiftState</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//停止状态，开门，那是要的！</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">open</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//状态修改</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>.context.setLiftState(Context.openningState);</span><br><span class=\"line\">        <span class=\"comment\">//动作委托为CloseState来执行，也就是委托给了ClosingState子类执行这个动作</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>.context.getLiftState().open();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">close</span><span class=\"params\">()</span> &#123;<span class=\"comment\">//虽然可以关门，但这个动作不归我执行</span></span><br><span class=\"line\">        <span class=\"comment\">//状态修改</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>.context.setLiftState(Context.closeingState);</span><br><span class=\"line\">        <span class=\"comment\">//动作委托为CloseState来执行，也就是委托给了ClosingState子类执行这个动作</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>.context.getLiftState().close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//停止状态再跑起来，正常的很</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//状态修改</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>.context.setLiftState(Context.runningState);</span><br><span class=\"line\">        <span class=\"comment\">//动作委托为CloseState来执行，也就是委托给了ClosingState子类执行这个动作</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>.context.getLiftState().run();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//停止状态是怎么发生的呢？当然是停止方法执行了</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">stop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;电梯停止了...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//关闭状态</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ClosingState</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">LiftState</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"comment\">//电梯门关闭，这是关闭状态要实现的动作</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">close</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;电梯门关闭...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//电梯门关了再打开，逗你玩呢，那这个允许呀</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">open</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.context.setLiftState(Context.openningState);</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.context.open();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//电梯门关了就跑，这是再正常不过了</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.context.setLiftState(Context.runningState);</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.context.run();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//电梯门关着，我就不按楼层</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">stop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.context.setLiftState(Context.stoppingState);</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.context.stop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//环境角色</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Context</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义出所有的电梯状态</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">OpenningState</span> <span class=\"variable\">openningState</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OpenningState</span>();<span class=\"comment\">//开门状态，这时候电梯只能关闭</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">ClosingState</span> <span class=\"variable\">closeingState</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClosingState</span>();<span class=\"comment\">//关闭状态，这时候电梯可以运行、停止和开门</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">RunningState</span> <span class=\"variable\">runningState</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RunningState</span>();<span class=\"comment\">//运行状态，这时候电梯只能停止</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">StoppingState</span> <span class=\"variable\">stoppingState</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StoppingState</span>();<span class=\"comment\">//停止状态，这时候电梯可以开门、运行</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//定义一个当前电梯状态</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> LiftState liftState;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> LiftState <span class=\"title function_\">getLiftState</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.liftState;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setLiftState</span><span class=\"params\">(LiftState liftState)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//当前环境改变</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.liftState = liftState;</span><br><span class=\"line\">        <span class=\"comment\">//把当前的环境通知到各个实现类中</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.liftState.setContext(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">open</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.liftState.open();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">close</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.liftState.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.liftState.run();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">stop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.liftState.stop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//测试类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Client</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Context</span> <span class=\"variable\">context</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Context</span>();</span><br><span class=\"line\">        context.setLiftState(<span class=\"keyword\">new</span> <span class=\"title class_\">ClosingState</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">        context.open();</span><br><span class=\"line\">        context.close();</span><br><span class=\"line\">        context.run();</span><br><span class=\"line\">        context.stop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"654-优缺点\"><a class=\"markdownIt-Anchor\" href=\"#654-优缺点\">#</a> 6.5.4 优缺点</h3>\n<p><strong>1，优点：</strong></p>\n<ul>\n<li>将所有与某个状态有关的行为放到一个类中，并且可以方便地增加新的状态，只需要改变对象状态即可改变对象的行为。</li>\n<li>允许状态转换逻辑与状态对象合成一体，而不是某一个巨大的条件语句块。</li>\n</ul>\n<p><strong>2，缺点：</strong></p>\n<ul>\n<li>状态模式的使用必然会增加系统类和对象的个数。</li>\n<li>状态模式的结构与实现都较为复杂，如果使用不当将导致程序结构和代码的混乱。</li>\n<li>状态模式对 &quot;开闭原则&quot; 的支持并不太好。</li>\n</ul>\n<h3 id=\"655-使用场景\"><a class=\"markdownIt-Anchor\" href=\"#655-使用场景\">#</a> 6.5.5 使用场景</h3>\n<ul>\n<li>当一个对象的行为取决于它的状态，并且它必须在运行时根据状态改变它的行为时，就可以考虑使用状态模式。</li>\n<li>一个操作中含有庞大的分支结构，并且这些分支决定于对象的状态时。</li>\n</ul>\n<h2 id=\"66-观察者模式\"><a class=\"markdownIt-Anchor\" href=\"#66-观察者模式\">#</a> 6.6 观察者模式</h2>\n<h3 id=\"661-概述\"><a class=\"markdownIt-Anchor\" href=\"#661-概述\">#</a> 6.6.1 概述</h3>\n<p><strong>定义：</strong></p>\n<p>又被称为发布 - 订阅（Publish/Subscribe）模式，它定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态变化时，会通知所有的观察者对象，使他们能够自动更新自己。</p>\n<h3 id=\"662-结构\"><a class=\"markdownIt-Anchor\" href=\"#662-结构\">#</a> 6.6.2 结构</h3>\n<p>在观察者模式中有如下角色：</p>\n<ul>\n<li>Subject：抽象主题（抽象被观察者），抽象主题角色把所有观察者对象保存在一个集合里，每个主题都可以有任意数量的观察者，抽象主题提供一个接口，可以增加和删除观察者对象。</li>\n<li>ConcreteSubject：具体主题（具体被观察者），该角色将有关状态存入具体观察者对象，在具体主题的内部状态发生改变时，给所有注册过的观察者发送通知。</li>\n<li>Observer：抽象观察者，是观察者的抽象类，它定义了一个更新接口，使得在得到主题更改通知时更新自己。</li>\n<li>ConcrereObserver：具体观察者，实现抽象观察者定义的更新接口，以便在得到主题更改通知时更新自身的状态。</li>\n</ul>\n<h3 id=\"663-案例实现\"><a class=\"markdownIt-Anchor\" href=\"#663-案例实现\">#</a> 6.6.3 案例实现</h3>\n<p>【例】微信公众号</p>\n<p>在使用微信公众号时，大家都会有这样的体验，当你关注的公众号中有新内容更新的话，它就会推送给关注公众号的微信用户端。我们使用观察者模式来模拟这样的场景，微信用户就是观察者，微信公众号是被观察者，有多个的微信用户关注了程序猿这个公众号。</p>\n<p>类图如下：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420232124135.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p>代码如下：</p>\n<p>定义抽象观察者类，里面定义一个更新的方法</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Observer</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">update</span><span class=\"params\">(String message)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>定义具体观察者类，微信用户是观察者，里面实现了更新的方法</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WeixinUser</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Observer</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 微信用户名</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">WeixinUser</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">update</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        System.out.println(name + <span class=\"string\">&quot;-&quot;</span> + message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>定义抽象主题类，提供了 attach、detach、notify 三个方法</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Subject</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//增加订阅者</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">attach</span><span class=\"params\">(Observer observer)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//删除订阅者</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">detach</span><span class=\"params\">(Observer observer)</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//通知订阅者更新消息</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">notify</span><span class=\"params\">(String message)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<p>微信公众号是具体主题（具体被观察者），里面存储了订阅该公众号的微信用户，并实现了抽象主题中的方法</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SubscriptionSubject</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Subject</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//储存订阅公众号的微信用户</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Observer&gt; weixinUserlist = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;Observer&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">attach</span><span class=\"params\">(Observer observer)</span> &#123;</span><br><span class=\"line\">        weixinUserlist.add(observer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">detach</span><span class=\"params\">(Observer observer)</span> &#123;</span><br><span class=\"line\">        weixinUserlist.remove(observer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">notify</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Observer observer : weixinUserlist) &#123;</span><br><span class=\"line\">            observer.update(message);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>客户端程序</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Client</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SubscriptionSubject mSubscriptionSubject=<span class=\"keyword\">new</span> <span class=\"title class_\">SubscriptionSubject</span>();</span><br><span class=\"line\">        <span class=\"comment\">//创建微信用户</span></span><br><span class=\"line\">        WeixinUser user1=<span class=\"keyword\">new</span> <span class=\"title class_\">WeixinUser</span>(<span class=\"string\">&quot;孙悟空&quot;</span>);</span><br><span class=\"line\">        WeixinUser user2=<span class=\"keyword\">new</span> <span class=\"title class_\">WeixinUser</span>(<span class=\"string\">&quot;猪悟能&quot;</span>);</span><br><span class=\"line\">        WeixinUser user3=<span class=\"keyword\">new</span> <span class=\"title class_\">WeixinUser</span>(<span class=\"string\">&quot;沙悟净&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//订阅公众号</span></span><br><span class=\"line\">        mSubscriptionSubject.attach(user1);</span><br><span class=\"line\">        mSubscriptionSubject.attach(user2);</span><br><span class=\"line\">        mSubscriptionSubject.attach(user3);</span><br><span class=\"line\">        <span class=\"comment\">//公众号更新发出消息给订阅的微信用户</span></span><br><span class=\"line\">        mSubscriptionSubject.notify(<span class=\"string\">&quot;传智黑马的专栏更新了&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<h3 id=\"664-优缺点\"><a class=\"markdownIt-Anchor\" href=\"#664-优缺点\">#</a> 6.6.4 优缺点</h3>\n<p><strong>1，优点：</strong></p>\n<ul>\n<li>降低了目标与观察者之间的耦合关系，两者之间是抽象耦合关系。</li>\n<li>被观察者发送通知，所有注册的观察者都会收到信息【可以实现广播机制】</li>\n</ul>\n<p><strong>2，缺点：</strong></p>\n<ul>\n<li>如果观察者非常多的话，那么所有的观察者收到被观察者发送的通知会耗时</li>\n<li>如果被观察者有循环依赖的话，那么被观察者发送通知会使观察者循环调用，会导致系统崩溃</li>\n</ul>\n<h3 id=\"665-使用场景\"><a class=\"markdownIt-Anchor\" href=\"#665-使用场景\">#</a> 6.6.5 使用场景</h3>\n<ul>\n<li>对象间存在一对多关系，一个对象的状态发生改变会影响其他对象。</li>\n<li>当一个抽象模型有两个方面，其中一个方面依赖于另一方面时。</li>\n</ul>\n<h3 id=\"666-jdk中提供的实现\"><a class=\"markdownIt-Anchor\" href=\"#666-jdk中提供的实现\">#</a> 6.6.6 JDK 中提供的实现</h3>\n<p>在 Java 中，通过 java.util.Observable 类和 java.util.Observer 接口定义了观察者模式，只要实现它们的子类就可以编写观察者模式实例。</p>\n<p><strong>1，Observable 类</strong></p>\n<p>Observable 类是抽象目标类（被观察者），它有一个 Vector 集合成员变量，用于保存所有要通知的观察者对象，下面来介绍它最重要的 3 个方法。</p>\n<ul>\n<li>\n<p>void addObserver (Observer o) 方法：用于将新的观察者对象添加到集合中。</p>\n</li>\n<li>\n<p>void notifyObservers (Object arg) 方法：调用集合中的所有观察者对象的 update 方法，通知它们数据发生改变。通常越晚加入集合的观察者越先得到通知。</p>\n</li>\n<li>\n<p>void setChange () 方法：用来设置一个 boolean 类型的内部标志，注明目标对象发生了变化。当它为 true 时，notifyObservers () 才会通知观察者。</p>\n</li>\n</ul>\n<p><strong>2，Observer 接口</strong></p>\n<p>Observer 接口是抽象观察者，它监视目标对象的变化，当目标对象发生变化时，观察者得到通知，并调用 update 方法，进行相应的工作。</p>\n<p>【例】警察抓小偷</p>\n<p>警察抓小偷也可以使用观察者模式来实现，警察是观察者，小偷是被观察者。代码如下：</p>\n<p>小偷是一个被观察者，所以需要继承 Observable 类</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Thief</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Observable</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Thief</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">steal</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;小偷：我偷东西了，有没有人来抓我！！！&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.setChanged(); <span class=\"comment\">//changed  = true</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>.notifyObservers();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<p>警察是一个观察者，所以需要让其实现 Observer 接口</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Policemen</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Observer</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Policemen</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">update</span><span class=\"params\">(Observable o, Object arg)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;警察：&quot;</span> + ((Thief) o).getName() + <span class=\"string\">&quot;，我已经盯你很久了，你可以保持沉默，但你所说的将成为呈堂证供！！！&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>客户端代码</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Client</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建小偷对象</span></span><br><span class=\"line\">        <span class=\"type\">Thief</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thief</span>(<span class=\"string\">&quot;隔壁老王&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//创建警察对象</span></span><br><span class=\"line\">        <span class=\"type\">Policemen</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Policemen</span>(<span class=\"string\">&quot;小李&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//让警察盯着小偷</span></span><br><span class=\"line\">        t.addObserver(p);</span><br><span class=\"line\">        <span class=\"comment\">//小偷偷东西</span></span><br><span class=\"line\">        t.steal();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"67-中介者模式\"><a class=\"markdownIt-Anchor\" href=\"#67-中介者模式\">#</a> 6.7 中介者模式</h2>\n<h3 id=\"671-概述\"><a class=\"markdownIt-Anchor\" href=\"#671-概述\">#</a> 6.7.1 概述</h3>\n<p>一般来说，同事类之间的关系是比较复杂的，多个同事类之间互相关联时，他们之间的关系会呈现为复杂的网状结构，这是一种过度耦合的架构，即不利于类的复用，也不稳定。例如在下左图中，有六个同事类对象，假如对象 1 发生变化，那么将会有 4 个对象受到影响。如果对象 2 发生变化，那么将会有 5 个对象受到影响。也就是说，同事类之间直接关联的设计是不好的。</p>\n<p>如果引入中介者模式，那么同事类之间的关系将变为星型结构，从下右图中可以看到，任何一个类的变动，只会影响的类本身，以及中介者，这样就减小了系统的耦合。一个好的设计，必定不会把所有的对象关系处理逻辑封装在本类中，而是使用一个专门的类来管理那些不属于自己的行为。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420232203595.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p><strong>定义：</strong></p>\n<p>又叫调停模式，定义一个中介角色来封装一系列对象之间的交互，使原有对象之间的耦合松散，且可以独立地改变它们之间的交互。</p>\n<h3 id=\"672-结构\"><a class=\"markdownIt-Anchor\" href=\"#672-结构\">#</a> 6.7.2 结构</h3>\n<p>中介者模式包含以下主要角色：</p>\n<ul>\n<li>\n<p>抽象中介者（Mediator）角色：它是中介者的接口，提供了同事对象注册与转发同事对象信息的抽象方法。</p>\n</li>\n<li>\n<p>具体中介者（ConcreteMediator）角色：实现中介者接口，定义一个 List 来管理同事对象，协调各个同事角色之间的交互关系，因此它依赖于同事角色。</p>\n</li>\n<li>\n<p>抽象同事类（Colleague）角色：定义同事类的接口，保存中介者对象，提供同事对象交互的抽象方法，实现所有相互影响的同事类的公共功能。</p>\n</li>\n<li>\n<p>具体同事类（Concrete Colleague）角色：是抽象同事类的实现者，当需要与其他同事对象交互时，由中介者对象负责后续的交互。</p>\n</li>\n</ul>\n<h3 id=\"673-案例实现\"><a class=\"markdownIt-Anchor\" href=\"#673-案例实现\">#</a> 6.7.3 案例实现</h3>\n<p>【例】租房</p>\n<p>现在租房基本都是通过房屋中介，房主将房屋托管给房屋中介，而租房者从房屋中介获取房屋信息。房屋中介充当租房者与房屋所有者之间的中介者。</p>\n<p>类图如下：<br>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420232240991.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p>代码如下：</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//抽象中介者</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Mediator</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//申明一个联络方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">constact</span><span class=\"params\">(String message,Person person)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//抽象同事类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Mediator mediator;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">(String name,Mediator mediator)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.mediator = mediator;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//具体同事类 房屋拥有者</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HouseOwner</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">HouseOwner</span><span class=\"params\">(String name, Mediator mediator)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(name, mediator);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//与中介者联系</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">constact</span><span class=\"params\">(String message)</span>&#123;</span><br><span class=\"line\">        mediator.constact(message, <span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取信息</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getMessage</span><span class=\"params\">(String message)</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;房主&quot;</span> + name +<span class=\"string\">&quot;获取到的信息：&quot;</span> + message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//具体同事类 承租人</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Tenant</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Tenant</span><span class=\"params\">(String name, Mediator mediator)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(name, mediator);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//与中介者联系</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">constact</span><span class=\"params\">(String message)</span>&#123;</span><br><span class=\"line\">        mediator.constact(message, <span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取信息</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getMessage</span><span class=\"params\">(String message)</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;租房者&quot;</span> + name +<span class=\"string\">&quot;获取到的信息：&quot;</span> + message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//中介机构</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MediatorStructure</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Mediator</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//首先中介结构必须知道所有房主和租房者的信息</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HouseOwner houseOwner;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Tenant tenant;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> HouseOwner <span class=\"title function_\">getHouseOwner</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> houseOwner;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setHouseOwner</span><span class=\"params\">(HouseOwner houseOwner)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.houseOwner = houseOwner;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Tenant <span class=\"title function_\">getTenant</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tenant;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setTenant</span><span class=\"params\">(Tenant tenant)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.tenant = tenant;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">constact</span><span class=\"params\">(String message, Person person)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (person == houseOwner) &#123;          <span class=\"comment\">//如果是房主，则租房者获得信息</span></span><br><span class=\"line\">            tenant.getMessage(message);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;       <span class=\"comment\">//反正则是房主获得信息</span></span><br><span class=\"line\">            houseOwner.getMessage(message);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//测试类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Client</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//一个房主、一个租房者、一个中介机构</span></span><br><span class=\"line\">        <span class=\"type\">MediatorStructure</span> <span class=\"variable\">mediator</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MediatorStructure</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//房主和租房者只需要知道中介机构即可</span></span><br><span class=\"line\">        <span class=\"type\">HouseOwner</span> <span class=\"variable\">houseOwner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HouseOwner</span>(<span class=\"string\">&quot;张三&quot;</span>, mediator);</span><br><span class=\"line\">        <span class=\"type\">Tenant</span> <span class=\"variable\">tenant</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Tenant</span>(<span class=\"string\">&quot;李四&quot;</span>, mediator);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//中介结构要知道房主和租房者</span></span><br><span class=\"line\">        mediator.setHouseOwner(houseOwner);</span><br><span class=\"line\">        mediator.setTenant(tenant);</span><br><span class=\"line\"></span><br><span class=\"line\">        tenant.constact(<span class=\"string\">&quot;需要租三室的房子&quot;</span>);</span><br><span class=\"line\">        houseOwner.constact(<span class=\"string\">&quot;我这有三室的房子，你需要租吗？&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"674-优缺点\"><a class=\"markdownIt-Anchor\" href=\"#674-优缺点\">#</a> 6.7.4 优缺点</h3>\n<p><strong>1，优点：</strong></p>\n<ul>\n<li>\n<p>松散耦合</p>\n<p>中介者模式通过把多个同事对象之间的交互封装到中介者对象里面，从而使得同事对象之间松散耦合，基本上可以做到互补依赖。这样一来，同事对象就可以独立地变化和复用，而不再像以前那样 “牵一处而动全身” 了。</p>\n</li>\n<li>\n<p>集中控制交互</p>\n<p>多个同事对象的交互，被封装在中介者对象里面集中管理，使得这些交互行为发生变化的时候，只需要修改中介者对象就可以了，当然如果是已经做好的系统，那么就扩展中介者对象，而各个同事类不需要做修改。</p>\n</li>\n<li>\n<p>一对多关联转变为一对一的关联</p>\n<p>没有使用中介者模式的时候，同事对象之间的关系通常是一对多的，引入中介者对象以后，中介者对象和同事对象的关系通常变成双向的一对一，这会让对象的关系更容易理解和实现。</p>\n</li>\n</ul>\n<p><strong>2，缺点：</strong></p>\n<p>当同事类太多时，中介者的职责将很大，它会变得复杂而庞大，以至于系统难以维护。</p>\n<h3 id=\"675-使用场景\"><a class=\"markdownIt-Anchor\" href=\"#675-使用场景\">#</a> 6.7.5 使用场景</h3>\n<ul>\n<li>系统中对象之间存在复杂的引用关系，系统结构混乱且难以理解。</li>\n<li>当想创建一个运行于多个类之间的对象，又不想生成新的子类时。</li>\n</ul>\n<h2 id=\"68-迭代器模式\"><a class=\"markdownIt-Anchor\" href=\"#68-迭代器模式\">#</a> 6.8 迭代器模式</h2>\n<h3 id=\"681-概述\"><a class=\"markdownIt-Anchor\" href=\"#681-概述\">#</a> 6.8.1 概述</h3>\n<p><strong>定义：</strong></p>\n<p>提供一个对象来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示。</p>\n<h3 id=\"682-结构\"><a class=\"markdownIt-Anchor\" href=\"#682-结构\">#</a> 6.8.2 结构</h3>\n<p>迭代器模式主要包含以下角色：</p>\n<ul>\n<li>\n<p>抽象聚合（Aggregate）角色：定义存储、添加、删除聚合元素以及创建迭代器对象的接口。</p>\n</li>\n<li>\n<p>具体聚合（ConcreteAggregate）角色：实现抽象聚合类，返回一个具体迭代器的实例。</p>\n</li>\n<li>\n<p>抽象迭代器（Iterator）角色：定义访问和遍历聚合元素的接口，通常包含 hasNext ()、next () 等方法。</p>\n</li>\n<li>\n<p>具体迭代器（Concretelterator）角色：实现抽象迭代器接口中所定义的方法，完成对聚合对象的遍历，记录遍历的当前位置。</p>\n</li>\n</ul>\n<h3 id=\"683-案例实现\"><a class=\"markdownIt-Anchor\" href=\"#683-案例实现\">#</a> 6.8.3 案例实现</h3>\n<p>【例】定义一个可以存储学生对象的容器对象，将遍历该容器的功能交由迭代器实现，涉及到的类如下：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420232317504.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p>代码如下：</p>\n<p>定义迭代器接口，声明 hasNext、next 方法</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">StudentIterator</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">hasNext</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    Student <span class=\"title function_\">next</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>定义具体的迭代器类，重写所有的抽象方法</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StudentIteratorImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">StudentIterator</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Student&gt; list;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">position</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">StudentIteratorImpl</span><span class=\"params\">(List&lt;Student&gt; list)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.list = list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">hasNext</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> position &lt; list.size();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Student <span class=\"title function_\">next</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Student</span> <span class=\"variable\">currentStudent</span> <span class=\"operator\">=</span> list.get(position);</span><br><span class=\"line\">        position ++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> currentStudent;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>定义抽象容器类，包含添加元素，删除元素，获取迭代器对象的方法</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">StudentAggregate</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">addStudent</span><span class=\"params\">(Student student)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">removeStudent</span><span class=\"params\">(Student student)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    StudentIterator <span class=\"title function_\">getStudentIterator</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>定义具体的容器类，重写所有的方法</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StudentAggregateImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">StudentAggregate</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Student&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;Student&gt;();  <span class=\"comment\">// 学生列表</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addStudent</span><span class=\"params\">(Student student)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.list.add(student);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">removeStudent</span><span class=\"params\">(Student student)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.list.remove(student);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> StudentIterator <span class=\"title function_\">getStudentIterator</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StudentIteratorImpl</span>(list);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"684-优缺点\"><a class=\"markdownIt-Anchor\" href=\"#684-优缺点\">#</a> 6.8.4 优缺点</h3>\n<p><strong>1，优点：</strong></p>\n<ul>\n<li>它支持以不同的方式遍历一个聚合对象，在同一个聚合对象上可以定义多种遍历方式。在迭代器模式中只需要用一个不同的迭代器来替换原有迭代器即可改变遍历算法，我们也可以自己定义迭代器的子类以支持新的遍历方式。</li>\n<li>迭代器简化了聚合类。由于引入了迭代器，在原有的聚合对象中不需要再自行提供数据遍历等方法，这样可以简化聚合类的设计。</li>\n<li>在迭代器模式中，由于引入了抽象层，增加新的聚合类和迭代器类都很方便，无须修改原有代码，满足 “开闭原则” 的要求。</li>\n</ul>\n<p><strong>2，缺点：</strong></p>\n<p>增加了类的个数，这在一定程度上增加了系统的复杂性。</p>\n<h3 id=\"685-使用场景\"><a class=\"markdownIt-Anchor\" href=\"#685-使用场景\">#</a> 6.8.5 使用场景</h3>\n<ul>\n<li>当需要为聚合对象提供多种遍历方式时。</li>\n<li>当需要为遍历不同的聚合结构提供一个统一的接口时。</li>\n<li>当访问一个聚合对象的内容而无须暴露其内部细节的表示时。</li>\n</ul>\n<h3 id=\"686-jdk源码解析\"><a class=\"markdownIt-Anchor\" href=\"#686-jdk源码解析\">#</a> 6.8.6 JDK 源码解析</h3>\n<p>迭代器模式在 JAVA 的很多集合类中被广泛应用，接下来看看 JAVA 源码中是如何使用迭代器模式的。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">Iterator&lt;String&gt; iterator = list.iterator(); <span class=\"comment\">//list.iterator()方法返回的肯定是Iterator接口的子实现类对象</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (iterator.hasNext()) &#123;</span><br><span class=\"line\">    System.out.println(iterator.next());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>看完这段代码是不是很熟悉，与我们上面代码基本类似。单列集合都使用到了迭代器，我们以 ArrayList 举例来说明</p>\n<ul>\n<li>List：抽象聚合类</li>\n<li>ArrayList：具体的聚合类</li>\n<li>Iterator：抽象迭代器</li>\n<li>list.iterator ()：返回的是实现了  <code>Iterator</code>  接口的具体迭代器对象</li>\n</ul>\n<p>具体的来看看 ArrayList 的代码实现</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ArrayList</span>&lt;E&gt; <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractList</span>&lt;E&gt;</span><br><span class=\"line\">        <span class=\"keyword\">implements</span> <span class=\"title class_\">List</span>&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> Iterator&lt;E&gt; <span class=\"title function_\">iterator</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Itr</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Itr</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Iterator</span>&lt;E&gt; &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> cursor;       <span class=\"comment\">// 下一个要返回元素的索引</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">lastRet</span> <span class=\"operator\">=</span> -<span class=\"number\">1</span>; <span class=\"comment\">// 上一个返回元素的索引</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">expectedModCount</span> <span class=\"operator\">=</span> modCount;</span><br><span class=\"line\"></span><br><span class=\"line\">        Itr() &#123;&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        <span class=\"comment\">//判断是否还有元素</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">hasNext</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> cursor != size;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取下一个元素</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> E <span class=\"title function_\">next</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            checkForComodification();</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> cursor;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt;= size)</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NoSuchElementException</span>();</span><br><span class=\"line\">            Object[] elementData = ArrayList.<span class=\"built_in\">this</span>.elementData;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt;= elementData.length)</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ConcurrentModificationException</span>();</span><br><span class=\"line\">            cursor = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (E) elementData[lastRet = i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>这部分代码还是比较简单，大致就是在  <code>iterator</code>  方法中返回了一个实例化的  <code>Iterator</code>  对象。Itr 是一个内部类，它实现了  <code>Iterator</code>  接口并重写了其中的抽象方法。</p>\n<blockquote>\n<p>注意：</p>\n<p>当我们在使用 JAVA 开发的时候，想使用迭代器模式的话，只要让我们自己定义的容器类实现 <code>java.util.Iterable</code>  并实现其中的 iterator () 方法使其返回一个  <code>java.util.Iterator</code>  的实现类就可以了。</p>\n</blockquote>\n<h2 id=\"69-访问者模式\"><a class=\"markdownIt-Anchor\" href=\"#69-访问者模式\">#</a> 6.9 访问者模式</h2>\n<h3 id=\"691-概述\"><a class=\"markdownIt-Anchor\" href=\"#691-概述\">#</a> 6.9.1 概述</h3>\n<p><strong>定义：</strong></p>\n<p>封装一些作用于某种数据结构中的各元素的操作，它可以在不改变这个数据结构的前提下定义作用于这些元素的新的操作。</p>\n<h3 id=\"692-结构\"><a class=\"markdownIt-Anchor\" href=\"#692-结构\">#</a> 6.9.2 结构</h3>\n<p>访问者模式包含以下主要角色:</p>\n<ul>\n<li>抽象访问者（Visitor）角色：定义了对每一个元素 <code>（Element）</code> 访问的行为，它的参数就是可以访问的元素，它的方法个数理论上来讲与元素类个数（Element 的实现类个数）是一样的，从这点不难看出，访问者模式要求元素类的个数不能改变。</li>\n<li>具体访问者（ConcreteVisitor）角色：给出对每一个元素类访问时所产生的具体行为。</li>\n<li>抽象元素（Element）角色：定义了一个接受访问者的方法（ <code>accept</code> ），其意义是指，每一个元素都要可以被访问者访问。</li>\n<li>具体元素（ConcreteElement）角色： 提供接受访问方法的具体实现，而这个具体的实现，通常情况下是使用访问者提供的访问该元素类的方法。</li>\n<li>对象结构（Object Structure）角色：定义当中所提到的对象结构，对象结构是一个抽象表述，具体点可以理解为一个具有容器性质或者复合对象特性的类，它会含有一组元素（ <code>Element</code> ），并且可以迭代这些元素，供访问者访问。</li>\n</ul>\n<h3 id=\"693-案例实现\"><a class=\"markdownIt-Anchor\" href=\"#693-案例实现\">#</a> 6.9.3 案例实现</h3>\n<p>【例】给宠物喂食</p>\n<p>现在养宠物的人特别多，我们就以这个为例，当然宠物还分为狗，猫等，要给宠物喂食的话，主人可以喂，其他人也可以喂食。</p>\n<ul>\n<li>访问者角色：给宠物喂食的人</li>\n<li>具体访问者角色：主人、其他人</li>\n<li>抽象元素角色：动物抽象类</li>\n<li>具体元素角色：宠物狗、宠物猫</li>\n<li>结构对象角色：主人家</li>\n</ul>\n<p>类图如下：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420225744449.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p>代码如下：</p>\n<p>创建抽象访问者接口</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">feed</span><span class=\"params\">(Cat cat)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">feed</span><span class=\"params\">(Dog dog)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>创建不同的具体访问者角色（主人和其他人），都需要实现  <code>Person</code>  接口</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Owner</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">feed</span><span class=\"params\">(Cat cat)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;主人喂食猫&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">feed</span><span class=\"params\">(Dog dog)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;主人喂食狗&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Someone</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">feed</span><span class=\"params\">(Cat cat)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;其他人喂食猫&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">feed</span><span class=\"params\">(Dog dog)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;其他人喂食狗&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>定义抽象节点 – 宠物</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">accept</span><span class=\"params\">(Person person)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>定义实现 <code>Animal</code>  接口的 具体节点（元素）</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">accept</span><span class=\"params\">(Person person)</span> &#123;</span><br><span class=\"line\">        person.feed(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;好好吃，汪汪汪！！！&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Cat</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">accept</span><span class=\"params\">(Person person)</span> &#123;</span><br><span class=\"line\">        person.feed(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;好好吃，喵喵喵！！！&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>定义对象结构，此案例中就是主人的家</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Home</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Animal&gt; nodeList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;Animal&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">action</span><span class=\"params\">(Person person)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Animal node : nodeList) &#123;</span><br><span class=\"line\">            node.accept(person);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//添加操作</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(Animal animal)</span> &#123;</span><br><span class=\"line\">        nodeList.add(animal);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<p>测试类</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Client</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Home</span> <span class=\"variable\">home</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Home</span>();</span><br><span class=\"line\">        home.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Dog</span>());</span><br><span class=\"line\">        home.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Cat</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Owner</span> <span class=\"variable\">owner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Owner</span>();</span><br><span class=\"line\">        home.action(owner);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Someone</span> <span class=\"variable\">someone</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Someone</span>();</span><br><span class=\"line\">        home.action(someone);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"694-优缺点\"><a class=\"markdownIt-Anchor\" href=\"#694-优缺点\">#</a> 6.9.4 优缺点</h3>\n<p><strong>1，优点：</strong></p>\n<ul>\n<li>\n<p>扩展性好</p>\n<p>在不修改对象结构中的元素的情况下，为对象结构中的元素添加新的功能。</p>\n</li>\n<li>\n<p>复用性好</p>\n<p>通过访问者来定义整个对象结构通用的功能，从而提高复用程度。</p>\n</li>\n<li>\n<p>分离无关行为</p>\n<p>通过访问者来分离无关的行为，把相关的行为封装在一起，构成一个访问者，这样每一个访问者的功能都比较单一。</p>\n</li>\n</ul>\n<p><strong>2，缺点：</strong></p>\n<ul>\n<li>\n<p>对象结构变化很困难</p>\n<p>在访问者模式中，每增加一个新的元素类，都要在每一个具体访问者类中增加相应的具体操作，这违背了 “开闭原则”。</p>\n</li>\n<li>\n<p>违反了依赖倒置原则</p>\n<p>访问者模式依赖了具体类，而没有依赖抽象类。</p>\n</li>\n</ul>\n<h3 id=\"695-使用场景\"><a class=\"markdownIt-Anchor\" href=\"#695-使用场景\">#</a> 6.9.5  使用场景</h3>\n<ul>\n<li>\n<p>对象结构相对稳定，但其操作算法经常变化的程序。</p>\n</li>\n<li>\n<p>对象结构中的对象需要提供多种不同且不相关的操作，而且要避免让这些操作的变化影响对象的结构。</p>\n</li>\n</ul>\n<h3 id=\"696-扩展\"><a class=\"markdownIt-Anchor\" href=\"#696-扩展\">#</a> 6.9.6 扩展</h3>\n<p>访问者模式用到了一种双分派的技术。</p>\n<p><strong>1，分派：</strong></p>\n<p>变量被声明时的类型叫做变量的静态类型，有些人又把静态类型叫做明显类型；而变量所引用的对象的真实类型又叫做变量的实际类型。比如  <code>Map map = new HashMap()</code>  ，map 变量的静态类型是  <code>Map</code>  ，实际类型是  <code>HashMap</code>  。根据对象的类型而对方法进行的选择，就是分派 (Dispatch)，分派 (Dispatch) 又分为两种，即静态分派和动态分派。</p>\n<p><strong>静态分派 (Static Dispatch)</strong> 发生在编译时期，分派根据静态类型信息发生。静态分派对于我们来说并不陌生，方法重载就是静态分派。</p>\n<p><strong>动态分派 (Dynamic Dispatch)</strong> 发生在运行时期，动态分派动态地置换掉某个方法。Java 通过方法的重写支持动态分派。</p>\n<p><strong>2，动态分派：</strong></p>\n<p>通过方法的重写支持动态分派。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Animal&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;dog&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Cat</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">     <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;cat&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Client</span> &#123;</span><br><span class=\"line\">   \t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Animal</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Dog</span>();</span><br><span class=\"line\">        a.execute();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"type\">Animal</span> <span class=\"variable\">a1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Cat</span>();</span><br><span class=\"line\">        a1.execute();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>上面代码的结果大家应该直接可以说出来，这不就是多态吗！运行执行的是子类中的方法。</p>\n<p>Java 编译器在编译时期并不总是知道哪些代码会被执行，因为编译器仅仅知道对象的静态类型，而不知道对象的真实类型；而方法的调用则是根据对象的真实类型，而不是静态类型。</p>\n<p><strong>3，静态分派：</strong></p>\n<p>通过方法重载支持静态分派。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Cat</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Execute</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(Animal a)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Animal&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(Dog d)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;dog&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(Cat c)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;cat&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Client</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Animal</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Animal</span>();</span><br><span class=\"line\">        <span class=\"type\">Animal</span> <span class=\"variable\">a1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Dog</span>();</span><br><span class=\"line\">        <span class=\"type\">Animal</span> <span class=\"variable\">a2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Cat</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Execute</span> <span class=\"variable\">exe</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Execute</span>();</span><br><span class=\"line\">        exe.execute(a);</span><br><span class=\"line\">        exe.execute(a1);</span><br><span class=\"line\">        exe.execute(a2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>运行结果：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420232437613.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p>这个结果可能出乎一些人的意料了，为什么呢？</p>\n<p><strong>重载方法的分派是根据静态类型进行的，这个分派过程在编译时期就完成了。</strong></p>\n<p><strong>4，双分派：</strong></p>\n<p>所谓双分派技术就是在选择一个方法的时候，不仅仅要根据消息接收者（receiver）的运行时区别，还要根据参数的运行时区别。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">accept</span><span class=\"params\">(Execute exe)</span> &#123;</span><br><span class=\"line\">        exe.execute(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">accept</span><span class=\"params\">(Execute exe)</span> &#123;</span><br><span class=\"line\">        exe.execute(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Cat</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">accept</span><span class=\"params\">(Execute exe)</span> &#123;</span><br><span class=\"line\">        exe.execute(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Execute</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(Animal a)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;animal&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(Dog d)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;dog&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(Cat c)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;cat&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Client</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Animal</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Animal</span>();</span><br><span class=\"line\">        <span class=\"type\">Animal</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Dog</span>();</span><br><span class=\"line\">        <span class=\"type\">Animal</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Cat</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Execute</span> <span class=\"variable\">exe</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Execute</span>();</span><br><span class=\"line\">        a.accept(exe);</span><br><span class=\"line\">        d.accept(exe);</span><br><span class=\"line\">        c.accept(exe);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>在上面代码中，客户端将 Execute 对象做为参数传递给 Animal 类型的变量调用的方法，这里完成第一次分派，这里是方法重写，所以是动态分派，也就是执行实际类型中的方法，同时也 <code>将自己this作为参数传递进去，这里就完成了第二次分派</code> ，这里的 Execute 类中有多个重载的方法，而传递进行的是 this，就是具体的实际类型的对象。</p>\n<p>说到这里，我们已经明白双分派是怎么回事了，但是它有什么效果呢？就是可以实现方法的动态绑定，我们可以对上面的程序进行修改。</p>\n<p>运行结果如下：<br>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420232505144.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p><strong>双分派实现动态绑定的本质，就是在重载方法委派的前面加上了继承体系中覆盖的环节，由于覆盖是动态的，所以重载就是动态的了。</strong></p>\n<h2 id=\"610-备忘录模式\"><a class=\"markdownIt-Anchor\" href=\"#610-备忘录模式\">#</a> 6.10 备忘录模式</h2>\n<h3 id=\"6101-概述\"><a class=\"markdownIt-Anchor\" href=\"#6101-概述\">#</a> 6.10.1 概述</h3>\n<p>备忘录模式提供了一种状态恢复的实现机制，使得用户可以方便地回到一个特定的历史步骤，当新的状态无效或者存在问题时，可以使用暂时存储起来的备忘录将状态复原，很多软件都提供了撤销（Undo）操作，如 Word、记事本、Photoshop、IDEA 等软件在编辑时按 Ctrl+Z 组合键时能撤销当前操作，使文档恢复到之前的状态；还有在 浏览器 中的后退键、数据库事务管理中的回滚操作、玩游戏时的中间结果存档功能、数据库与操作系统的备份操作、棋类游戏中的悔棋功能等都属于这类。</p>\n<p><strong>定义：</strong></p>\n<p>又叫快照模式，在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，以便以后当需要时能将该对象恢复到原先保存的状态。</p>\n<h3 id=\"6102-结构\"><a class=\"markdownIt-Anchor\" href=\"#6102-结构\">#</a> 6.10.2 结构</h3>\n<p>备忘录模式的主要角色如下：</p>\n<ul>\n<li>发起人（Originator）角色：记录当前时刻的内部状态信息，提供创建备忘录和恢复备忘录数据的功能，实现其他业务功能，它可以访问备忘录里的所有信息。</li>\n<li>备忘录（Memento）角色：负责存储发起人的内部状态，在需要的时候提供这些内部状态给发起人。</li>\n<li>管理者（Caretaker）角色：对备忘录进行管理，提供保存与获取备忘录的功能，但其不能对备忘录的内容进行访问与修改。</li>\n</ul>\n<blockquote>\n<p>备忘录有两个等效的接口：</p>\n<ul>\n<li><strong>窄接口</strong>：管理者 (Caretaker) 对象（和其他发起人对象之外的任何对象）看到的是备忘录的窄接口 (narror Interface)，这个窄接口只允许他把备忘录对象传给其他的对象。</li>\n<li><strong>宽接口</strong>：与管理者看到的窄接口相反，发起人对象可以看到一个宽接口 (wide Interface)，这个宽接口允许它读取所有的数据，以便根据这些数据恢复这个发起人对象的内部状态。</li>\n</ul>\n</blockquote>\n<h3 id=\"6103-案例实现\"><a class=\"markdownIt-Anchor\" href=\"#6103-案例实现\">#</a> 6.10.3 案例实现</h3>\n<p>【例】游戏挑战 BOSS</p>\n<p>游戏中的某个场景，一游戏角色有生命力、攻击力、防御力等数据，在打 Boss 前和后一定会不一样的，我们允许玩家如果感觉与 Boss 决斗的效果不理想可以让游戏恢复到决斗之前的状态。</p>\n<p>要实现上述案例，有两种方式：</p>\n<ul>\n<li>“白箱” 备忘录模式</li>\n<li>“黑箱” 备忘录模式</li>\n</ul>\n<h4 id=\"61031-白箱备忘录模式\"><a class=\"markdownIt-Anchor\" href=\"#61031-白箱备忘录模式\">#</a> 6.10.3.1 “白箱” 备忘录模式</h4>\n<p>备忘录角色对任何对象都提供一个接口，即宽接口，备忘录角色的内部所存储的状态就对所有对象公开。类图如下：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420232536766.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p>代码如下：</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//游戏角色类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GameRole</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> vit; <span class=\"comment\">//生命力</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> atk; <span class=\"comment\">//攻击力</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> def; <span class=\"comment\">//防御力</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//初始化状态</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">initState</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.vit = <span class=\"number\">100</span>;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.atk = <span class=\"number\">100</span>;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.def = <span class=\"number\">100</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//战斗</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fight</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.vit = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.atk = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.def = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//保存角色状态</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RoleStateMemento <span class=\"title function_\">saveState</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RoleStateMemento</span>(vit, atk, def);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//回复角色状态</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">recoverState</span><span class=\"params\">(RoleStateMemento roleStateMemento)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.vit = roleStateMemento.getVit();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.atk = roleStateMemento.getAtk();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.def = roleStateMemento.getDef();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">stateDisplay</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;角色生命力：&quot;</span> + vit);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;角色攻击力：&quot;</span> + atk);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;角色防御力：&quot;</span> + def);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getVit</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> vit;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setVit</span><span class=\"params\">(<span class=\"type\">int</span> vit)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.vit = vit;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getAtk</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> atk;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAtk</span><span class=\"params\">(<span class=\"type\">int</span> atk)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.atk = atk;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getDef</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> def;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setDef</span><span class=\"params\">(<span class=\"type\">int</span> def)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.def = def;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//游戏状态存储类(备忘录类)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RoleStateMemento</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> vit;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> atk;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> def;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">RoleStateMemento</span><span class=\"params\">(<span class=\"type\">int</span> vit, <span class=\"type\">int</span> atk, <span class=\"type\">int</span> def)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.vit = vit;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.atk = atk;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.def = def;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getVit</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> vit;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setVit</span><span class=\"params\">(<span class=\"type\">int</span> vit)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.vit = vit;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getAtk</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> atk;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAtk</span><span class=\"params\">(<span class=\"type\">int</span> atk)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.atk = atk;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getDef</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> def;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setDef</span><span class=\"params\">(<span class=\"type\">int</span> def)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.def = def;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//角色状态管理者类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RoleStateCaretaker</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> RoleStateMemento roleStateMemento;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RoleStateMemento <span class=\"title function_\">getRoleStateMemento</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> roleStateMemento;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setRoleStateMemento</span><span class=\"params\">(RoleStateMemento roleStateMemento)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.roleStateMemento = roleStateMemento;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//测试类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Client</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;------------大战Boss前------------&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//大战Boss前</span></span><br><span class=\"line\">        <span class=\"type\">GameRole</span> <span class=\"variable\">gameRole</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">GameRole</span>();</span><br><span class=\"line\">        gameRole.initState();</span><br><span class=\"line\">        gameRole.stateDisplay();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//保存进度</span></span><br><span class=\"line\">        <span class=\"type\">RoleStateCaretaker</span> <span class=\"variable\">roleStateCaretaker</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RoleStateCaretaker</span>();</span><br><span class=\"line\">        roleStateCaretaker.setRoleStateMemento(gameRole.saveState());</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;------------大战Boss后------------&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//大战Boss时，损耗严重</span></span><br><span class=\"line\">        gameRole.fight();</span><br><span class=\"line\">        gameRole.stateDisplay();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;------------恢复之前状态------------&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//恢复之前状态</span></span><br><span class=\"line\">        gameRole.recoverState(roleStateCaretaker.getRoleStateMemento());</span><br><span class=\"line\">        gameRole.stateDisplay();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<blockquote>\n<p>分析：白箱备忘录模式是破坏封装性的。但是通过程序员自律，同样可以在一定程度上实现模式的大部分用意。</p>\n</blockquote>\n<h4 id=\"61032-黑箱备忘录模式\"><a class=\"markdownIt-Anchor\" href=\"#61032-黑箱备忘录模式\">#</a> 6.10.3.2 “黑箱” 备忘录模式</h4>\n<p>备忘录角色对发起人对象提供一个宽接口，而为其他对象提供一个窄接口。在 Java 语言中，实现双重接口的办法就是将<strong>备忘录类</strong>设计成<strong>发起人类</strong>的内部成员类。</p>\n<p>将  <code>RoleStateMemento</code>  设为  <code>GameRole</code>  的内部类，从而将  <code>RoleStateMemento</code>  对象封装在  <code>GameRole</code>  里面；在外面提供一个标识接口  <code>Memento</code>  给  <code>RoleStateCaretaker</code>  及其他对象使用。这样  <code>GameRole</code>  类看到的是  <code>RoleStateMemento</code>  所有的接口，而 <code>RoleStateCaretaker</code>   及其他对象看到的仅仅是标识接口  <code>Memento</code>  所暴露出来的接口，从而维护了封装型。类图如下：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420232553228.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p>代码如下：</p>\n<p>窄接口 <code>Memento</code> ，这是一个标识接口，因此没有定义出任何的方法</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Memento</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>定义发起人类  <code>GameRole</code> ，并在内部定义备忘录内部类  <code>RoleStateMemento</code> （该内部类设置为私有的）</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/游戏角色类</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GameRole</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> vit; <span class=\"comment\">//生命力</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> atk; <span class=\"comment\">//攻击力</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> def; <span class=\"comment\">//防御力</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//初始化状态</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">initState</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.vit = <span class=\"number\">100</span>;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.atk = <span class=\"number\">100</span>;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.def = <span class=\"number\">100</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//战斗</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fight</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.vit = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.atk = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.def = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//保存角色状态</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Memento <span class=\"title function_\">saveState</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RoleStateMemento</span>(vit, atk, def);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//回复角色状态</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">recoverState</span><span class=\"params\">(Memento memento)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">RoleStateMemento</span> <span class=\"variable\">roleStateMemento</span> <span class=\"operator\">=</span> (RoleStateMemento) memento;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.vit = roleStateMemento.getVit();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.atk = roleStateMemento.getAtk();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.def = roleStateMemento.getDef();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">stateDisplay</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;角色生命力：&quot;</span> + vit);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;角色攻击力：&quot;</span> + atk);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;角色防御力：&quot;</span> + def);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getVit</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> vit;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setVit</span><span class=\"params\">(<span class=\"type\">int</span> vit)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.vit = vit;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getAtk</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> atk;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAtk</span><span class=\"params\">(<span class=\"type\">int</span> atk)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.atk = atk;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getDef</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> def;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setDef</span><span class=\"params\">(<span class=\"type\">int</span> def)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.def = def;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RoleStateMemento</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Memento</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">int</span> vit;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">int</span> atk;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">int</span> def;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">RoleStateMemento</span><span class=\"params\">(<span class=\"type\">int</span> vit, <span class=\"type\">int</span> atk, <span class=\"type\">int</span> def)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.vit = vit;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.atk = atk;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.def = def;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getVit</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> vit;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setVit</span><span class=\"params\">(<span class=\"type\">int</span> vit)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.vit = vit;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getAtk</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> atk;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAtk</span><span class=\"params\">(<span class=\"type\">int</span> atk)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.atk = atk;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getDef</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> def;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setDef</span><span class=\"params\">(<span class=\"type\">int</span> def)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.def = def;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>负责人角色类  <code>RoleStateCaretaker</code>  能够得到的备忘录对象是以  <code>Memento</code>  为接口的，由于这个接口仅仅是一个标识接口，因此负责人角色不可能改变这个备忘录对象的内容</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//角色状态管理者类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RoleStateCaretaker</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Memento memento;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Memento <span class=\"title function_\">getMemento</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> memento;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setMemento</span><span class=\"params\">(Memento memento)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.memento = memento;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>客户端测试类</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Client</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;------------大战Boss前------------&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//大战Boss前</span></span><br><span class=\"line\">        <span class=\"type\">GameRole</span> <span class=\"variable\">gameRole</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">GameRole</span>();</span><br><span class=\"line\">        gameRole.initState();</span><br><span class=\"line\">        gameRole.stateDisplay();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//保存进度</span></span><br><span class=\"line\">        <span class=\"type\">RoleStateCaretaker</span> <span class=\"variable\">roleStateCaretaker</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RoleStateCaretaker</span>();</span><br><span class=\"line\">        roleStateCaretaker.setMemento(gameRole.saveState());</span><br><span class=\"line\">        </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;------------大战Boss后------------&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//大战Boss时，损耗严重</span></span><br><span class=\"line\">        gameRole.fight();</span><br><span class=\"line\">        gameRole.stateDisplay();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;------------恢复之前状态------------&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//恢复之前状态</span></span><br><span class=\"line\">        gameRole.recoverState(roleStateCaretaker.getMemento());</span><br><span class=\"line\">        gameRole.stateDisplay();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<h3 id=\"6104-优缺点\"><a class=\"markdownIt-Anchor\" href=\"#6104-优缺点\">#</a> 6.10.4 优缺点</h3>\n<p><strong>1，优点：</strong></p>\n<ul>\n<li>提供了一种可以恢复状态的机制。当用户需要时能够比较方便地将数据恢复到某个历史的状态。</li>\n<li>实现了内部状态的封装。除了创建它的发起人之外，其他对象都不能够访问这些状态信息。</li>\n<li>简化了发起人类。发起人不需要管理和保存其内部状态的各个备份，所有状态信息都保存在备忘录中，并由管理者进行管理，这符合单一职责原则。</li>\n</ul>\n<p><strong>2，缺点：</strong></p>\n<ul>\n<li>资源消耗大。如果要保存的内部状态信息过多或者特别频繁，将会占用比较大的内存资源。</li>\n</ul>\n<h3 id=\"6105-使用场景\"><a class=\"markdownIt-Anchor\" href=\"#6105-使用场景\">#</a> 6.10.5 使用场景</h3>\n<ul>\n<li>\n<p>需要保存与恢复数据的场景，如玩游戏时的中间结果的存档功能。</p>\n</li>\n<li>\n<p>需要提供一个可回滚操作的场景，如 Word、记事本、Photoshop，idea 等软件在编辑时按 Ctrl+Z 组合键，还有数据库中事务操作。</p>\n</li>\n</ul>\n<h2 id=\"611-解释器模式\"><a class=\"markdownIt-Anchor\" href=\"#611-解释器模式\">#</a> 6.11 解释器模式</h2>\n<h3 id=\"6111-概述\"><a class=\"markdownIt-Anchor\" href=\"#6111-概述\">#</a> 6.11.1 概述</h3>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420232619804.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p>如上图，设计一个软件用来进行加减计算。我们第一想法就是使用工具类，提供对应的加法和减法的工具方法。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//用于两个整数相加</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用于两个整数相加</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b,<span class=\"type\">int</span> c)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b + c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用于n个整数相加</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">add</span><span class=\"params\">(Integer ... arr)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Integer i : arr) &#123;</span><br><span class=\"line\">        sum += i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>上面的形式比较单一、有限，如果形式变化非常多，这就不符合要求，因为加法和减法运算，两个运算符与数值可以有无限种组合方式。比如 1+2+3+4+5、1+2+3-4 等等。</p>\n<p>显然，现在需要一种翻译识别机器，能够解析由数字以及 + - 符号构成的合法的运算序列。如果把运算符和数字都看作节点的话，能够逐个节点的进行读取解析运算，这就是解释器模式的思维。</p>\n<p><strong>定义：</strong></p>\n<blockquote>\n<p>给定一个语言，定义它的文法表示，并定义一个解释器，这个解释器使用该标识来解释语言中的句子。</p>\n</blockquote>\n<p>在解释器模式中，我们需要将待解决的问题，提取出规则，抽象为一种 “语言”。比如加减法运算，规则为：由数值和 ± 符号组成的合法序列，“1+3-2” 就是这种语言的句子。</p>\n<p>解释器就是要解析出来语句的含义。但是如何描述规则呢？</p>\n<p><strong>文法（语法）规则：</strong></p>\n<p>文法是用于描述语言的语法结构的形式规则。</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">expression ::= value | plus | minus</span><br><span class=\"line\">plus ::= expression ‘+’ expression   </span><br><span class=\"line\">minus ::= expression ‘-’ expression  </span><br><span class=\"line\">value ::= integer</span><br></pre></td></tr></table></figure></div>\n<blockquote>\n<p>注意： 这里的符号 “::=” 表示 “定义为” 的意思，竖线 | 表示或，左右的其中一个，引号内为字符本身，引号外为语法。</p>\n</blockquote>\n<p>上面规则描述为 ：</p>\n<p>表达式可以是一个值，也可以是 plus 或者 minus 运算，而 plus 和 minus 又是由表达式结合运算符构成，值的类型为整型数。</p>\n<p><strong>抽象语法树：</strong></p>\n<p>在计算机科学中，抽象语法树（AbstractSyntaxTree，AST），或简称语法树（Syntax tree），是源代码语法结构的一种抽象表示。它以树状的形式表现编程语言的语法结构，树上的每个节点都表示源代码中的一种结构。</p>\n<p>用树形来表示符合文法规则的句子。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420232642626.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<h3 id=\"6112-结构\"><a class=\"markdownIt-Anchor\" href=\"#6112-结构\">#</a> 6.11.2 结构</h3>\n<p>解释器模式包含以下主要角色。</p>\n<ul>\n<li>\n<p>抽象表达式（Abstract Expression）角色：定义解释器的接口，约定解释器的解释操作，主要包含解释方法 interpret ()。</p>\n</li>\n<li>\n<p>终结符表达式（Terminal  Expression）角色：是抽象表达式的子类，用来实现文法中与终结符相关的操作，文法中的每一个终结符都有一个具体终结表达式与之相对应。</p>\n</li>\n<li>\n<p>非终结符表达式（Nonterminal Expression）角色：也是抽象表达式的子类，用来实现文法中与非终结符相关的操作，文法中的每条规则都对应于一个非终结符表达式。</p>\n</li>\n<li>\n<p>环境（Context）角色：通常包含各个解释器需要的数据或是公共的功能，一般用来传递被所有解释器共享的数据，后面的解释器可以从这里获取这些值。</p>\n</li>\n<li>\n<p>客户端（Client）：主要任务是将需要分析的句子或表达式转换成使用解释器对象描述的抽象语法树，然后调用解释器的解释方法，当然也可以通过环境角色间接访问解释器的解释方法。</p>\n</li>\n</ul>\n<h3 id=\"6113-案例实现\"><a class=\"markdownIt-Anchor\" href=\"#6113-案例实现\">#</a> 6.11.3 案例实现</h3>\n<p>【例】设计实现加减法的软件</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420232705188.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p>代码如下：</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//抽象角色AbstractExpression</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AbstractExpression</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"type\">int</span> <span class=\"title function_\">interpret</span><span class=\"params\">(Context context)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//终结符表达式角色</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Value</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractExpression</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Value</span><span class=\"params\">(<span class=\"type\">int</span> value)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.value = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">interpret</span><span class=\"params\">(Context context)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>(value).toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//非终结符表达式角色  加法表达式</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Plus</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractExpression</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> AbstractExpression left;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> AbstractExpression right;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Plus</span><span class=\"params\">(AbstractExpression left, AbstractExpression right)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.left = left;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.right = right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">interpret</span><span class=\"params\">(Context context)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> left.interpret(context) + right.interpret(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;(&quot;</span> + left.toString() + <span class=\"string\">&quot; + &quot;</span> + right.toString() + <span class=\"string\">&quot;)&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">///非终结符表达式角色 减法表达式</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Minus</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractExpression</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> AbstractExpression left;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> AbstractExpression right;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Minus</span><span class=\"params\">(AbstractExpression left, AbstractExpression right)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.left = left;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.right = right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">interpret</span><span class=\"params\">(Context context)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> left.interpret(context) - right.interpret(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;(&quot;</span> + left.toString() + <span class=\"string\">&quot; - &quot;</span> + right.toString() + <span class=\"string\">&quot;)&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//终结符表达式角色 变量表达式</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Variable</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractExpression</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Variable</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">interpret</span><span class=\"params\">(Context ctx)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ctx.getValue(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//环境类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Context</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;Variable, Integer&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;Variable, Integer&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">assign</span><span class=\"params\">(Variable <span class=\"keyword\">var</span>, Integer value)</span> &#123;</span><br><span class=\"line\">        map.put(<span class=\"keyword\">var</span>, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getValue</span><span class=\"params\">(Variable <span class=\"keyword\">var</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Integer</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> map.get(<span class=\"keyword\">var</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//测试类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Client</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Context</span> <span class=\"variable\">context</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Context</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Variable</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Variable</span>(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Variable</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Variable</span>(<span class=\"string\">&quot;b&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Variable</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Variable</span>(<span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Variable</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Variable</span>(<span class=\"string\">&quot;d&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Variable</span> <span class=\"variable\">e</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Variable</span>(<span class=\"string\">&quot;e&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//Value v = new Value(1);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        context.assign(a, <span class=\"number\">1</span>);</span><br><span class=\"line\">        context.assign(b, <span class=\"number\">2</span>);</span><br><span class=\"line\">        context.assign(c, <span class=\"number\">3</span>);</span><br><span class=\"line\">        context.assign(d, <span class=\"number\">4</span>);</span><br><span class=\"line\">        context.assign(e, <span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">AbstractExpression</span> <span class=\"variable\">expression</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Minus</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Plus</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Plus</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Plus</span>(a, b), c), d), e);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(expression + <span class=\"string\">&quot;= &quot;</span> + expression.interpret(context));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"6114-优缺点\"><a class=\"markdownIt-Anchor\" href=\"#6114-优缺点\">#</a> 6.11.4 优缺点</h3>\n<p><strong>1，优点：</strong></p>\n<ul>\n<li>\n<p>易于改变和扩展文法。</p>\n<p>由于在解释器模式中使用类来表示语言的文法规则，因此可以通过继承等机制来改变或扩展文法。每一条文法规则都可以表示为一个类，因此可以方便地实现一个简单的语言。</p>\n</li>\n<li>\n<p>实现文法较为容易。</p>\n<p>在抽象语法树中每一个表达式节点类的实现方式都是相似的，这些类的代码编写都不会特别复杂。</p>\n</li>\n<li>\n<p>增加新的解释表达式较为方便。</p>\n<p>如果用户需要增加新的解释表达式只需要对应增加一个新的终结符表达式或非终结符表达式类，原有表达式类代码无须修改，符合 “开闭原则”。</p>\n</li>\n</ul>\n<p><strong>2，缺点：</strong></p>\n<ul>\n<li>\n<p>对于复杂文法难以维护。</p>\n<p>在解释器模式中，每一条规则至少需要定义一个类，因此如果一个语言包含太多文法规则，类的个数将会急剧增加，导致系统难以管理和维护。</p>\n</li>\n</ul>\n<ul>\n<li>\n<p>执行效率较低。</p>\n<p>由于在解释器模式中使用了大量的循环和递归调用，因此在解释较为复杂的句子时其速度很慢，而且代码的调试过程也比较麻烦。</p>\n</li>\n</ul>\n<h3 id=\"6115-使用场景\"><a class=\"markdownIt-Anchor\" href=\"#6115-使用场景\">#</a> 6.11.5 使用场景</h3>\n<ul>\n<li>\n<p>当语言的文法较为简单，且执行效率不是关键问题时。</p>\n</li>\n<li>\n<p>当问题重复出现，且可以用一种简单的语言来进行表达时。</p>\n</li>\n<li>\n<p>当一个语言需要解释执行，并且语言中的句子可以表示为一个抽象语法树的时候。</p>\n</li>\n</ul>\n<h1 id=\"7自定义spring框架\"><a class=\"markdownIt-Anchor\" href=\"#7自定义spring框架\">#</a> 7，自定义 Spring 框架</h1>\n<h2 id=\"71-spring使用回顾\"><a class=\"markdownIt-Anchor\" href=\"#71-spring使用回顾\">#</a> 7.1 spring 使用回顾</h2>\n<p>自定义 spring 框架前，先回顾一下 spring 框架的使用，从而分析 spring 的核心，并对核心功能进行模拟。</p>\n<ul>\n<li>\n<p>数据访问层。定义 UserDao 接口及其子实现类</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserDao</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserDaoImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">UserDao</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;userDaoImpl ....&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n</li>\n<li>\n<p>业务逻辑层。定义 UserService 接口及其子实现类</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">UserService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserDao userDao;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setUserDao</span><span class=\"params\">(UserDao userDao)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.userDao = userDao;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;userServiceImpl ...&quot;</span>);</span><br><span class=\"line\">        userDao.add();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n</li>\n<li>\n<p>定义 UserController 类，使用 main 方法模拟 controller 层</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserController</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建spring容器对象</span></span><br><span class=\"line\">        <span class=\"type\">ApplicationContext</span> <span class=\"variable\">applicationContext</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">&quot;applicationContext.xml&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//从IOC容器中获取UserService对象</span></span><br><span class=\"line\">        <span class=\"type\">UserService</span> <span class=\"variable\">userService</span> <span class=\"operator\">=</span> applicationContext.getBean(<span class=\"string\">&quot;userService&quot;</span>, UserService.class);</span><br><span class=\"line\">        <span class=\"comment\">//调用UserService对象的add方法</span></span><br><span class=\"line\">        userService.add();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n</li>\n<li>\n<p>编写配置文件。在类路径下编写一个名为 ApplicationContext.xml 的配置文件</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"line\">&lt;beans xmlns:xsi=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"line\">       xmlns=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"line\">       xmlns:context=<span class=\"string\">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class=\"line\">       xsi:schemaLocation=<span class=\"string\">&quot;http://www.springframework.org/schema/beans</span></span><br><span class=\"line\"><span class=\"string\">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class=\"line\"><span class=\"string\">        http://www.springframework.org/schema/context</span></span><br><span class=\"line\"><span class=\"string\">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;bean id=<span class=\"string\">&quot;userService&quot;</span> class=<span class=\"string\">&quot;com.itheima.service.impl.UserServiceImpl&quot;</span>&gt;</span><br><span class=\"line\">        &lt;property name=<span class=\"string\">&quot;userDao&quot;</span> ref=<span class=\"string\">&quot;userDao&quot;</span>&gt;&lt;/property&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;bean id=<span class=\"string\">&quot;userDao&quot;</span> class=<span class=\"string\">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>&gt;&lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></div>\n<p>代码运行结果如下：</p>\n</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/2021042023272395.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p>通过上面代码及结果可以看出：</p>\n<ul>\n<li>userService 对象是从 applicationContext 容器对象获取到的，也就是 userService 对象交由 spring 进行管理。</li>\n<li>上面结果可以看到调用了 UserDao 对象中的 add 方法，也就是说 UserDao 子实现类对象也交由 spring 管理了。</li>\n<li>UserService 中的 userDao 变量我们并没有进行赋值，但是可以正常使用，说明 spring 已经将 UserDao 对象赋值给了 userDao 变量。</li>\n</ul>\n<p>上面三点体现了 Spring 框架的 IOC（Inversion of Control）和 DI（Dependency Injection, DI）</p>\n<h2 id=\"72-spring核心功能结构\"><a class=\"markdownIt-Anchor\" href=\"#72-spring核心功能结构\">#</a> 7.2 spring 核心功能结构</h2>\n<p>Spring 大约有 20 个模块，由 1300 多个不同的文件构成。这些模块可以分为:</p>\n<p>核心容器、AOP 和设备支持、数据访问与集成、Web 组件、通信报文和集成测试等，下面是 Spring 框架的总体架构图：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420232809922.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p>核心容器由 beans、core、context 和 expression（Spring Expression Language，SpEL）4 个模块组成。</p>\n<ul>\n<li>spring-beans 和 spring-core 模块是 Spring 框架的核心模块，包含了控制反转（Inversion of Control，IOC）和依赖注入（Dependency Injection，DI）。BeanFactory 使用控制反转对应用程序的配置和依赖性规范与实际的应用程序代码进行了分离。BeanFactory 属于延时加载，也就是说在实例化容器对象后并不会自动实例化 Bean，只有当 Bean 被使用时，BeanFactory 才会对该 Bean 进行实例化与依赖关系的装配。</li>\n<li>spring-context 模块构架于核心模块之上，扩展了 BeanFactory，为它添加了 Bean 生命周期控制、框架事件体系及资源加载透明化等功能。此外，该模块还提供了许多企业级支持，如邮件访问、远程访问、任务调度等，ApplicationContext 是该模块的核心接口，它的超类是 BeanFactory。与 BeanFactory 不同，ApplicationContext 实例化后会自动对所有的单实例 Bean 进行实例化与依赖关系的装配，使之处于待用状态。</li>\n<li>spring-context-support 模块是对 Spring IoC 容器及 IoC 子容器的扩展支持。</li>\n<li>spring-context-indexer 模块是 Spring 的类管理组件和 Classpath 扫描组件。</li>\n<li>spring-expression 模块是统一表达式语言（EL）的扩展模块，可以查询、管理运行中的对象，同时也可以方便地调用对象方法，以及操作数组、集合等。它的语法类似于传统 EL，但提供了额外的功能，最出色的要数函数调用和简单字符串的模板函数。EL 的特性是基于 Spring 产品的需求而设计的，可以非常方便地同 Spring IoC 进行交互。</li>\n</ul>\n<h3 id=\"711-bean概述\"><a class=\"markdownIt-Anchor\" href=\"#711-bean概述\">#</a> 7.1.1 bean 概述</h3>\n<p>Spring 就是面向  <code>Bean</code>  的编程（BOP,Bean Oriented Programming），Bean 在 Spring 中处于核心地位。Bean 对于 Spring 的意义就像 Object 对于 OOP 的意义一样，Spring 中没有 Bean 也就没有 Spring 存在的意义。Spring IoC 容器通过配置文件或者注解的方式来管理 bean 对象之间的依赖关系。</p>\n<p>spring 中 bean 用于对一个类进行封装。如下面的配置：</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;userService&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.itheima.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;userDao&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;userDao&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;userDao&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n<p>为什么 Bean 如此重要呢？</p>\n<ul>\n<li>spring 将 bean 对象交由一个叫 IOC 容器进行管理。</li>\n<li>bean 对象之间的依赖关系在配置文件中体现，并由 spring 完成。</li>\n</ul>\n<h2 id=\"73-spring-ioc相关接口分析\"><a class=\"markdownIt-Anchor\" href=\"#73-spring-ioc相关接口分析\">#</a> 7.3 Spring IOC 相关接口分析</h2>\n<h3 id=\"731-beanfactory解析\"><a class=\"markdownIt-Anchor\" href=\"#731-beanfactory解析\">#</a> 7.3.1 BeanFactory 解析</h3>\n<p>Spring 中 Bean 的创建是典型的工厂模式，这一系列的 Bean 工厂，即 IoC 容器，为开发者管理对象之间的依赖关系提供了很多便利和基础服务，在 Spring 中有许多 IoC 容器的实现供用户选择，其相互关系如下图所示。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420232829541.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p>其中，BeanFactory 作为最顶层的一个接口，定义了 IoC 容器的基本功能规范，BeanFactory 有三个重要的子接口：ListableBeanFactory、HierarchicalBeanFactory 和 AutowireCapableBeanFactory。但是从类图中我们可以发现最终的默认实现类是 DefaultListableBeanFactory，它实现了所有的接口。</p>\n<p>那么为何要定义这么多层次的接口呢？</p>\n<p>每个接口都有它的使用场合，主要是为了区分在 Spring 内部操作过程中对象的传递和转化，对对象的数据访问所做的限制。例如，</p>\n<ul>\n<li>ListableBeanFactory 接口表示这些 Bean 可列表化。</li>\n<li>HierarchicalBeanFactory 表示这些 Bean 是有继承关系的，也就是每个 Bean 可能有父 Bean</li>\n<li>AutowireCapableBeanFactory 接口定义 Bean 的自动装配规则。</li>\n</ul>\n<p>这三个接口共同定义了 Bean 的集合、Bean 之间的关系及 Bean 行为。最基本的 IoC 容器接口是 BeanFactory，来看一下它的源码：</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">BeanFactory</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">String</span> <span class=\"variable\">FACTORY_BEAN_PREFIX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&amp;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//根据bean的名称获取IOC容器中的的bean对象</span></span><br><span class=\"line\">\tObject <span class=\"title function_\">getBean</span><span class=\"params\">(String name)</span> <span class=\"keyword\">throws</span> BeansException;</span><br><span class=\"line\">\t<span class=\"comment\">//根据bean的名称获取IOC容器中的的bean对象，并指定获取到的bean对象的类型，这样我们使用时就不需要进行类型强转了</span></span><br><span class=\"line\">\t&lt;T&gt; T <span class=\"title function_\">getBean</span><span class=\"params\">(String name, Class&lt;T&gt; requiredType)</span> <span class=\"keyword\">throws</span> BeansException;</span><br><span class=\"line\">\tObject <span class=\"title function_\">getBean</span><span class=\"params\">(String name, Object... args)</span> <span class=\"keyword\">throws</span> BeansException;</span><br><span class=\"line\">\t&lt;T&gt; T <span class=\"title function_\">getBean</span><span class=\"params\">(Class&lt;T&gt; requiredType)</span> <span class=\"keyword\">throws</span> BeansException;</span><br><span class=\"line\">\t&lt;T&gt; T <span class=\"title function_\">getBean</span><span class=\"params\">(Class&lt;T&gt; requiredType, Object... args)</span> <span class=\"keyword\">throws</span> BeansException;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;T&gt; ObjectProvider&lt;T&gt; <span class=\"title function_\">getBeanProvider</span><span class=\"params\">(Class&lt;T&gt; requiredType)</span>;</span><br><span class=\"line\">\t&lt;T&gt; ObjectProvider&lt;T&gt; <span class=\"title function_\">getBeanProvider</span><span class=\"params\">(ResolvableType requiredType)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//判断容器中是否包含指定名称的bean对象</span></span><br><span class=\"line\">\t<span class=\"type\">boolean</span> <span class=\"title function_\">containsBean</span><span class=\"params\">(String name)</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//根据bean的名称判断是否是单例</span></span><br><span class=\"line\">\t<span class=\"type\">boolean</span> <span class=\"title function_\">isSingleton</span><span class=\"params\">(String name)</span> <span class=\"keyword\">throws</span> NoSuchBeanDefinitionException;</span><br><span class=\"line\">\t<span class=\"type\">boolean</span> <span class=\"title function_\">isPrototype</span><span class=\"params\">(String name)</span> <span class=\"keyword\">throws</span> NoSuchBeanDefinitionException;</span><br><span class=\"line\">\t<span class=\"type\">boolean</span> <span class=\"title function_\">isTypeMatch</span><span class=\"params\">(String name, ResolvableType typeToMatch)</span> <span class=\"keyword\">throws</span> NoSuchBeanDefinitionException;</span><br><span class=\"line\">\t<span class=\"type\">boolean</span> <span class=\"title function_\">isTypeMatch</span><span class=\"params\">(String name, Class&lt;?&gt; typeToMatch)</span> <span class=\"keyword\">throws</span> NoSuchBeanDefinitionException;</span><br><span class=\"line\">\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\tClass&lt;?&gt; getType(String name) <span class=\"keyword\">throws</span> NoSuchBeanDefinitionException;</span><br><span class=\"line\">\tString[] getAliases(String name);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>在 BeanFactory 里只对 IoC 容器的基本行为做了定义，根本不关心你的 Bean 是如何定义及怎样加载的。正如我们只关心能从工厂里得到什么产品，不关心工厂是怎么生产这些产品的。</p>\n<p>BeanFactory 有一个很重要的子接口，就是 ApplicationContext 接口，该接口主要来规范容器中的 bean 对象是非延时加载，即在创建容器对象的时候就对象 bean 进行初始化，并存储到一个容器中。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420232844936.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p>要知道工厂是如何产生对象的，我们需要看具体的 IoC 容器实现，Spring 提供了许多 IoC 容器实现，比如：</p>\n<ul>\n<li>ClasspathXmlApplicationContext : 根据类路径加载 xml 配置文件，并创建 IOC 容器对象。</li>\n<li>FileSystemXmlApplicationContext ：根据系统路径加载 xml 配置文件，并创建 IOC 容器对象。</li>\n<li>AnnotationConfigApplicationContext ：加载注解类配置，并创建 IOC 容器。</li>\n</ul>\n<h3 id=\"732-beandefinition解析\"><a class=\"markdownIt-Anchor\" href=\"#732-beandefinition解析\">#</a> 7.3.2 BeanDefinition 解析</h3>\n<p>Spring IoC 容器管理我们定义的各种 Bean 对象及其相互关系，而 Bean 对象在 Spring 实现中是以 BeanDefinition 来描述的，如下面配置文件</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;userDao&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">bean标签还有很多属性：</span><br><span class=\"line\">\tscope、init-method、destory-method等。</span><br></pre></td></tr></table></figure></div>\n<p>其继承体系如下图所示。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420232911848.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<h3 id=\"733-beandefinitionreader解析\"><a class=\"markdownIt-Anchor\" href=\"#733-beandefinitionreader解析\">#</a> 7.3.3 BeanDefinitionReader 解析</h3>\n<p>Bean 的解析过程非常复杂，功能被分得很细，因为这里需要被扩展的地方很多，必须保证足够的灵活性，以应对可能的变化。Bean 的解析主要就是对 Spring 配置文件的解析。这个解析过程主要通过 BeanDefinitionReader 来完成，看看 Spring 中 BeanDefinitionReader 的类结构图，如下图所示。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420232930473.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p>看看 BeanDefinitionReader 接口定义的功能来理解它具体的作用：</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">BeanDefinitionReader</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//获取BeanDefinitionRegistry注册器对象</span></span><br><span class=\"line\">\tBeanDefinitionRegistry <span class=\"title function_\">getRegistry</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\tResourceLoader <span class=\"title function_\">getResourceLoader</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\tClassLoader <span class=\"title function_\">getBeanClassLoader</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tBeanNameGenerator <span class=\"title function_\">getBeanNameGenerator</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t下面的loadBeanDefinitions都是加载bean定义，从指定的资源中</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"title function_\">loadBeanDefinitions</span><span class=\"params\">(Resource resource)</span> <span class=\"keyword\">throws</span> BeanDefinitionStoreException;</span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"title function_\">loadBeanDefinitions</span><span class=\"params\">(Resource... resources)</span> <span class=\"keyword\">throws</span> BeanDefinitionStoreException;</span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"title function_\">loadBeanDefinitions</span><span class=\"params\">(String location)</span> <span class=\"keyword\">throws</span> BeanDefinitionStoreException;</span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"title function_\">loadBeanDefinitions</span><span class=\"params\">(String... locations)</span> <span class=\"keyword\">throws</span> BeanDefinitionStoreException;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"734-beandefinitionregistry解析\"><a class=\"markdownIt-Anchor\" href=\"#734-beandefinitionregistry解析\">#</a> 7.3.4 BeanDefinitionRegistry 解析</h3>\n<p>BeanDefinitionReader 用来解析 bean 定义，并封装 BeanDefinition 对象，而我们定义的配置文件中定义了很多 bean 标签，所以就有一个问题，解析的 BeanDefinition 对象存储到哪儿？答案就是 BeanDefinition 的注册中心，而该注册中心顶层接口就是 BeanDefinitionRegistry。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">BeanDefinitionRegistry</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AliasRegistry</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//往注册表中注册bean</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">registerBeanDefinition</span><span class=\"params\">(String beanName, BeanDefinition beanDefinition)</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throws</span> BeanDefinitionStoreException;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//从注册表中删除指定名称的bean</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">removeBeanDefinition</span><span class=\"params\">(String beanName)</span> <span class=\"keyword\">throws</span> NoSuchBeanDefinitionException;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//获取注册表中指定名称的bean</span></span><br><span class=\"line\">\tBeanDefinition <span class=\"title function_\">getBeanDefinition</span><span class=\"params\">(String beanName)</span> <span class=\"keyword\">throws</span> NoSuchBeanDefinitionException;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"comment\">//判断注册表中是否已经注册了指定名称的bean</span></span><br><span class=\"line\">\t<span class=\"type\">boolean</span> <span class=\"title function_\">containsBeanDefinition</span><span class=\"params\">(String beanName)</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"comment\">//获取注册表中所有的bean的名称</span></span><br><span class=\"line\">\tString[] getBeanDefinitionNames();</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"title function_\">getBeanDefinitionCount</span><span class=\"params\">()</span>;</span><br><span class=\"line\">\t<span class=\"type\">boolean</span> <span class=\"title function_\">isBeanNameInUse</span><span class=\"params\">(String beanName)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>继承结构图如下：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210420232952954.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p>从上面类图可以看到 BeanDefinitionRegistry 接口的子实现类主要有以下几个：</p>\n<ul>\n<li>\n<p>DefaultListableBeanFactory</p>\n<p>在该类中定义了如下代码，就是用来注册 bean</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;String, BeanDefinition&gt; beanDefinitionMap = <span class=\"keyword\">new</span> <span class=\"title class_\">ConcurrentHashMap</span>&lt;&gt;(<span class=\"number\">256</span>);</span><br></pre></td></tr></table></figure></div>\n</li>\n<li>\n<p>SimpleBeanDefinitionRegistry</p>\n<p>在该类中定义了如下代码，就是用来注册 bean</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;String, BeanDefinition&gt; beanDefinitionMap = <span class=\"keyword\">new</span> <span class=\"title class_\">ConcurrentHashMap</span>&lt;&gt;(<span class=\"number\">64</span>);</span><br></pre></td></tr></table></figure></div>\n</li>\n</ul>\n<h3 id=\"735-创建容器\"><a class=\"markdownIt-Anchor\" href=\"#735-创建容器\">#</a> 7.3.5 创建容器</h3>\n<p>ClassPathXmlApplicationContext 对 Bean 配置资源的载入是从 refresh（）方法开始的。refresh（）方法是一个模板方法，规定了 IoC 容器的启动流程，有些逻辑要交给其子类实现。它对 Bean 配置资源进行载入，ClassPathXmlApplicationContext 通过调用其父类 AbstractApplicationContext 的 refresh（）方法启动整个 IoC 容器对 Bean 定义的载入过程。</p>\n<h2 id=\"74-自定义springioc\"><a class=\"markdownIt-Anchor\" href=\"#74-自定义springioc\">#</a> 7.4 自定义 SpringIOC</h2>\n<p>现要对下面的配置文件进行解析，并自定义 Spring 框架的 IOC 对涉及到的对象进行管理。</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;userService&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.itheima.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;userDao&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;userDao&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;userDao&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n<h3 id=\"741-定义bean相关的pojo类\"><a class=\"markdownIt-Anchor\" href=\"#741-定义bean相关的pojo类\">#</a> 7.4.1 定义 bean 相关的 pojo 类</h3>\n<h4 id=\"7411-propertyvalue类\"><a class=\"markdownIt-Anchor\" href=\"#7411-propertyvalue类\">#</a> 7.4.1.1 PropertyValue 类</h4>\n<p>用于封装 bean 的属性，体现到上面的配置文件就是封装 bean 标签的子标签 property 标签数据。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PropertyValue</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String ref;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String value;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">PropertyValue</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">PropertyValue</span><span class=\"params\">(String name, String ref,String value)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.ref = ref;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.value = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> String <span class=\"title function_\">getRef</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ref;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setRef</span><span class=\"params\">(String ref)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.ref = ref;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> String <span class=\"title function_\">getValue</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setValue</span><span class=\"params\">(String value)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.value = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h4 id=\"7412-mutablepropertyvalues类\"><a class=\"markdownIt-Anchor\" href=\"#7412-mutablepropertyvalues类\">#</a> 7.4.1.2 MutablePropertyValues 类</h4>\n<p>一个 bean 标签可以有多个 property 子标签，所以再定义一个 MutablePropertyValues 类，用来存储并管理多个 PropertyValue 对象。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MutablePropertyValues</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Iterable</span>&lt;PropertyValue&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;PropertyValue&gt; propertyValueList;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MutablePropertyValues</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.propertyValueList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;PropertyValue&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MutablePropertyValues</span><span class=\"params\">(List&lt;PropertyValue&gt; propertyValueList)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.propertyValueList = (propertyValueList != <span class=\"literal\">null</span> ? propertyValueList : <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;PropertyValue&gt;());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> PropertyValue[] getPropertyValues() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.propertyValueList.toArray(<span class=\"keyword\">new</span> <span class=\"title class_\">PropertyValue</span>[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> PropertyValue <span class=\"title function_\">getPropertyValue</span><span class=\"params\">(String propertyName)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (PropertyValue pv : <span class=\"built_in\">this</span>.propertyValueList) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pv.getName().equals(propertyName)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> pv;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Iterator&lt;PropertyValue&gt; <span class=\"title function_\">iterator</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> propertyValueList.iterator();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isEmpty</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.propertyValueList.isEmpty();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> MutablePropertyValues <span class=\"title function_\">addPropertyValue</span><span class=\"params\">(PropertyValue pv)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">this</span>.propertyValueList.size(); i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">PropertyValue</span> <span class=\"variable\">currentPv</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.propertyValueList.get(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (currentPv.getName().equals(pv.getName())) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.propertyValueList.set(i, <span class=\"keyword\">new</span> <span class=\"title class_\">PropertyValue</span>(pv.getName(),pv.getRef(), pv.getValue()));</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.propertyValueList.add(pv);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">contains</span><span class=\"params\">(String propertyName)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getPropertyValue(propertyName) != <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h4 id=\"7413-beandefinition类\"><a class=\"markdownIt-Anchor\" href=\"#7413-beandefinition类\">#</a> 7.4.1.3 BeanDefinition 类</h4>\n<p>BeanDefinition 类用来封装 bean 信息的，主要包含 id（即 bean 对象的名称）、class（需要交由 spring 管理的类的全类名）及子标签 property 数据。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BeanDefinition</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String className;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> MutablePropertyValues propertyValues;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">BeanDefinition</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        propertyValues = <span class=\"keyword\">new</span> <span class=\"title class_\">MutablePropertyValues</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getId</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setId</span><span class=\"params\">(String id)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getClassName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> className;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setClassName</span><span class=\"params\">(String className)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.className = className;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setPropertyValues</span><span class=\"params\">(MutablePropertyValues propertyValues)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.propertyValues = propertyValues;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> MutablePropertyValues <span class=\"title function_\">getPropertyValues</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> propertyValues;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"742-定义注册表相关类\"><a class=\"markdownIt-Anchor\" href=\"#742-定义注册表相关类\">#</a> 7.4.2 定义注册表相关类</h3>\n<h4 id=\"7421-beandefinitionregistry接口\"><a class=\"markdownIt-Anchor\" href=\"#7421-beandefinitionregistry接口\">#</a> 7.4.2.1 BeanDefinitionRegistry 接口</h4>\n<p>BeanDefinitionRegistry 接口定义了注册表的相关操作，定义如下功能：</p>\n<ul>\n<li>注册 BeanDefinition 对象到注册表中</li>\n<li>从注册表中删除指定名称的 BeanDefinition 对象</li>\n<li>根据名称从注册表中获取 BeanDefinition 对象</li>\n<li>判断注册表中是否包含指定名称的 BeanDefinition 对象</li>\n<li>获取注册表中 BeanDefinition 对象的个数</li>\n<li>获取注册表中所有的 BeanDefinition 的名称</li>\n</ul>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">BeanDefinitionRegistry</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//注册BeanDefinition对象到注册表中</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">registerBeanDefinition</span><span class=\"params\">(String beanName, BeanDefinition beanDefinition)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//从注册表中删除指定名称的BeanDefinition对象</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">removeBeanDefinition</span><span class=\"params\">(String beanName)</span> <span class=\"keyword\">throws</span> Exception;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//根据名称从注册表中获取BeanDefinition对象</span></span><br><span class=\"line\">    BeanDefinition <span class=\"title function_\">getBeanDefinition</span><span class=\"params\">(String beanName)</span> <span class=\"keyword\">throws</span> Exception;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">containsBeanDefinition</span><span class=\"params\">(String beanName)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">getBeanDefinitionCount</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    String[] getBeanDefinitionNames();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h4 id=\"7422-simplebeandefinitionregistry类\"><a class=\"markdownIt-Anchor\" href=\"#7422-simplebeandefinitionregistry类\">#</a> 7.4.2.2 SimpleBeanDefinitionRegistry 类</h4>\n<p>该类实现了 BeanDefinitionRegistry 接口，定义了 Map 集合作为注册表容器。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SimpleBeanDefinitionRegistry</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">BeanDefinitionRegistry</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, BeanDefinition&gt; beanDefinitionMap = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;String, BeanDefinition&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">registerBeanDefinition</span><span class=\"params\">(String beanName, BeanDefinition beanDefinition)</span> &#123;</span><br><span class=\"line\">        beanDefinitionMap.put(beanName,beanDefinition);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">removeBeanDefinition</span><span class=\"params\">(String beanName)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        beanDefinitionMap.remove(beanName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> BeanDefinition <span class=\"title function_\">getBeanDefinition</span><span class=\"params\">(String beanName)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> beanDefinitionMap.get(beanName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">containsBeanDefinition</span><span class=\"params\">(String beanName)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> beanDefinitionMap.containsKey(beanName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getBeanDefinitionCount</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> beanDefinitionMap.size();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String[] getBeanDefinitionNames() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> beanDefinitionMap.keySet().toArray(<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"743-定义解析器相关类\"><a class=\"markdownIt-Anchor\" href=\"#743-定义解析器相关类\">#</a> 7.4.3 定义解析器相关类</h3>\n<h4 id=\"7431-beandefinitionreader接口\"><a class=\"markdownIt-Anchor\" href=\"#7431-beandefinitionreader接口\">#</a> 7.4.3.1 BeanDefinitionReader 接口</h4>\n<p>BeanDefinitionReader 是用来解析配置文件并在注册表中注册 bean 的信息。定义了两个规范：</p>\n<ul>\n<li>获取注册表的功能，让外界可以通过该对象获取注册表对象。</li>\n<li>加载配置文件，并注册 bean 数据。</li>\n</ul>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">BeanDefinitionReader</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//获取注册表对象</span></span><br><span class=\"line\">    BeanDefinitionRegistry <span class=\"title function_\">getRegistry</span><span class=\"params\">()</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//加载配置文件并在注册表中进行注册</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">loadBeanDefinitions</span><span class=\"params\">(String configLocation)</span> <span class=\"keyword\">throws</span> Exception;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h4 id=\"7432-xmlbeandefinitionreader类\"><a class=\"markdownIt-Anchor\" href=\"#7432-xmlbeandefinitionreader类\">#</a> 7.4.3.2 XmlBeanDefinitionReader 类</h4>\n<p>XmlBeanDefinitionReader 类是专门用来解析 xml 配置文件的。该类实现 BeanDefinitionReader 接口并实现接口中的两个功能。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">XmlBeanDefinitionReader</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">BeanDefinitionReader</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> BeanDefinitionRegistry registry;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">XmlBeanDefinitionReader</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.registry = <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleBeanDefinitionRegistry</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> BeanDefinitionRegistry <span class=\"title function_\">getRegistry</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> registry;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">loadBeanDefinitions</span><span class=\"params\">(String configLocation)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">InputStream</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.getClass().getClassLoader().getResourceAsStream(configLocation);</span><br><span class=\"line\">        <span class=\"type\">SAXReader</span> <span class=\"variable\">reader</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SAXReader</span>();</span><br><span class=\"line\">        <span class=\"type\">Document</span> <span class=\"variable\">document</span> <span class=\"operator\">=</span> reader.read(is);</span><br><span class=\"line\">        <span class=\"type\">Element</span> <span class=\"variable\">rootElement</span> <span class=\"operator\">=</span> document.getRootElement();</span><br><span class=\"line\">        <span class=\"comment\">//解析bean标签</span></span><br><span class=\"line\">        parseBean(rootElement);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">parseBean</span><span class=\"params\">(Element rootElement)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;Element&gt; elements = rootElement.elements();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Element element : elements) &#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">id</span> <span class=\"operator\">=</span> element.attributeValue(<span class=\"string\">&quot;id&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">className</span> <span class=\"operator\">=</span> element.attributeValue(<span class=\"string\">&quot;class&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">BeanDefinition</span> <span class=\"variable\">beanDefinition</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BeanDefinition</span>();</span><br><span class=\"line\">            beanDefinition.setId(id);</span><br><span class=\"line\">            beanDefinition.setClassName(className);</span><br><span class=\"line\">            List&lt;Element&gt; list = element.elements(<span class=\"string\">&quot;property&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">MutablePropertyValues</span> <span class=\"variable\">mutablePropertyValues</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MutablePropertyValues</span>();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Element element1 : list) &#123;</span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> element1.attributeValue(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">ref</span> <span class=\"operator\">=</span> element1.attributeValue(<span class=\"string\">&quot;ref&quot;</span>);</span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> element1.attributeValue(<span class=\"string\">&quot;value&quot;</span>);</span><br><span class=\"line\">                <span class=\"type\">PropertyValue</span> <span class=\"variable\">propertyValue</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PropertyValue</span>(name,ref,value);</span><br><span class=\"line\">                mutablePropertyValues.addPropertyValue(propertyValue);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            beanDefinition.setPropertyValues(mutablePropertyValues);</span><br><span class=\"line\"></span><br><span class=\"line\">            registry.registerBeanDefinition(id,beanDefinition);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"744-ioc容器相关类\"><a class=\"markdownIt-Anchor\" href=\"#744-ioc容器相关类\">#</a> 7.4.4 IOC 容器相关类</h3>\n<h4 id=\"7441-beanfactory接口\"><a class=\"markdownIt-Anchor\" href=\"#7441-beanfactory接口\">#</a> 7.4.4.1 BeanFactory 接口</h4>\n<p>在该接口中定义 IOC 容器的统一规范即获取 bean 对象。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">BeanFactory</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//根据bean对象的名称获取bean对象</span></span><br><span class=\"line\">    Object <span class=\"title function_\">getBean</span><span class=\"params\">(String name)</span> <span class=\"keyword\">throws</span> Exception;</span><br><span class=\"line\">\t<span class=\"comment\">//根据bean对象的名称获取bean对象，并进行类型转换</span></span><br><span class=\"line\">    &lt;T&gt; T <span class=\"title function_\">getBean</span><span class=\"params\">(String name, Class&lt;? extends T&gt; clazz)</span> <span class=\"keyword\">throws</span> Exception;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h4 id=\"7442-applicationcontext接口\"><a class=\"markdownIt-Anchor\" href=\"#7442-applicationcontext接口\">#</a> 7.4.4.2 ApplicationContext 接口</h4>\n<p>该接口的所以的子实现类对 bean 对象的创建都是非延时的，所以在该接口中定义  <code>refresh()</code>  方法，该方法主要完成以下两个功能：</p>\n<ul>\n<li>加载配置文件。</li>\n<li>根据注册表中的 BeanDefinition 对象封装的数据进行 bean 对象的创建。</li>\n</ul>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ApplicationContext</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BeanFactory</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//进行配置文件加载并进行对象创建</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">refresh</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IllegalStateException, Exception;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h4 id=\"7443-abstractapplicationcontext类\"><a class=\"markdownIt-Anchor\" href=\"#7443-abstractapplicationcontext类\">#</a> 7.4.4.3 AbstractApplicationContext 类</h4>\n<ul>\n<li>\n<p>作为 ApplicationContext 接口的子类，所以该类也是非延时加载，所以需要在该类中定义一个 Map 集合，作为 bean 对象存储的容器。</p>\n</li>\n<li>\n<p>声明 BeanDefinitionReader 类型的变量，用来进行 xml 配置文件的解析，符合单一职责原则。</p>\n<p>BeanDefinitionReader 类型的对象创建交由子类实现，因为只有子类明确到底创建 BeanDefinitionReader 哪儿个子实现类对象。</p>\n</li>\n</ul>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AbstractApplicationContext</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ApplicationContext</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> BeanDefinitionReader beanDefinitionReader;</span><br><span class=\"line\">    <span class=\"comment\">//用来存储bean对象的容器   key存储的是bean的id值，value存储的是bean对象</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Map&lt;String, Object&gt; singletonObjects = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;String, Object&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//存储配置文件的路径</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> String configLocation;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">refresh</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IllegalStateException, Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//加载BeanDefinition</span></span><br><span class=\"line\">        beanDefinitionReader.loadBeanDefinitions(configLocation);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//初始化bean</span></span><br><span class=\"line\">        finishBeanInitialization();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//bean的初始化</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">finishBeanInitialization</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">BeanDefinitionRegistry</span> <span class=\"variable\">registry</span> <span class=\"operator\">=</span> beanDefinitionReader.getRegistry();</span><br><span class=\"line\">        String[] beanNames = registry.getBeanDefinitionNames();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String beanName : beanNames) &#123;</span><br><span class=\"line\">            <span class=\"type\">BeanDefinition</span> <span class=\"variable\">beanDefinition</span> <span class=\"operator\">=</span> registry.getBeanDefinition(beanName);</span><br><span class=\"line\">            getBean(beanName);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<blockquote>\n<p>注意：该类 finishBeanInitialization () 方法中调用 getBean () 方法使用到了模板方法模式。</p>\n</blockquote>\n<h4 id=\"7444-classpathxmlapplicationcontext类\"><a class=\"markdownIt-Anchor\" href=\"#7444-classpathxmlapplicationcontext类\">#</a> 7.4.4.4 ClassPathXmlApplicationContext 类</h4>\n<p>该类主要是加载类路径下的配置文件，并进行 bean 对象的创建，主要完成以下功能：</p>\n<ul>\n<li>在构造方法中，创建 BeanDefinitionReader 对象。</li>\n<li>在构造方法中，调用 refresh () 方法，用于进行配置文件加载、创建 bean 对象并存储到容器中。</li>\n<li>重写父接口中的 getBean () 方法，并实现依赖注入操作。</li>\n</ul>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ClassPathXmlApplicationContext</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractApplicationContext</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ClassPathXmlApplicationContext</span><span class=\"params\">(String configLocation)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.configLocation = configLocation;</span><br><span class=\"line\">        <span class=\"comment\">//构建XmlBeanDefinitionReader对象</span></span><br><span class=\"line\">        beanDefinitionReader = <span class=\"keyword\">new</span> <span class=\"title class_\">XmlBeanDefinitionReader</span>();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.refresh();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//根据bean的id属性值获取bean对象</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">getBean</span><span class=\"params\">(String name)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//return singletonObjects.get(name);</span></span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> singletonObjects.get(name);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(obj != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">BeanDefinitionRegistry</span> <span class=\"variable\">registry</span> <span class=\"operator\">=</span> beanDefinitionReader.getRegistry();</span><br><span class=\"line\">        <span class=\"type\">BeanDefinition</span> <span class=\"variable\">beanDefinition</span> <span class=\"operator\">=</span> registry.getBeanDefinition(name);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(beanDefinition == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">className</span> <span class=\"operator\">=</span> beanDefinition.getClassName();</span><br><span class=\"line\">        Class&lt;?&gt; clazz = Class.forName(className);</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">beanObj</span> <span class=\"operator\">=</span> clazz.newInstance();</span><br><span class=\"line\">        <span class=\"type\">MutablePropertyValues</span> <span class=\"variable\">propertyValues</span> <span class=\"operator\">=</span> beanDefinition.getPropertyValues();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (PropertyValue propertyValue : propertyValues) &#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">propertyName</span> <span class=\"operator\">=</span> propertyValue.getName();</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> propertyValue.getValue();</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">ref</span> <span class=\"operator\">=</span> propertyValue.getRef();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(ref != <span class=\"literal\">null</span> &amp;&amp; !<span class=\"string\">&quot;&quot;</span>.equals(ref)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"type\">Object</span> <span class=\"variable\">bean</span> <span class=\"operator\">=</span> getBean(ref);</span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">methodName</span> <span class=\"operator\">=</span> StringUtils.getSetterMethodNameByFieldName(propertyName);</span><br><span class=\"line\">                Method[] methods = clazz.getMethods();</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (Method method : methods) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(method.getName().equals(methodName)) &#123;</span><br><span class=\"line\">                        method.invoke(beanObj,bean);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(value != <span class=\"literal\">null</span> &amp;&amp; !<span class=\"string\">&quot;&quot;</span>.equals(value)) &#123;</span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">methodName</span> <span class=\"operator\">=</span> StringUtils.getSetterMethodNameByFieldName(propertyName);</span><br><span class=\"line\">                <span class=\"type\">Method</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> clazz.getMethod(methodName, String.class);</span><br><span class=\"line\">                method.invoke(beanObj,value);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        singletonObjects.put(name,beanObj);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> beanObj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; T <span class=\"title function_\">getBean</span><span class=\"params\">(String name, Class&lt;? extends T&gt; clazz)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">bean</span> <span class=\"operator\">=</span> getBean(name);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(bean != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> clazz.cast(bean);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"745-自定义spring-ioc总结\"><a class=\"markdownIt-Anchor\" href=\"#745-自定义spring-ioc总结\">#</a> 7.4.5 自定义 Spring IOC 总结</h3>\n<h4 id=\"7451-使用到的设计模式\"><a class=\"markdownIt-Anchor\" href=\"#7451-使用到的设计模式\">#</a> 7.4.5.1 使用到的设计模式</h4>\n<ul>\n<li>工厂模式。这个使用工厂模式 + 配置文件的方式。</li>\n<li>单例模式。Spring IOC 管理的 bean 对象都是单例的，此处的单例不是通过构造器进行单例的控制的，而是 spring 框架对每一个 bean 只创建了一个对象。</li>\n<li>模板方法模式。AbstractApplicationContext 类中的 finishBeanInitialization () 方法调用了子类的 getBean () 方法，因为 getBean () 的实现和环境息息相关。</li>\n<li>迭代器模式。对于 MutablePropertyValues 类定义使用到了迭代器模式，因为此类存储并管理 PropertyValue 对象，也属于一个容器，所以给该容器提供一个遍历方式。</li>\n</ul>\n<p>spring 框架其实使用到了很多设计模式，如 AOP 使用到了代理模式，选择 JDK 代理或者 CGLIB 代理使用到了策略模式，还有适配器模式，装饰者模式，观察者模式等。</p>\n<h4 id=\"7452-符合大部分设计原则\"><a class=\"markdownIt-Anchor\" href=\"#7452-符合大部分设计原则\">#</a> 7.4.5.2 符合大部分设计原则</h4>\n<h4 id=\"7453-整个设计和spring的设计还是有一定的出入\"><a class=\"markdownIt-Anchor\" href=\"#7453-整个设计和spring的设计还是有一定的出入\">#</a> 7.4.5.3 整个设计和 Spring 的设计还是有一定的出入</h4>\n<p>spring 框架底层是很复杂的，进行了很深入的封装，并对外提供了很好的扩展性。而我们自定义 SpringIOC 有以下几个目的：</p>\n<ul>\n<li>了解 Spring 底层对对象的大体管理机制。</li>\n<li>了解设计模式在具体的开发中的使用。</li>\n<li>以后学习 spring 源码，通过该案例的实现，可以降低 spring 学习的入门成本。</li>\n</ul>\n",
            "tags": [
                "设计模式"
            ]
        },
        {
            "id": "https://wait-you.github.io/2023/06/06/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/",
            "url": "https://wait-you.github.io/2023/06/06/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/",
            "title": "排序算法",
            "date_published": "2023-06-06T01:11:41.000Z",
            "content_html": "<h1 id=\"排序算法\"><a class=\"markdownIt-Anchor\" href=\"#排序算法\">#</a> 排序算法</h1>\n<h2 id=\"冒泡排序\"><a class=\"markdownIt-Anchor\" href=\"#冒泡排序\">#</a> 冒泡排序</h2>\n<h3 id=\"基本介绍\"><a class=\"markdownIt-Anchor\" href=\"#基本介绍\">#</a> 基本介绍</h3>\n<ul>\n<li>冒泡排序的基本思想是，通过对待排序序列从前向后（从下标较小的元素开始），依次比较相邻元素的值，若发现逆序则交换，使值较大的元素逐渐从前向后，就像水底下的气泡一样逐渐向上冒</li>\n</ul>\n<h3 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\">#</a> 代码</h3>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sort</span><span class=\"params\">(<span class=\"type\">int</span>[] arr)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> temp;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">flag</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; arr.length -<span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; arr.length -<span class=\"number\">1</span> -i; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &gt; arr[j+<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                temp = arr[j];</span><br><span class=\"line\">                arr[j] = arr[j+<span class=\"number\">1</span>];</span><br><span class=\"line\">                arr[j+<span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!flag) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"选择排序\"><a class=\"markdownIt-Anchor\" href=\"#选择排序\">#</a> 选择排序</h2>\n<h3 id=\"基本介绍-2\"><a class=\"markdownIt-Anchor\" href=\"#基本介绍-2\">#</a> 基本介绍</h3>\n<ul>\n<li>选择式排序也属于内部排序法，是从预排序的数据中，按指定的规则选出某一个元素，再根据规定交换位置后达到排序的目的</li>\n<li>基本思想是，第一次从 arr [0]~arr [n-1] 中选取最小值，与 arr [0] 交换，第二次从 arr [1]~arr [n-1] 中选取最小值，与 arr [1] 交换…</li>\n</ul>\n<h3 id=\"代码-2\"><a class=\"markdownIt-Anchor\" href=\"#代码-2\">#</a> 代码</h3>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sort</span><span class=\"params\">(<span class=\"type\">int</span>[] arr)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> min;</span><br><span class=\"line\">    <span class=\"type\">int</span> index;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; arr.length -<span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        min = arr[i];</span><br><span class=\"line\">        index = i;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i+<span class=\"number\">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (min &gt; arr[j]) &#123;</span><br><span class=\"line\">                min = arr[j];</span><br><span class=\"line\">                index = j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index != i) &#123;</span><br><span class=\"line\">            arr[index] = arr[i];</span><br><span class=\"line\">            arr[i] = min;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"插入排序\"><a class=\"markdownIt-Anchor\" href=\"#插入排序\">#</a> 插入排序</h2>\n<h3 id=\"基本思想\"><a class=\"markdownIt-Anchor\" href=\"#基本思想\">#</a> 基本思想</h3>\n<ul>\n<li>把 n 个待排序的元素看成是一个有序表和一个无序表，开始时有序表中只包含一个元素，无序表中包含有 n-1 个元素，排序过程中每次从无序表中取出第一个元素，把他的排序码依次与有序表元素的排序码进行比较，将他插入到有序表中的适当位置，使之成为新的有序表</li>\n</ul>\n<h3 id=\"代码-3\"><a class=\"markdownIt-Anchor\" href=\"#代码-3\">#</a> 代码</h3>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sort</span><span class=\"params\">(<span class=\"type\">int</span>[] arr)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">insertVal</span> <span class=\"operator\">=</span> arr[i];</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">insertIndex</span> <span class=\"operator\">=</span> i - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (insertIndex &gt;= <span class=\"number\">0</span> &amp;&amp; insertVal &lt; arr[insertIndex]) &#123;</span><br><span class=\"line\">            arr[insertIndex+<span class=\"number\">1</span>] = arr[insertIndex];</span><br><span class=\"line\">            insertIndex--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        arr[insertIndex+<span class=\"number\">1</span>] = insertVal;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"希尔排序\"><a class=\"markdownIt-Anchor\" href=\"#希尔排序\">#</a> 希尔排序</h2>\n<h3 id=\"基本思想-2\"><a class=\"markdownIt-Anchor\" href=\"#基本思想-2\">#</a> 基本思想</h3>\n<p>希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序，随着增量逐渐减少，每组包含的关键词越来越多，当增量减至 1 时，整个文件恰被分成一组，算法便终止</p>\n<h3 id=\"代码-4\"><a class=\"markdownIt-Anchor\" href=\"#代码-4\">#</a> 代码</h3>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sortWtich</span><span class=\"params\">(<span class=\"type\">int</span>[] arr)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> temp;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">gap</span> <span class=\"operator\">=</span> arr.length/<span class=\"number\">2</span>; gap &gt; <span class=\"number\">0</span>; gap/=<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> gap; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i - gap; j &gt;= <span class=\"number\">0</span>; j -= gap) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + gap]) &#123;</span><br><span class=\"line\">                    temp = arr[j];</span><br><span class=\"line\">                    arr[j] = arr[j + gap];</span><br><span class=\"line\">                    arr[j + gap] = temp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sortInsert</span><span class=\"params\">(<span class=\"type\">int</span>[] arr)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">gap</span> <span class=\"operator\">=</span> arr.length / <span class=\"number\">2</span>; gap &gt; <span class=\"number\">0</span>; gap/=<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> gap; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> arr[j];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &lt; arr[j - gap]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (j - gap &gt;= <span class=\"number\">0</span> &amp;&amp; temp &lt; arr[j - gap]) &#123;</span><br><span class=\"line\">                    arr[j] = arr[j - gap];</span><br><span class=\"line\">                    j -= gap;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                arr[j] = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"快速排序\"><a class=\"markdownIt-Anchor\" href=\"#快速排序\">#</a> 快速排序</h2>\n<h3 id=\"基本思想-3\"><a class=\"markdownIt-Anchor\" href=\"#基本思想-3\">#</a> 基本思想</h3>\n<ol>\n<li>快速排序是对冒泡排序的一种改进。</li>\n<li>基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另一部分的所有数据小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列</li>\n</ol>\n<h3 id=\"代码-5\"><a class=\"markdownIt-Anchor\" href=\"#代码-5\">#</a> 代码</h3>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">quickSort</span><span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> left, <span class=\"type\">int</span> right)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">l</span> <span class=\"operator\">=</span> left;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">r</span> <span class=\"operator\">=</span> right;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">pivot</span> <span class=\"operator\">=</span> arr[(left + right) / <span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> temp;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (l &lt; r) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (arr[l] &lt; pivot) &#123;</span><br><span class=\"line\">            l++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (arr[r] &gt; pivot) &#123;</span><br><span class=\"line\">            r--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l &gt;= r) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        temp = arr[l];</span><br><span class=\"line\">        arr[l] = arr[r];</span><br><span class=\"line\">        arr[r] = temp;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[l] == pivot) &#123;</span><br><span class=\"line\">            r--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[r] == pivot) &#123;</span><br><span class=\"line\">            l++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l == r) &#123;</span><br><span class=\"line\">        l++;</span><br><span class=\"line\">        r--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left &lt; r) &#123;</span><br><span class=\"line\">        quickSort(arr, left, r);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (right &gt; l) &#123;</span><br><span class=\"line\">        quickSort(arr, l, right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"归并排序\"><a class=\"markdownIt-Anchor\" href=\"#归并排序\">#</a> 归并排序</h2>\n<h3 id=\"基本思想-4\"><a class=\"markdownIt-Anchor\" href=\"#基本思想-4\">#</a> 基本思想</h3>\n<ol>\n<li>归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略（分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案修补在一起，即分而治之）</li>\n</ol>\n<h3 id=\"代码-6\"><a class=\"markdownIt-Anchor\" href=\"#代码-6\">#</a> 代码</h3>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">mergeSort</span><span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> left, <span class=\"type\">int</span> right, <span class=\"type\">int</span>[] temp)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left &lt; right) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">mid</span> <span class=\"operator\">=</span> (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        mergeSort(arr, left, mid, temp);</span><br><span class=\"line\"></span><br><span class=\"line\">        mergeSort(arr, mid+<span class=\"number\">1</span>, right, temp);</span><br><span class=\"line\"></span><br><span class=\"line\">        merge(arr, left, mid, right, temp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">merge</span><span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> left, <span class=\"type\">int</span> mid, <span class=\"type\">int</span> right, <span class=\"type\">int</span>[] temp)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> left;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt;= mid &amp;&amp; j &lt;= right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[i] &lt;= arr[j]) &#123;</span><br><span class=\"line\">            temp[t] = arr[i];</span><br><span class=\"line\">            t += <span class=\"number\">1</span>;</span><br><span class=\"line\">            i += <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            temp[t] = arr[j];</span><br><span class=\"line\">            t += <span class=\"number\">1</span>;</span><br><span class=\"line\">            j += <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt;= mid) &#123;</span><br><span class=\"line\">        temp[t] = arr[i];</span><br><span class=\"line\">        t += <span class=\"number\">1</span>;</span><br><span class=\"line\">        i += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (j &lt;= right) &#123;</span><br><span class=\"line\">        temp[t] = arr[j];</span><br><span class=\"line\">        t += <span class=\"number\">1</span>;</span><br><span class=\"line\">        j += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    t = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">tempLeft</span> <span class=\"operator\">=</span> left;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (tempLeft &lt;= right) &#123;</span><br><span class=\"line\">        arr[tempLeft] = temp[t];</span><br><span class=\"line\">        t += <span class=\"number\">1</span>;</span><br><span class=\"line\">        tempLeft += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"基数排序\"><a class=\"markdownIt-Anchor\" href=\"#基数排序\">#</a> 基数排序</h2>\n<h3 id=\"基本思想-5\"><a class=\"markdownIt-Anchor\" href=\"#基本思想-5\">#</a> 基本思想</h3>\n<ol>\n<li>通过键值的各个位的值，将要排序的元素分配至某些 “桶” 中，达到排序的作用</li>\n<li>基数排序属于稳定性排序，基数排序法的效率高的稳定性算法</li>\n<li>基数排序是桶排序的扩展</li>\n<li>将整数按位数切割成不同的数字，然后按每个位数分别比较</li>\n</ol>\n<p>基本思想</p>\n<ol>\n<li>将所有待比较的数值统一为同样的数位长度，数位较短的数前面补零，然后从最低位开始，依次进行一次排序，这样从最低位排序一直到最高位排序完成以后，数列就变成一个有序序列</li>\n</ol>\n<h3 id=\"代码实现\"><a class=\"markdownIt-Anchor\" href=\"#代码实现\">#</a> 代码实现</h3>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">radixSort</span><span class=\"params\">(<span class=\"type\">int</span>[] arr)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (max &lt; arr[i])&#123;</span><br><span class=\"line\">            max = arr[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">maxLength</span> <span class=\"operator\">=</span> (max + <span class=\"string\">&quot;&quot;</span>).length();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span>[][] bucket = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">10</span>][arr.length];</span><br><span class=\"line\">    <span class=\"type\">int</span>[] bucketElementCounts = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, n = <span class=\"number\">1</span>; i &lt; maxLength; i++, n *= <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; arr.length; j++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">digitOfElement</span> <span class=\"operator\">=</span> arr[j] / n % <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            bucket[digitOfElement][bucketElementCounts[digitOfElement]] = arr[j];</span><br><span class=\"line\">            bucketElementCounts[digitOfElement]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; bucketElementCounts.length; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(bucketElementCounts[j] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; k &lt; bucketElementCounts[j]; k++) &#123;</span><br><span class=\"line\">                    arr[index++] = bucket[j][k];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            bucketElementCounts[j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n",
            "tags": [
                "排序算法"
            ]
        },
        {
            "id": "https://wait-you.github.io/2023/06/06/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/",
            "url": "https://wait-you.github.io/2023/06/06/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/",
            "title": "领域驱动设计",
            "date_published": "2023-06-06T01:10:51.000Z",
            "content_html": "<h1 id=\"领域驱动设计\"><a class=\"markdownIt-Anchor\" href=\"#领域驱动设计\">#</a> 领域驱动设计</h1>\n<h2 id=\"大型系统是如何变老的\"><a class=\"markdownIt-Anchor\" href=\"#大型系统是如何变老的\">#</a> 大型系统是如何 &quot;变老&quot; 的</h2>\n<h3 id=\"面临的问题\"><a class=\"markdownIt-Anchor\" href=\"#面临的问题\">#</a> 面临的问题</h3>\n<p>当一个项目使用过长，他的运行效率低、代码乱，需要重构的时候，需要面临一些问题</p>\n<ul>\n<li>沟通难\n<ul>\n<li>产品提出一个问题，开发却要很久</li>\n</ul>\n</li>\n<li>开发难\n<ul>\n<li>代码膨胀，对于大型软件，一个旧的类可能有上千行，无法确定更改后的影响有多大</li>\n</ul>\n</li>\n<li>测试难\n<ul>\n<li>改了个需求，测试需要组织庞大的测试计划</li>\n</ul>\n</li>\n<li>创新难\n<ul>\n<li>系统背负的业务越来越重，已经基本丧失了对新技术的灵活敏感</li>\n<li>比如从 <code>orm</code>  从 <code>hebernate</code>  换到 <code>mybatis</code> ，因为业务代码是耦合的，无法轻易的更换</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"微服务架构更在防止系统老化吗\"><a class=\"markdownIt-Anchor\" href=\"#微服务架构更在防止系统老化吗\">#</a> 微服务架构更在防止系统 &quot; 老化’' 吗</h3>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202211051602718.png\"\n                      alt=\"image-20221105160246592\"\n                ></p>\n<p>虽然在一开始将一个电商项目根据功能分成了若干个微服务，但是随着系统体量的不断增大，某一个或某几个微服务的功能可能也会变得无比庞大，导致系统 &quot;老化&quot;。所以微服务对于防止系统老化只是一个治标不治本的方式。</p>\n<h3 id=\"ddd被认为是目前最理想的方式\"><a class=\"markdownIt-Anchor\" href=\"#ddd被认为是目前最理想的方式\">#</a> DDD 被认为是目前最理想的方式</h3>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202211051614128.png\"\n                      alt=\"image-20221105161428086\"\n                ></p>\n<p>在业务上分成一个个的 <code>domain</code>  领域，每个领域只针对自己业务上的属性，系统上不在以 <code>mvc</code>  构建，而是以带有自己功能的领域来构成。这样在微服务进行拆分时，最理想的方式是可以随意按照领域拆分，这样子的话，项目就可以自由组合，结合微服务的体系，更好的体现微服务的能力，使得系统茁壮的成长。</p>\n<h3 id=\"ddd的保证措施\"><a class=\"markdownIt-Anchor\" href=\"#ddd的保证措施\">#</a> DDD 的保证措施</h3>\n<p><code>DDD</code>  使得一些工作经验不多的人可以对相关功能进行负责，但是需要一些保证措施。</p>\n<p><code>mvc</code>  架构的隐患</p>\n<ul>\n<li>数据库\n<ul>\n<li>用户的模块发生变化，比如新增了一个字段等等，那么在代码层面可能都需要做一个修改</li>\n</ul>\n</li>\n<li>其他的微服务调用或者第三方 api\n<ul>\n<li>调用方式发生改变</li>\n<li>其他微服务或第三方 api 业务发生变化，比如校验码发生变化，那么在业务代码对获取到的校验码的判断也需要做出相应的修改</li>\n</ul>\n</li>\n<li>消息队列\n<ul>\n<li>当中间介更换的时候，调用的方式也需要进行变化</li>\n</ul>\n</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202211051626670.png\"\n                      alt=\"\"\n                ></p>\n<p><code>mvc</code>  到 <code>ddd</code>  的改造</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202211052014483.png\"\n                      alt=\"image-20221105201437426\"\n                ></p>\n<p><strong>将周边的所有的变化隔离开，留下自己的核心</strong></p>\n<ul>\n<li>\n<p>数据库</p>\n<ul>\n<li>对于数据库的操作不再是引入操作数据库的 <code>dao</code> ，而是通过一个 <code>Repository</code>  接口，这样子当数据源发生变化时，通过这样的一个接口隔离，这样子 <code>orm</code>  的具体实现不会影响到业务，切换的时候只需要更换 <code>Repostory</code>  的具体的实现类，整体的业务不需要变化</li>\n<li>使得业务只需要拿到数据即可，至于数据是从哪里来的，这个不用管</li>\n</ul>\n</li>\n<li>\n<p>实体</p>\n<ul>\n<li>\n<p>以往的实体 <code>pojo</code>  只需要有一些属性，一些 <code>setter</code> 、 <code>getter</code> ，在 <code>ddd</code>  中把实体和他的业务方法封装到一起，构成一个充血模型，以前的 <code>pojo</code>  是一个贫血模型</p>\n</li>\n<li>\n<p>以前的 <code>pojo</code>  实体会把所有属性放在一个大的实体类里，然后通过上层的 <code>service</code>  来对这些属性做不同的操作，实现不同的业务，这样会造成<strong>贫血失忆症</strong>的后果，即从这个实体上看不出他是要做什么事情的</p>\n</li>\n<li>\n<p>所以在充血模型，把业务方法上进来的好处就是，这个实体要做什么事情就会一目了然的</p>\n</li>\n</ul>\n</li>\n<li>\n<p>值对象</p>\n<ul>\n<li>访问值对象必须通过实体来访问</li>\n<li>但也不是所有场景都必须通过实体类获取值对象，根据是否是业务来判断</li>\n</ul>\n</li>\n<li>\n<p>业务</p>\n<ul>\n<li><code>DDD</code>  业务指造成实体状态变化的过程，即使得实体的属性发生变化的方法</li>\n</ul>\n</li>\n<li>\n<p>防腐层</p>\n<ul>\n<li>隔离外部服务\n<ul>\n<li>封装一个 <code>SafeService</code>  接口，将其他微服务或第三方 api 的调用放到这个接口里，在这个接口里进行调用和返回结果的判断</li>\n</ul>\n</li>\n<li>隔离第三方组件\n<ul>\n<li>封装 <code>MessageProducer</code>  和 <code>MessageConsumer</code>  接口，在这个接口里指定对应的组件，并实现对应使用该组件的方法</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>领域服务 隔离实体</p>\n<ul>\n<li>将修改实体状态而业务代码，也封装成一个接口，在接口的方法中调用实体的业务方法，这样子的好处是，以后再新增一些新的业务的时候，也不会说使得业务层类的代码过于庞大，并且因为使用接口组合的方式，业务的可扩展性也更好，耦合度更低</li>\n</ul>\n</li>\n</ul>\n<p>重新编排后的好处</p>\n<ul>\n<li>业务逻辑清晰，数据流转与业务逻辑完全分离</li>\n<li>各个模块的功能都是相对独立的，没有外部依赖，可以单独测试</li>\n<li>原有的 <code>service</code>  不再包含任何具体业务的逻辑，仅仅作为组件编排</li>\n</ul>\n<h3 id=\"ddd四层架构\"><a class=\"markdownIt-Anchor\" href=\"#ddd四层架构\">#</a> DDD 四层架构</h3>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202211052021437.png\"\n                      alt=\"image-20221105202154385\"\n                ></p>\n",
            "tags": [
                "领域驱动设计"
            ]
        },
        {
            "id": "https://wait-you.github.io/2023/06/06/%E6%8E%A5%E5%8F%A3%E5%B9%82%E7%AD%89%E6%80%A7/",
            "url": "https://wait-you.github.io/2023/06/06/%E6%8E%A5%E5%8F%A3%E5%B9%82%E7%AD%89%E6%80%A7/",
            "title": "接口幂等性",
            "date_published": "2023-06-06T01:09:49.000Z",
            "content_html": "<h1 id=\"接口幂等性\"><a class=\"markdownIt-Anchor\" href=\"#接口幂等性\">#</a> 接口幂等性</h1>\n<h2 id=\"什么是幂等性\"><a class=\"markdownIt-Anchor\" href=\"#什么是幂等性\">#</a> 什么是幂等性</h2>\n<p><strong>接口幂等性就是用户对于同一操作发起的一次请求或者多次请求的结果是一致的</strong>，不会因为多次点击而产生副作用；比如说支付场景，用户购买了商品支付成功，但是返回结果的时候网络异常，此时钱已经扣了，用户再次点击按钮，此时会进行二次扣款，返回结果成功，用户查询语法发现多扣钱了，流水记录也变成了两条，这就是没有保证接口幂等性</p>\n<h2 id=\"哪些情况需要防止\"><a class=\"markdownIt-Anchor\" href=\"#哪些情况需要防止\">#</a> 哪些情况需要防止</h2>\n<p>用户多次点击按钮</p>\n<p>用户页面回退再次提交</p>\n<p>微服务互相调用，由于网络问题，导致请求失败，feign 触发重试机制</p>\n<p>其他业务情况</p>\n<h2 id=\"幂等解决方案将\"><a class=\"markdownIt-Anchor\" href=\"#幂等解决方案将\">#</a> 幂等解决方案将</h2>\n<h3 id=\"token机制\"><a class=\"markdownIt-Anchor\" href=\"#token机制\">#</a> token 机制</h3>\n<ol>\n<li>服务端提供了发送 token 的接口，我们在分析业务的时候，哪些业务是存在幂等问题的，就必须在执行业务前，先去获取 token，服务器会把 token 保存都 redis 中</li>\n<li>然后调用业务接口请求时，把 token 携带过去，一般放在请求头部</li>\n<li>服务器判断 token 是否存在 redis 中，存在表示第一次请求，然后删除 token，继续执行业务</li>\n<li>如果 token 不存在 redis 中，就表示是重复操作，直接返回重复标记给 client，这样就保证了业务代码，不被重复执行</li>\n</ol>\n<p>危险性：</p>\n<ol>\n<li>\n<p>先删除 token 还是后删除 token</p>\n<ol>\n<li>先删除可能导致业务确实没有执行，重试还带上之前的 token，由于放重涉及导致请求还是不能执行</li>\n<li>后删除可能导致业务处理成功，但是服务闪退，出现超时，没有删除 token，别人继续重试，导致业务被执行两遍</li>\n<li>我们最好设计为先删除 token，如果业务调用失败，就重新获取 token 再次请求</li>\n</ol>\n</li>\n<li>\n<p>Token 获取、比较和删除必须是原子操作</p>\n<ol>\n<li>\n<p>redis.get (token)、token.equals、redis.del (token)，如果这三个操作不是原子，可能导致高并发下，都 get 到同样的数据，判断都成功，继续业务执行</p>\n</li>\n<li>\n<p>可以在 redis 使用 lua 脚本完成这个操作</p>\n<div class=\"highlight-container\" data-rel=\"Lua\"><figure class=\"iseeu highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> redis.call(<span class=\"string\">&#x27;get&#x27;</span>, KEYS[<span class=\"number\">1</span>]==ARGV[<span class=\"number\">1</span>])<span class=\"keyword\">then</span> <span class=\"keyword\">return</span> redis.call(<span class=\"string\">&#x27;del&#x27;</span>, KEYS[<span class=\"number\">1</span>])<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">0</span> <span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure></div>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"各种锁机制\"><a class=\"markdownIt-Anchor\" href=\"#各种锁机制\">#</a> 各种锁机制</h3>\n<h4 id=\"数据库悲观锁\"><a class=\"markdownIt-Anchor\" href=\"#数据库悲观锁\">#</a> 数据库悲观锁</h4>\n<p>悲观锁使用时一般伴随事务一起使用，数据锁定时间可能会很长，需要根据实际情况选用，另外要注意的是，id 字段一定是主键或者唯一索引，不然很可能造成锁表的结果，处理起来会非常麻烦</p>\n<h4 id=\"数据库乐观锁\"><a class=\"markdownIt-Anchor\" href=\"#数据库乐观锁\">#</a> 数据库乐观锁</h4>\n<p>这种方法适合在更新的场景中</p>\n<p>根据 version 版本，也就是在操作数据库前先获取当前商品的 version 版本号，然后操作的时候带上此 version 号</p>\n<p>乐观锁主要使用于处理读多写少的问题</p>\n<h4 id=\"业务层分布式锁\"><a class=\"markdownIt-Anchor\" href=\"#业务层分布式锁\">#</a> 业务层分布式锁</h4>\n<p>如果多个机器可能在同一时间同时处理相同的数据，比如多台机器定时任务都拿到了相同数据处理，我们就可以加分布式锁，锁定此数据，处理完成后释放锁，获取到锁的必须先判断这个数据是否被处理过</p>\n<h3 id=\"各种唯一约束\"><a class=\"markdownIt-Anchor\" href=\"#各种唯一约束\">#</a> 各种唯一约束</h3>\n<h4 id=\"数据库唯一约束\"><a class=\"markdownIt-Anchor\" href=\"#数据库唯一约束\">#</a> 数据库唯一约束</h4>\n<p>插入数据，应该按照唯一索引进行插入，比如订单号，相同的订单号就不可能有两条记录插入</p>\n<p>这个机制是利用了数据库的主键唯一约束的特性，解决了在 insert 场景时幂等性问题，但主键的要求不能是自增的主键，这样就需要业务生成全局唯一 的主键</p>\n<p>如果是分库分表的场景下，路由规则要保证相同请求下，落地在同一个数据库和同一个表中，要不然数据库主键约束就不其效果了，因为是不同的数据库和表主键不相关</p>\n<h4 id=\"redis-set防重\"><a class=\"markdownIt-Anchor\" href=\"#redis-set防重\">#</a> redis set 防重</h4>\n<p>很多数据需要处理，只能被处理一次，比如我们可以计算数据的 MD5 将其放入 redis 的 set，每次处理数据，先看这个 MD5 是否已经存在，存在就不处理</p>\n<h3 id=\"防重表\"><a class=\"markdownIt-Anchor\" href=\"#防重表\">#</a> 防重表</h3>\n<p>使用订单号 orderNo 作为去重表的唯一索引，把唯一索引插入去重表，在进行业务操作，且他们在同一个事物中，这个保证了重复请求时，因为去重表有唯一约束，导致请求失败，避免了幂等性问题，这里要注意的是，去重表和业务表应该放在同一个库中，这样就保证了在同一个事务中，即使业务操作失败了，也会把去重表的数据回滚 ，这个很好的保证了数据的一致性</p>\n<h3 id=\"全局请求唯一id\"><a class=\"markdownIt-Anchor\" href=\"#全局请求唯一id\">#</a> 全局请求唯一 id</h3>\n<p>调用接口时，生成一个唯一的 id，redis 将数据保存到集合中（去重），存在即处理过</p>\n<p>可与使用 nginx 设置每一个请求的唯一 id</p>\n<p>proxy_set_header X-Rquest-Id $request_id;</p>\n",
            "tags": [
                "接口幂等性"
            ]
        },
        {
            "id": "https://wait-you.github.io/2023/06/06/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/",
            "url": "https://wait-you.github.io/2023/06/06/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/",
            "title": "分布式事务",
            "date_published": "2023-06-06T01:08:50.000Z",
            "content_html": "<h1 id=\"分布式事务\"><a class=\"markdownIt-Anchor\" href=\"#分布式事务\">#</a> 分布式事务</h1>\n<h2 id=\"基础理论\"><a class=\"markdownIt-Anchor\" href=\"#基础理论\">#</a> 基础理论</h2>\n<p>在讲解具体方案之前，我们有必要了解一些分布式事务所涉及到的基础理论知识。</p>\n<h3 id=\"事务\"><a class=\"markdownIt-Anchor\" href=\"#事务\">#</a> 事务</h3>\n<p>事务是活动轨迹，数据库事务就是那些小轨迹连接的不可分割的大轨迹</p>\n<p>事务是应用程序中一系列严密的操作，所有操作必须成功完成，否则在每个操作中所作的所有更改都会被撤消。也就是事务具有原子性，一个事务中的一系列的操作要么全部成功，要么一个都不做。事务应该具有 4 个属性：原子性、一致性、隔离性、持久性。这四个属性通常称为 ACID 特性。</p>\n<h3 id=\"事务的隔离级别\"><a class=\"markdownIt-Anchor\" href=\"#事务的隔离级别\">#</a> 事务的隔离级别</h3>\n<ul>\n<li>READ UNCOMMITED 读未提交\n<ul>\n<li>该隔离级别的事务会读到其他未提交事务的数据，此现象也称为脏读</li>\n</ul>\n</li>\n<li>READ COMMITED 读提交\n<ul>\n<li>一个事物可以读取另一个事务已经提交的事务，多次读取会造成不一样的结果，此现象称为不可重复读</li>\n<li>Oracle 和 SQL Server 的默认隔离级别</li>\n</ul>\n</li>\n<li>REPEATABLE READ 可重复读\n<ul>\n<li>该隔离级别是 MySQL 默认的隔离级别，在同一个事务里，select 的结果是事务开始时间点的状态，因此，同样的 select 操作读到的结果是一致的，但是会有幻读现象，MySQL 的 InnoDB 引擎可以通过 next-key locks 机制来避免幻读</li>\n</ul>\n</li>\n<li>SERIALIZABLE 序列化\n<ul>\n<li>在该隔离级别下事务都是串行执行的，MySQL 数据库的 InnoDB 引擎会给读操作隐式加一把读共享锁，从而避免了脏读、不可重复读和幻读的问题</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"事务的传播行为\"><a class=\"markdownIt-Anchor\" href=\"#事务的传播行为\">#</a> 事务的传播行为</h3>\n<p>REQUIRED 和 REQUIRED_NEW</p>\n<p>使用调用者的事务 开启新的事务</p>\n<h3 id=\"分布式事务-2\"><a class=\"markdownIt-Anchor\" href=\"#分布式事务-2\">#</a> 分布式事务</h3>\n<p>分布式事务是指事务的参与者、支持事务的服务器、资源服务器以及事务管理器分别位于不同的分布式系统的不同节点之上。例如在大型电商系统中，下单接口通常会扣减库存、减去优惠、生成订单 id, 而订单服务与库存、优惠、订单 id 都是不同的服务，下单接口的成功与否，不仅取决于本地的 db 操作，而且依赖第三方系统的结果，这时候分布式事务就保证这些操作要么全部成功，要么全部失败。本质上来说，分布式事务就是为了保证不同数据库的数据一致性。</p>\n<h3 id=\"强一致性-弱一致性-最终一致性\"><a class=\"markdownIt-Anchor\" href=\"#强一致性-弱一致性-最终一致性\">#</a> 强一致性、弱一致性、最终一致性</h3>\n<h4 id=\"强一致性\"><a class=\"markdownIt-Anchor\" href=\"#强一致性\">#</a> 强一致性</h4>\n<p>任何一次读都能读到某个数据的最近一次写的数据。系统中的所有进程，看到的操作顺序，都和全局时钟下的顺序一致。简言之，在任意时刻，所有节点中的数据是一样的。</p>\n<h4 id=\"弱一致性\"><a class=\"markdownIt-Anchor\" href=\"#弱一致性\">#</a> 弱一致性</h4>\n<p>数据更新后，如果能容忍后续的访问只能访问到部分或者全部访问不到，则是弱一致性。</p>\n<h4 id=\"最终一致性\"><a class=\"markdownIt-Anchor\" href=\"#最终一致性\">#</a> 最终一致性</h4>\n<p>不保证在任意时刻任意节点上的同一份数据都是相同的，但是随着时间的迁移，不同节点上的同一份数据总是在向趋同的方向变化。简单说，就是在一段时间后，节点间的数据会最终达到一致状态。</p>\n<h3 id=\"cap-原则\"><a class=\"markdownIt-Anchor\" href=\"#cap-原则\">#</a> CAP 原则</h3>\n<blockquote>\n<p>CAP 原则又称 CAP 定理，指的是在一个分布式系统中， Consistency（一致性）、 Availability（可用性）、Partition tolerance（分区容错性），三者不可得兼。</p>\n</blockquote>\n<p>一致性（C）：</p>\n<blockquote>\n<p>在分布式系统中的所有数据备份，在同一时刻是否同样的值。（等同于所有节点访问同一份最新的数据副本）</p>\n</blockquote>\n<p>可用性（A）：</p>\n<blockquote>\n<p>在集群中一部分节点故障后，集群整体是否还能响应客户端的读写请求。（对数据更新具备高可用性）</p>\n</blockquote>\n<p>分区容错性（P）：</p>\n<blockquote>\n<p>以实际效果而言，分区相当于对通信的时限要求。系统如果不能在时限内达成数据一致性，就意味着发生了分区的情况，必须就当前操作在 C 和 A 之间做出选择。</p>\n</blockquote>\n<p>CAP 原则的精髓就是要么 AP，要么 CP，要么 AC，但是不存在 CAP。如果在某个分布式系统中数据无副本， 那么系统必然满足强一致性条件， 因为只有独一数据，不会出现数据不一致的情况，此时 C 和 P 两要素具备，但是如果系统发生了网络分区状况或者宕机，必然导致某些数据不可以访问，此时可用性条件就不能被满足，即在此情况下获得了 CP 系统，但是 CAP 不可同时满足。</p>\n<h3 id=\"base-理论\"><a class=\"markdownIt-Anchor\" href=\"#base-理论\">#</a> BASE 理论</h3>\n<p>BASE 理论指的是基本可用 Basically Available，软状态 Soft State，最终一致性 Eventual Consistency，核心思想是即便无法做到强一致性，但应该采用适合的方式保证最终一致性。</p>\n<p>BASE，Basically Available Soft State Eventual Consistency 的简写：<br>\nBA：Basically Available 基本可用，分布式系统在出现故障的时候，允许损失部分可用性，即保证核心可用。<br>\nS：Soft State 软状态，允许系统存在中间状态，而该中间状态不会影响系统整体可用性。<br>\nE：Consistency 最终一致性，系统中的所有数据副本经过一定时间后，最终能够达到一致的状态。<br>\nBASE 理论本质上是对 CAP 理论的延伸，是对 CAP 中 AP 方案的一个补充。</p>\n<h3 id=\"柔性事务\"><a class=\"markdownIt-Anchor\" href=\"#柔性事务\">#</a> 柔性事务</h3>\n<p>不同于 ACID 的刚性事务，在分布式场景下基于 BASE 理论，就出现了柔性事务的概念。要想通过柔性事务来达到最终的一致性，就需要依赖于一些特性，这些特性在具体的方案中不一定都要满足，因为不同的方案要求不一样；但是都不满足的话，是不可能做柔性事务的。</p>\n<h3 id=\"幂等操作\"><a class=\"markdownIt-Anchor\" href=\"#幂等操作\">#</a> 幂等操作</h3>\n<p>在编程中一个幂等操作的特点是其任意多次执行所产生的影响均与一次执行的影响相同。幂等函数，或幂等方法，是指可以使用相同参数重复执行，并能获得相同结果的函数。这些函数不会影响系统状态，也不用担心重复执行会对系统造成改变。例如，支付流程中第三方支付系统告知系统中某个订单支付成功，接收该支付回调接口在网络正常的情况下无论操作多少次都应该返回成功。</p>\n<h2 id=\"分布式事务使用场景\"><a class=\"markdownIt-Anchor\" href=\"#分布式事务使用场景\">#</a> 分布式事务使用场景</h2>\n<h3 id=\"转账\"><a class=\"markdownIt-Anchor\" href=\"#转账\">#</a> 转账</h3>\n<p>转账是最经典那的分布式事务场景，假设用户 A 使用银行 app 发起一笔跨行转账给用户 B，银行系统首先扣掉用户 A 的钱，然后增加用户 B 账户中的余额。此时就会出现 2 种异常情况：1. 用户 A 的账户扣款成功，用户 B 账户余额增加失败 2. 用户 A 账户扣款失败，用户 B 账户余额增加成功。对于银行系统来说，以上 2 种情况都是不允许发生，此时就需要分布式事务来保证转账操作的成功。</p>\n<h3 id=\"下单扣库存\"><a class=\"markdownIt-Anchor\" href=\"#下单扣库存\">#</a> 下单扣库存</h3>\n<p>在电商系统中，下单是用户最常见操作。在下单接口中必定会涉及生成订单 id, 扣减库存等操作，对于微服务架构系统，订单 id 与库存服务一般都是独立的服务，此时就需要分布式事务来保证整个下单接口的成功。</p>\n<h3 id=\"同步超时\"><a class=\"markdownIt-Anchor\" href=\"#同步超时\">#</a> 同步超时</h3>\n<p>继续以电商系统为例，在微服务体系架构下，我们的支付与订单都是作为单独的系统存在。订单的支付状态依赖支付系统的通知，假设一个场景：我们的支付系统收到来自第三方支付的通知，告知某个订单支付成功，接收通知接口需要同步调用订单服务变更订单状态接口，更新订单状态为成功。流程图如下，从图中可以看出有两次调用，第三方支付调用支付服务，以及支付服务调用订单服务，这两步调用都可能出现调用超时的情况，此处如果没有分布式事务的保证，就会出现用户订单实际支付情况与最终用户看到的订单支付情况不一致的情况。<br>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/notify-message.png\"\n                      alt=\"img\"\n                ></p>\n<h2 id=\"分布式事务的解决方案\"><a class=\"markdownIt-Anchor\" href=\"#分布式事务的解决方案\">#</a> 分布式事务的解决方案</h2>\n<h3 id=\"两阶段提交xa\"><a class=\"markdownIt-Anchor\" href=\"#两阶段提交xa\">#</a> 两阶段提交 / XA</h3>\n<p>两阶段提交，顾名思义就是要分两步提交。存在一个负责协调各个本地资源管理器的事务管理器，本地资源管理器一般是由数据库实现，事务管理器在第一阶段的时候询问各个资源管理器是否都就绪？如果收到每个资源的回复都是 yes，则在第二阶段提交事务，如果其中任意一个资源的回复是 no, 则回滚事务。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/XA-first.jpg\"\n                      alt=\"img\"\n                ><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/XA-second.jpg\"\n                      alt=\"img\"\n                ></p>\n<p>大致的流程：</p>\n<p>第一阶段（prepare）：事务管理器向所有本地资源管理器发起请求，询问是否是 ready 状态，所有参与者都将本事务能否成功的信息反馈发给协调者；<br>\n第二阶段 (commit/rollback)：事务管理器根据所有本地资源管理器的反馈，通知所有本地资源管理器，步调一致地在所有分支上提交或者回滚。</p>\n<p>存在的问题：</p>\n<blockquote>\n<p>同步阻塞：当参与事务者存在占用公共资源的情况，其中一个占用了资源，其他事务参与者就只能阻塞等待资源释放，处于阻塞状态。</p>\n</blockquote>\n<blockquote>\n<p>单点故障：一旦事务管理器出现故障，整个系统不可用</p>\n</blockquote>\n<blockquote>\n<p>数据不一致：在阶段二，如果事务管理器只发送了部分 commit 消息，此时网络发生异常，那么只有部分参与者接收到 commit 消息，也就是说只有部分参与者提交了事务，使得系统数据不一致。</p>\n</blockquote>\n<blockquote>\n<p>不确定性：当协事务管理器发送 commit 之后，并且此时只有一个参与者收到了 commit，那么当该参与者与事务管理器同时宕机之后，重新选举的事务管理器无法确定该条消息是否提交成功。</p>\n</blockquote>\n<h3 id=\"tcc\"><a class=\"markdownIt-Anchor\" href=\"#tcc\">#</a> TCC</h3>\n<p>关于 TCC（Try-Confirm-Cancel）的概念，最早是由 Pat Helland 于 2007 年发表的一篇名为《Life beyond Distributed Transactions:an Apostate’s Opinion》的论文提出。 TCC 事务机制相比于上面介绍的 XA，解决了其几个缺点：</p>\n<ol>\n<li>解决了协调者单点，由主业务方发起并完成这个业务活动。业务活动管理器也变成多点，引入集群。</li>\n<li>同步阻塞：引入超时，超时后进行补偿，并且不会锁定整个资源，将资源转换为业务逻辑形式，粒度变小。</li>\n<li>数据一致性，有了补偿机制之后，由业务活动管理器控制一致性</li>\n</ol>\n<p>TCC(Try Confirm Cancel)<br>\n Try 阶段：尝试执行，完成所有业务检查（一致性）, 预留必须业务资源（准隔离性）<br>\nConfirm 阶段：确认执行真正执行业务，不作任何业务检查，只使用 Try 阶段预留的业务资源，Confirm 操作满足幂等性。要求具备幂等设计，Confirm 失败后需要进行重试。<br>\nCancel 阶段：取消执行，释放 Try 阶段预留的业务资源 Cancel 操作满足幂等性 Cancel 阶段的异常和 Confirm 阶段异常处理方案基本上一致。</p>\n<p>在 Try 阶段，是对业务系统进行检查及资源预览，比如订单和存储操作，需要检查库存剩余数量是否够用，并进行预留，预留操作的话就是新建一个可用库存数量字段，Try 阶段操作是对这个可用库存数量进行操作。<br>\n基于 TCC 实现分布式事务，会将原来只需要一个接口就可以实现的逻辑拆分为 Try、Confirm、Cancel 三个接口，所以代码实现复杂度相对较高。</p>\n<h3 id=\"本地消息表\"><a class=\"markdownIt-Anchor\" href=\"#本地消息表\">#</a> 本地消息表</h3>\n<p>本地消息表这个方案最初是 ebay 架构师 Dan Pritchett 在 2008 年发表给 ACM 的文章。该方案中会有消息生产者与消费者两个角色，假设系统 A 是消息生产者，系统 B 是消息消费者，其大致流程如下：<br>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/native-message.jpg\"\n                      alt=\"img\"\n                ></p>\n<ol>\n<li>当系统 A 被其他系统调用发生数据库表更操作，首先会更新数据库的业务表，其次会往相同数据库的消息表中插入一条数据，两个操作发生在同一个事务中</li>\n<li>系统 A 的脚本定期轮询本地消息往 mq 中写入一条消息，如果消息发送失败会进行重试</li>\n<li>系统 B 消费 mq 中的消息，并处理业务逻辑。如果本地事务处理失败，会在继续消费 mq 中的消息进行重试，如果业务上的失败，可以通知系统 A 进行回滚操作</li>\n</ol>\n<p>本地消息表实现的条件：</p>\n<ol>\n<li>消费者与生成者的接口都要支持幂等</li>\n<li>生产者需要额外的创建消息表</li>\n<li>需要提供补偿逻辑，如果消费者业务失败，需要生产者支持回滚操作</li>\n</ol>\n<p>容错机制：</p>\n<ol>\n<li>步骤 1 失败时，事务直接回滚</li>\n<li>步骤 2、3 写 mq 与消费 mq 失败会进行重试</li>\n<li>步骤 3 业务失败系统 B 向系统 A 发起事务回滚操作</li>\n</ol>\n<p>此方案的核心是将需要分布式处理的任务通过消息日志的方式来异步执行。消息日志可以存储到本地文本、数据库或消息队列，再通过业务规则自动或人工发起重试。人工重试更多的是应用于支付场景，通过对账系统对事后问题的处理。</p>\n<h3 id=\"可靠消息最终一致性\"><a class=\"markdownIt-Anchor\" href=\"#可靠消息最终一致性\">#</a> 可靠消息最终一致性</h3>\n<p>大致流程如下：<br>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/mq-message.jpg\"\n                      alt=\"img\"\n                ></p>\n<ol>\n<li>A 系统先向 mq 发送一条 prepare 消息，如果 prepare 消息发送失败，则直接取消操作</li>\n<li>如果消息发送成功，则执行本地事务</li>\n<li>如果本地事务执行成功，则想 mq 发送一条 confirm 消息，如果发送失败，则发送回滚消息</li>\n<li>B 系统定期消费 mq 中的 confirm 消息，执行本地事务，并发送 ack 消息。如果 B 系统中的本地事务失败，会一直不断重试，如果是业务失败，会向 A 系统发起回滚请求</li>\n</ol>\n<p><a class=\"link\"   href=\"http://5.mq\" >5.mq <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a> 会定期轮询所有 prepared 消息调用系统 A 提供的接口查询消息的处理情况，如果该 prepare 消息本地事务处理成功，则重新发送 confirm 消息，否则直接回滚该消息</p>\n<p>该方案与本地消息最大的不同是去掉了本地消息表，其次本地消息表依赖消息表重试写入 mq 这一步由本方案中的轮询 prepare 消息状态来重试或者回滚该消息替代。其实现条件与余容错方案基本一致。目前市面上实现该方案的只有阿里的 RocketMq。</p>\n<h3 id=\"尽最大努力通知\"><a class=\"markdownIt-Anchor\" href=\"#尽最大努力通知\">#</a> 尽最大努力通知</h3>\n<p>最大努力通知是最简单的一种柔性事务，适用于一些最终一致性时间敏感度低的业务，且被动方处理结果 不影响主动方的处理结果。</p>\n<p>这个方案的大致意思就是：</p>\n<ol>\n<li>系统 A 本地事务执行完之后，发送个消息到 MQ；</li>\n<li>这里会有个专门消费 MQ 的服务，这个服务会消费 MQ 并调用系统 B 的接口；</li>\n<li>要是系统 B 执行成功就 ok 了；要是系统 B 执行失败了，那么最大努力通知服务就定时尝试重新调用系统 B, 反复 N 次，最后还是不行就放弃。</li>\n</ol>\n<h2 id=\"分布式事务实战\"><a class=\"markdownIt-Anchor\" href=\"#分布式事务实战\">#</a> 分布式事务实战</h2>\n<h3 id=\"两阶段提交xa-2\"><a class=\"markdownIt-Anchor\" href=\"#两阶段提交xa-2\">#</a> 两阶段提交 / XA</h3>\n<p>目前支付宝使用两阶段提交思想实现了分布式事务服务 (Distributed Transaction Service, DTS) ，它是一个分布式事务框架，用来保障在大规模分布式环境下事务的最终一致性。具体可参考支付宝官方文档：<a class=\"link\"   href=\"https://tech.antfin.com/docs/2/46887\" >https://tech.antfin.com/docs/2/46887 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<h3 id=\"tcc-2\"><a class=\"markdownIt-Anchor\" href=\"#tcc-2\">#</a> TCC</h3>\n<p>TCC 需要事务接口提供 try, confirm, cancel 三个接口，提高了编程的复杂性。依赖于业务方来配合提供这样的接口，推行难度大，所以一般不推荐使用这种方式。</p>\n<h3 id=\"可靠消息最终一致性-2\"><a class=\"markdownIt-Anchor\" href=\"#可靠消息最终一致性-2\">#</a> 可靠消息最终一致性</h3>\n<p>目前市面上支持该方案的 mq 只有阿里的 rocketmq, 该方案应用场景也比较多，比如用户注册成功后发送邮件、电商系统给用户发送优惠券等需要保证最终一致性的场景</p>\n<h3 id=\"本地消息表-2\"><a class=\"markdownIt-Anchor\" href=\"#本地消息表-2\">#</a> 本地消息表</h3>\n<p>跨行转账可通过该方案实现。<br>\n用户 A 向用户 B 发起转账，首先系统会扣掉用户 A 账户中的金额，将该转账消息写入消息表中，如果事务执行失败则转账失败，如果转账成功，系统中会有定时轮询消息表，往 mq 中写入转账消息，失败重试。mq 消息会被实时消费并往用户 B 中账户增加转账金额，执行失败会不断重试。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/bank-transfer.jpg\"\n                      alt=\"img\"\n                ></p>\n<p>小米海外商城用户订单数据状态变更，会将变更状态记录消息表中，脚本将订单状态消息写入 mq，最终消费 mq 给用户发送邮件、短信、push 等。</p>\n<h3 id=\"最大努力通知\"><a class=\"markdownIt-Anchor\" href=\"#最大努力通知\">#</a> 最大努力通知</h3>\n<p>最大努力通知最常见的场景就是支付回调，支付服务收到第三方服务支付成功通知后，先更新自己库中订单支付状态，然后同步通知订单服务支付成功。如果此次同步通知失败，会通过异步脚步不断重试地调用订单服务的接口。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/try-best-notify.jpg\"\n                      alt=\"img\"\n                ></p>\n<p>小米海外商城目前除了支付回调外，最常用的场景是订单数据同步。例如系统 A、B 进行数据同步，当系统 A 发生订单数据变更，先将数据变更消息写入小米 notify 系统（作用等同 mq），然后 notify 系统异步处理该消息来调用系统 B 提供的接口并进行重试到最大次数。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/notify-callback.jpg\"\n                      alt=\"img\"\n                ></p>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>本文介绍了分布式事务的一些基础理论，并对常用的分布式事务方案进行了讲解，在文章的后半部分主要给出了各种方案的常用场景。分布式事务本身就是一个技术难题，业务中具体使用哪种方案还是需要根据自身业务特点自行选择，每种方案在实际执行过程中需要考虑的点都非常多，复杂度较大，所以在非必要的情况下，分布式事务能不用就尽量不用。</p>\n",
            "tags": [
                "分布式事务"
            ]
        },
        {
            "id": "https://wait-you.github.io/2023/06/06/Vue3%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E5%88%9D%E5%A7%8B%E5%8C%96%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B/",
            "url": "https://wait-you.github.io/2023/06/06/Vue3%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E5%88%9D%E5%A7%8B%E5%8C%96%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B/",
            "title": "Vue3项目开发初始化配置流程",
            "date_published": "2023-06-06T01:07:51.000Z",
            "content_html": "<h1 id=\"vue3项目开发初始化配置流程\"><a class=\"markdownIt-Anchor\" href=\"#vue3项目开发初始化配置流程\">#</a> Vue3 项目开发初始化配置流程</h1>\n<ul>\n<li>具体选型看情况，这个为通用流程</li>\n</ul>\n<h2 id=\"命令行创建\"><a class=\"markdownIt-Anchor\" href=\"#命令行创建\">#</a> 命令行创建</h2>\n<h3 id=\"vite创建\"><a class=\"markdownIt-Anchor\" href=\"#vite创建\">#</a> vite 创建</h3>\n<ul>\n<li>\n<p>npm 创建</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npm create @vitejs<span class=\"token operator\">/</span>app test_demo</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"vue-cli创建\"><a class=\"markdownIt-Anchor\" href=\"#vue-cli创建\">#</a> vue-cli 创建</h3>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vue create test_demo</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">1</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">-</span> 配置</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token operator\">-</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">js</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    // vite.config.js</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    import &#123; UserConfigExport &#125; from 'vite'</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    import styleImport, &#123;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      AndDesignVueResolve,</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      VantResolve,</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      ElementPlusResolve,</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      NutuiResolve,</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      AntdResolve,</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    &#125; from 'vite-plugin-style-import'</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    export default (): UserConfigExport => &#123;</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      return &#123;</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        // 1. 如果使用的是ant-design 系列的 需要配置这个</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        // 2. 确保less安装在依赖 </span><span class=\"token template-punctuation string\">`</span></span>yarn add less <span class=\"token operator\">-</span><span class=\"token constant\">D</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        css: &#123;</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>          preprocessorOptions: &#123;</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            less: &#123;</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>              javascriptEnabled: true,</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            &#125;,</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>          &#125;,</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        &#125;,</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        plugins: [</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>          styleImport(&#123;</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            resolves:[</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>              AndDesignVueResolve(),</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>              VantResolve(),</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>              ElementPlusResolve(),</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>              NutuiResolve(),</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>              AntdResolve(),]</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            libs: [</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>              // 如果没有你需要的resolve，可以在lib内直接写，也可以给我们提供PR</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>              &#123;</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                libraryName: 'ant-design-vue',</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                esModule: true,</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                resolveStyle: (name) => &#123;</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                  return </span><span class=\"token template-punctuation string\">`</span></span>ant<span class=\"token operator\">-</span>design<span class=\"token operator\">-</span>vue<span class=\"token operator\">/</span>es<span class=\"token operator\">/</span>$<span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">/</span>style<span class=\"token operator\">/</span>index`</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>              <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">2</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n<li>\n<p>在使用 vue-cli 创建时选择了 babel 可以使用 <code>babel-plugin-import</code></p>\n<ul>\n<li>网址\n<ul>\n<li><a class=\"link\"   href=\"https://github.com/umijs/babel-plugin-import\" >https://github.com/umijs/babel-plugin-import <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"导入fastcick可选如果是移动端则需要\"><a class=\"markdownIt-Anchor\" href=\"#导入fastcick可选如果是移动端则需要\">#</a> 导入 <code>fastcick</code>  (可选，如果是移动端，则需要)</h3>\n<ul>\n<li>\n<p>用于消除物理点击和 <code>click</code>  移动浏览器上事件触发之间的 300 毫秒延迟。目的是让您的应用程序感觉更少延迟和更灵敏，同时避免对您当前的逻辑产生任何干扰。</p>\n</li>\n<li>\n<p>网址</p>\n<ul>\n<li><a class=\"link\"   href=\"https://github.com/ftlabs/fastclick\" >https://github.com/ftlabs/fastclick <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n</ul>\n</li>\n<li>\n<p>在 <code>main.js</code>  中配置</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 引入 fastClick</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> FastClick <span class=\"token keyword\">from</span> <span class=\"token string\">'fastclick'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'addEventListener'</span> <span class=\"token keyword\">in</span> document<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DOMContentLoaded'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        FastClick<span class=\"token punctuation\">.</span><span class=\"token function\">attach</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">3</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n<li>\n<p><code>yarn</code></p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yarn add vant@next</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">4</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n<li>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 在.babelrc 中添加配置</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 注意：webpack 1 无需设置 libraryDirectory</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token string-property property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token string\">\"import\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token string-property property\">\"libraryName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vant\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token string-property property\">\"libraryDirectory\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"es\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token string-property property\">\"style\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 对于使用 babel7 的用户，可以在 babel.config.js 中配置</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token string\">'import'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token literal-property property\">libraryName</span><span class=\"token operator\">:</span> <span class=\"token string\">'vant'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token literal-property property\">libraryDirectory</span><span class=\"token operator\">:</span> <span class=\"token string\">'es'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token literal-property property\">style</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'vant'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">5</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>方式二  手动按需引入组件</p>\n<ul>\n<li>\n<p>在不使用插件的情况下，可以手动引入需要的组件。</p>\n</li>\n<li>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createApp <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App.vue'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> Button <span class=\"token keyword\">from</span> <span class=\"token string\">'vant/lib/button'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">'vant/lib/button/style'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>Button<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">6</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>注意</strong>：</p>\n<ul>\n<li>\n<p>当想要全局导入时，可以选择配置插件的方式</p>\n</li>\n<li>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 此文件是 @/plugins/Vant.js</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> Tabbar<span class=\"token punctuation\">,</span> TabbarItem<span class=\"token punctuation\">,</span> Swipe<span class=\"token punctuation\">,</span> SwipeItem<span class=\"token punctuation\">,</span> Loading <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vant'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">export</span>  <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function-variable function\">install</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">app<span class=\"token punctuation\">,</span> options</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        app</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>Tabbar<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>TabbarItem<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>Swipe<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>SwipeItem<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>Loading<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">7</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"导入ant-design-vue可选ui框架\"><a class=\"markdownIt-Anchor\" href=\"#导入ant-design-vue可选ui框架\">#</a> 导入 <code>Ant-Design-Vue</code> （可选，UI 框架）</h3>\n<ul>\n<li>\n<p>网址</p>\n<ul>\n<li><a class=\"link\"   href=\"https://antdv.com/docs/vue/introduce-cn/\" >https://antdv.com/docs/vue/introduce-cn/ <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n</ul>\n</li>\n<li>\n<p>命令行代码</p>\n<ul>\n<li>\n<p><code>npm</code></p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npm i <span class=\"token operator\">--</span>save ant<span class=\"token operator\">-</span>design<span class=\"token operator\">-</span>vue@next</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">8</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>引入组件</p>\n<ul>\n<li>\n<p>完整引入</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createApp <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App.vue'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> Button <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"ant-design-vue\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">'ant-design-vue/dist/antd.css'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>Button<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">9</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n<li>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 在.babelrc 中添加配置</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 注意：webpack 1 无需设置 libraryDirectory</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token string-property property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token string\">\"import\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token string-property property\">\"libraryName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ant-design-vue\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token string-property property\">\"libraryDirectory\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"es\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token string-property property\">\"style\"</span><span class=\"token operator\">:</span> <span class=\"token string\">'css'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 对于使用 babel7 的用户，可以在 babel.config.js 中配置</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token string\">'import'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token literal-property property\">libraryName</span><span class=\"token operator\">:</span> <span class=\"token string\">'ant-design-vue'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token literal-property property\">libraryDirectory</span><span class=\"token operator\">:</span> <span class=\"token string\">'es'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token literal-property property\">style</span><span class=\"token operator\">:</span> <span class=\"token string\">'css'</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ant-design-vue'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">10</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"导入element-plus可选ui框架还没有正式版\"><a class=\"markdownIt-Anchor\" href=\"#导入element-plus可选ui框架还没有正式版\">#</a> 导入 <code>Element-plus</code> （可选，UI 框架，还没有正式版）</h3>\n<ul>\n<li>\n<p>网址</p>\n<ul>\n<li><a class=\"link\"   href=\"https://element-plus.gitee.io/zh-CN/\" >https://element-plus.gitee.io/zh-CN/ <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n</ul>\n</li>\n<li>\n<p>命令行代码</p>\n<ul>\n<li>\n<p><code>npm</code></p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npm install element<span class=\"token operator\">-</span>plus <span class=\"token operator\">--</span>save</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">11</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>引入组件</p>\n<ul>\n<li>\n<p>完整引入</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// main.js</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createApp <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> ElementPlus <span class=\"token keyword\">from</span> <span class=\"token string\">'element-plus'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">'element-plus/dist/index.css'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App.vue'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>ElementPlus<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">12</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">-</span> 配置</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token operator\">-</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>Vite<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token operator\">-</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>`js</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token comment\">// vite.config.ts</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token keyword\">import</span> AutoImport <span class=\"token keyword\">from</span> <span class=\"token string\">'unplugin-auto-import/vite'</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token keyword\">import</span> Components <span class=\"token keyword\">from</span> <span class=\"token string\">'unplugin-vue-components/vite'</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> ElementPlusResolver <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'unplugin-vue-components/resolvers'</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>          <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>          <span class=\"token function\">AutoImport</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token literal-property property\">resolvers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">ElementPlusResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>          <span class=\"token function\">Components</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token literal-property property\">resolvers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">ElementPlusResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">13</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n<li>\n<p>手动导入</p>\n<ul>\n<li>\n<p>可以按照官网去配置</p>\n</li>\n<li>\n<p>也可以使用 vue-cli 的插件</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vue create my<span class=\"token operator\">-</span>app</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cd my<span class=\"token operator\">-</span>app</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>vue add element<span class=\"token operator\">-</span>plus</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">14</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"导入arco-design可选ui框架\"><a class=\"markdownIt-Anchor\" href=\"#导入arco-design可选ui框架\">#</a> 导入 <code>arco-design</code> （可选，UI 框架）</h3>\n<ul>\n<li>\n<p>网址</p>\n<ul>\n<li><a class=\"link\"   href=\"https://arco.design/vue/docs/start\" >https://arco.design/vue/docs/start <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n</ul>\n</li>\n<li>\n<p>命令行代码</p>\n<ul>\n<li>\n<p><code>npm</code></p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npm install <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev @arco<span class=\"token operator\">-</span>design<span class=\"token operator\">/</span>web<span class=\"token operator\">-</span>vue</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">15</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>引入组件</p>\n<ul>\n<li>\n<p>完整引入</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createApp <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> ArcoVue <span class=\"token keyword\">from</span> <span class=\"token string\">'@arco-design/web-vue'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App.vue'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">'@arco-design/web-vue/dist/arco.css'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>ArcoVue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">16</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n<li>\n<p>注意：这种方法并不会处理用户在 script 中手动导入的组件，比如 Message 组件，用户仍需要手动导入组件对应的样式文件，例如  <code>@arco-design/web-vue/es/index.less</code></p>\n</li>\n</ul>\n</li>\n<li>\n<p>按需加载（需要为 vite 创建的项目）</p>\n<ul>\n<li>\n<p>也可以使用手动导入的方式按需加载组件，组件库已经默认支持 Tree Shaking。可以配合 <a class=\"link\"   href=\"https://github.com/vbenjs/vite-plugin-style-import\" >vite-plugin-style-import <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a> 插件自动加载组件样式</p>\n</li>\n<li>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineConfig <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vite'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> vue <span class=\"token keyword\">from</span> <span class=\"token string\">'@vitejs/plugin-vue'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> styleImport <span class=\"token keyword\">from</span> <span class=\"token string\">'vite-plugin-style-import'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">styleImport</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token literal-property property\">libs</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          <span class=\"token literal-property property\">libraryName</span><span class=\"token operator\">:</span> <span class=\"token string\">'@arco-design/web-vue'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>          <span class=\"token literal-property property\">esModule</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>          <span class=\"token function-variable function\">resolveStyle</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token comment\">// css</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">@arco-design/web-vue/es/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>name<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">/style/css.js</span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token comment\">// less</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">@arco-design/web-vue/es/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>name<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">/style/index.js</span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">17</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>引入组件</p>\n<ul>\n<li>\n<p>完整引入</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createApp <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">\"./App.vue\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 注意：这种方式将会导入所有组件</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> NutUI <span class=\"token keyword\">from</span> <span class=\"token string\">\"@nutui/nutui\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">\"@nutui/nutui/dist/style.css\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>NutUI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#app\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">18</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">-</span> 在 <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">vite.config</span><span class=\"token template-punctuation string\">`</span></span> 中添加配置：</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token operator\">-</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">js</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    import vue from '@vitejs/plugin-vue'</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    import styleImport from 'vite-plugin-style-import';</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    export default &#123;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      plugins: [</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        vue(),</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        styleImport(&#123;</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>          libs: [</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            &#123;</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>              libraryName: '@nutui/nutui',</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>              libraryNameChangeCase: 'pascalCase',</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>              resolveStyle: (name) => &#123;</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                return </span><span class=\"token template-punctuation string\">`</span></span>@nutui<span class=\"token operator\">/</span>nutui<span class=\"token operator\">/</span>dist<span class=\"token operator\">/</span>packages<span class=\"token operator\">/</span>$<span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">/</span>index<span class=\"token punctuation\">.</span>scss<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>              &#125;</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            &#125;</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>          ],</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        &#125;),</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      ],</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      css: &#123;</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        preprocessorOptions: &#123;</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>          scss: &#123;</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            // 配置 nutui 全局 scss 变量</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            additionalData: </span><span class=\"token template-punctuation string\">`</span></span>@<span class=\"token keyword\">import</span> <span class=\"token string\">\"@nutui/nutui/dist/styles/variables.scss\"</span><span class=\"token punctuation\">;</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>          &#125;</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      &#125;</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    &#125;;</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- WebPack 构建工具 通过 babel 使用按需加载</span><br><span class=\"line\"></span><br><span class=\"line\">  - 安装插件</span><br><span class=\"line\"></span><br><span class=\"line\">    - ```js</span><br><span class=\"line\">      //npm</span><br><span class=\"line\">      npm install babel-plugin-import --save-dev</span><br><span class=\"line\">      </span><br><span class=\"line\">      //yarn</span><br><span class=\"line\">      yarn add --dev babel-plugin-import</span><br></pre></td></tr></table></figure></div></div></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>- 在 </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">.</span>babelrc<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"> 或 </span><span class=\"token template-punctuation string\">`</span></span>babel<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>js<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"> 中添加配置：</pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  - </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>js</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>      <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>          <span class=\"token string\">\"import\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>          <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token string-property property\">\"libraryName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"@nutui/nutui\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token string-property property\">\"libraryDirectory\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"dist/packages/_es\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token string-property property\">\"camel2DashComponentName\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>          <span class=\"token string\">'nutui3-vue'</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>          <span class=\"token string\">\"import\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>          <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token string-property property\">\"libraryName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"@nutui/nutui-taro\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token string-property property\">\"libraryDirectory\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"dist/packages/_es\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token string-property property\">\"camel2DashComponentName\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>          <span class=\"token string\">'nutui3-taro'</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>      <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">20</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"导入vue-router可选路由管理如果在使用vue-cli创建时已经引入则不再需要\"><a class=\"markdownIt-Anchor\" href=\"#导入vue-router可选路由管理如果在使用vue-cli创建时已经引入则不再需要\">#</a> 导入 <code>vue-router</code> （可选，路由管理，如果在使用 <code>vue-cli</code>  创建时已经引入则不再需要</h3>\n<ul>\n<li>\n<p>网址</p>\n<ul>\n<li><a class=\"link\"   href=\"https://next.router.vuejs.org/zh/guide/\" >https://next.router.vuejs.org/zh/guide/ <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n</ul>\n</li>\n<li>\n<p>命令行代码</p>\n<ul>\n<li>\n<p><code>npm</code></p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npm install vue<span class=\"token operator\">-</span>router@<span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">21</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>配置</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 此文件是 @/router/index.js</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 历史记录模式，除了 hash 外，还有 html5 的 history</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createRouter<span class=\"token punctuation\">,</span> createWebHashHistory <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-router'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> DashBoard <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/views/dashboard/DashBoard.vue\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 懒加载</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Home</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@/views/home/Home.vue'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Category</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@/views/category/Category.vue'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">const</span> routes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// 重定向</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token literal-property property\">path</span> <span class=\"token operator\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token literal-property property\">redirect</span> <span class=\"token operator\">:</span> <span class=\"token string\">'/dashboard'</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">'/dashboard'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token literal-property property\">component</span> <span class=\"token operator\">:</span> DashBoard<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 嵌套路由</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token literal-property property\">children</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">'/dashboard'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token literal-property property\">redirect</span> <span class=\"token operator\">:</span> <span class=\"token string\">'/dashboard/home'</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token literal-property property\">path</span> <span class=\"token operator\">:</span> <span class=\"token string\">'home'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token literal-property property\">component</span> <span class=\"token operator\">:</span> Home<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">// 元信息</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token literal-property property\">meta</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token literal-property property\">name</span> <span class=\"token operator\">:</span> <span class=\"token string\">'首页'</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token literal-property property\">path</span> <span class=\"token operator\">:</span> <span class=\"token string\">'category'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token literal-property property\">component</span> <span class=\"token operator\">:</span> Category</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">createRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token literal-property property\">history</span><span class=\"token operator\">:</span> <span class=\"token function\">createWebHashHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  routes</pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> router</pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">22</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"导入vuex可选统一状态管理中大型项目推荐如果在使用vue-cli创建时已经引入则不再需要\"><a class=\"markdownIt-Anchor\" href=\"#导入vuex可选统一状态管理中大型项目推荐如果在使用vue-cli创建时已经引入则不再需要\">#</a> 导入 <code>Vuex</code>  (可选，统一状态管理，中大型项目推荐，如果在使用 vue-cli 创建时已经引入则不再需要)</h3>\n<ul>\n<li>\n<p>网址</p>\n<ul>\n<li><a class=\"link\"   href=\"https://next.vuex.vuejs.org/zh/index.html\" >https://next.vuex.vuejs.org/zh/index.html <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n</ul>\n</li>\n<li>\n<p>命令行代码</p>\n<ul>\n<li>\n<p><code>npm</code></p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npm install vuex@next <span class=\"token operator\">--</span>save</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">23</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>配置</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 此文件是 @/store/index.js</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createStore <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token literal-property property\">state</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token literal-property property\">count</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token literal-property property\">mutations</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token constant\">INCREMENT</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          state<span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token literal-property property\">actions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token constant\">ASYNC_INCREMENT</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          context<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'INCREMENT'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token literal-property property\">getters</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token function-variable function\">countCal</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>          <span class=\"token keyword\">return</span> count <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">24</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"导入axios可选处理网络请求如果项目需要网络请求可以导入\"><a class=\"markdownIt-Anchor\" href=\"#导入axios可选处理网络请求如果项目需要网络请求可以导入\">#</a> 导入 <code>axios</code>  (可选，处理网络请求，如果项目需要网络请求可以导入)</h3>\n<ul>\n<li>\n<p>网址</p>\n<ul>\n<li><a class=\"link\"   href=\"http://www.axios-js.com/zh-cn/docs/\" >http://www.axios-js.com/zh-cn/docs/ <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n</ul>\n</li>\n<li>\n<p>命令行代码</p>\n<ul>\n<li>\n<p><code>npm</code></p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npm install axios</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">25</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>配置</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 此文件是 @/service/api/ajax.js</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">\"axios\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span>url <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> params <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> type <span class=\"token operator\">=</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">//1. 变量</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">let</span> promise</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">//2. 返回 promise</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">//2.1 判断请求类型</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">//GET 请求</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token comment\">//2.2 拼接字符串</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">let</span> paramsStr <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token comment\">//2.3 遍历</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=></span> paramsStr<span class=\"token operator\">+=</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>key<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>params<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&amp;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token comment\">//2.4 过滤最后的 & amp;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>paramsStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                paramsStr <span class=\"token operator\">=</span> paramsStr<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> paramsStr<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&amp;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token comment\">//2.5 拼接完整路径</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            url <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">?</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>paramsStr<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">//2.6 发起 get 请求</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            promise <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//POST 请求</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token comment\">//2.7 发起 post 请求</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            promise <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">//... 其他请求可补充，不过形式其实和 POST 基本一致</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">//2.8 处理结果并返回</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        promise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">26</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"导入rem配置可选适配移动端如果使用rem做移动尺寸的适配可以使用\"><a class=\"markdownIt-Anchor\" href=\"#导入rem配置可选适配移动端如果使用rem做移动尺寸的适配可以使用\">#</a> 导入 <code>rem</code>  配置（可选，适配移动端，如果使用 rem 做移动尺寸的适配可以使用）</h3>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">doc<span class=\"token punctuation\">,</span> win</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">var</span> docEl <span class=\"token operator\">=</span> doc<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        resizeEvt <span class=\"token operator\">=</span> <span class=\"token string\">'orientationchange'</span> <span class=\"token keyword\">in</span> window <span class=\"token operator\">?</span> <span class=\"token string\">'orientationchange'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'resize'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function-variable function\">recalc</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">var</span> clientWidth <span class=\"token operator\">=</span> docEl<span class=\"token punctuation\">.</span>clientWidth<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>clientWidth<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            docEl<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>fontSize <span class=\"token operator\">=</span> <span class=\"token number\">15</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>clientWidth <span class=\"token operator\">/</span> <span class=\"token number\">320</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'px'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>doc<span class=\"token punctuation\">.</span>addEventListener<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    win<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>resizeEvt<span class=\"token punctuation\">,</span> recalc<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    doc<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DOMContentLoaded'</span><span class=\"token punctuation\">,</span> recalc<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">,</span> window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">27</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n",
            "tags": [
                "Vue"
            ]
        },
        {
            "id": "https://wait-you.github.io/2023/06/06/SpringSecurity/",
            "url": "https://wait-you.github.io/2023/06/06/SpringSecurity/",
            "title": "SpringSecurity",
            "date_published": "2023-06-06T01:07:01.000Z",
            "content_html": "<h1 id=\"springsecurity\"><a class=\"markdownIt-Anchor\" href=\"#springsecurity\">#</a> SpringSecurity</h1>\n<h2 id=\"0-简介\"><a class=\"markdownIt-Anchor\" href=\"#0-简介\">#</a> 0. 简介</h2>\n<p>​\t<strong>Spring Security</strong> 是 Spring 家族中的一个安全管理框架。相比与另外一个安全框架<strong> Shiro</strong>，它提供了更丰富的功能，社区资源也比 Shiro 丰富。</p>\n<p>​\t一般来说中大型的项目都是使用<strong> SpringSecurity</strong> 来做安全框架。小项目有 Shiro 的比较多，因为相比与 SpringSecurity，Shiro 的上手更加的简单。</p>\n<p>​\t 一般 Web 应用的需要进行<strong>认证</strong>和<strong>授权</strong>。</p>\n<p>​\t\t<strong>认证：验证当前访问系统的是不是本系统的用户，并且要确认具体是哪个用户</strong></p>\n<p>​\t\t<strong>授权：经过认证后判断当前用户是否有权限进行某个操作</strong></p>\n<p>​\t而认证和授权也是 SpringSecurity 作为安全框架的核心功能。</p>\n<h2 id=\"1-快速入门\"><a class=\"markdownIt-Anchor\" href=\"#1-快速入门\">#</a> 1. 快速入门</h2>\n<h3 id=\"11-准备工作\"><a class=\"markdownIt-Anchor\" href=\"#11-准备工作\">#</a> 1.1 准备工作</h3>\n<p>​\t我们先要搭建一个简单的 SpringBoot 工程</p>\n<p>① 设置父工程 添加依赖</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n<p>② 创建启动类</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SecurityApplication</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(SecurityApplication.class,args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<p>③ 创建 Controller</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">hello</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<h3 id=\"12-引入springsecurity\"><a class=\"markdownIt-Anchor\" href=\"#12-引入springsecurity\">#</a> 1.2 引入 SpringSecurity</h3>\n<p>​\t在 SpringBoot 项目中使用 SpringSecurity 我们只需要引入依赖即可实现入门案例。</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-security<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n<p>​\t引入依赖后我们在尝试去访问之前的接口就会自动跳转到一个 SpringSecurity 的默认登陆页面，默认用户名是 user, 密码会输出在控制台。</p>\n<p>​\t必须登陆之后才能对接口进行访问。</p>\n<h2 id=\"2-认证\"><a class=\"markdownIt-Anchor\" href=\"#2-认证\">#</a> 2. 认证</h2>\n<h3 id=\"21-登陆校验流程\"><a class=\"markdownIt-Anchor\" href=\"#21-登陆校验流程\">#</a> 2.1 登陆校验流程</h3>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220108103239203.png\"\n                      alt=\"image-20220108103239203\"\n                ></p>\n<h3 id=\"22-原理初探\"><a class=\"markdownIt-Anchor\" href=\"#22-原理初探\">#</a> 2.2 原理初探</h3>\n<p>​\t想要知道如何实现自己的登陆流程就必须要先知道入门案例中 SpringSecurity 的流程。</p>\n<h4 id=\"221-springsecurity完整流程\"><a class=\"markdownIt-Anchor\" href=\"#221-springsecurity完整流程\">#</a> 2.2.1 SpringSecurity 完整流程</h4>\n<p>​\tSpringSecurity 的原理其实就是一个过滤器链，内部包含了提供各种功能的过滤器。这里我们可以看看入门案例中的过滤器。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220108103252974.png\"\n                      alt=\"image-20220108103252974\"\n                ></p>\n<p>​\t图中只展示了核心过滤器，其它的非核心过滤器并没有在图中展示。</p>\n<p><strong>UsernamePasswordAuthenticationFilter</strong>: 负责处理我们在登陆页面填写了用户名密码后的登陆请求。入门案例的认证工作主要有它负责。</p>\n<p>**ExceptionTranslationFilter：** 处理过滤器链中抛出的任何 AccessDeniedException 和 AuthenticationException 。</p>\n<p>**FilterSecurityInterceptor：** 负责权限校验的过滤器。</p>\n<p>​</p>\n<p>​\t我们可以通过 Debug 查看当前系统中 SpringSecurity 过滤器链中有哪些过滤器及它们的顺序。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220108103306101.png\"\n                      alt=\"image-20220108103306101\"\n                ></p>\n<h4 id=\"222-认证流程详解\"><a class=\"markdownIt-Anchor\" href=\"#222-认证流程详解\">#</a> 2.2.2 认证流程详解</h4>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220108103317034.png\"\n                      alt=\"\t\"\n                ></p>\n<p>概念速查:</p>\n<p>Authentication 接口：它的实现类，表示当前访问系统的用户，封装了用户相关信息。</p>\n<p>AuthenticationManager 接口：定义了认证 Authentication 的方法</p>\n<p>UserDetailsService 接口：加载用户特定数据的核心接口。里面定义了一个根据用户名查询用户信息的方法。</p>\n<p>UserDetails 接口：提供核心用户信息。通过 UserDetailsService 根据用户名获取处理的用户信息要封装成 UserDetails 对象返回。然后将这些信息封装到 Authentication 对象中。</p>\n<h3 id=\"23-解决问题\"><a class=\"markdownIt-Anchor\" href=\"#23-解决问题\">#</a> 2.3 解决问题</h3>\n<h4 id=\"231-思路分析\"><a class=\"markdownIt-Anchor\" href=\"#231-思路分析\">#</a> 2.3.1 思路分析</h4>\n<p>登录</p>\n<p>​\t①自定义登录接口</p>\n<p>​\t\t\t\t调用 ProviderManager 的方法进行认证 如果认证通过生成 jwt</p>\n<p>​\t\t\t\t把用户信息存入 redis 中</p>\n<p>​\t②自定义 UserDetailsService</p>\n<p>​\t\t\t\t在这个实现类中去查询数据库</p>\n<p>校验：</p>\n<p>​\t①定义 Jwt 认证过滤器</p>\n<p>​\t\t\t\t获取 token</p>\n<p>​\t\t\t\t解析 token 获取其中的 userid</p>\n<p>​\t\t\t\t从 redis 中获取用户信息</p>\n<p>​\t\t\t\t存入 SecurityContextHolder</p>\n<h4 id=\"232-准备工作\"><a class=\"markdownIt-Anchor\" href=\"#232-准备工作\">#</a> 2.3.2 准备工作</h4>\n<p>①添加依赖</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--redis依赖--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--fastjson依赖--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>fastjson<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.33<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--jwt依赖--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.jsonwebtoken<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jjwt<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.9.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n<p>② 添加 Redis 相关配置</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.JSON;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.serializer.SerializerFeature;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.databind.JavaType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.databind.type.TypeFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.serializer.RedisSerializer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.serializer.SerializationException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.util.Assert;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.Charset;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Redis使用FastJson序列化</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> sg</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FastJsonRedisSerializer</span>&lt;T&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">RedisSerializer</span>&lt;T&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Charset</span> <span class=\"variable\">DEFAULT_CHARSET</span> <span class=\"operator\">=</span> Charset.forName(<span class=\"string\">&quot;UTF-8&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Class&lt;T&gt; clazz;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">FastJsonRedisSerializer</span><span class=\"params\">(Class&lt;T&gt; clazz)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.clazz = clazz;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">byte</span>[] serialize(T t) <span class=\"keyword\">throws</span> SerializationException</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JSON.toJSONString(t, SerializerFeature.WriteClassName).getBytes(DEFAULT_CHARSET);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> T <span class=\"title function_\">deserialize</span><span class=\"params\">(<span class=\"type\">byte</span>[] bytes)</span> <span class=\"keyword\">throws</span> SerializationException</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bytes == <span class=\"literal\">null</span> || bytes.length &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(bytes, DEFAULT_CHARSET);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> JSON.parseObject(str, clazz);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> JavaType <span class=\"title function_\">getJavaType</span><span class=\"params\">(Class&lt;?&gt; clazz)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> TypeFactory.defaultInstance().constructType(clazz);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(value = &#123; &quot;unchecked&quot;, &quot;rawtypes&quot; &#125;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RedisTemplate&lt;Object, Object&gt; <span class=\"title function_\">redisTemplate</span><span class=\"params\">(RedisConnectionFactory connectionFactory)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        RedisTemplate&lt;Object, Object&gt; template = <span class=\"keyword\">new</span> <span class=\"title class_\">RedisTemplate</span>&lt;&gt;();</span><br><span class=\"line\">        template.setConnectionFactory(connectionFactory);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">FastJsonRedisSerializer</span> <span class=\"variable\">serializer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FastJsonRedisSerializer</span>(Object.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 使用StringRedisSerializer来序列化和反序列化redis的key值</span></span><br><span class=\"line\">        template.setKeySerializer(<span class=\"keyword\">new</span> <span class=\"title class_\">StringRedisSerializer</span>());</span><br><span class=\"line\">        template.setValueSerializer(serializer);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Hash的key也采用StringRedisSerializer的序列化方式</span></span><br><span class=\"line\">        template.setHashKeySerializer(<span class=\"keyword\">new</span> <span class=\"title class_\">StringRedisSerializer</span>());</span><br><span class=\"line\">        template.setHashValueSerializer(serializer);</span><br><span class=\"line\"></span><br><span class=\"line\">        template.afterPropertiesSet();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> template;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>③ 响应类</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.annotation.JsonInclude;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> 三更  B站： https://space.bilibili.com/663528522</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@JsonInclude(JsonInclude.Include.NON_NULL)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ResponseResult</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 状态码</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer code;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 提示信息，如果有错误时，前端可以获取该字段进行提示</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String msg;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查询到的结果数据，</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> T data;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ResponseResult</span><span class=\"params\">(Integer code, String msg)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.code = code;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.msg = msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ResponseResult</span><span class=\"params\">(Integer code, T data)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.code = code;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.data = data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Integer <span class=\"title function_\">getCode</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> code;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setCode</span><span class=\"params\">(Integer code)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.code = code;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getMsg</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setMsg</span><span class=\"params\">(String msg)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.msg = msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> T <span class=\"title function_\">getData</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setData</span><span class=\"params\">(T data)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.data = data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ResponseResult</span><span class=\"params\">(Integer code, String msg, T data)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.code = code;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.msg = msg;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.data = data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>④工具类</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> io.jsonwebtoken.Claims;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.jsonwebtoken.JwtBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.jsonwebtoken.Jwts;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.jsonwebtoken.SignatureAlgorithm;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.crypto.SecretKey;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Base64;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.UUID;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * JWT工具类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JwtUtil</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//有效期为</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Long</span> <span class=\"variable\">JWT_TTL</span> <span class=\"operator\">=</span> <span class=\"number\">60</span> * <span class=\"number\">60</span> *<span class=\"number\">1000L</span>;<span class=\"comment\">// 60 * 60 *1000  一个小时</span></span><br><span class=\"line\">    <span class=\"comment\">//设置秘钥明文</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">JWT_KEY</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;sangeng&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">getUUID</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">token</span> <span class=\"operator\">=</span> UUID.randomUUID().toString().replaceAll(<span class=\"string\">&quot;-&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> token;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 生成jtw</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> subject token中要存放的数据（json格式）</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">createJWT</span><span class=\"params\">(String subject)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">JwtBuilder</span> <span class=\"variable\">builder</span> <span class=\"operator\">=</span> getJwtBuilder(subject, <span class=\"literal\">null</span>, getUUID());<span class=\"comment\">// 设置过期时间</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder.compact();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 生成jtw</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> subject token中要存放的数据（json格式）</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> ttlMillis token超时时间</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">createJWT</span><span class=\"params\">(String subject, Long ttlMillis)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">JwtBuilder</span> <span class=\"variable\">builder</span> <span class=\"operator\">=</span> getJwtBuilder(subject, ttlMillis, getUUID());<span class=\"comment\">// 设置过期时间</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder.compact();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> JwtBuilder <span class=\"title function_\">getJwtBuilder</span><span class=\"params\">(String subject, Long ttlMillis, String uuid)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">SignatureAlgorithm</span> <span class=\"variable\">signatureAlgorithm</span> <span class=\"operator\">=</span> SignatureAlgorithm.HS256;</span><br><span class=\"line\">        <span class=\"type\">SecretKey</span> <span class=\"variable\">secretKey</span> <span class=\"operator\">=</span> generalKey();</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">nowMillis</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">        <span class=\"type\">Date</span> <span class=\"variable\">now</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(nowMillis);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ttlMillis==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            ttlMillis=JwtUtil.JWT_TTL;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">expMillis</span> <span class=\"operator\">=</span> nowMillis + ttlMillis;</span><br><span class=\"line\">        <span class=\"type\">Date</span> <span class=\"variable\">expDate</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(expMillis);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Jwts.builder()</span><br><span class=\"line\">                .setId(uuid)              <span class=\"comment\">//唯一的ID</span></span><br><span class=\"line\">                .setSubject(subject)   <span class=\"comment\">// 主题  可以是JSON数据</span></span><br><span class=\"line\">                .setIssuer(<span class=\"string\">&quot;sg&quot;</span>)     <span class=\"comment\">// 签发者</span></span><br><span class=\"line\">                .setIssuedAt(now)      <span class=\"comment\">// 签发时间</span></span><br><span class=\"line\">                .signWith(signatureAlgorithm, secretKey) <span class=\"comment\">//使用HS256对称加密算法签名, 第二个参数为秘钥</span></span><br><span class=\"line\">                .setExpiration(expDate);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建token</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> subject</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> ttlMillis</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">createJWT</span><span class=\"params\">(String id, String subject, Long ttlMillis)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">JwtBuilder</span> <span class=\"variable\">builder</span> <span class=\"operator\">=</span> getJwtBuilder(subject, ttlMillis, id);<span class=\"comment\">// 设置过期时间</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder.compact();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">token</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiJjYWM2ZDVhZi1mNjVlLTQ0MDAtYjcxMi0zYWEwOGIyOTIwYjQiLCJzdWIiOiJzZyIsImlzcyI6InNnIiwiaWF0IjoxNjM4MTA2NzEyLCJleHAiOjE2MzgxMTAzMTJ9.JVsSbkP94wuczb4QryQbAke3ysBDIL5ou8fWsbt_ebg&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">Claims</span> <span class=\"variable\">claims</span> <span class=\"operator\">=</span> parseJWT(token);</span><br><span class=\"line\">        System.out.println(claims);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 生成加密后的秘钥 secretKey</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SecretKey <span class=\"title function_\">generalKey</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">byte</span>[] encodedKey = Base64.getDecoder().decode(JwtUtil.JWT_KEY);</span><br><span class=\"line\">        <span class=\"type\">SecretKey</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SecretKeySpec</span>(encodedKey, <span class=\"number\">0</span>, encodedKey.length, <span class=\"string\">&quot;AES&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 解析</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jwt</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Claims <span class=\"title function_\">parseJWT</span><span class=\"params\">(String jwt)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">SecretKey</span> <span class=\"variable\">secretKey</span> <span class=\"operator\">=</span> generalKey();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Jwts.parser()</span><br><span class=\"line\">                .setSigningKey(secretKey)</span><br><span class=\"line\">                .parseClaimsJws(jwt)</span><br><span class=\"line\">                .getBody();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SuppressWarnings(value = &#123; &quot;unchecked&quot;, &quot;rawtypes&quot; &#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisCache</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RedisTemplate redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 缓存基本的对象，Integer、String、实体类等</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 缓存的键值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value 缓存的值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"keyword\">void</span> <span class=\"title function_\">setCacheObject</span><span class=\"params\">(<span class=\"keyword\">final</span> String key, <span class=\"keyword\">final</span> T value)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        redisTemplate.opsForValue().set(key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 缓存基本的对象，Integer、String、实体类等</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 缓存的键值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value 缓存的值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> timeout 时间</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> timeUnit 时间颗粒度</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"keyword\">void</span> <span class=\"title function_\">setCacheObject</span><span class=\"params\">(<span class=\"keyword\">final</span> String key, <span class=\"keyword\">final</span> T value, <span class=\"keyword\">final</span> Integer timeout, <span class=\"keyword\">final</span> TimeUnit timeUnit)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        redisTemplate.opsForValue().set(key, value, timeout, timeUnit);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置有效时间</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key Redis键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> timeout 超时时间</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true=设置成功；false=设置失败</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">expire</span><span class=\"params\">(<span class=\"keyword\">final</span> String key, <span class=\"keyword\">final</span> <span class=\"type\">long</span> timeout)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> expire(key, timeout, TimeUnit.SECONDS);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置有效时间</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key Redis键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> timeout 超时时间</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> unit 时间单位</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true=设置成功；false=设置失败</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">expire</span><span class=\"params\">(<span class=\"keyword\">final</span> String key, <span class=\"keyword\">final</span> <span class=\"type\">long</span> timeout, <span class=\"keyword\">final</span> TimeUnit unit)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.expire(key, timeout, unit);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获得缓存的基本对象。</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 缓存键值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 缓存键值对应的数据</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; T <span class=\"title function_\">getCacheObject</span><span class=\"params\">(<span class=\"keyword\">final</span> String key)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ValueOperations&lt;String, T&gt; operation = redisTemplate.opsForValue();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> operation.get(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除单个对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">deleteObject</span><span class=\"params\">(<span class=\"keyword\">final</span> String key)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.delete(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除集合对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> collection 多个对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">long</span> <span class=\"title function_\">deleteObject</span><span class=\"params\">(<span class=\"keyword\">final</span> Collection collection)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.delete(collection);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 缓存List数据</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 缓存的键值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> dataList 待缓存的List数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 缓存的对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"type\">long</span> <span class=\"title function_\">setCacheList</span><span class=\"params\">(<span class=\"keyword\">final</span> String key, <span class=\"keyword\">final</span> List&lt;T&gt; dataList)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">Long</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> redisTemplate.opsForList().rightPushAll(key, dataList);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count == <span class=\"literal\">null</span> ? <span class=\"number\">0</span> : count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获得缓存的list对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 缓存的键值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 缓存键值对应的数据</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; List&lt;T&gt; <span class=\"title function_\">getCacheList</span><span class=\"params\">(<span class=\"keyword\">final</span> String key)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForList().range(key, <span class=\"number\">0</span>, -<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 缓存Set</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 缓存键值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> dataSet 缓存的数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 缓存数据的对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; BoundSetOperations&lt;String, T&gt; <span class=\"title function_\">setCacheSet</span><span class=\"params\">(<span class=\"keyword\">final</span> String key, <span class=\"keyword\">final</span> Set&lt;T&gt; dataSet)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        BoundSetOperations&lt;String, T&gt; setOperation = redisTemplate.boundSetOps(key);</span><br><span class=\"line\">        Iterator&lt;T&gt; it = dataSet.iterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (it.hasNext())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            setOperation.add(it.next());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> setOperation;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获得缓存的set</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; Set&lt;T&gt; <span class=\"title function_\">getCacheSet</span><span class=\"params\">(<span class=\"keyword\">final</span> String key)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForSet().members(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 缓存Map</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> dataMap</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"keyword\">void</span> <span class=\"title function_\">setCacheMap</span><span class=\"params\">(<span class=\"keyword\">final</span> String key, <span class=\"keyword\">final</span> Map&lt;String, T&gt; dataMap)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dataMap != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            redisTemplate.opsForHash().putAll(key, dataMap);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获得缓存的Map</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; Map&lt;String, T&gt; <span class=\"title function_\">getCacheMap</span><span class=\"params\">(<span class=\"keyword\">final</span> String key)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 往Hash中存入数据</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key Redis键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> hKey Hash键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value 值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"keyword\">void</span> <span class=\"title function_\">setCacheMapValue</span><span class=\"params\">(<span class=\"keyword\">final</span> String key, <span class=\"keyword\">final</span> String hKey, <span class=\"keyword\">final</span> T value)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        redisTemplate.opsForHash().put(key, hKey, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取Hash中的数据</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key Redis键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> hKey Hash键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> Hash中的对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; T <span class=\"title function_\">getCacheMapValue</span><span class=\"params\">(<span class=\"keyword\">final</span> String key, <span class=\"keyword\">final</span> String hKey)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        HashOperations&lt;String, String, T&gt; opsForHash = redisTemplate.opsForHash();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> opsForHash.get(key, hKey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除Hash中的数据</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> hkey</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">delCacheMapValue</span><span class=\"params\">(<span class=\"keyword\">final</span> String key, <span class=\"keyword\">final</span> String hkey)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">HashOperations</span> <span class=\"variable\">hashOperations</span> <span class=\"operator\">=</span> redisTemplate.opsForHash();</span><br><span class=\"line\">        hashOperations.delete(key, hkey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取多个Hash中的数据</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key Redis键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> hKeys Hash键集合</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> Hash对象集合</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; List&lt;T&gt; <span class=\"title function_\">getMultiCacheMapValue</span><span class=\"params\">(<span class=\"keyword\">final</span> String key, <span class=\"keyword\">final</span> Collection&lt;Object&gt; hKeys)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForHash().multiGet(key, hKeys);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获得缓存的基本对象列表</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> pattern 字符串前缀</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 对象列表</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Collection&lt;String&gt; <span class=\"title function_\">keys</span><span class=\"params\">(<span class=\"keyword\">final</span> String pattern)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.keys(pattern);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebUtils</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将字符串渲染到客户端</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> response 渲染对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> string 待渲染的字符串</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> null</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">renderString</span><span class=\"params\">(HttpServletResponse response, String string)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            response.setStatus(<span class=\"number\">200</span>);</span><br><span class=\"line\">            response.setContentType(<span class=\"string\">&quot;application/json&quot;</span>);</span><br><span class=\"line\">            response.setCharacterEncoding(<span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\">            response.getWriter().print(string);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (IOException e)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>⑤实体类</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 用户表(User)实体类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 三更</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> -<span class=\"number\">40356785423868312L</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 主键</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 用户名</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String userName;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 昵称</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String nickName;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 密码</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 账号状态（0正常 1停用）</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String status;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 邮箱</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String email;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 手机号</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String phonenumber;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 用户性别（0男，1女，2未知）</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String sex;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 头像</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String avatar;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 用户类型（0管理员，1普通用户）</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String userType;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 创建人的用户id</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long createBy;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 创建时间</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date createTime;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 更新人</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long updateBy;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 更新时间</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date updateTime;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 删除标志（0代表未删除，1代表已删除）</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer delFlag;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h4 id=\"233-实现\"><a class=\"markdownIt-Anchor\" href=\"#233-实现\">#</a> 2.3.3 实现</h4>\n<h5 id=\"2331-数据库校验用户\"><a class=\"markdownIt-Anchor\" href=\"#2331-数据库校验用户\">#</a> 2.3.3.1 数据库校验用户</h5>\n<p>​\t从之前的分析我们可以知道，我们可以自定义一个 UserDetailsService, 让 SpringSecurity 使用我们的 UserDetailsService。我们自己的 UserDetailsService 可以从数据库中查询用户名和密码。</p>\n<h6 id=\"准备工作\"><a class=\"markdownIt-Anchor\" href=\"#准备工作\">#</a> 准备工作</h6>\n<p>​\t我们先创建一个用户表， 建表语句如下：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE `sys_user` (</span><br><span class=\"line\">  `id` BIGINT(20) NOT NULL AUTO_INCREMENT COMMENT &#x27;主键&#x27;,</span><br><span class=\"line\">  `user_name` VARCHAR(64) NOT NULL DEFAULT &#x27;NULL&#x27; COMMENT &#x27;用户名&#x27;,</span><br><span class=\"line\">  `nick_name` VARCHAR(64) NOT NULL DEFAULT &#x27;NULL&#x27; COMMENT &#x27;昵称&#x27;,</span><br><span class=\"line\">  `password` VARCHAR(64) NOT NULL DEFAULT &#x27;NULL&#x27; COMMENT &#x27;密码&#x27;,</span><br><span class=\"line\">  `status` CHAR(1) DEFAULT &#x27;0&#x27; COMMENT &#x27;账号状态（0正常 1停用）&#x27;,</span><br><span class=\"line\">  `email` VARCHAR(64) DEFAULT NULL COMMENT &#x27;邮箱&#x27;,</span><br><span class=\"line\">  `phonenumber` VARCHAR(32) DEFAULT NULL COMMENT &#x27;手机号&#x27;,</span><br><span class=\"line\">  `sex` CHAR(1) DEFAULT NULL COMMENT &#x27;用户性别（0男，1女，2未知）&#x27;,</span><br><span class=\"line\">  `avatar` VARCHAR(128) DEFAULT NULL COMMENT &#x27;头像&#x27;,</span><br><span class=\"line\">  `user_type` CHAR(1) NOT NULL DEFAULT &#x27;1&#x27; COMMENT &#x27;用户类型（0管理员，1普通用户）&#x27;,</span><br><span class=\"line\">  `create_by` BIGINT(20) DEFAULT NULL COMMENT &#x27;创建人的用户id&#x27;,</span><br><span class=\"line\">  `create_time` DATETIME DEFAULT NULL COMMENT &#x27;创建时间&#x27;,</span><br><span class=\"line\">  `update_by` BIGINT(20) DEFAULT NULL COMMENT &#x27;更新人&#x27;,</span><br><span class=\"line\">  `update_time` DATETIME DEFAULT NULL COMMENT &#x27;更新时间&#x27;,</span><br><span class=\"line\">  `del_flag` INT(11) DEFAULT &#x27;0&#x27; COMMENT &#x27;删除标志（0代表未删除，1代表已删除）&#x27;,</span><br><span class=\"line\">  PRIMARY KEY (`id`)</span><br><span class=\"line\">) ENGINE=INNODB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COMMENT=&#x27;用户表&#x27;</span><br></pre></td></tr></table></figure></div>\n<p>​\t\t引入 MybatisPuls 和 mysql 驱动的依赖</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.baomidou<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.4.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n<p>​\t\t配置数据库信息</p>\n<div class=\"highlight-container\" data-rel=\"Yml\"><figure class=\"iseeu highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/sg_security?characterEncoding=utf-8&amp;serverTimezone=UTC</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure></div>\n<p>​\t\t定义 Mapper 接口</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserMapper</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>​\t\t修改 User 实体类</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">类名上加<span class=\"meta\">@TableName(value = &quot;sys_user&quot;)</span> ,id字段上加 <span class=\"meta\">@TableId</span></span><br></pre></td></tr></table></figure></div>\n<p>​\t\t配置 Mapper 扫描</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@MapperScan(&quot;com.sangeng.mapper&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SimpleSecurityApplication</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ConfigurableApplicationContext</span> <span class=\"variable\">run</span> <span class=\"operator\">=</span> SpringApplication.run(SimpleSecurityApplication.class);</span><br><span class=\"line\">        System.out.println(run);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>​\t\t添加 junit 依赖</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></div>\n<p>​\t   测试 MP 是否能正常使用</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> 三更  B站： https://space.bilibili.com/663528522</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MapperTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserMapper userMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testUserMapper</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; users = userMapper.selectList(<span class=\"literal\">null</span>);</span><br><span class=\"line\">        System.out.println(users);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h6 id=\"核心代码实现\"><a class=\"markdownIt-Anchor\" href=\"#核心代码实现\">#</a> 核心代码实现</h6>\n<p>创建一个类实现 UserDetailsService 接口，重写其中的方法。更加用户名从数据库中查询用户信息</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> 三更  B站： https://space.bilibili.com/663528522</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserDetailsServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">UserDetailsService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserMapper userMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> UserDetails <span class=\"title function_\">loadUserByUsername</span><span class=\"params\">(String username)</span> <span class=\"keyword\">throws</span> UsernameNotFoundException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//根据用户名查询用户信息</span></span><br><span class=\"line\">        LambdaQueryWrapper&lt;User&gt; wrapper = <span class=\"keyword\">new</span> <span class=\"title class_\">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class=\"line\">        wrapper.eq(User::getUserName,username);</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> userMapper.selectOne(wrapper);</span><br><span class=\"line\">        <span class=\"comment\">//如果查询不到数据就通过抛出异常来给出提示</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Objects.isNull(user))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;用户名或密码错误&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//TODO 根据用户查询权限信息 添加到LoginUser中</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//封装成UserDetails对象返回 </span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LoginUser</span>(user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>因为 UserDetailsService 方法的返回值是 UserDetails 类型，所以需要定义一个类，实现该接口，把用户信息封装在其中。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> 三更  B站： https://space.bilibili.com/663528522</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LoginUser</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">UserDetails</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> User user;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Collection&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">GrantedAuthority</span>&gt; getAuthorities() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getPassword</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> user.getPassword();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getUsername</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> user.getUserName();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isAccountNonExpired</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isAccountNonLocked</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isCredentialsNonExpired</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isEnabled</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>注意：如果要测试，需要往用户表中写入用户数据，并且如果你想让用户的密码是明文存储，需要在密码前加 {noop}。例如</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220108103356305.png\"\n                      alt=\"image-20220108103356305\"\n                ></p>\n<p>这样登陆的时候就可以用 sg 作为用户名，1234 作为密码来登陆了。</p>\n<h5 id=\"2332-密码加密存储\"><a class=\"markdownIt-Anchor\" href=\"#2332-密码加密存储\">#</a> 2.3.3.2 密码加密存储</h5>\n<p>​\t实际项目中我们不会把密码明文存储在数据库中。</p>\n<p>​\t默认使用的 PasswordEncoder 要求数据库中的密码格式为：{id} password 。它会根据 id 去判断密码的加密方式。但是我们一般不会采用这种方式。所以就需要替换 PasswordEncoder。</p>\n<p>​\t我们一般使用 SpringSecurity 为我们提供的 BCryptPasswordEncoder。</p>\n<p>​\t我们只需要使用把 BCryptPasswordEncoder 对象注入 Spring 容器中，SpringSecurity 就会使用该 PasswordEncoder 来进行密码校验。</p>\n<p>​\t我们可以定义一个 SpringSecurity 的配置类，SpringSecurity 要求这个配置类要继承 WebSecurityConfigurerAdapter。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> 三更  B站： https://space.bilibili.com/663528522</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SecurityConfig</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> PasswordEncoder <span class=\"title function_\">passwordEncoder</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BCryptPasswordEncoder</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h5 id=\"2333-登陆接口\"><a class=\"markdownIt-Anchor\" href=\"#2333-登陆接口\">#</a> 2.3.3.3 登陆接口</h5>\n<p>​\t接下我们需要自定义登陆接口，然后让 SpringSecurity 对这个接口放行，让用户访问这个接口的时候不用登录也能访问。</p>\n<p>​\t在接口中我们通过 AuthenticationManager 的 authenticate 方法来进行用户认证，所以需要在 SecurityConfig 中配置把 AuthenticationManager 注入容器。</p>\n<p>​\t认证成功的话要生成一个 jwt，放入响应中返回。并且为了让用户下回请求时能通过 jwt 识别出具体的是哪个用户，我们需要把用户信息存入 redis，可以把用户 id 作为 key。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LoginController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> LoginServcie loginServcie;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/user/login&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ResponseResult <span class=\"title function_\">login</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> User user)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> loginServcie.login(user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> 三更  B站： https://space.bilibili.com/663528522</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SecurityConfig</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> PasswordEncoder <span class=\"title function_\">passwordEncoder</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BCryptPasswordEncoder</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        http</span><br><span class=\"line\">                <span class=\"comment\">//关闭csrf</span></span><br><span class=\"line\">                .csrf().disable()</span><br><span class=\"line\">                <span class=\"comment\">//不通过Session获取SecurityContext</span></span><br><span class=\"line\">                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class=\"line\">                .and()</span><br><span class=\"line\">                .authorizeRequests()</span><br><span class=\"line\">                <span class=\"comment\">// 对于登录接口 允许匿名访问</span></span><br><span class=\"line\">                .antMatchers(<span class=\"string\">&quot;/user/login&quot;</span>).anonymous()</span><br><span class=\"line\">                <span class=\"comment\">// 除上面外的所有请求全部需要鉴权认证</span></span><br><span class=\"line\">                .anyRequest().authenticated();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> AuthenticationManager <span class=\"title function_\">authenticationManagerBean</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.authenticationManagerBean();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>​</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LoginServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">LoginServcie</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AuthenticationManager authenticationManager;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedisCache redisCache;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ResponseResult <span class=\"title function_\">login</span><span class=\"params\">(User user)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">UsernamePasswordAuthenticationToken</span> <span class=\"variable\">authenticationToken</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UsernamePasswordAuthenticationToken</span>(user.getUserName(),user.getPassword());</span><br><span class=\"line\">        <span class=\"type\">Authentication</span> <span class=\"variable\">authenticate</span> <span class=\"operator\">=</span> authenticationManager.authenticate(authenticationToken);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Objects.isNull(authenticate))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;用户名或密码错误&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//使用userid生成token</span></span><br><span class=\"line\">        <span class=\"type\">LoginUser</span> <span class=\"variable\">loginUser</span> <span class=\"operator\">=</span> (LoginUser) authenticate.getPrincipal();</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">userId</span> <span class=\"operator\">=</span> loginUser.getUser().getId().toString();</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">jwt</span> <span class=\"operator\">=</span> JwtUtil.createJWT(userId);</span><br><span class=\"line\">        <span class=\"comment\">//authenticate存入redis</span></span><br><span class=\"line\">        redisCache.setCacheObject(<span class=\"string\">&quot;login:&quot;</span>+userId,loginUser);</span><br><span class=\"line\">        <span class=\"comment\">//把token响应给前端</span></span><br><span class=\"line\">        HashMap&lt;String,String&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;token&quot;</span>,jwt);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ResponseResult</span>(<span class=\"number\">200</span>,<span class=\"string\">&quot;登陆成功&quot;</span>,map);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<h5 id=\"2334-认证过滤器\"><a class=\"markdownIt-Anchor\" href=\"#2334-认证过滤器\">#</a> 2.3.3.4 认证过滤器</h5>\n<p>​\t我们需要自定义一个过滤器，这个过滤器会去获取请求头中的 token，对 token 进行解析取出其中的 userid。</p>\n<p>​\t使用 userid 去 redis 中获取对应的 LoginUser 对象。</p>\n<p>​\t然后封装 Authentication 对象存入 SecurityContextHolder</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JwtAuthenticationTokenFilter</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">OncePerRequestFilter</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedisCache redisCache;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doFilterInternal</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class=\"keyword\">throws</span> ServletException, IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取token</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">token</span> <span class=\"operator\">=</span> request.getHeader(<span class=\"string\">&quot;token&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!StringUtils.hasText(token)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//放行</span></span><br><span class=\"line\">            filterChain.doFilter(request, response);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//解析token</span></span><br><span class=\"line\">        String userid;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Claims</span> <span class=\"variable\">claims</span> <span class=\"operator\">=</span> JwtUtil.parseJWT(token);</span><br><span class=\"line\">            userid = claims.getSubject();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;token非法&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//从redis中获取用户信息</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">redisKey</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;login:&quot;</span> + userid;</span><br><span class=\"line\">        <span class=\"type\">LoginUser</span> <span class=\"variable\">loginUser</span> <span class=\"operator\">=</span> redisCache.getCacheObject(redisKey);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Objects.isNull(loginUser))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;用户未登录&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//存入SecurityContextHolder</span></span><br><span class=\"line\">        <span class=\"comment\">//TODO 获取权限信息封装到Authentication中</span></span><br><span class=\"line\">        <span class=\"type\">UsernamePasswordAuthenticationToken</span> <span class=\"variable\">authenticationToken</span> <span class=\"operator\">=</span></span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">UsernamePasswordAuthenticationToken</span>(loginUser,<span class=\"literal\">null</span>,<span class=\"literal\">null</span>);</span><br><span class=\"line\">        SecurityContextHolder.getContext().setAuthentication(authenticationToken);</span><br><span class=\"line\">        <span class=\"comment\">//放行</span></span><br><span class=\"line\">        filterChain.doFilter(request, response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> 三更  B站： https://space.bilibili.com/663528522</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SecurityConfig</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> PasswordEncoder <span class=\"title function_\">passwordEncoder</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BCryptPasswordEncoder</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    JwtAuthenticationTokenFilter jwtAuthenticationTokenFilter;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        http</span><br><span class=\"line\">                <span class=\"comment\">//关闭csrf</span></span><br><span class=\"line\">                .csrf().disable()</span><br><span class=\"line\">                <span class=\"comment\">//不通过Session获取SecurityContext</span></span><br><span class=\"line\">                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class=\"line\">                .and()</span><br><span class=\"line\">                .authorizeRequests()</span><br><span class=\"line\">                <span class=\"comment\">// 对于登录接口 允许匿名访问</span></span><br><span class=\"line\">                .antMatchers(<span class=\"string\">&quot;/user/login&quot;</span>).anonymous()</span><br><span class=\"line\">                <span class=\"comment\">// 除上面外的所有请求全部需要鉴权认证</span></span><br><span class=\"line\">                .anyRequest().authenticated();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//把token校验过滤器添加到过滤器链中</span></span><br><span class=\"line\">        http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> AuthenticationManager <span class=\"title function_\">authenticationManagerBean</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.authenticationManagerBean();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<h5 id=\"2335-退出登陆\"><a class=\"markdownIt-Anchor\" href=\"#2335-退出登陆\">#</a> 2.3.3.5 退出登陆</h5>\n<p>​\t我们只需要定义一个登陆接口，然后获取 SecurityContextHolder 中的认证信息，删除 redis 中对应的数据即可。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> 三更  B站： https://space.bilibili.com/663528522</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LoginServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">LoginServcie</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AuthenticationManager authenticationManager;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedisCache redisCache;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ResponseResult <span class=\"title function_\">login</span><span class=\"params\">(User user)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">UsernamePasswordAuthenticationToken</span> <span class=\"variable\">authenticationToken</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UsernamePasswordAuthenticationToken</span>(user.getUserName(),user.getPassword());</span><br><span class=\"line\">        <span class=\"type\">Authentication</span> <span class=\"variable\">authenticate</span> <span class=\"operator\">=</span> authenticationManager.authenticate(authenticationToken);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Objects.isNull(authenticate))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;用户名或密码错误&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//使用userid生成token</span></span><br><span class=\"line\">        <span class=\"type\">LoginUser</span> <span class=\"variable\">loginUser</span> <span class=\"operator\">=</span> (LoginUser) authenticate.getPrincipal();</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">userId</span> <span class=\"operator\">=</span> loginUser.getUser().getId().toString();</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">jwt</span> <span class=\"operator\">=</span> JwtUtil.createJWT(userId);</span><br><span class=\"line\">        <span class=\"comment\">//authenticate存入redis</span></span><br><span class=\"line\">        redisCache.setCacheObject(<span class=\"string\">&quot;login:&quot;</span>+userId,loginUser);</span><br><span class=\"line\">        <span class=\"comment\">//把token响应给前端</span></span><br><span class=\"line\">        HashMap&lt;String,String&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;token&quot;</span>,jwt);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ResponseResult</span>(<span class=\"number\">200</span>,<span class=\"string\">&quot;登陆成功&quot;</span>,map);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ResponseResult <span class=\"title function_\">logout</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Authentication</span> <span class=\"variable\">authentication</span> <span class=\"operator\">=</span> SecurityContextHolder.getContext().getAuthentication();</span><br><span class=\"line\">        <span class=\"type\">LoginUser</span> <span class=\"variable\">loginUser</span> <span class=\"operator\">=</span> (LoginUser) authentication.getPrincipal();</span><br><span class=\"line\">        <span class=\"type\">Long</span> <span class=\"variable\">userid</span> <span class=\"operator\">=</span> loginUser.getUser().getId();</span><br><span class=\"line\">        redisCache.deleteObject(<span class=\"string\">&quot;login:&quot;</span>+userid);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ResponseResult</span>(<span class=\"number\">200</span>,<span class=\"string\">&quot;退出成功&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<h2 id=\"3-授权\"><a class=\"markdownIt-Anchor\" href=\"#3-授权\">#</a> 3. 授权</h2>\n<h3 id=\"30-权限系统的作用\"><a class=\"markdownIt-Anchor\" href=\"#30-权限系统的作用\">#</a> 3.0 权限系统的作用</h3>\n<p>​\t例如一个学校图书馆的管理系统，如果是普通学生登录就能看到借书还书相关的功能，不可能让他看到并且去使用添加书籍信息，删除书籍信息等功能。但是如果是一个图书馆管理员的账号登录了，应该就能看到并使用添加书籍信息，删除书籍信息等功能。</p>\n<p>​\t总结起来就是<strong>不同的用户可以使用不同的功能</strong>。这就是权限系统要去实现的效果。</p>\n<p>​\t我们不能只依赖前端去判断用户的权限来选择显示哪些菜单哪些按钮。因为如果只是这样，如果有人知道了对应功能的接口地址就可以不通过前端，直接去发送请求来实现相关功能操作。</p>\n<p>​\t所以我们还需要在后台进行用户权限的判断，判断当前用户是否有相应的权限，必须具有所需权限才能进行相应的操作。</p>\n<p>​</p>\n<h3 id=\"31-授权基本流程\"><a class=\"markdownIt-Anchor\" href=\"#31-授权基本流程\">#</a> 3.1 授权基本流程</h3>\n<p>​\t在 SpringSecurity 中，会使用默认的 FilterSecurityInterceptor 来进行权限校验。在 FilterSecurityInterceptor 中会从 SecurityContextHolder 获取其中的 Authentication，然后获取其中的权限信息。当前用户是否拥有访问当前资源所需的权限。</p>\n<p>​\t所以我们在项目中只需要把当前登录用户的权限信息也存入 Authentication。</p>\n<p>​\t然后设置我们的资源所需要的权限即可。</p>\n<h3 id=\"32-授权实现\"><a class=\"markdownIt-Anchor\" href=\"#32-授权实现\">#</a> 3.2 授权实现</h3>\n<h4 id=\"321-限制访问资源所需权限\"><a class=\"markdownIt-Anchor\" href=\"#321-限制访问资源所需权限\">#</a> 3.2.1 限制访问资源所需权限</h4>\n<p>​\tSpringSecurity 为我们提供了基于注解的权限控制方案，这也是我们项目中主要采用的方式。我们可以使用注解去指定访问对应的资源所需的权限。</p>\n<p>​\t但是要使用它我们需要先开启相关配置。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableGlobalMethodSecurity(prePostEnabled = true)</span></span><br></pre></td></tr></table></figure></div>\n<p>​\t然后就可以使用对应的注解。@PreAuthorize</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@PreAuthorize(&quot;hasAuthority(&#x27;test&#x27;)&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">hello</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h4 id=\"322-封装权限信息\"><a class=\"markdownIt-Anchor\" href=\"#322-封装权限信息\">#</a> 3.2.2 封装权限信息</h4>\n<p>​\t我们前面在写 UserDetailsServiceImpl 的时候说过，在查询出用户后还要获取对应的权限信息，封装到 UserDetails 中返回。</p>\n<p>​\t我们先直接把权限信息写死封装到 UserDetails 中进行测试。</p>\n<p>​\t我们之前定义了 UserDetails 的实现类 LoginUser，想要让其能封装权限信息就要对其进行修改。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.sangeng.domain;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.annotation.JSONField;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.AllArgsConstructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.NoArgsConstructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.GrantedAuthority;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.authority.SimpleGrantedAuthority;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.stream.Collectors;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> 三更  B站： https://space.bilibili.com/663528522</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LoginUser</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">UserDetails</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> User user;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\">//存储权限信息</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; permissions;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">LoginUser</span><span class=\"params\">(User user,List&lt;String&gt; permissions)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.user = user;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.permissions = permissions;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//存储SpringSecurity所需要的权限信息的集合</span></span><br><span class=\"line\">    <span class=\"meta\">@JSONField(serialize = false)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;GrantedAuthority&gt; authorities;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span>  Collection&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">GrantedAuthority</span>&gt; getAuthorities() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(authorities!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> authorities;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//把permissions中字符串类型的权限信息转换成GrantedAuthority对象存入authorities中</span></span><br><span class=\"line\">        authorities = permissions.stream().</span><br><span class=\"line\">                map(SimpleGrantedAuthority::<span class=\"keyword\">new</span>)</span><br><span class=\"line\">                .collect(Collectors.toList());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> authorities;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getPassword</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> user.getPassword();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getUsername</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> user.getUserName();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isAccountNonExpired</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isAccountNonLocked</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isCredentialsNonExpired</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isEnabled</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<p>​\t\tLoginUser 修改完后我们就可以在 UserDetailsServiceImpl 中去把权限信息封装到 LoginUser 中了。我们写死权限进行测试，后面我们再从数据库中查询权限信息。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.sangeng.service.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.extension.conditions.query.LambdaQueryChainWrapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sangeng.domain.LoginUser;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sangeng.domain.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sangeng.mapper.UserMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Objects;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> 三更  B站： https://space.bilibili.com/663528522</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserDetailsServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">UserDetailsService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserMapper userMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> UserDetails <span class=\"title function_\">loadUserByUsername</span><span class=\"params\">(String username)</span> <span class=\"keyword\">throws</span> UsernameNotFoundException &#123;</span><br><span class=\"line\">        LambdaQueryWrapper&lt;User&gt; wrapper = <span class=\"keyword\">new</span> <span class=\"title class_\">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class=\"line\">        wrapper.eq(User::getUserName,username);</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> userMapper.selectOne(wrapper);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Objects.isNull(user))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;用户名或密码错误&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//TODO 根据用户查询权限信息 添加到LoginUser中</span></span><br><span class=\"line\">        List&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(Arrays.asList(<span class=\"string\">&quot;test&quot;</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LoginUser</span>(user,list);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<h4 id=\"323-从数据库查询权限信息\"><a class=\"markdownIt-Anchor\" href=\"#323-从数据库查询权限信息\">#</a> 3.2.3 从数据库查询权限信息</h4>\n<h5 id=\"3231-rbac权限模型\"><a class=\"markdownIt-Anchor\" href=\"#3231-rbac权限模型\">#</a> 3.2.3.1 RBAC 权限模型</h5>\n<p>​\tRBAC 权限模型（Role-Based Access Control）即：基于角色的权限控制。这是目前最常被开发者使用也是相对易用、通用权限模型。</p>\n<p>​\t<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220108103427545.png\"\n                      alt=\"image-20220108103427545\"\n                ></p>\n<h5 id=\"3232-准备工作\"><a class=\"markdownIt-Anchor\" href=\"#3232-准备工作\">#</a> 3.2.3.2 准备工作</h5>\n<div class=\"highlight-container\" data-rel=\"Sql\"><figure class=\"iseeu highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> DATABASE <span class=\"comment\">/*!32312 IF NOT EXISTS*/</span>`sg_security` <span class=\"comment\">/*!40100 DEFAULT CHARACTER SET utf8mb4 */</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">USE `sg_security`;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*Table structure for table `sys_menu` */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> IF <span class=\"keyword\">EXISTS</span> `sys_menu`;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> `sys_menu` (</span><br><span class=\"line\">  `id` <span class=\"type\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> AUTO_INCREMENT,</span><br><span class=\"line\">  `menu_name` <span class=\"type\">varchar</span>(<span class=\"number\">64</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;NULL&#x27;</span> COMMENT <span class=\"string\">&#x27;菜单名&#x27;</span>,</span><br><span class=\"line\">  `path` <span class=\"type\">varchar</span>(<span class=\"number\">200</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;路由地址&#x27;</span>,</span><br><span class=\"line\">  `component` <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;组件路径&#x27;</span>,</span><br><span class=\"line\">  `visible` <span class=\"type\">char</span>(<span class=\"number\">1</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;0&#x27;</span> COMMENT <span class=\"string\">&#x27;菜单状态（0显示 1隐藏）&#x27;</span>,</span><br><span class=\"line\">  `status` <span class=\"type\">char</span>(<span class=\"number\">1</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;0&#x27;</span> COMMENT <span class=\"string\">&#x27;菜单状态（0正常 1停用）&#x27;</span>,</span><br><span class=\"line\">  `perms` <span class=\"type\">varchar</span>(<span class=\"number\">100</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;权限标识&#x27;</span>,</span><br><span class=\"line\">  `icon` <span class=\"type\">varchar</span>(<span class=\"number\">100</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;#&#x27;</span> COMMENT <span class=\"string\">&#x27;菜单图标&#x27;</span>,</span><br><span class=\"line\">  `create_by` <span class=\"type\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `create_time` datetime <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `update_by` <span class=\"type\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `update_time` datetime <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `del_flag` <span class=\"type\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;0&#x27;</span> COMMENT <span class=\"string\">&#x27;是否删除（0未删除 1已删除）&#x27;</span>,</span><br><span class=\"line\">  `remark` <span class=\"type\">varchar</span>(<span class=\"number\">500</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;备注&#x27;</span>,</span><br><span class=\"line\">  <span class=\"keyword\">PRIMARY</span> KEY (`id`)</span><br><span class=\"line\">) ENGINE<span class=\"operator\">=</span>InnoDB AUTO_INCREMENT<span class=\"operator\">=</span><span class=\"number\">2</span> <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8mb4 COMMENT<span class=\"operator\">=</span><span class=\"string\">&#x27;菜单表&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*Table structure for table `sys_role` */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> IF <span class=\"keyword\">EXISTS</span> `sys_role`;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> `sys_role` (</span><br><span class=\"line\">  `id` <span class=\"type\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> AUTO_INCREMENT,</span><br><span class=\"line\">  `name` <span class=\"type\">varchar</span>(<span class=\"number\">128</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `role_key` <span class=\"type\">varchar</span>(<span class=\"number\">100</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;角色权限字符串&#x27;</span>,</span><br><span class=\"line\">  `status` <span class=\"type\">char</span>(<span class=\"number\">1</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;0&#x27;</span> COMMENT <span class=\"string\">&#x27;角色状态（0正常 1停用）&#x27;</span>,</span><br><span class=\"line\">  `del_flag` <span class=\"type\">int</span>(<span class=\"number\">1</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;0&#x27;</span> COMMENT <span class=\"string\">&#x27;del_flag&#x27;</span>,</span><br><span class=\"line\">  `create_by` <span class=\"type\">bigint</span>(<span class=\"number\">200</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `create_time` datetime <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `update_by` <span class=\"type\">bigint</span>(<span class=\"number\">200</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `update_time` datetime <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `remark` <span class=\"type\">varchar</span>(<span class=\"number\">500</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;备注&#x27;</span>,</span><br><span class=\"line\">  <span class=\"keyword\">PRIMARY</span> KEY (`id`)</span><br><span class=\"line\">) ENGINE<span class=\"operator\">=</span>InnoDB AUTO_INCREMENT<span class=\"operator\">=</span><span class=\"number\">3</span> <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8mb4 COMMENT<span class=\"operator\">=</span><span class=\"string\">&#x27;角色表&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*Table structure for table `sys_role_menu` */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> IF <span class=\"keyword\">EXISTS</span> `sys_role_menu`;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> `sys_role_menu` (</span><br><span class=\"line\">  `role_id` <span class=\"type\">bigint</span>(<span class=\"number\">200</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> AUTO_INCREMENT COMMENT <span class=\"string\">&#x27;角色ID&#x27;</span>,</span><br><span class=\"line\">  `menu_id` <span class=\"type\">bigint</span>(<span class=\"number\">200</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;0&#x27;</span> COMMENT <span class=\"string\">&#x27;菜单id&#x27;</span>,</span><br><span class=\"line\">  <span class=\"keyword\">PRIMARY</span> KEY (`role_id`,`menu_id`)</span><br><span class=\"line\">) ENGINE<span class=\"operator\">=</span>InnoDB AUTO_INCREMENT<span class=\"operator\">=</span><span class=\"number\">2</span> <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8mb4;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*Table structure for table `sys_user` */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> IF <span class=\"keyword\">EXISTS</span> `sys_user`;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> `sys_user` (</span><br><span class=\"line\">  `id` <span class=\"type\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> AUTO_INCREMENT COMMENT <span class=\"string\">&#x27;主键&#x27;</span>,</span><br><span class=\"line\">  `user_name` <span class=\"type\">varchar</span>(<span class=\"number\">64</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;NULL&#x27;</span> COMMENT <span class=\"string\">&#x27;用户名&#x27;</span>,</span><br><span class=\"line\">  `nick_name` <span class=\"type\">varchar</span>(<span class=\"number\">64</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;NULL&#x27;</span> COMMENT <span class=\"string\">&#x27;昵称&#x27;</span>,</span><br><span class=\"line\">  `password` <span class=\"type\">varchar</span>(<span class=\"number\">64</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;NULL&#x27;</span> COMMENT <span class=\"string\">&#x27;密码&#x27;</span>,</span><br><span class=\"line\">  `status` <span class=\"type\">char</span>(<span class=\"number\">1</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;0&#x27;</span> COMMENT <span class=\"string\">&#x27;账号状态（0正常 1停用）&#x27;</span>,</span><br><span class=\"line\">  `email` <span class=\"type\">varchar</span>(<span class=\"number\">64</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;邮箱&#x27;</span>,</span><br><span class=\"line\">  `phonenumber` <span class=\"type\">varchar</span>(<span class=\"number\">32</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;手机号&#x27;</span>,</span><br><span class=\"line\">  `sex` <span class=\"type\">char</span>(<span class=\"number\">1</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;用户性别（0男，1女，2未知）&#x27;</span>,</span><br><span class=\"line\">  `avatar` <span class=\"type\">varchar</span>(<span class=\"number\">128</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;头像&#x27;</span>,</span><br><span class=\"line\">  `user_type` <span class=\"type\">char</span>(<span class=\"number\">1</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;1&#x27;</span> COMMENT <span class=\"string\">&#x27;用户类型（0管理员，1普通用户）&#x27;</span>,</span><br><span class=\"line\">  `create_by` <span class=\"type\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;创建人的用户id&#x27;</span>,</span><br><span class=\"line\">  `create_time` datetime <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;创建时间&#x27;</span>,</span><br><span class=\"line\">  `update_by` <span class=\"type\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;更新人&#x27;</span>,</span><br><span class=\"line\">  `update_time` datetime <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;更新时间&#x27;</span>,</span><br><span class=\"line\">  `del_flag` <span class=\"type\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;0&#x27;</span> COMMENT <span class=\"string\">&#x27;删除标志（0代表未删除，1代表已删除）&#x27;</span>,</span><br><span class=\"line\">  <span class=\"keyword\">PRIMARY</span> KEY (`id`)</span><br><span class=\"line\">) ENGINE<span class=\"operator\">=</span>InnoDB AUTO_INCREMENT<span class=\"operator\">=</span><span class=\"number\">3</span> <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8mb4 COMMENT<span class=\"operator\">=</span><span class=\"string\">&#x27;用户表&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*Table structure for table `sys_user_role` */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> IF <span class=\"keyword\">EXISTS</span> `sys_user_role`;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> `sys_user_role` (</span><br><span class=\"line\">  `user_id` <span class=\"type\">bigint</span>(<span class=\"number\">200</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> AUTO_INCREMENT COMMENT <span class=\"string\">&#x27;用户id&#x27;</span>,</span><br><span class=\"line\">  `role_id` <span class=\"type\">bigint</span>(<span class=\"number\">200</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;0&#x27;</span> COMMENT <span class=\"string\">&#x27;角色id&#x27;</span>,</span><br><span class=\"line\">  <span class=\"keyword\">PRIMARY</span> KEY (`user_id`,`role_id`)</span><br><span class=\"line\">) ENGINE<span class=\"operator\">=</span>InnoDB <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8mb4;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT </span><br><span class=\"line\">\tDISTINCT m.`perms`</span><br><span class=\"line\">FROM</span><br><span class=\"line\">\tsys_user_role ur</span><br><span class=\"line\">\tLEFT JOIN `sys_role` r ON ur.`role_id` = r.`id`</span><br><span class=\"line\">\tLEFT JOIN `sys_role_menu` rm ON ur.`role_id` = rm.`role_id`</span><br><span class=\"line\">\tLEFT JOIN `sys_menu` m ON m.`id` = rm.`menu_id`</span><br><span class=\"line\">WHERE</span><br><span class=\"line\">\tuser_id = 2</span><br><span class=\"line\">\tAND r.`status` = 0</span><br><span class=\"line\">\tAND m.`status` = 0</span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.sangeng.domain;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.annotation.JsonInclude;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.AllArgsConstructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.NoArgsConstructor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 菜单表(Menu)实体类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> makejava</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2021-11-24 15:30:08</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@TableName(value=&quot;sys_menu&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@JsonInclude(JsonInclude.Include.NON_NULL)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Menu</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> -<span class=\"number\">54979041104113736L</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"meta\">@TableId</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 菜单名</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String menuName;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 路由地址</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String path;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 组件路径</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String component;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 菜单状态（0显示 1隐藏）</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String visible;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 菜单状态（0正常 1停用）</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String status;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 权限标识</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String perms;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 菜单图标</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String icon;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long createBy;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date createTime;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long updateBy;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date updateTime;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 是否删除（0未删除 1已删除）</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer delFlag;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 备注</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String remark;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h5 id=\"3233-代码实现\"><a class=\"markdownIt-Anchor\" href=\"#3233-代码实现\">#</a> 3.2.3.3 代码实现</h5>\n<p>​\t我们只需要根据用户 id 去查询到其所对应的权限信息即可。</p>\n<p>​\t所以我们可以先定义个 mapper，其中提供一个方法可以根据 userid 查询权限信息。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sangeng.domain.Menu;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> 三更  B站： https://space.bilibili.com/663528522</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MenuMapper</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseMapper</span>&lt;Menu&gt; &#123;</span><br><span class=\"line\">    List&lt;String&gt; <span class=\"title function_\">selectPermsByUserId</span><span class=\"params\">(Long id)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>​\t尤其是自定义方法，所以需要创建对应的 mapper 文件，定义对应的 sql 语句</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">mapper</span> <span class=\"keyword\">PUBLIC</span> <span class=\"string\">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class=\"string\">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">&quot;com.sangeng.mapper.MenuMapper&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;selectPermsByUserId&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;java.lang.String&quot;</span>&gt;</span></span><br><span class=\"line\">        SELECT</span><br><span class=\"line\">            DISTINCT m.`perms`</span><br><span class=\"line\">        FROM</span><br><span class=\"line\">            sys_user_role ur</span><br><span class=\"line\">            LEFT JOIN `sys_role` r ON ur.`role_id` = r.`id`</span><br><span class=\"line\">            LEFT JOIN `sys_role_menu` rm ON ur.`role_id` = rm.`role_id`</span><br><span class=\"line\">            LEFT JOIN `sys_menu` m ON m.`id` = rm.`menu_id`</span><br><span class=\"line\">        WHERE</span><br><span class=\"line\">            user_id = #&#123;userid&#125;</span><br><span class=\"line\">            AND r.`status` = 0</span><br><span class=\"line\">            AND m.`status` = 0</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n<p>​\t在 application.yml 中配置 mapperXML 文件的位置</p>\n<div class=\"highlight-container\" data-rel=\"Yaml\"><figure class=\"iseeu highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/sg_security?characterEncoding=utf-8&amp;serverTimezone=UTC</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\">  <span class=\"attr\">redis:</span></span><br><span class=\"line\">    <span class=\"attr\">host:</span> <span class=\"string\">localhost</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">6379</span></span><br><span class=\"line\"><span class=\"attr\">mybatis-plus:</span></span><br><span class=\"line\">  <span class=\"attr\">mapper-locations:</span> <span class=\"string\">classpath*:/mapper/**/*.xml</span> </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<p>​\t然后我们可以在 UserDetailsServiceImpl 中去调用该 mapper 的方法查询权限信息封装到 LoginUser 对象中即可。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> 三更  B站： https://space.bilibili.com/663528522</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserDetailsServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">UserDetailsService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserMapper userMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> MenuMapper menuMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> UserDetails <span class=\"title function_\">loadUserByUsername</span><span class=\"params\">(String username)</span> <span class=\"keyword\">throws</span> UsernameNotFoundException &#123;</span><br><span class=\"line\">        LambdaQueryWrapper&lt;User&gt; wrapper = <span class=\"keyword\">new</span> <span class=\"title class_\">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class=\"line\">        wrapper.eq(User::getUserName,username);</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> userMapper.selectOne(wrapper);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Objects.isNull(user))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;用户名或密码错误&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        List&lt;String&gt; permissionKeyList =  menuMapper.selectPermsByUserId(user.getId());</span><br><span class=\"line\"><span class=\"comment\">//        //测试写法</span></span><br><span class=\"line\"><span class=\"comment\">//        List&lt;String&gt; list = new ArrayList&lt;&gt;(Arrays.asList(&quot;test&quot;));</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LoginUser</span>(user,permissionKeyList);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"4-自定义失败处理\"><a class=\"markdownIt-Anchor\" href=\"#4-自定义失败处理\">#</a> 4. 自定义失败处理</h2>\n<p>​\t我们还希望在认证失败或者是授权失败的情况下也能和我们的接口一样返回相同结构的 json，这样可以让前端能对响应进行统一的处理。要实现这个功能我们需要知道 SpringSecurity 的异常处理机制。</p>\n<p>​\t在 SpringSecurity 中，如果我们在认证或者授权的过程中出现了异常会被 ExceptionTranslationFilter 捕获到。在 ExceptionTranslationFilter 中会去判断是认证失败还是授权失败出现的异常。</p>\n<p>​\t如果是认证过程中出现的异常会被封装成 AuthenticationException 然后调用<strong> AuthenticationEntryPoint</strong> 对象的方法去进行异常处理。</p>\n<p>​\t如果是授权过程中出现的异常会被封装成 AccessDeniedException 然后调用<strong> AccessDeniedHandler</strong> 对象的方法去进行异常处理。</p>\n<p>​\t所以如果我们需要自定义异常处理，我们只需要自定义 AuthenticationEntryPoint 和 AccessDeniedHandler 然后配置给 SpringSecurity 即可。</p>\n<p>①自定义实现类</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<p>②配置给 SpringSecurity</p>\n<p>​\t我们可以使用 HttpSecurity 对象的方法去配置。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<h2 id=\"5-跨域\"><a class=\"markdownIt-Anchor\" href=\"#5-跨域\">#</a> 5. 跨域</h2>\n<p>​\t浏览器出于安全的考虑，使用 XMLHttpRequest 对象发起 HTTP 请求时必须遵守同源策略，否则就是跨域的 HTTP 请求，默认情况下是被禁止的。 同源策略要求源相同才能正常进行通信，即协议、域名、端口号都完全一致。</p>\n<p>​\t前后端分离项目，前端项目和后端项目一般都不是同源的，所以肯定会存在跨域请求的问题。</p>\n<p>​\t所以我们就要处理一下，让前端能进行跨域请求。</p>\n<p>①先对 SpringBoot 配置，运行跨域请求</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CorsConfig</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">WebMvcConfigurer</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addCorsMappings</span><span class=\"params\">(CorsRegistry registry)</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 设置允许跨域的路径</span></span><br><span class=\"line\">        registry.addMapping(<span class=\"string\">&quot;/**&quot;</span>)</span><br><span class=\"line\">                <span class=\"comment\">// 设置允许跨域请求的域名</span></span><br><span class=\"line\">                .allowedOriginPatterns(<span class=\"string\">&quot;*&quot;</span>)</span><br><span class=\"line\">                <span class=\"comment\">// 是否允许cookie</span></span><br><span class=\"line\">                .allowCredentials(<span class=\"literal\">true</span>)</span><br><span class=\"line\">                <span class=\"comment\">// 设置允许的请求方式</span></span><br><span class=\"line\">                .allowedMethods(<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;POST&quot;</span>, <span class=\"string\">&quot;DELETE&quot;</span>, <span class=\"string\">&quot;PUT&quot;</span>)</span><br><span class=\"line\">                <span class=\"comment\">// 设置允许的header属性</span></span><br><span class=\"line\">                .allowedHeaders(<span class=\"string\">&quot;*&quot;</span>)</span><br><span class=\"line\">                <span class=\"comment\">// 跨域允许时间</span></span><br><span class=\"line\">                .maxAge(<span class=\"number\">3600</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>②开启 SpringSecurity 的跨域访问</p>\n<p>由于我们的资源都会收到 SpringSecurity 的保护，所以想要跨域访问还要让 SpringSecurity 运行跨域访问。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    http</span><br><span class=\"line\">            <span class=\"comment\">//关闭csrf</span></span><br><span class=\"line\">            .csrf().disable()</span><br><span class=\"line\">            <span class=\"comment\">//不通过Session获取SecurityContext</span></span><br><span class=\"line\">            .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class=\"line\">            .and()</span><br><span class=\"line\">            .authorizeRequests()</span><br><span class=\"line\">            <span class=\"comment\">// 对于登录接口 允许匿名访问</span></span><br><span class=\"line\">            .antMatchers(<span class=\"string\">&quot;/user/login&quot;</span>).anonymous()</span><br><span class=\"line\">            <span class=\"comment\">// 除上面外的所有请求全部需要鉴权认证</span></span><br><span class=\"line\">            .anyRequest().authenticated();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//添加过滤器</span></span><br><span class=\"line\">    http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//配置异常处理器</span></span><br><span class=\"line\">    http.exceptionHandling()</span><br><span class=\"line\">            <span class=\"comment\">//配置认证失败处理器</span></span><br><span class=\"line\">            .authenticationEntryPoint(authenticationEntryPoint)</span><br><span class=\"line\">            .accessDeniedHandler(accessDeniedHandler);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//允许跨域</span></span><br><span class=\"line\">    http.cors();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<h2 id=\"6-遗留小问题\"><a class=\"markdownIt-Anchor\" href=\"#6-遗留小问题\">#</a> 6. 遗留小问题</h2>\n<h3 id=\"其它权限校验方法\"><a class=\"markdownIt-Anchor\" href=\"#其它权限校验方法\">#</a> 其它权限校验方法</h3>\n<p>​\t我们前面都是使用 @PreAuthorize 注解，然后在在其中使用的是 hasAuthority 方法进行校验。SpringSecurity 还为我们提供了其它方法例如：hasAnyAuthority，hasRole，hasAnyRole 等。</p>\n<p>​</p>\n<p>​\t这里我们先不急着去介绍这些方法，我们先去理解 hasAuthority 的原理，然后再去学习其他方法你就更容易理解，而不是死记硬背区别。并且我们也可以选择定义校验方法，实现我们自己的校验逻辑。</p>\n<p>​\thasAuthority 方法实际是执行到了 SecurityExpressionRoot 的 hasAuthority，大家只要断点调试既可知道它内部的校验原理。</p>\n<p>​\t它内部其实是调用 authentication 的 getAuthorities 方法获取用户的权限列表。然后判断我们存入的方法参数数据在权限列表中。</p>\n<p>​\thasAnyAuthority 方法可以传入多个权限，只有用户有其中任意一个权限都可以访问对应资源。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PreAuthorize(&quot;hasAnyAuthority(&#x27;admin&#x27;,&#x27;test&#x27;,&#x27;system:dept:list&#x27;)&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">hello</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>​\thasRole 要求有对应的角色才可以访问，但是它内部会把我们传入的参数拼接上 <strong>ROLE_</strong> 后再去比较。所以这种情况下要用用户对应的权限也要有 <strong>ROLE_</strong> 这个前缀才可以。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PreAuthorize(&quot;hasRole(&#x27;system:dept:list&#x27;)&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">hello</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>​\thasAnyRole 有任意的角色就可以访问。它内部也会把我们传入的参数拼接上 <strong>ROLE_</strong> 后再去比较。所以这种情况下要用用户对应的权限也要有 <strong>ROLE_</strong> 这个前缀才可以。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PreAuthorize(&quot;hasAnyRole(&#x27;admin&#x27;,&#x27;system:dept:list&#x27;)&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">hello</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"自定义权限校验方法\"><a class=\"markdownIt-Anchor\" href=\"#自定义权限校验方法\">#</a> 自定义权限校验方法</h3>\n<p>​\t我们也可以定义自己的权限校验方法，在 @PreAuthorize 注解中使用我们的方法。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component(&quot;ex&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SGExpressionRoot</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">hasAuthority</span><span class=\"params\">(String authority)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取当前用户的权限</span></span><br><span class=\"line\">        <span class=\"type\">Authentication</span> <span class=\"variable\">authentication</span> <span class=\"operator\">=</span> SecurityContextHolder.getContext().getAuthentication();</span><br><span class=\"line\">        <span class=\"type\">LoginUser</span> <span class=\"variable\">loginUser</span> <span class=\"operator\">=</span> (LoginUser) authentication.getPrincipal();</span><br><span class=\"line\">        List&lt;String&gt; permissions = loginUser.getPermissions();</span><br><span class=\"line\">        <span class=\"comment\">//判断用户权限集合中是否存在authority</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> permissions.contains(authority);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>​\t 在 SPEL 表达式中使用 @ex 相当于获取容器中 bean 的名字未 ex 的对象。然后再调用这个对象的 hasAuthority 方法</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@PreAuthorize(&quot;@ex.hasAuthority(&#x27;system:dept:list&#x27;)&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">hello</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"基于配置的权限控制\"><a class=\"markdownIt-Anchor\" href=\"#基于配置的权限控制\">#</a> 基于配置的权限控制</h3>\n<p>​\t我们也可以在配置类中使用使用配置的方式对资源进行权限控制。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    http</span><br><span class=\"line\">            <span class=\"comment\">//关闭csrf</span></span><br><span class=\"line\">            .csrf().disable()</span><br><span class=\"line\">            <span class=\"comment\">//不通过Session获取SecurityContext</span></span><br><span class=\"line\">            .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class=\"line\">            .and()</span><br><span class=\"line\">            .authorizeRequests()</span><br><span class=\"line\">            <span class=\"comment\">// 对于登录接口 允许匿名访问</span></span><br><span class=\"line\">            .antMatchers(<span class=\"string\">&quot;/user/login&quot;</span>).anonymous()</span><br><span class=\"line\">            .antMatchers(<span class=\"string\">&quot;/testCors&quot;</span>).hasAuthority(<span class=\"string\">&quot;system:dept:list222&quot;</span>)</span><br><span class=\"line\">            <span class=\"comment\">// 除上面外的所有请求全部需要鉴权认证</span></span><br><span class=\"line\">            .anyRequest().authenticated();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//添加过滤器</span></span><br><span class=\"line\">    http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//配置异常处理器</span></span><br><span class=\"line\">    http.exceptionHandling()</span><br><span class=\"line\">            <span class=\"comment\">//配置认证失败处理器</span></span><br><span class=\"line\">            .authenticationEntryPoint(authenticationEntryPoint)</span><br><span class=\"line\">            .accessDeniedHandler(accessDeniedHandler);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//允许跨域</span></span><br><span class=\"line\">    http.cors();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"csrf\"><a class=\"markdownIt-Anchor\" href=\"#csrf\">#</a> CSRF</h3>\n<p>​\tCSRF 是指跨站请求伪造（Cross-site request forgery），是 web 常见的攻击之一。</p>\n<p>​\t<a class=\"link\"   href=\"https://blog.csdn.net/freeking101/article/details/86537087\" >https://blog.csdn.net/freeking101/article/details/86537087 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p>​\tSpringSecurity 去防止 CSRF 攻击的方式就是通过 csrf_token。后端会生成一个 csrf_token，前端发起请求的时候需要携带这个 csrf_token, 后端会有过滤器进行校验，如果没有携带或者是伪造的就不允许访问。</p>\n<p>​\t我们可以发现 CSRF 攻击依靠的是 cookie 中所携带的认证信息。但是在前后端分离的项目中我们的认证信息其实是 token，而 token 并不是存储中 cookie 中，并且需要前端代码去把 token 设置到请求头中才可以，所以 CSRF 攻击也就不用担心了。</p>\n<h3 id=\"认证成功处理器\"><a class=\"markdownIt-Anchor\" href=\"#认证成功处理器\">#</a> 认证成功处理器</h3>\n<p>​\t实际上在 UsernamePasswordAuthenticationFilter 进行登录认证的时候，如果登录成功了是会调用 AuthenticationSuccessHandler 的方法进行认证成功后的处理的。AuthenticationSuccessHandler 就是登录成功处理器。</p>\n<p>​\t我们也可以自己去自定义成功处理器进行成功后的相应处理。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SGSuccessHandler</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AuthenticationSuccessHandler</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onAuthenticationSuccess</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class=\"keyword\">throws</span> IOException, ServletException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;认证成功了&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SecurityConfig</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AuthenticationSuccessHandler successHandler;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        http.formLogin().successHandler(successHandler);</span><br><span class=\"line\"></span><br><span class=\"line\">        http.authorizeRequests().anyRequest().authenticated();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<h3 id=\"认证失败处理器\"><a class=\"markdownIt-Anchor\" href=\"#认证失败处理器\">#</a> 认证失败处理器</h3>\n<p>​\t实际上在 UsernamePasswordAuthenticationFilter 进行登录认证的时候，如果认证失败了是会调用 AuthenticationFailureHandler 的方法进行认证失败后的处理的。AuthenticationFailureHandler 就是登录失败处理器。</p>\n<p>​\t我们也可以自己去自定义失败处理器进行失败后的相应处理。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SGFailureHandler</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AuthenticationFailureHandler</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onAuthenticationFailure</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception)</span> <span class=\"keyword\">throws</span> IOException, ServletException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;认证失败了&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SecurityConfig</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AuthenticationSuccessHandler successHandler;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AuthenticationFailureHandler failureHandler;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        http.formLogin()</span><br><span class=\"line\"><span class=\"comment\">//                配置认证成功处理器</span></span><br><span class=\"line\">                .successHandler(successHandler)</span><br><span class=\"line\"><span class=\"comment\">//                配置认证失败处理器</span></span><br><span class=\"line\">                .failureHandler(failureHandler);</span><br><span class=\"line\"></span><br><span class=\"line\">        http.authorizeRequests().anyRequest().authenticated();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<h3 id=\"登出成功处理器\"><a class=\"markdownIt-Anchor\" href=\"#登出成功处理器\">#</a> 登出成功处理器</h3>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SGLogoutSuccessHandler</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">LogoutSuccessHandler</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onLogoutSuccess</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class=\"keyword\">throws</span> IOException, ServletException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;注销成功&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SecurityConfig</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AuthenticationSuccessHandler successHandler;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AuthenticationFailureHandler failureHandler;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> LogoutSuccessHandler logoutSuccessHandler;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        http.formLogin()</span><br><span class=\"line\"><span class=\"comment\">//                配置认证成功处理器</span></span><br><span class=\"line\">                .successHandler(successHandler)</span><br><span class=\"line\"><span class=\"comment\">//                配置认证失败处理器</span></span><br><span class=\"line\">                .failureHandler(failureHandler);</span><br><span class=\"line\"></span><br><span class=\"line\">        http.logout()</span><br><span class=\"line\">                <span class=\"comment\">//配置注销成功处理器</span></span><br><span class=\"line\">                .logoutSuccessHandler(logoutSuccessHandler);</span><br><span class=\"line\"></span><br><span class=\"line\">        http.authorizeRequests().anyRequest().authenticated();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n",
            "tags": [
                "Spring Security"
            ]
        },
        {
            "id": "https://wait-you.github.io/2023/06/06/Spring-Cloud-%E6%8A%80%E6%9C%AF%E6%A0%88/",
            "url": "https://wait-you.github.io/2023/06/06/Spring-Cloud-%E6%8A%80%E6%9C%AF%E6%A0%88/",
            "title": "Spring Cloud 技术栈",
            "date_published": "2023-06-06T01:05:40.000Z",
            "content_html": "<h1 id=\"spring-cloud-技术栈\"><a class=\"markdownIt-Anchor\" href=\"#spring-cloud-技术栈\">#</a> Spring Cloud 技术栈</h1>\n<h2 id=\"版本选择\"><a class=\"markdownIt-Anchor\" href=\"#版本选择\">#</a> 版本选择</h2>\n<h3 id=\"springboot版本选择\"><a class=\"markdownIt-Anchor\" href=\"#springboot版本选择\">#</a> SpringBoot 版本选择</h3>\n<ul>\n<li>git 源码地址\n<ul>\n<li><a class=\"link\"   href=\"https://github.com/spring-projects/spring-boot/releases/\" >https://github.com/spring-projects/spring-boot/releases/ <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n</ul>\n</li>\n<li>官网看 Boot 版本</li>\n</ul>\n<h3 id=\"springcloud版本选择\"><a class=\"markdownIt-Anchor\" href=\"#springcloud版本选择\">#</a> SpringCloud 版本选择</h3>\n<ul>\n<li>git 源码地址\n<ul>\n<li><a class=\"link\"   href=\"https://github.com/spring-projects/spring-cloud\" >https://github.com/spring-projects/spring-cloud <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n</ul>\n</li>\n<li>官网看 cloud 版本</li>\n</ul>\n<h3 id=\"springboot-和-springcloud版本对应查看\"><a class=\"markdownIt-Anchor\" href=\"#springboot-和-springcloud版本对应查看\">#</a> SpringBoot 和 SpringCloud 版本对应查看</h3>\n<ul>\n<li>查看 json 返回的结果\n<ul>\n<li><a class=\"link\"   href=\"https://start.spring.io/actuator/info\" >https://start.spring.io/actuator/info <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"关于cloud各种组件的停更升级替换\"><a class=\"markdownIt-Anchor\" href=\"#关于cloud各种组件的停更升级替换\">#</a> 关于 Cloud 各种组件的停更 / 升级 / 替换</h2>\n<blockquote>\n<p>Cloud 升级</p>\n</blockquote>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220114211406758.png\"\n                      alt=\"image-20220114211406758\"\n                ></p>\n<ul>\n<li>\n<p><strong>服务注册中心</strong></p>\n<ul>\n<li>Eureka\n<ul>\n<li>停更</li>\n</ul>\n</li>\n<li>Zookeeper\n<ul>\n<li>做最少的切换，技术是最熟悉的</li>\n<li>不想用新技术，只想用老技术的选择</li>\n</ul>\n</li>\n<li>Consul\n<ul>\n<li>不推荐</li>\n</ul>\n</li>\n<li>Nacos\n<ul>\n<li>推荐</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>服务调用</strong></p>\n<ul>\n<li>Ribbon\n<ul>\n<li>维护状态</li>\n<li>等待被替换</li>\n</ul>\n</li>\n<li>LoadBalancer\n<ul>\n<li>发芽阶段</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>服务调用</strong></p>\n<ul>\n<li>Fegin\n<ul>\n<li>挂了</li>\n</ul>\n</li>\n<li>OpenFeign\n<ul>\n<li>推荐</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>服务降级</p>\n<ul>\n<li>\n<p>Hystrix</p>\n<ul>\n<li>不推荐</li>\n</ul>\n</li>\n<li>\n<p>resilience4j</p>\n</li>\n<li>\n<p>sentienl</p>\n<ul>\n<li>推荐</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>服务网关</p>\n<ul>\n<li>Zuul\n<ul>\n<li>挂了</li>\n</ul>\n</li>\n<li>Zuul2\n<ul>\n<li>胎死腹中</li>\n</ul>\n</li>\n<li>gateway\n<ul>\n<li>推荐</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>服务配置</p>\n<ul>\n<li>config\n<ul>\n<li>不推荐</li>\n</ul>\n</li>\n<li>apolo</li>\n<li>Nacos\n<ul>\n<li>推荐</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>服务总线</p>\n<ul>\n<li>Bus\n<ul>\n<li>不推荐</li>\n</ul>\n</li>\n<li>Nacos\n<ul>\n<li>推荐</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"微服务架构编码构建\"><a class=\"markdownIt-Anchor\" href=\"#微服务架构编码构建\">#</a> 微服务架构编码构建</h2>\n<ul>\n<li><span style = 'background-color : #f00'>约定 &gt; 配置 &gt; 编码</span></li>\n</ul>\n<h3 id=\"idea新建project工作空间\"><a class=\"markdownIt-Anchor\" href=\"#idea新建project工作空间\">#</a> IDEA 新建 Project 工作空间</h3>\n<ul>\n<li>\n<p><code>pom.xml</code></p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>modelVersion</span><span class=\"token punctuation\">></span></span>4.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>modelVersion</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>cn.wenhe9<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>cn.wenhe9.springcloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0-SNAPSHOT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>packaging</span><span class=\"token punctuation\">></span></span>pom<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>packaging</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">&lt;!-- 统一管理 jar 包版本 --></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project.build.sourceEncoding</span><span class=\"token punctuation\">></span></span>utf-8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project.build.sourceEncoding</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>maven.compiler.source</span><span class=\"token punctuation\">></span></span>1.8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>maven.compiler.source</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>maven.compiler.target</span><span class=\"token punctuation\">></span></span>1.8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>maven.compiler.target</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>junit.version</span><span class=\"token punctuation\">></span></span>4.12<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>junit.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>log4j.version</span><span class=\"token punctuation\">></span></span>1.2.17<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>log4j.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>lombok.version</span><span class=\"token punctuation\">></span></span>1.16.18<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>lombok.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mysql.version</span><span class=\"token punctuation\">></span></span>8.0.24<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mysql.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>druid.version</span><span class=\"token punctuation\">></span></span>1.1.16<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>druid.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mybatis.spring.boot.version</span><span class=\"token punctuation\">></span></span>1.3.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mybatis.spring.boot.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token comment\">&lt;!-- 子模块继承之后，提供作用：锁定版本 + 子 module 不用写 groupId 和 version--></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencyManagement</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token comment\">&lt;!--spring boot 2.2.2--></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-dependencies<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.3.12.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>type</span><span class=\"token punctuation\">></span></span>pom<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>type</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>import<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token comment\">&lt;!--spring cloud Hoxton.SR12--></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-dependencies<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>Hoxton.SR12<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>type</span><span class=\"token punctuation\">></span></span>pom<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>type</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>import<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>      <span class=\"token comment\">&lt;!--spring cloud alibaba 2.1.0.RELEASE--></span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-alibaba-dependencies<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.1.0.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>type</span><span class=\"token punctuation\">></span></span>pom<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>type</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>import<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>      <span class=\"token comment\">&lt;!--mysql--></span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>mysql<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mysql-connector-java<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;mysql.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>      <span class=\"token comment\">&lt;!--druid--></span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>druid<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;druid.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>      <span class=\"token comment\">&lt;!--mybatis-spring-boot--></span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.mybatis.spring.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mybatis-spring-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;mybatis.spring.boot.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencyManagement</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-maven-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>fork</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>fork</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>addResources</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>addResources</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token comment\"><div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">- 项目功能</span><br><span class=\"line\">  - ![微信截图_20220114220759](http://tuchuang.wenhe9.cn/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220114220759.png)</span><br><span class=\"line\">- 采用模块化构建</span><br><span class=\"line\">- 采用``restful``API风格</span><br><span class=\"line\">- 将公共类做抽取</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## Eureka服务注册与发现</span><br><span class=\"line\"></span><br><span class=\"line\">### Eureka基础知识</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 什么是服务治理</span><br><span class=\"line\"></span><br><span class=\"line\">- Spring Cloud 封装了 Netflix 公司开发的 Eureka 模块实现服务治理</span><br><span class=\"line\">- 在传统的rpc远程调用框架中，管理每个服务与服务之间依赖关系比较复杂，管理比较复杂，所以需要使用服务治理，管理服务与服务之间的依赖关系，可以实现服务调用、负载均衡、容错等，实现服务发现与注册</span><br><span class=\"line\">  -  N多个服务消费者，N多个服务提供者，你调我我调你，需要管理机制，来更好的提供实现 </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 什么是服务注册与发现</span><br><span class=\"line\"></span><br><span class=\"line\">- Eureka采用了CS的设计架构，Eureka Server作为服务注册功能的服务器，他是服务注册中心，而系统中的其他微服务，使用Eureka的客户端连接到Eureka Server并维持心跳。这样系统的维护人员就可以通过Eureka Server 来监控系统中各个微服务是否正常运行。</span><br><span class=\"line\">- 在服务注册与发现中，有一个注册中心。当服务器启动的时候，会把当前自己服务器的信息，比如服务地址通讯地址等以别名方式注册到注册中心上。另一方(消费者|服务提供者)，以该别名的方式去注册中心上获取到实际的服务通讯地址，然后再实现本地RPC调用RPC远程调用框架核心设计思想：在于注册中心，因为使用注册中心管理每个服务与服务之间的一个依赖关系（服务治理概念）。在任何rpc远程框架中，都会有一个注册中心（存放服务地址相关的信息（接口地址））</span><br><span class=\"line\">- ![image-20220115144812970](http://tuchuang.wenhe9.cn/image-20220115144812970.png)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; Eureka两组件</span><br><span class=\"line\"></span><br><span class=\"line\">- Eureka包含两个组件：Eureka Server 和 Eureka Client</span><br><span class=\"line\">- Eureka Server提供服务注册服务</span><br><span class=\"line\">  - 各个微服务节点通过配置启动后，会在EurekaServer中进行注册，这样的EurekaServer中的服务注册表中将会存储所有可用服务节点的信息，服务节点的信息可以在界面中直观的看到</span><br><span class=\"line\">- EurekaClient通过注册中心进行访问</span><br><span class=\"line\">  - 是一个Java客户端，用于简化Eureka Server的交互，客户端同时也具备一个内置的、使用轮询(round-robin)负载算法的负载均衡器。在应用启动后，将会向Eureka Server发送心跳（默认周期为30秒）。如果EurekaServer在多个心跳周期内没有接收到某个节点的心跳，EurekaServer将会从服务注册表中把这个服务节点移除（90秒）</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">### 单机Eureka构建步骤</span><br><span class=\"line\"></span><br><span class=\"line\">- 导入依赖</span><br><span class=\"line\"></span><br><span class=\"line\">  - 服务端</span><br><span class=\"line\"></span><br><span class=\"line\">    - ```xml</span><br><span class=\"line\">      &lt;dependency&gt;</span><br><span class=\"line\">          &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">          &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;</span><br><span class=\"line\">      &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></div></div></span></pre></td></tr></table></figure></li>\n<li>\n<p>客户端</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-netflix-eureka-client<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"><div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- yml进行配置</span><br><span class=\"line\"></span><br><span class=\"line\">  - 服务端</span><br><span class=\"line\"></span><br><span class=\"line\">    - ```yaml</span><br><span class=\"line\">      eureka:</span><br><span class=\"line\">        instance:</span><br><span class=\"line\">          hostname: localhost</span><br><span class=\"line\">        client:</span><br><span class=\"line\">          # false 表示不向注册中心注册自己</span><br><span class=\"line\">          register-with-eureka: false</span><br><span class=\"line\">          # false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span><br><span class=\"line\">          fetch-registry: false</span><br><span class=\"line\">          service-url:</span><br><span class=\"line\">            defalutZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span><br></pre></td></tr></table></figure></div></div></span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>客户端</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Yaml\"><figure class=\"iseeu highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">eureka</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">client</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\"># 表示是否将自己注册到 EurekaServer 默认为 true</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">register-with-eureka</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\"># 是否从 EurekaServer 抓取自己的注册信息，默认为 true，单节点无所谓，集群必须配置为 true 才能配合 ribbon 使用负载均衡</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">fetch-registry</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">service-url</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token key atrule\">defaultZone</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span>7001/eureka/</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>&lt;<span class=\"token tag\">!--code</span>￼2<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span><span class=\"token punctuation\">></span></pre></td></tr></table></figure></div></li>\n<li>\n<p>注册中心二</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Yaml\"><figure class=\"iseeu highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">7002</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> cloud<span class=\"token punctuation\">-</span>eureka<span class=\"token punctuation\">-</span>server<span class=\"token punctuation\">-</span><span class=\"token number\">7002</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token key atrule\">eureka</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token key atrule\">instance</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token key atrule\">hostname</span><span class=\"token punctuation\">:</span> eureka7002.com</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token key atrule\">client</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token key atrule\">register-with-eureka</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token key atrule\">fetch-registry</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token key atrule\">service-url</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token key atrule\">defaultZone</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//eureka7001.com<span class=\"token punctuation\">:</span>7001/eureka</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>&lt;<span class=\"token tag\">!--code</span>￼3<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span><span class=\"token punctuation\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>服务提供者集群只需要更改启动的端口号即可，应用名称就是集群的名称</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"actuator微服务信息完整\"><a class=\"markdownIt-Anchor\" href=\"#actuator微服务信息完整\">#</a> actuator 微服务信息完整</h3>\n<ul>\n<li>\n<p>主机名称：服务名称修改</p>\n<ul>\n<li>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220115190200323.png\"\n                      alt=\"image-20220115190200323\"\n                ></p>\n</li>\n<li>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220115190222256.png\"\n                      alt=\"image-20220115190222256\"\n                ></p>\n</li>\n</ul>\n</li>\n<li>\n<p>访问信息有 IP 信息提示</p>\n<ul>\n<li><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220115190317819.png\"\n                      alt=\"image-20220115190317819\"\n                ></li>\n<li>这样右下角有 ip 提示</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"服务发现discovery\"><a class=\"markdownIt-Anchor\" href=\"#服务发现discovery\">#</a> 服务发现 Discovery</h3>\n<ul>\n<li>\n<p>对于注册进 eureka 里面的微服务，可以通过服务发现来获得该服务的信息</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/payment/discovery\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">getServices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> services <span class=\"token operator\">=</span> discoveryClient<span class=\"token punctuation\">.</span><span class=\"token function\">getServices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> service <span class=\"token operator\">:</span> services<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"service : &#123;&#125;\"</span><span class=\"token punctuation\">,</span> service<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ServiceInstance</span><span class=\"token punctuation\">></span></span> instanceList <span class=\"token operator\">=</span> discoveryClient<span class=\"token punctuation\">.</span><span class=\"token function\">getInstances</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CLOUD-PAYMENT=SERVICE\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ServiceInstance</span> serviceInstance <span class=\"token operator\">:</span> instanceList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>serviceInstance<span class=\"token punctuation\">.</span><span class=\"token function\">getServiceId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t\"</span> <span class=\"token operator\">+</span> serviceInstance<span class=\"token punctuation\">.</span><span class=\"token function\">getHost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t\"</span> <span class=\"token operator\">+</span> serviceInstance<span class=\"token punctuation\">.</span><span class=\"token function\">getPort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t\"</span> <span class=\"token operator\">+</span> serviceInstance<span class=\"token punctuation\">.</span><span class=\"token function\">getUri</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>discoveryClient<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">4</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"eureka-自我保护\"><a class=\"markdownIt-Anchor\" href=\"#eureka-自我保护\">#</a> Eureka 自我保护</h3>\n<ul>\n<li>\n<p>故障现象</p>\n<ul>\n<li>概述\n<ul>\n<li>保护模式主要用于一组客户端和 EurekaServer 之间存在网络分区场景下的保护</li>\n<li>一旦进入保护模式，<span style=\"background-color : #f00\">EurekaServer 将会尝试保护其他服务注册表中的信息，不再删除服务注册表中的数据，也就是不会注销任何微服务</span></li>\n<li>如果在 EurekaServer 的首页看到以下这段信息，则说明 Eureka 进入了保护模式</li>\n<li><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220115210250803.png\"\n                      alt=\"image-20220115210250803\"\n                ></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>导致原因</p>\n<ul>\n<li>某时刻某一个微服务不可用了，Eureka 不会立刻清理依旧会对微服务的信息进行保存</li>\n<li>属于 CAP 里面的 AP 分支</li>\n</ul>\n</li>\n<li>\n<p>为什么会产生 Eureka 自我保护机制？</p>\n<ul>\n<li>为了防止 EurekaClient 可以正常运行，但是与 EurekaServer 网络不通情况下，EurekaServer 不会立刻将 EurekaClient 服务剔除</li>\n</ul>\n</li>\n<li>\n<p>什么是自我保护模式？</p>\n<ul>\n<li>默认情况下，如果 EurekaServer 在一定时间内没有接收到某个微服务实例的心跳，EurekaServer 将会注销实例（默认 90 秒）。但是当网络分区故障发生时（延时、卡顿、拥挤）时，微服务与 EurekaServer 之间无法正常通信，以上行为可能变得非常危险了 —— 因为微服务本事其实是健康的，此时不应该注销这个服务，Eureka 通过 “自我保护模式” 来解决这个问题 —— 当 EurekaServer 节点在短时间内丢失过多客户端时（可能发生了网络分区故障），那么这个节点就会进入自我保护模式</li>\n<li><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220115212752880.png\"\n                      alt=\"image-20220115212752880\"\n                ></li>\n</ul>\n</li>\n<li>\n<p><span style=\"background-color : #f00\">在自我保护模式中，EurekaServer 会保护服务注册表中的信息，不再注销任何服务实例</span></p>\n</li>\n<li>\n<p>他的涉及哲学就是宁可保留错误的服务注册信息，也不盲目的注销任何可能健康的服务实例</p>\n</li>\n<li>\n<p>综上，自我保护模式是一种应对网络异常的安全保护措施，他的架构哲学是宁可同时保留所有微服务（健康的微服务和不健康的微服务都会保留）也不盲目的注销任何健康的微服务。使用自我保护模式，可以让 Eureka 集群更加的健壮和稳定.</p>\n</li>\n<li>\n<p>关闭自我保护</p>\n<ul>\n<li>\n<p>注册中心</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Yaml\"><figure class=\"iseeu highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\"># 关闭自我保护机制，保证不可用服务被及时删除</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">enable-self-preservation</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">eviction-interval-timer-in-ms</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2000</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>&lt;<span class=\"token tag\">!--code</span>￼5<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span><span class=\"token punctuation\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"zookeeper服务注册与发现\"><a class=\"markdownIt-Anchor\" href=\"#zookeeper服务注册与发现\">#</a> Zookeeper 服务注册与发现</h2>\n<ul>\n<li>\n<p>启动 Zookeeper 服务，自己搭建或者使用 docker 均可</p>\n</li>\n<li>\n<p>导入依赖</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-zookeeper-discovery<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"><div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 配置（服务提供者和消费者一样）</span><br><span class=\"line\"></span><br><span class=\"line\">  - ```yaml</span><br><span class=\"line\">    server:</span><br><span class=\"line\">      port: 8004</span><br><span class=\"line\">    spring:</span><br><span class=\"line\">      application:</span><br><span class=\"line\">        name: cloud-provider-payment</span><br><span class=\"line\">      cloud:</span><br><span class=\"line\">        zookeeper:</span><br><span class=\"line\">          connect-string: 39.106.88.176:2181</span><br></pre></td></tr></table></figure></div></div></span></pre></td></tr></table></figure></li>\n<li>\n<p>同样是根据 <code>spring.application.name</code>  来区分的</p>\n</li>\n</ul>\n</li>\n<li>\n<p>主类需要 <code>@EnableDiscoveryClient</code>  注解</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>wenhe9<span class=\"token punctuation\">.</span>springcloud</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringApplication</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootApplication</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>discovery<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnableDiscoveryClient</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @author DuJinliang</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * 2022/1/16</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @EnableDiscoveryClient 该注解用于向使用 consul 或者 zookeeper 作为注册中心时注册服务</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token annotation punctuation\">@EnableDiscoveryClient</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PaymentMain8004</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PaymentMain8004</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">7</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>调用</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>wenhe9<span class=\"token punctuation\">.</span>springcloud<span class=\"token punctuation\">.</span>controller</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span>extern<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Slf4j</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GetMapping</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestController</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestTemplate</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Resource</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @author DuJinliang</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * 2022/1/16</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderZKController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">INVOKE_URL</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"http://cloud-provider-payment\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token annotation punctuation\">@Resource</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">RestTemplate</span> restTemplate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/consumer/payment/zk\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">paymentInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> restTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">getForObject</span><span class=\"token punctuation\">(</span><span class=\"token constant\">INVOKE_URL</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"/payment/zk\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">8</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>编写配置</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Yaml\"><figure class=\"iseeu highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8006</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> consul<span class=\"token punctuation\">-</span>provider<span class=\"token punctuation\">-</span>payment</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">consul</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> 39.106.88.176</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8500</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token key atrule\">discovery</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token key atrule\">service-name</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">&#123;</span>spring.application.name<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token key atrule\">heartbeat</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>          <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token key atrule\">prefer-ip-address</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>&lt;<span class=\"token tag\">!--code</span>￼9<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span><span class=\"token punctuation\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"openfeign服务调用\"><a class=\"markdownIt-Anchor\" href=\"#openfeign服务调用\">#</a> OpenFeign 服务调用</h2>\n<h3 id=\"概述\"><a class=\"markdownIt-Anchor\" href=\"#概述\">#</a> 概述</h3>\n<blockquote>\n<p>OpenFeign 是什么</p>\n</blockquote>\n<ul>\n<li>Feign 是一个声明式的 Web 服务客户端，让编写 Web 服务客户端变得非常容易，只需要创建一个接口并在接口上添加注解即可</li>\n</ul>\n<blockquote>\n<p>Feign 能干什么</p>\n</blockquote>\n<ul>\n<li>Feign 旨在使编写 Java Http 客户端变得容易</li>\n<li>前面在使用 Ribbon+RestTemplate 时，利用 RestTemplate 对 http 请求的封装处理，形成了一套模板化的调用方法。但是实际开发中，由于对服务依赖的调用可能不止一处，往往一个接口会被多处调用，所以通常都会针对每隔微服务自行封装一些客户端类来包装这些服务的调用，所以，Feign 在此基础上做了进一步封装由他来帮助我们定义和实现依赖服务接口的定义，在 Feign 的实现下，我们只需要创建一个接口并使用注解的方式来配置它（以前是 Dao 接口上面标注 Mapper 注解，现在是一个微服务接口上面标注一个 Feign 注解即可），即可完成对服务提供方的接口绑定，简化了使用 Spring Cloud Ribbon 时，自动封装服务调用客户端的开发量</li>\n<li>Feign 集成了 Ribbon\n<ul>\n<li>利用 Ribbon 维护了 Payment 的服务列表信息，并且通过轮询实现了客户端的负载均衡，而与 Ribbon 不同的是，通过 feign 只需要定义服务绑定接口且以声明式的方法，优雅简介的实现了服务调用</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>Feign 和 OpenFeign 的区别</p>\n</blockquote>\n<ul>\n<li><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220117151551910.png\"\n                      alt=\"image-20220117151551910\"\n                ></li>\n</ul>\n<h3 id=\"openfeign使用步骤\"><a class=\"markdownIt-Anchor\" href=\"#openfeign使用步骤\">#</a> OpenFeign 使用步骤</h3>\n<ul>\n<li>\n<p>导入依赖</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-openfeign<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"><div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">- 主启动</span><br><span class=\"line\"></span><br><span class=\"line\">- ```java</span><br><span class=\"line\">  package cn.wenhe9.springcloud;</span><br><span class=\"line\">  </span><br><span class=\"line\">  import org.springframework.boot.SpringApplication;</span><br><span class=\"line\">  import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\">  import org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class=\"line\">  import org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class=\"line\">  import org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class=\"line\">  </span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * @author DuJinliang</span><br><span class=\"line\">   * 2022/1/17</span><br><span class=\"line\">   */</span><br><span class=\"line\">  @SpringBootApplication</span><br><span class=\"line\">  @EnableFeignClients</span><br><span class=\"line\">  public class OpenFeignOrder8002 &#123;</span><br><span class=\"line\">      public static void main(String[] args) &#123;</span><br><span class=\"line\">          SpringApplication.run(OpenFeignOrder8002.class, args);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure></div></div></span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>业务类</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>wenhe9<span class=\"token punctuation\">.</span>springcloud<span class=\"token punctuation\">.</span>service</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>wenhe9<span class=\"token punctuation\">.</span>springcloud<span class=\"token punctuation\">.</span>entities<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Payment</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>wenhe9<span class=\"token punctuation\">.</span>springcloud<span class=\"token punctuation\">.</span>vo<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ResponseResult</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>openfeign<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FeignClient</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Component</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GetMapping</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PathVariable</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @author DuJinliang</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * 2022/1/17</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token annotation punctuation\">@FeignClient</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CLOUD-PAYMENT-SERVICE\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">PaymentFeignService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/payment/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token class-name\">ResponseResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Payment</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getPaymentById</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">11</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>Feign 自带负载均衡配置项</p>\n</li>\n</ul>\n<h3 id=\"openfeign超时控制\"><a class=\"markdownIt-Anchor\" href=\"#openfeign超时控制\">#</a> OpenFeign 超时控制</h3>\n<ul>\n<li>\n<p>OpenFeign 默认等待 1 秒钟，超过后报错</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Yaml\"><figure class=\"iseeu highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">ribbon</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">ReadTimeout</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5000</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">ConnectTimeout</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5000</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>&lt;<span class=\"token tag\">!--code</span>￼12<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span><span class=\"token punctuation\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>YML 文件里需要开启日志的 Feign 客户端</p>\n</blockquote>\n<div class=\"highlight-container\" data-rel=\"Yaml\"><figure class=\"iseeu highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">logging:</span></span><br><span class=\"line\">  <span class=\"attr\">level:</span></span><br><span class=\"line\">    <span class=\"comment\">#Feign日志以什么级别监控哪个接口</span></span><br><span class=\"line\">    <span class=\"attr\">cn.wenhe9.springcloud.service.PaymentFeignService:</span> <span class=\"string\">debug</span></span><br></pre></td></tr></table></figure></div>\n<h2 id=\"hystrix断路器\"><a class=\"markdownIt-Anchor\" href=\"#hystrix断路器\">#</a> Hystrix 断路器</h2>\n<h3 id=\"概述-2\"><a class=\"markdownIt-Anchor\" href=\"#概述-2\">#</a> 概述</h3>\n<blockquote>\n<p>分布式系统面临的问题</p>\n</blockquote>\n<ul>\n<li>\n<p><mark>复杂分布式体系结构中的应用程序有数十个依赖关系，每个依赖关系在某些时候将不可避免的失败</mark></p>\n</li>\n<li>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220117164451853.png\"\n                      alt=\"image-20220117164451853\"\n                ></p>\n</li>\n<li>\n<p><mark>服务雪崩</mark></p>\n</li>\n<li>\n<p>多个微服务之间调用的时候，假设微服务 A 调用微服务 B 和微服务 C，微服务 B 和微服务 C 有调用其他的微服务，这就是所谓的<mark>删除</mark>。如果删除的链路上某个微服务的响应时间过长或者不可用，对微服务 A 的调用就会占用越来越多的系统资源，进而引发系统崩溃，所谓的，“雪崩效应”</p>\n</li>\n<li>\n<p>对于高流量的应用来说，单一的后端依赖可能会导致所有服务器上的所有资源都在几秒钟内饱和，鄙视白更糟糕的是，这些应用程序还可能导致服务之间的延迟增加，备份队列，线程和其他系统资源紧张，导致整个系统发生更多的级联故障，这些都表示需要对故障和延迟进行隔离和管理，以便单个依赖关系的失败，不能取消整个应用程序或系统</p>\n</li>\n<li>\n<p>所以，通常当你发现一个模块下的某个实例失败后，这时候这个模块依然还会接收流量，然后这个有问题的模块还调用了其他的模块，这样就会发生级联故障，或者叫雪崩</p>\n</li>\n</ul>\n<blockquote>\n<p>Hystrix 是什么</p>\n</blockquote>\n<ul>\n<li>Hystix 是一个用于处理分布式系统的延迟和容错的开源库，在分布式系统里，许多依赖不可避免的调用失败，比如超时、异常等，Hystrix 能够保证在一个依赖出现问题的情况下，<mark>不会导致整体服务失败，避免级联故障，以提供分布式系统的弹性</mark></li>\n<li>&quot;断路器&quot; 本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控（类似熔断保险丝），<mark>向调用方返回一个符合预期的、可处理的备选响应（FallBack），而不是长时间的等待或者抛出调用方法无法处理的异常</mark>，这样就保证了服务调用放的线程不会被长时间、不必要的占用，从而避免了故障在分布式系统中的蔓延，乃至雪崩</li>\n</ul>\n<blockquote>\n<p>Hystrix 能干什么</p>\n</blockquote>\n<ul>\n<li>服务降级</li>\n<li>服务熔断</li>\n<li>接近实时的监控</li>\n<li>…</li>\n</ul>\n<h3 id=\"hystrix重要概念\"><a class=\"markdownIt-Anchor\" href=\"#hystrix重要概念\">#</a> Hystrix 重要概念</h3>\n<blockquote>\n<p>服务降级 fallback</p>\n</blockquote>\n<ul>\n<li>服务器繁忙，请稍后再试，不让客户端等待并立刻返回一个友好提示，fallback</li>\n<li>哪些情况会触发降级\n<ul>\n<li>程序运行异常</li>\n<li>超时</li>\n<li>服务熔断触发服务降级</li>\n<li>线程池 / 信号量打满也会导致服务降级</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>服务熔断 break</p>\n</blockquote>\n<ul>\n<li>类比保险丝达到最大访问后，直接拒绝访问，拉闸限电，然后调用服务降级的方法并返回友好提示</li>\n<li>就是保险丝\n<ul>\n<li>服务的降级 -&gt; 进而熔断 -&gt; 恢复调用链路</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>服务限流 flowlimit</p>\n</blockquote>\n<ul>\n<li>秒杀高并发等操作，严禁一窝蜂的过来拥挤，大家排队，一秒钟 N 个，有序进行</li>\n</ul>\n<h3 id=\"服务降级\"><a class=\"markdownIt-Anchor\" href=\"#服务降级\">#</a> 服务降级</h3>\n<ul>\n<li>\n<p>使用注解的方式，服务端和客户端都可以采用，当使用注解方式时，会优先采用注解的方式的服务降级</p>\n<ul>\n<li>\n<p>在主启动类上添加注解</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>wenhe9<span class=\"token punctuation\">.</span>springcloud</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringApplication</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootApplication</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>netflix<span class=\"token punctuation\">.</span>hystrix<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnableHystrix</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>openfeign<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnableFeignClients</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @author DuJinliang</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * 2022/1/17</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token annotation punctuation\">@EnableFeignClients</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token annotation punctuation\">@EnableHystrix</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderHystrixMain8002</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OrderHystrixMain8002</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">14</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>在类上面的全局服务降级</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>wenhe9<span class=\"token punctuation\">.</span>springcloud<span class=\"token punctuation\">.</span>controller</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>wenhe9<span class=\"token punctuation\">.</span>springcloud<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PaymentHystrixService</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>netflix<span class=\"token punctuation\">.</span>hystrix<span class=\"token punctuation\">.</span>contrib<span class=\"token punctuation\">.</span>javanica<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DefaultProperties</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>netflix<span class=\"token punctuation\">.</span>hystrix<span class=\"token punctuation\">.</span>contrib<span class=\"token punctuation\">.</span>javanica<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HystrixCommand</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>netflix<span class=\"token punctuation\">.</span>hystrix<span class=\"token punctuation\">.</span>contrib<span class=\"token punctuation\">.</span>javanica<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HystrixProperty</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span>extern<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Slf4j</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GetMapping</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PathVariable</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestController</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Resource</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> * @author DuJinliang</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> * 还不错，就是这个屏幕不大行</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> * 2022/1/17</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token annotation punctuation\">@DefaultProperties</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        defaultFallback <span class=\"token operator\">=</span> <span class=\"token string\">\"paymentGlobalFallbackMethod\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        commandProperties <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token annotation punctuation\">@HystrixProperty</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"execution.isolation.thread.timeoutInMilliseconds\"</span><span class=\"token punctuation\">,</span> value <span class=\"token operator\">=</span> <span class=\"token string\">\"2000\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderHystrixController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token annotation punctuation\">@Resource</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">PaymentHystrixService</span> paymentHystrixService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/consumer/payment/hystrix/ok/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">paymentInfoOk</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> paymentHystrixService<span class=\"token punctuation\">.</span><span class=\"token function\">paymentInfoOk</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">//    @HystrixCommand(</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">//            fallbackMethod = \"paymentInfoTimeoutHandler\",</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">//            commandProperties = &#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">//                @HystrixProperty(name = \"execution.isolation.thread.timeoutInMilliseconds\", value = \"5000\")</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">//            &#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\">//    )</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/payment/hystrix/timeout/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token annotation punctuation\">@HystrixCommand</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token class-name\">String</span> <span class=\"token function\">paymentInfoTimeout</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> paymentHystrixService<span class=\"token punctuation\">.</span><span class=\"token function\">paymentInfoTimeout</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">paymentInfoTimeoutHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"我是80，你错了！滚！\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">paymentGlobalFallbackMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"我是80，你错了！滚！越远越好！\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">15</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>PaymentFallbackService</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>wenhe9<span class=\"token punctuation\">.</span>springcloud<span class=\"token punctuation\">.</span>service</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Component</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @author DuJinliang</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * 2022/1/19</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PaymentFallbackService</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">PaymentHystrixService</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">paymentInfoOk</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"----- PaymentFallbackService fall back-paymentInfo_ok. 失败了\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">paymentInfoTimeout</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"----- PaymentFallbackService fall back-paymentInfo_ok. 失败了\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">16</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"服务熔断\"><a class=\"markdownIt-Anchor\" href=\"#服务熔断\">#</a> 服务熔断</h3>\n<blockquote>\n<p>熔断是什么</p>\n</blockquote>\n<ul>\n<li>熔断机制概述\n<ul>\n<li>熔断机制是应对雪崩效应的一种微服务链路保护机制。当扇出链路的某个微服务出错不可用或者响应时间太长时，会进行服务的降级，进而熔断该节点微服务的调用，快速返回错误的相应信息</li>\n<li><mark>当检测到该节点的微服务调用相应正常后，恢复调用链路</mark></li>\n</ul>\n</li>\n<li>在 Spring Cloud 框架里，熔断机制通过 Hystrix 实现，Hystrix 会监控微服务间的调用情况</li>\n<li>当失败的调用到一定阈值时，缺省是 5 秒内 20 次调用失败，就会启动熔断机制，熔断机制的注解是 <code>@hystrixCommand</code></li>\n</ul>\n<p><mark>调用失败会触发降级，而降级会调用 fallback 方法，但无论如何降级的流程一定会先调用正常方法再调用 fallback 方法，假如单位时间内调用失败次数过多，也就是降级次数过多，则触发熔断机制，熔断以后就会跳过正常方法直接调用 fallback 方法，所谓 “熔断后服务不可用”，就是因为跳过了正常方法直接执行 fallback</mark></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220119230024082.png\"\n                      alt=\"image-20220119230024082\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220119230112586.png\"\n                      alt=\"image-20220119230112586\"\n                ></p>\n<ul>\n<li>当 I 秒的睡眠窗口时间结束，就创建一个新的包，其他的就会划过并被放弃</li>\n</ul>\n<blockquote>\n<p>原来的主逻辑要如何恢复呢</p>\n</blockquote>\n<ul>\n<li>对于这一问题，hystrix 为我们提供了自动恢复功能</li>\n<li>当断路器打开，对主逻辑进行熔断之后，hystrix 会启动一个休眠时间窗，在这个时间窗内，降级逻辑是临时的称为主逻辑，当休眠时间窗到期，断路器将进入半开状态，释放一次请求到原来的主逻辑上，如果此次请求正常返回，那么断路器将继续闭合，主逻辑恢复，如果此次请求依然有问题，断路器继续进入打开状态，休眠时间窗重新计时</li>\n</ul>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.wenhe9.springcloud.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> cn.hutool.core.util.IdUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixProperty;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.conf.HystrixPropertiesManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.commons.util.IdUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> DuJinliang</span></span><br><span class=\"line\"><span class=\"comment\"> * 2022/1/17</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PaymentService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//服务降级</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 正常访问，肯定ok</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">paymentInfoOk</span><span class=\"params\">(Integer id)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;线程 ： +&quot;</span> + Thread.currentThread().getName() + <span class=\"string\">&quot; paymentInfoOk, id : &quot;</span> + id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 正常访问，肯定ok</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@HystrixCommand(</span></span><br><span class=\"line\"><span class=\"meta\">            fallbackMethod = &quot;paymentInfoTimeoutHandler&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">            commandProperties = &#123;</span></span><br><span class=\"line\"><span class=\"meta\">                    @HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;, value = &quot;4000&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">            &#125;</span></span><br><span class=\"line\"><span class=\"meta\">    )</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">paymentInfoTimeout</span><span class=\"params\">(Integer id)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">10</span> / <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            TimeUnit.SECONDS.sleep(<span class=\"number\">3</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;线程 ： +&quot;</span> + Thread.currentThread().getName() + <span class=\"string\">&quot; paymentInfoTimeout, id : &quot;</span> + id + <span class=\"string\">&quot;耗时三秒钟&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">paymentInfoTimeoutHandler</span><span class=\"params\">(Integer id)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;线程 ： +&quot;</span> + Thread.currentThread().getName() + <span class=\"string\">&quot; paymentInfoTimeoutHandler, &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//===服务熔断</span></span><br><span class=\"line\">    <span class=\"meta\">@HystrixCommand(</span></span><br><span class=\"line\"><span class=\"meta\">        fallbackMethod = &quot;paymentCircuitBreakerFallback&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">        commandProperties = &#123;</span></span><br><span class=\"line\"><span class=\"meta\">            @HystrixProperty(name = HystrixPropertiesManager.CIRCUIT_BREAKER_ENABLED, value = &quot;true&quot;), //是否开启断路器</span></span><br><span class=\"line\"><span class=\"meta\">            @HystrixProperty(</span></span><br><span class=\"line\"><span class=\"meta\">                    name = HystrixPropertiesManager.CIRCUIT_BREAKER_REQUEST_VOLUME_THRESHOLD,</span></span><br><span class=\"line\"><span class=\"meta\">                    value = &quot;10&quot;), //请求次数</span></span><br><span class=\"line\"><span class=\"meta\">            @HystrixProperty(</span></span><br><span class=\"line\"><span class=\"meta\">                    name = HystrixPropertiesManager.CIRCUIT_BREAKER_SLEEP_WINDOW_IN_MILLISECONDS,</span></span><br><span class=\"line\"><span class=\"meta\">                    value = &quot;10000&quot;), //时间窗口期 / 时间范围</span></span><br><span class=\"line\"><span class=\"meta\">            @HystrixProperty(</span></span><br><span class=\"line\"><span class=\"meta\">                    name = HystrixPropertiesManager.CIRCUIT_BREAKER_ERROR_THRESHOLD_PERCENTAGE,</span></span><br><span class=\"line\"><span class=\"meta\">                    value = &quot;60&quot;) //失败率达到多少后跳闸</span></span><br><span class=\"line\"><span class=\"meta\">        &#125;</span></span><br><span class=\"line\"><span class=\"meta\">    )</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">paymentCircuitBreaker</span><span class=\"params\">(Integer id)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (id &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;*** id 不能为 负数&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">serialNumber</span> <span class=\"operator\">=</span> IdUtil.simpleUUID();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Thread.currentThread().getName() + <span class=\"string\">&quot;\\t调用成功，流水号 : &quot;</span> + serialNumber;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">paymentCircuitBreakerFallback</span><span class=\"params\">(Integer id)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;id 不能为负数，请稍后再试 &quot;</span> + id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<h3 id=\"图形化监控\"><a class=\"markdownIt-Anchor\" href=\"#图形化监控\">#</a> 图形化监控</h3>\n<ul>\n<li>\n<p>建立一个单独的项目，导入依赖</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-netflix-hystrix-dashboard<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-web<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-actuator<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"><div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 编写配置</span><br><span class=\"line\"></span><br><span class=\"line\">  - ```yaml</span><br><span class=\"line\">    server:</span><br><span class=\"line\">      port: 9001</span><br><span class=\"line\">    hystrix:</span><br><span class=\"line\">      dashboard:</span><br><span class=\"line\">        proxy-stream-allow-list: localhost</span><br></pre></td></tr></table></figure></div></div></span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>注解启动</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>wenhe9<span class=\"token punctuation\">.</span>springcloud</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringApplication</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootApplication</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>netflix<span class=\"token punctuation\">.</span>hystrix<span class=\"token punctuation\">.</span>dashboard<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnableHystrixDashboard</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @author DuJinliang</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * 2022/1/20</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token annotation punctuation\">@EnableHystrixDashboard</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HystrixDashboard9001</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HystrixDashboard9001</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">19</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"gateway服务网关\"><a class=\"markdownIt-Anchor\" href=\"#gateway服务网关\">#</a> Gateway 服务网关</h2>\n<h3 id=\"概述-3\"><a class=\"markdownIt-Anchor\" href=\"#概述-3\">#</a> 概述</h3>\n<blockquote>\n<p>是什么？</p>\n</blockquote>\n<ul>\n<li>Spring Cloud Gateway 使用的 Webflux 中的 reactor-netty 响应式编程组件，底层使用了 Netty 通讯框架</li>\n<li>基于异步非阻塞模型进行开发的</li>\n</ul>\n<blockquote>\n<p>能干什么？</p>\n</blockquote>\n<ul>\n<li>反向代理</li>\n<li>鉴权</li>\n<li>流量控制</li>\n<li>熔断</li>\n<li>日志监控</li>\n<li>…</li>\n</ul>\n<blockquote>\n<p>微服务架构中网关在哪里</p>\n</blockquote>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220121173321528.png\"\n                      alt=\"image-20220121173321528\"\n                ></p>\n<blockquote>\n<p>特性</p>\n</blockquote>\n<ul>\n<li>基于 Spring Framework 5, Project Reactor 和 Spring Boo2.0 进行构建</li>\n<li>动态路由：能够匹配任何请求属性</li>\n<li>可以对路由指定 Predicate（断言）和 Filter（过滤器）</li>\n<li>集成 Hystrix 的断路器功能</li>\n<li>集成 Spring Cloud 服务发现功能</li>\n<li>易于编写的 Predicate（断言）和 Filter（过滤器）</li>\n<li>请求限流功能</li>\n<li>支持路径重写</li>\n</ul>\n<h3 id=\"三大核心概念\"><a class=\"markdownIt-Anchor\" href=\"#三大核心概念\">#</a> 三大核心概念</h3>\n<blockquote>\n<p>Route（路由）</p>\n</blockquote>\n<ul>\n<li>路由是构建网关的基本模块，他由 ID，目标 URI，一系列的断言和过滤器组成，如果断言为 true 则匹配该路由</li>\n</ul>\n<blockquote>\n<p>Predicate（断言）</p>\n</blockquote>\n<ul>\n<li>参考的是 Java8 的 java.util.function.Predicate</li>\n<li>开发人员可以匹配 HTTP 请求中的所有内容（例如请求头或请求参数），如果请求与断言相匹配则进行路由</li>\n</ul>\n<blockquote>\n<p>Filter（过滤）</p>\n</blockquote>\n<ul>\n<li>指的是 Spring 框架中 GatewayFilter 的实例，使用过滤器，可以在请求路由前或者之后对请求进行修改</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220121190645557.png\"\n                      alt=\"image-20220121190645557\"\n                ></p>\n<h3 id=\"gateway工作流程\"><a class=\"markdownIt-Anchor\" href=\"#gateway工作流程\">#</a> Gateway 工作流程</h3>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220121191209732.png\"\n                      alt=\"Spring Cloud Gateway Diagram\"\n                ></p>\n<ul>\n<li>客户端向 Spring Cloud Gateway 发出请求，然后在 <code>Gateway Handler Mapping</code>  中找到与请求相匹配的路由，将其发送到 <code>Gateway Web Handler</code></li>\n<li>Handler 再通过指定的过滤器链来将请求发送到我们实际的服务执行业务逻辑，然后返回</li>\n<li>过滤器之间用虚线分开是因为过滤器可能在发送代理请求之前（“pre”）或之后（“post”）执行业务逻辑</li>\n<li>Filter 在 &quot;pre&quot; 类型的过滤器可以做参数校验、权限校验、流量监控、日志输出、协议转换等，在 &quot;post&quot; 类型的过滤器中可以做响应内容、响应头的修改，日志的输出，流量监控等有着非常重要的作用</li>\n</ul>\n<p><mark>核心逻辑</mark> : <mark>路由转发 + 执行过滤器链</mark></p>\n<h3 id=\"入门配置\"><a class=\"markdownIt-Anchor\" href=\"#入门配置\">#</a> 入门配置</h3>\n<ul>\n<li>\n<p>导入依赖</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-gateway<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"><div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 在启动类上声明注解</span><br><span class=\"line\"></span><br><span class=\"line\">  - ```java</span><br><span class=\"line\">    package cn.wenhe9.springcloud;</span><br><span class=\"line\">    </span><br><span class=\"line\">    import org.springframework.boot.SpringApplication;</span><br><span class=\"line\">    import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\">    import org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class=\"line\">    import org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @author DuJinliang</span><br><span class=\"line\">     * 2022/1/21</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @SpringBootApplication</span><br><span class=\"line\">    @EnableEurekaClient</span><br><span class=\"line\">    public class GatewayMain9627 &#123;</span><br><span class=\"line\">        public static void main(String[] args) &#123;</span><br><span class=\"line\">            SpringApplication.run(GatewayMain9627.class, args);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure></div></div></span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>编写配置，方式一</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Yaml\"><figure class=\"iseeu highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">9627</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> cloud<span class=\"token punctuation\">-</span>gateway</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">loadbalancer</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token key atrule\">ribbon</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token key atrule\">gateway</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token key atrule\">routes</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> payment_routh <span class=\"token comment\"># 路由的 id，没有固定规则但要求唯一，建议配合服务名</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>          <span class=\"token key atrule\">uri</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span><span class=\"token number\">8001</span> <span class=\"token comment\"># 匹配后提供服务的路由地址</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>          <span class=\"token key atrule\">predicates</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token punctuation\">-</span> Path=/payment/<span class=\"token important\">**</span> <span class=\"token comment\"># 断言，路径相匹配的进行路由</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token key atrule\">eureka</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token key atrule\">instance</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token key atrule\">hostname</span><span class=\"token punctuation\">:</span> cloud<span class=\"token punctuation\">-</span>gateway<span class=\"token punctuation\">-</span>service</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token key atrule\">client</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token key atrule\">register-with-eureka</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token key atrule\">fetch-registry</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token key atrule\">service-url</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token key atrule\">defaultZone</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//eureka7001.com<span class=\"token punctuation\">:</span>7001/eureka<span class=\"token punctuation\">,</span>http<span class=\"token punctuation\">:</span>//eureka7002.com<span class=\"token punctuation\">:</span>7002/eureka</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>&lt;<span class=\"token tag\">!--code</span>￼21<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span><span class=\"token punctuation\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"通过微服务名实现动态路由\"><a class=\"markdownIt-Anchor\" href=\"#通过微服务名实现动态路由\">#</a> 通过微服务名实现动态路由</h3>\n<ul>\n<li>\n<p>默认情况下，Gateway 会根据注册中心注册的服务列表，以注册中心上微服务名为路径创建动态路由进行转发，从而实现动态路由的功</p>\n</li>\n<li>\n<div class=\"highlight-container\" data-rel=\"Yaml\"><figure class=\"iseeu highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">9627</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> cloud<span class=\"token punctuation\">-</span>gateway</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">loadbalancer</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token key atrule\">ribbon</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token key atrule\">gateway</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token key atrule\">discovery</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token key atrule\">locator</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>          <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 开启从注册中心动态创建路由的功能，利用微服务名进行路由</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token key atrule\">routes</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> payment_routh <span class=\"token comment\"># 路由的 id，没有固定规则但要求唯一，建议配合服务名</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          <span class=\"token comment\"># uri: http://localhost:8001 # 匹配后提供服务的路由地址</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>          <span class=\"token key atrule\">uri</span><span class=\"token punctuation\">:</span> lb<span class=\"token punctuation\">:</span>//CLOUD<span class=\"token punctuation\">-</span>PAYMENT<span class=\"token punctuation\">-</span>SERVICE</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>          <span class=\"token key atrule\">predicates</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">-</span> Path=/payment/<span class=\"token important\">**</span> <span class=\"token comment\"># 断言，路径相匹配的进行路由</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token key atrule\">eureka</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token key atrule\">instance</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token key atrule\">hostname</span><span class=\"token punctuation\">:</span> cloud<span class=\"token punctuation\">-</span>gateway<span class=\"token punctuation\">-</span>service</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token key atrule\">client</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token key atrule\">register-with-eureka</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token key atrule\">fetch-registry</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token key atrule\">service-url</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token key atrule\">defaultZone</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//eureka7001.com<span class=\"token punctuation\">:</span>7001/eureka<span class=\"token punctuation\">,</span>http<span class=\"token punctuation\">:</span>//eureka7002.com<span class=\"token punctuation\">:</span>7002/eureka</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>&lt;<span class=\"token tag\">!--code</span>￼22<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span><span class=\"token punctuation\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n<h3 id=\"filter的使用\"><a class=\"markdownIt-Anchor\" href=\"#filter的使用\">#</a> Filter 的使用</h3>\n<blockquote>\n<p>是什么</p>\n</blockquote>\n<ul>\n<li>路由过滤器可用于修改进入的 HTTP 请求和返回的 HTTP 响应，路由过滤器只能指定路由进行使用</li>\n<li>Spring Cloud  Gateway 内置了多种路由过滤器，他们都由 GatewayFilter 的工厂类产生</li>\n</ul>\n<blockquote>\n<p>Spring Cloud Gateway 的 Filter</p>\n</blockquote>\n<ul>\n<li>\n<p>声明周期</p>\n<ul>\n<li>pre 业务逻辑之前</li>\n<li>post  业务逻辑之后</li>\n</ul>\n</li>\n<li>\n<p>种类</p>\n<ul>\n<li>GatewayFilter</li>\n<li>GlobalFilter</li>\n<li>看官网</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>自定义过滤器</p>\n</blockquote>\n<ul>\n<li>\n<p>自定义全局 GlobalFilter</p>\n<ul>\n<li>两个主要接口\n<ul>\n<li>GlobalFilter,Ordered</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>wenhe9<span class=\"token punctuation\">.</span>springcloud<span class=\"token punctuation\">.</span>filter</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span>extern<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Slf4j</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>gateway<span class=\"token punctuation\">.</span>filter<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GatewayFilterChain</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>gateway<span class=\"token punctuation\">.</span>filter<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GlobalFilter</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Ordered</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpStatus</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Component</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>server<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ServerWebExchange</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">reactor<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>publisher<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Mono</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Date</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> * @author DuJinliang</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> * 2022/1/21</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyLogGateWayFilter</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">GlobalFilter</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Ordered</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Mono</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServerWebExchange</span> exchange<span class=\"token punctuation\">,</span> <span class=\"token class-name\">GatewayFilterChain</span> chain<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"******come in MylogGatewayFilter: &#123;&#125;\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> exchange<span class=\"token punctuation\">.</span><span class=\"token function\">getRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getQueryParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFirst</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>username <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"******用户名为null，非法用户\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            exchange<span class=\"token punctuation\">.</span><span class=\"token function\">getResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setStatusCode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NOT_ACCEPTABLE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">return</span> exchange<span class=\"token punctuation\">.</span><span class=\"token function\">getResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setComplete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">return</span> chain<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>exchange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">23</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n<li>\n<p>编写配置</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Yaml\"><figure class=\"iseeu highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3344</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> cloud<span class=\"token punctuation\">-</span>config<span class=\"token punctuation\">-</span>center</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">config</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token key atrule\">git</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>          <span class=\"token key atrule\">uri</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//gitee.com/du<span class=\"token punctuation\">-</span>jinliang/springcloud<span class=\"token punctuation\">-</span>config.git</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          <span class=\"token key atrule\">search-paths</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">-</span> springcloud<span class=\"token punctuation\">-</span>config</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token key atrule\">label</span><span class=\"token punctuation\">:</span> master</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token key atrule\">eureka</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token key atrule\">client</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token key atrule\">register-with-eureka</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token key atrule\">service-url</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token key atrule\">defaultZone</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//eureka7001.com<span class=\"token punctuation\">:</span>7001/eureka<span class=\"token punctuation\">,</span>http<span class=\"token punctuation\">:</span>//eureka7002.com<span class=\"token punctuation\">:</span>7002/eureka</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>&lt;<span class=\"token tag\">!--code</span>￼24<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span><span class=\"token punctuation\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"config客户端配置与测试\"><a class=\"markdownIt-Anchor\" href=\"#config客户端配置与测试\">#</a> Config 客户端配置与测试</h3>\n<blockquote>\n<p>bootstrap.yml</p>\n</blockquote>\n<ul>\n<li>是什么？\n<ul>\n<li>application.yml 是用户级的资源配置项</li>\n<li>bootstrap.yml 是系统级的，优先级更高</li>\n</ul>\n</li>\n<li>Spring Cloud 会创建一个 “Bootstap Context”，作为 Spring 应用的 <code>Application Context</code>  的父上下文。初始化的时候， <code>Bootstrap Context</code>  负责从<mark>外部源</mark>加载配置属性并解析配置。这两个上下文共享一个从外部获取的 <code>Environment</code></li>\n<li><code>Boostrap</code>  属性有高优先级，默认情况下，他们不会被本地配置覆盖， <code>Bootstrap Context</code>  和  <code>Application Context</code>  有着不同的约定，所以新增了一个 <code>bootstrap.yml</code> ，保证 <code>Bootstrap Context</code>  和 <code>Application Context</code>  配置的分离</li>\n</ul>\n<p><mark>要将 client 模块下的 application.yml 文件改为 bootstrap.yml，这是很关键的</mark></p>\n<p>因为 <code>bootstrap.yml</code>  是比 <code>application.yml</code>  先加载的。 <code>bootstrap.yml</code>  优先级高于 <code>application.yml</code></p>\n<ul>\n<li>\n<p>导入依赖</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-config<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"><div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 编写配置</span><br><span class=\"line\"></span><br><span class=\"line\">  - ```yaml</span><br><span class=\"line\">    server:</span><br><span class=\"line\">      port: 3355</span><br><span class=\"line\">    spring:</span><br><span class=\"line\">      application:</span><br><span class=\"line\">        name: config-client</span><br><span class=\"line\">      cloud:</span><br><span class=\"line\">        # config客户端配置</span><br><span class=\"line\">        config:</span><br><span class=\"line\">          label: master # 分支名称</span><br><span class=\"line\">          name: config # 配置文件名称</span><br><span class=\"line\">          profile: dev # 读取后缀名称 上述是三个综合：master分支上的config-dev.yml的配置文件被读取</span><br><span class=\"line\">          uri: http://localhost:3344 # 配置中心地址</span><br><span class=\"line\">    eureka:</span><br><span class=\"line\">      client:</span><br><span class=\"line\">        register-with-eureka: false</span><br><span class=\"line\">        service-url:</span><br><span class=\"line\">          defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span><br></pre></td></tr></table></figure></div></div></span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>注解声明启动类</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>wenhe9<span class=\"token punctuation\">.</span>springcloud</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">jdk<span class=\"token punctuation\">.</span>nashorn<span class=\"token punctuation\">.</span>internal<span class=\"token punctuation\">.</span>runtime<span class=\"token punctuation\">.</span>regexp<span class=\"token punctuation\">.</span>joni<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Config</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringApplication</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootApplication</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>netflix<span class=\"token punctuation\">.</span>eureka<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnableEurekaClient</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @author DuJinliang</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * 2022/1/22</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token annotation punctuation\">@EnableEurekaClient</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConfigClientMain3355</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigClientMain3355</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">26</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n<li>\n<p>编写配置</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Yaml\"><figure class=\"iseeu highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">management</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">endpoints</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">web</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token key atrule\">exposure</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token key atrule\">include</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"*\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>&lt;<span class=\"token tag\">!--code</span>￼27<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span><span class=\"token punctuation\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>编写配置</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Yaml\"><figure class=\"iseeu highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3344</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> cloud<span class=\"token punctuation\">-</span>config<span class=\"token punctuation\">-</span>center</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">config</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token key atrule\">git</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>          <span class=\"token key atrule\">uri</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//gitee.com/du<span class=\"token punctuation\">-</span>jinliang/springcloud<span class=\"token punctuation\">-</span>config.git</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          <span class=\"token key atrule\">search-paths</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">-</span> springcloud<span class=\"token punctuation\">-</span>config</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token key atrule\">label</span><span class=\"token punctuation\">:</span> master</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\"># rabbitmq 相关配置</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token key atrule\">rabbitmq</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> 39.106.88.176</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5672</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> meteor</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"0209\"</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token key atrule\">virtual-host</span><span class=\"token punctuation\">:</span> wenhe9</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token key atrule\">eureka</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token key atrule\">client</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token key atrule\">register-with-eureka</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token key atrule\">service-url</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token key atrule\">defaultZone</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//eureka7001.com<span class=\"token punctuation\">:</span>7001/eureka<span class=\"token punctuation\">,</span>http<span class=\"token punctuation\">:</span>//eureka7002.com<span class=\"token punctuation\">:</span>7002/eureka</pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\"># rabbitmq 相关配置，暴露 bus 刷新配置的端点</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token key atrule\">management</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token key atrule\">endpoints</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 暴露 bus 刷新配置的端点</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token key atrule\">web</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token key atrule\">exposure</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token key atrule\">include</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"bus-refresh\"</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>&lt;<span class=\"token tag\">!--code</span>￼28<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span><span class=\"token punctuation\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>编写配置</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Yaml\"><figure class=\"iseeu highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3355</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> config<span class=\"token punctuation\">-</span>client</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\"># config 客户端配置</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token key atrule\">config</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token key atrule\">label</span><span class=\"token punctuation\">:</span> master <span class=\"token comment\"># 分支名称</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> config <span class=\"token comment\"># 配置文件名称</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token key atrule\">profile</span><span class=\"token punctuation\">:</span> dev <span class=\"token comment\"># 读取后缀名称 上述是三个综合：master 分支上的 config-dev.yml 的配置文件被读取</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token key atrule\">uri</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span><span class=\"token number\">3344</span> <span class=\"token comment\"># 配置中心地址</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\"># rabbitmq 相关配置</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token key atrule\">rabbitmq</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> 39.106.88.176</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5672</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> meteor</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"0209\"</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token key atrule\">virtual-host</span><span class=\"token punctuation\">:</span> wenhe9</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token key atrule\">eureka</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token key atrule\">client</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token key atrule\">service-url</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token key atrule\">defaultZone</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//eureka7001.com<span class=\"token punctuation\">:</span>7001/eureka<span class=\"token punctuation\">,</span>http<span class=\"token punctuation\">:</span>//eureka7002.com<span class=\"token punctuation\">:</span>7002/eureka</pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token key atrule\">management</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token key atrule\">endpoints</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token key atrule\">web</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token key atrule\">exposure</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token key atrule\">include</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"*\"</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>&lt;<span class=\"token tag\">!--code</span>￼29<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span><span class=\"token punctuation\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n<p>当需要定点刷新时，需附带目标，目标由应用名称和端口号组成</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-X</span> POST <span class=\"token string\">\"http://localhost:3344/actuator/bus-refresh/&#123;destination&#125;\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-X</span> POST <span class=\"token string\">\"http://localhsot:3344/actuator/bus-refresh/config-client:3355\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>--code￼30--<span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n<li>\n<p>编写配置</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Yaml\"><figure class=\"iseeu highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8802</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> cloud<span class=\"token punctuation\">-</span>stream<span class=\"token punctuation\">-</span>consuemr</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">rabbitmq</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> 39.106.88.176</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token key atrule\">virtual-host</span><span class=\"token punctuation\">:</span> wenhe9</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> meteor</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"0209\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5672</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token key atrule\">stream</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token key atrule\">binders</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 在此处配置与绑定的 rabbitmq 的消息服务</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token key atrule\">defaultRabbit</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 定义的名称，用于 binding 整合</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> rabbit</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>          <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>              <span class=\"token key atrule\">rabbitmq</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> 39.106.88.176</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token key atrule\">virtual-host</span><span class=\"token punctuation\">:</span> wenhe9</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> meteor</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"0209\"</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5672</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token key atrule\">bindings</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 服务的整合处理</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token key atrule\">input</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 这个名字是一个通道的名称</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>          <span class=\"token key atrule\">destination</span><span class=\"token punctuation\">:</span> studyExchange <span class=\"token comment\"># 表示用使用的 exchange 名称定义</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>          <span class=\"token key atrule\">content-type</span><span class=\"token punctuation\">:</span> application/json <span class=\"token comment\"># 设置消息类型，本次为 json 对象，如果是文本则设置 text/plain</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>          <span class=\"token key atrule\">binder</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span> defaultRabbit <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\"># 设置要绑定的消息服务的具体配置</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token key atrule\">eureka</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token key atrule\">client</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token key atrule\">service-url</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token key atrule\">defaultZone</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//eureka7001.com<span class=\"token punctuation\">:</span>7001/eureka<span class=\"token punctuation\">,</span>http<span class=\"token punctuation\">:</span>//eureka7002.com<span class=\"token punctuation\">:</span>7002/eureka</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token key atrule\">instance</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token key atrule\">lease-renewal-interval-in-seconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span> <span class=\"token comment\"># 设置心跳的时间间隔（默认是 30 秒）</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token key atrule\">lease-expiration-duration-in-seconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span> <span class=\"token comment\"># 失去心跳的最久时间</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token key atrule\">instance-id</span><span class=\"token punctuation\">:</span> send<span class=\"token punctuation\">-</span>8802.com <span class=\"token comment\"># 在信息列表时显示主机名称</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token key atrule\">prefer-ip-address</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 访问的路径变为 IP 地址</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>&lt;<span class=\"token tag\">!--code</span>￼31<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span><span class=\"token punctuation\">></span></pre></td></tr></table></figure></div></li>\n<li>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>wenhe9<span class=\"token punctuation\">.</span>springcloud<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span>impl</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>wenhe9<span class=\"token punctuation\">.</span>springcloud<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IMessageProvider</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span>extern<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Slf4j</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>stream<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnableBinding</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>stream<span class=\"token punctuation\">.</span>messaging<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Source</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>messaging<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Message</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>messaging<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MessageChannel</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>messaging<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MessageBuilder</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Service</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Resource</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UUID</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> * @author DuJinliang</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> * 2022/1/25</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> * 定义消息的推送管道</pre></td></tr><tr><td data-num=\"19\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token annotation punctuation\">@EnableBinding</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Source</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IMessageProviderImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">IMessageProvider</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     * 消息发送管道</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token annotation punctuation\">@Resource</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">MessageChannel</span> output<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">String</span> serial <span class=\"token operator\">=</span> <span class=\"token constant\">UUID</span><span class=\"token punctuation\">.</span><span class=\"token function\">randomUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">Message</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> message <span class=\"token operator\">=</span> <span class=\"token class-name\">MessageBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">withPayload</span><span class=\"token punctuation\">(</span>serial<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        output<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"****serial&#123;&#125;\"</span><span class=\"token punctuation\">,</span> serial<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">32</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"消息驱动之消费者\"><a class=\"markdownIt-Anchor\" href=\"#消息驱动之消费者\">#</a> 消息驱动之消费者</h3>\n<ul>\n<li>\n<p>导入依赖</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-stream-rabbit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"><div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 编写配置</span><br><span class=\"line\"></span><br><span class=\"line\">  - ```yaml</span><br><span class=\"line\">    server:</span><br><span class=\"line\">      port: 8802</span><br><span class=\"line\">    spring:</span><br><span class=\"line\">      application:</span><br><span class=\"line\">        name: cloud-stream-consuemr</span><br><span class=\"line\">      rabbitmq:</span><br><span class=\"line\">        host: 39.106.88.176</span><br><span class=\"line\">        virtual-host: wenhe9</span><br><span class=\"line\">        username: meteor</span><br><span class=\"line\">        password: &quot;0209&quot;</span><br><span class=\"line\">        port: 5672</span><br><span class=\"line\">      cloud:</span><br><span class=\"line\">        stream:</span><br><span class=\"line\">          binders: # 在此处配置与绑定的rabbitmq的消息服务</span><br><span class=\"line\">            defaultRabbit: # 定义的名称，用于binding整合</span><br><span class=\"line\">              type: rabbit</span><br><span class=\"line\">              environment:</span><br><span class=\"line\">                spring:</span><br><span class=\"line\">                  rabbitmq:</span><br><span class=\"line\">                    host: 39.106.88.176</span><br><span class=\"line\">                    virtual-host: wenhe9</span><br><span class=\"line\">                    username: meteor</span><br><span class=\"line\">                    password: &quot;0209&quot;</span><br><span class=\"line\">                    port: 5672</span><br><span class=\"line\">          bindings: # 服务的整合处理</span><br><span class=\"line\">            input: # 这个名字是一个通道的名称</span><br><span class=\"line\">              destination: studyExchange # 表示用使用的exchange名称定义</span><br><span class=\"line\">              content-type: application/json # 设置消息类型，本次为json对象，如果是文本则设置text/plain</span><br><span class=\"line\">              binder: &#123; defaultRabbit &#125; # 设置要绑定的消息服务的具体配置</span><br><span class=\"line\">    eureka:</span><br><span class=\"line\">      client:</span><br><span class=\"line\">        service-url:</span><br><span class=\"line\">          defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span><br><span class=\"line\">      instance:</span><br><span class=\"line\">        lease-renewal-interval-in-seconds: 2 # 设置心跳的时间间隔（默认是30秒）</span><br><span class=\"line\">        lease-expiration-duration-in-seconds: 5 # 失去心跳的最久时间</span><br><span class=\"line\">        instance-id: send-8802.com # 在信息列表时显示主机名称</span><br><span class=\"line\">        prefer-ip-address: true # 访问的路径变为IP地址</span><br></pre></td></tr></table></figure></div></div></span></pre></td></tr></table></figure></li>\n<li>\n<p>编写代码</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>wenhe9<span class=\"token punctuation\">.</span>springcloud<span class=\"token punctuation\">.</span>controller</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Value</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>stream<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnableBinding</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>stream<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StreamListener</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>stream<span class=\"token punctuation\">.</span>messaging<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Sink</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>messaging<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Message</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Component</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestController</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @author DuJinliang</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * 2022/1/25</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token annotation punctuation\">@EnableBinding</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Sink</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReceiveMessageListenerController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;server.port&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> serverPort<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token annotation punctuation\">@StreamListener</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Sink</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INPUT</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">input</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Message</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消费者1号， -----> 接收到的消息： \"</span> <span class=\"token operator\">+</span> message<span class=\"token punctuation\">.</span><span class=\"token function\">getPayload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t port : \"</span> <span class=\"token operator\">+</span> serverPort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">34</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>编写配置</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Yaml\"><figure class=\"iseeu highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8003</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> cloud<span class=\"token punctuation\">-</span>payment<span class=\"token punctuation\">-</span>service</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">zipkin</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">base-url</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//39.106.88.176<span class=\"token punctuation\">:</span><span class=\"token number\">9411</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token key atrule\">sleuth</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token key atrule\">sampler</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token key atrule\">probability</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token comment\"># 采样率值介于 0 到 1 之间，1 则表示全部采集</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token key atrule\">datasource</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> com.alibaba.druid.pool.DruidDataSource</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token key atrule\">driver-class-name</span><span class=\"token punctuation\">:</span> com.mysql.cj.jdbc.Driver</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> jdbc<span class=\"token punctuation\">:</span>mysql<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span>3306/cloudtest<span class=\"token punctuation\">?</span>useUnicode=true<span class=\"token important\">&amp;characterEncoding=utf-8&amp;useSSL=false</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> root</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"0209\"</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token key atrule\">mybatis</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token key atrule\">mapper-locations</span><span class=\"token punctuation\">:</span> classpath<span class=\"token punctuation\">:</span>mapper/<span class=\"token important\">*.xml</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token key atrule\">type-aliases-package</span><span class=\"token punctuation\">:</span> cn.wenhe9.springcloud.entities</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token key atrule\">eureka</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token key atrule\">instance</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token key atrule\">instance-id</span><span class=\"token punctuation\">:</span> payment8003</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token key atrule\">prefer-ip-address</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token key atrule\">client</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\"># 表示是否将自己注册到 EurekaServer 默认为 true</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token key atrule\">register-with-eureka</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\"># 是否从 EurekaServer 抓取自己的注册信息，默认为 true，单节点无所谓，集群必须配置为 true 才能配合 ribbon 使用负载均衡</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token key atrule\">fetch-registry</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token key atrule\">service-url</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token key atrule\">defaultZone</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//eureka7001.com<span class=\"token punctuation\">:</span>7001/eureka<span class=\"token punctuation\">,</span>http<span class=\"token punctuation\">:</span>//eureka7002.com<span class=\"token punctuation\">:</span>7002/eureka</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>&lt;<span class=\"token tag\">!--code</span>￼35<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span><span class=\"token punctuation\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>编写配置</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Yaml\"><figure class=\"iseeu highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">9002</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> cloud<span class=\"token punctuation\">-</span>alibaba<span class=\"token punctuation\">-</span>provider<span class=\"token punctuation\">-</span>payment</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">nacos</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token key atrule\">discovery</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token key atrule\">server-addr</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//39.106.88.176<span class=\"token punctuation\">:</span>8848/</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token key atrule\">management</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token key atrule\">endpoints</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token key atrule\">web</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token key atrule\">exposure</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token key atrule\">include</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"*\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>&lt;<span class=\"token tag\">!--code</span>￼36<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span><span class=\"token punctuation\">></span></pre></td></tr></table></figure></div></li>\n<li>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>wenhe9<span class=\"token punctuation\">.</span>springcloud<span class=\"token punctuation\">.</span>controller</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Value</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GetMapping</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PathVariable</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestController</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @author DuJinliang</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * 2022/1/26</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PaymentController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;server.port&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> serverPort<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/payment/nacos/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getPayment</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Nacos registry , serverPort : \"</span> <span class=\"token operator\">+</span> serverPort  <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t id\"</span> <span class=\"token operator\">+</span>id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">37</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>编写配置</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Yaml\"><figure class=\"iseeu highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8003</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> cloud<span class=\"token punctuation\">-</span>comsumer<span class=\"token punctuation\">-</span>order</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">nacos</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token key atrule\">discovery</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token key atrule\">server-addr</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//39.106.88.176<span class=\"token punctuation\">:</span>8848/</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token key atrule\">ribbon</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token key atrule\">ReadTimeout</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3000</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token key atrule\">ConnectionTimeout</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3000</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token key atrule\">logging</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token key atrule\">level</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token key atrule\">cn.wenhe9.springcloud.service.PaymentFeignService</span><span class=\"token punctuation\">:</span> info</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\"># 消费者将要去访问的微服务名称（注册成功进 nacos 的微服务提供者）</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token key atrule\">service-url</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token key atrule\">nacos-user-service</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//nacos<span class=\"token punctuation\">-</span>payment<span class=\"token punctuation\">-</span>provider</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>&lt;<span class=\"token tag\">!--code</span>￼38<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span><span class=\"token punctuation\">></span></pre></td></tr></table></figure></div></li>\n<li>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>wenhe9<span class=\"token punctuation\">.</span>springcloud<span class=\"token punctuation\">.</span>config</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>hutool<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Log</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">feign<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Logger</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bean</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @author DuJinliang</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * 2022/1/27</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FeignConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token class-name\">Logger<span class=\"token punctuation\">.</span>Level</span> <span class=\"token function\">feignLoggerLevel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Logger<span class=\"token punctuation\">.</span>Level</span><span class=\"token punctuation\">.</span><span class=\"token constant\">BASIC</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">39</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n<li>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>wenhe9<span class=\"token punctuation\">.</span>springcloud<span class=\"token punctuation\">.</span>controller</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>wenhe9<span class=\"token punctuation\">.</span>springcloud<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PaymentFeignService</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Value</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GetMapping</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PathVariable</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestController</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestTemplate</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Resource</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * @author DuJinliang</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * 2022/1/27</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderNacosController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@Resource</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">RestTemplate</span> restTemplate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token annotation punctuation\">@Resource</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">PaymentFeignService</span> paymentFeignService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;service-url.nacos-user-service&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> serviceUrl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">//    @GetMapping(\"/order/payment/nacos/&#123;id&#125;\")</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">//    public String getPayment(@PathVariable(name = \"id\") Integer id)&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">//        return restTemplate.getForObject(serviceUrl + \"/payment/nacos/\" + id, String.class);</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">//    &#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/order/payment/nacos/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getPayment</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">return</span> paymentFeignService<span class=\"token punctuation\">.</span><span class=\"token function\">getPayment</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">40</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"服务注册中心比较\"><a class=\"markdownIt-Anchor\" href=\"#服务注册中心比较\">#</a> 服务注册中心比较</h4>\n<ul>\n<li>nacos 同时支持 AP 和 CP</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220127114926407.png\"\n                      alt=\"image-20220127114926407\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220127115026032.png\"\n                      alt=\"image-20220127115026032\"\n                ></p>\n<blockquote>\n<p>Nacos 支持 AP 和 CP 模式的切换</p>\n</blockquote>\n<p><mark>C 是所有节点在同一时间看到的数据是一致的。而 A 的定义是所有的请求都会收到响应</mark></p>\n<blockquote>\n<p>何时选择何种模式</p>\n</blockquote>\n<ul>\n<li>\n<p>一般来说，如果不需要存储服务级别的信息且服务实例是通过 nacos-client 注册，并能够保持心跳上报，那么可以选择 AP 模式。当前主流的服务如 Spring Cloud 和 Dubbo 服务，都适用于 AP 模式，AP 模式为了服务的可用性而减弱了一致性，因此 AP 模式下只支持注册临时实例</p>\n</li>\n<li>\n<p>如果需要在服务级别编辑或者存储配置信息，那么 CP 是必须的，K8S 服务和 DNS 服务则适用于 CP 模式。CP 模式下则支持注册持久化实例，此时则是以 Raft 协议为集群运行模式，该模式下注册实例之前必须先注册服务，如果服务不存在，则会返回错误。</p>\n</li>\n<li>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-X</span> PUT <span class=\"token string\">\"<span class=\"token variable\">$NACOS_SERVER</span>:8848/nacos/v1/ns/operator/switches?entry=serverMode&amp;value=CP\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>--code￼41--<span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n<li>\n<p>编写配置</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Yaml\"><figure class=\"iseeu highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3377</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nacos<span class=\"token punctuation\">-</span>config<span class=\"token punctuation\">-</span>client</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">nacos</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token key atrule\">discovery</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token key atrule\">server-addr</span><span class=\"token punctuation\">:</span> 39.106.88.176<span class=\"token punctuation\">:</span><span class=\"token number\">8848</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token key atrule\">config</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token key atrule\">server-addr</span><span class=\"token punctuation\">:</span> 39.106.88.176<span class=\"token punctuation\">:</span><span class=\"token number\">8848</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token key atrule\">file-extension</span><span class=\"token punctuation\">:</span> yaml</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token key atrule\">profiles</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token key atrule\">active</span><span class=\"token punctuation\">:</span> dev</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>&lt;<span class=\"token tag\">!--code</span>￼42<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span><span class=\"token punctuation\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>编写代码</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>wenhe9<span class=\"token punctuation\">.</span>springcloud<span class=\"token punctuation\">.</span>controller</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Value</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RefreshScope</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GetMapping</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestController</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @author DuJinliang</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * 2022/1/27</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token annotation punctuation\">@RefreshScope</span> <span class=\"token comment\">// 支持 Nacos 的动态刷新功能</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConfigClientController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;config.info&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> configInfo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/config/info\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getConfigInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> configInfo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">43</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p><code>nacos.env</code></p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">PREFER_HOST_MODE</span><span class=\"token operator\">=</span>hostname</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">NACOS_SERVERS</span><span class=\"token operator\">=</span>nacos1:8848 nacos2:8848 nacos3:8848</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">MYSQL_SERVICE_HOST</span><span class=\"token operator\">=</span>bj-cdb-c504ejce.sql.tencentcdb.com</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token assign-left variable\">MYSQL_SERVICE_DB_NAME</span><span class=\"token operator\">=</span>nacos_config</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token assign-left variable\">MYSQL_SERVICE_PORT</span><span class=\"token operator\">=</span><span class=\"token number\">60161</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token assign-left variable\">MYSQL_SERVICE_USER</span><span class=\"token operator\">=</span>root</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token assign-left variable\">MYSQL_SERVICE_PASSWORD</span><span class=\"token operator\">=</span>020921lhw</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>--code￼44--<span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>执行 docker-compose.yml</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker-compose</span> up <span class=\"token parameter variable\">-d</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>--code￼45--<span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"spring-cloud-alibaba-sentinel实现熔断和限流\"><a class=\"markdownIt-Anchor\" href=\"#spring-cloud-alibaba-sentinel实现熔断和限流\">#</a> Spring Cloud Alibaba Sentinel 实现熔断和限流</h2>\n<h3 id=\"sentinel\"><a class=\"markdownIt-Anchor\" href=\"#sentinel\">#</a> Sentinel</h3>\n<blockquote>\n<p>是什么</p>\n</blockquote>\n<p>就是之前的 Hystrix</p>\n<p>轻量级的流量控制、熔断降级 Java 库</p>\n<blockquote>\n<p>能干什么</p>\n</blockquote>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220128170048526.png\"\n                      alt=\"image-20220128170048526\"\n                ></p>\n<h3 id=\"sentinel控制台\"><a class=\"markdownIt-Anchor\" href=\"#sentinel控制台\">#</a> Sentinel 控制台</h3>\n<ul>\n<li>Sentinel 由两部分构成\n<ul>\n<li>核心库（Java 客户端）不依赖任何框架 / 库，能够运行于所有 Java 运行时环境，同时对 Dubbo / Spring Cloud 等框架也有较好的支持</li>\n<li>控制台（Dashboard）基于 Spring Boot 开发，打包后可以直接运行，不需要额外的 Tomcat 等应用容器</li>\n</ul>\n</li>\n<li>8719 是 http 通信服务【sentinel 后台监控服务】，它监控 8401【微服务】的同时，还与 8080【sentinel 前台展示服务】交互数据，将监控到的数据在 dashboard 上展现。</li>\n</ul>\n<h3 id=\"初始化演示工程\"><a class=\"markdownIt-Anchor\" href=\"#初始化演示工程\">#</a> 初始化演示工程</h3>\n<ul>\n<li>\n<p>导入依赖</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-alibaba-sentinel<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"><div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 编写配置</span><br><span class=\"line\"></span><br><span class=\"line\">  - ```yaml</span><br><span class=\"line\">    server:</span><br><span class=\"line\">      port: 8401</span><br><span class=\"line\">    spring:</span><br><span class=\"line\">      application:</span><br><span class=\"line\">        name: cloud-sentinel-service-8401</span><br><span class=\"line\">      cloud:</span><br><span class=\"line\">        nacos:</span><br><span class=\"line\">          discovery:</span><br><span class=\"line\">            # Nacos服务注册中心地址</span><br><span class=\"line\">            server-addr: 39.106.88.176:8849</span><br><span class=\"line\">        sentinel:</span><br><span class=\"line\">          transport:</span><br><span class=\"line\">            # 配置 Sentinel Dashboard 地址</span><br><span class=\"line\">            dashboard: 39.106.88.176:8858</span><br><span class=\"line\">            # 默认8719端口，假如被占用会自动从8719开始依次+1扫描，直至找到未被占用的端口</span><br><span class=\"line\">            port: 8719</span><br><span class=\"line\">            clientIp: localhost</span><br><span class=\"line\">    management:</span><br><span class=\"line\">      endpoints:</span><br><span class=\"line\">        web:</span><br><span class=\"line\">          exposure:</span><br><span class=\"line\">            include: &quot;*&quot;</span><br><span class=\"line\">      endpoint:</span><br><span class=\"line\">        sentinel:</span><br><span class=\"line\">          enabled: true</span><br></pre></td></tr></table></figure></div></div></span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>编写启动类</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>wenhe9<span class=\"token punctuation\">.</span>springcloud</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringApplication</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootApplication</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>discovery<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnableDiscoveryClient</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @author DuJinliang</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * 2022/1/28</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token annotation punctuation\">@EnableDiscoveryClient</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainApp8401</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MainApp8401</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">47</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"流控规则\"><a class=\"markdownIt-Anchor\" href=\"#流控规则\">#</a> 流控规则</h3>\n<h4 id=\"基本介绍\"><a class=\"markdownIt-Anchor\" href=\"#基本介绍\">#</a> 基本介绍</h4>\n<ul>\n<li>资源名\n<ul>\n<li>唯一名称，默认请求路径</li>\n</ul>\n</li>\n<li>针对来源\n<ul>\n<li>Sentinel 可以针对调用者进行限流，填写微服务名，默认 default（不区分来源）</li>\n</ul>\n</li>\n<li>阈值类型 / 单机阈值\n<ul>\n<li>QPS（每秒钟的请求数量）\n<ul>\n<li>当调用该 api 的 QPS 达到阈值的时候，进行限流</li>\n</ul>\n</li>\n<li>线程数\n<ul>\n<li>当调用该 api 的线程数达到阈值的时候，进行限流</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>是否集群\n<ul>\n<li>不需要集群</li>\n</ul>\n</li>\n<li>流控模式\n<ul>\n<li>直接：\n<ul>\n<li>api 达到限流条件时，直接限流</li>\n</ul>\n</li>\n<li>关联\n<ul>\n<li>当关联的资源达到阈值时，就限流自己</li>\n</ul>\n</li>\n<li>链路\n<ul>\n<li>只记录指定链路上的流量（指定资源从入口资源进来的流量，如果达到阈值，就进行限流）【api 级别的针对来源】</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>流控效果\n<ul>\n<li>快速失败\n<ul>\n<li>直接失败，抛异常</li>\n</ul>\n</li>\n<li>Warm Up\n<ul>\n<li>根据 codeFactor（冷加载因子，默认 3）的值，从阈值 /codeFactor，经过预热时长，才达到设置的 QPS 阈值</li>\n</ul>\n</li>\n<li>排队等待\n<ul>\n<li>匀速排队，让请求以匀速的速度通过，阈值类型必须设置为 QPS，否则无效</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>​</p>\n<h4 id=\"流控模式\"><a class=\"markdownIt-Anchor\" href=\"#流控模式\">#</a> 流控模式</h4>\n<blockquote>\n<p>直接 (默认)</p>\n</blockquote>\n<ul>\n<li>\n<p>直接 -&gt; 快速失败</p>\n<ul>\n<li>系统默认</li>\n</ul>\n</li>\n<li>\n<p>配置及说明</p>\n<ul>\n<li>表示一秒钟内查询 1 次就是 OK，若超过次数 1，就直接 - 快速失败，报默认错误</li>\n<li><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220130111911145.png\"\n                      alt=\"image-20220130111911145\"\n                ></li>\n</ul>\n</li>\n<li>\n<p>添加自定义的兜底方法</p>\n</li>\n</ul>\n<p>默认 - 自定义</p>\n<blockquote>\n<p>关联</p>\n</blockquote>\n<ul>\n<li>是什么\n<ul>\n<li>当关联的资源达到阈值时就限流自己</li>\n<li>当与 A 关联的资源 B 达到阈值后，就限流自己</li>\n<li>B 惹事，A 挂了</li>\n</ul>\n</li>\n<li>配置 A\n<ul>\n<li>设置效果\n<ul>\n<li>当关联资源 /testB 的 qps 阈值超过 1 时，就限流 /testA 的 Rest 访问地址，<mark>当关联资源到阈值后限制配置好的资源名</mark></li>\n</ul>\n</li>\n<li><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220130114025348.png\"\n                      alt=\"image-20220130114025348\"\n                ></li>\n<li>当大批量访问 B，访问 A 发现被限流了</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>链路</p>\n</blockquote>\n<ul>\n<li>\n<p>只针对从指定链路访问到本资源的请求做统计，判断是否超过阈值</p>\n</li>\n<li>\n<p>案例</p>\n<ul>\n<li>\n<p>有查询订单和创建订单业务，两者都需要查询商品。针对从查询订单进入到查询商品的请求统计，并设置限流。</p>\n</li>\n<li>\n<p>步骤：<br>\n1. 在 OrderService 中添加一个 queryGoods 方法，不用实现业务<br>\n 2. 在 OrderController 中，改造 /order/query 端点，调用 OrderService 中的 queryGoods 方法 (/order/query -&gt; queryGoods)<br>\n 3. 在 OrderController 中添加一个 /order/save 的端点，调用 OrderService 的 queryGoods 方法 (/order/save -&gt; queryGoods)<br>\n 4. 给 queryGoods 设置限流规则，从 /order/query 进入 queryGoods 的方法限制 QPS 必须小于 2**（设置 /order/query qqs&lt;2）**</p>\n<p>Sentinel 默认只标记 Controller 中的方法为资源，如果要标记其它方法，需要利用 @SentinelResource 注解，示例：</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SentinelResource(&quot;goods&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">queryGoods</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    System.err.println(<span class=\"string\">&quot;查询商品&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n</li>\n<li>\n<p>Sentinel 默认会将 Controller 方法做 context 整合，导致链路模式的流控失效，需要修改 application.yml，添加配置</p>\n</li>\n<li>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>spring<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  cloud<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    sentinel<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      transport<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        dashboard<span class=\"token operator\">:</span> localhost<span class=\"token operator\">:</span><span class=\"token number\">8080</span> # sentinel控制台地址</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      web<span class=\"token operator\">-</span>context<span class=\"token operator\">-</span>unify<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> # 关闭context整合</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">49</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n<li>\n<p>编写配置</p>\n<ul>\n<li><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220205170840600.png\"\n                      alt=\"image-20220205170840600\"\n                ></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>参数例外项</p>\n<ul>\n<li><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220205171351345.png\"\n                      alt=\"image-20220205171351345\"\n                ></li>\n<li>注意\n<ul>\n<li>参数类型必须是基本类型</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><mark> <code>@SentinelResource</code>  主管配置出错，运行出错该走异常走异常</mark></p>\n<h3 id=\"系统规则\"><a class=\"markdownIt-Anchor\" href=\"#系统规则\">#</a> 系统规则</h3>\n<blockquote>\n<p>是什么</p>\n</blockquote>\n<p>系统保护规则是从应用级别的入口流量进行控制，从单台机器的 load、CPU 使用率、平均 RT、入口 QPS 和并发线程数等几个维度监控应用指标，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性。</p>\n<p>系统保护规则是应用整体维度的，而不是资源维度的，并且<strong>仅对入口流量生效</strong>。入口流量指的是进入应用的流量（ <code>EntryType.IN</code> ），比如 Web 服务或 Dubbo 服务端接收的请求，都属于入口流量。</p>\n<p>系统规则支持以下的模式：</p>\n<ul>\n<li><strong>Load 自适应</strong>（仅对 Linux/Unix-like 机器生效）：系统的 load1 作为启发指标，进行自适应系统保护。当系统 load1 超过设定的启发值，且系统当前的并发线程数超过估算的系统容量时才会触发系统保护（BBR 阶段）。系统容量由系统的  <code>maxQps * minRt</code>  估算得出。设定参考值一般是  <code>CPU cores * 2.5</code> 。</li>\n<li><strong>CPU usage</strong>（1.5.0+ 版本）：当系统 CPU 使用率超过阈值即触发系统保护（取值范围 0.0-1.0），比较灵敏。</li>\n<li><strong>平均 RT</strong>：当单台机器上所有入口流量的平均 RT 达到阈值即触发系统保护，单位是毫秒。</li>\n<li><strong>并发线程数</strong>：当单台机器上所有入口流量的并发线程数达到阈值即触发系统保护。</li>\n<li><strong>入口 QPS</strong>：当单台机器上所有入口流量的 QPS 达到阈值即触发系统保护。</li>\n</ul>\n<h3 id=\"sentinelresource\"><a class=\"markdownIt-Anchor\" href=\"#sentinelresource\">#</a> @SentinelResource</h3>\n<p>自定义限流处理逻辑</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/testByResource&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@SentinelResource(value = &quot;testByResource&quot;, blockHandler = &quot;testByResourceHandler&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">testByResource</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;按资源名称限流&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">testByResourceHandler</span><span class=\"params\">(BlockException exception)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> exception.getClass().getCanonicalName() + <span class=\"string\">&quot;服务不可用&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<blockquote>\n<p>注意</p>\n</blockquote>\n<ul>\n<li>按路径时，自定义的限流逻辑不起作用</li>\n</ul>\n<blockquote>\n<p>自定义限流处理类</p>\n</blockquote>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>wenhe9<span class=\"token punctuation\">.</span>springcloud<span class=\"token punctuation\">.</span>handler</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>csp<span class=\"token punctuation\">.</span>sentinel<span class=\"token punctuation\">.</span>slots<span class=\"token punctuation\">.</span>block<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BlockException</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @author DuJinliang</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * 2022/2/5</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomBlockHandler</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">customBlockHandler1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BlockException</span> exception<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"自定义的限流 --- 1\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">customBlockHandler2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BlockException</span> exception<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"自定义的限流 --- 2\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">51</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n<li>\n<p>注意，这里一定要是要静态方法</p>\n</li>\n</ul>\n<p><code>@SentinelResource</code>  用于定义资源，并提供可选的异常处理和 fallback 配置项。  <code>@SentinelResource</code>  注解包含以下属性：</p>\n<ul>\n<li><code>value</code> ：资源名称，必需项（不能为空）</li>\n<li><code>entryType</code> ：entry 类型，可选项（默认为  <code>EntryType.OUT</code> ）</li>\n<li><code>blockHandler</code>  /  <code>blockHandlerClass</code> :  <code>blockHandler</code>  对应处理  <code>BlockException</code>  的函数名称，可选项。blockHandler 函数访问范围需要是  <code>public</code> ，返回类型需要与原方法相匹配，参数类型需要和原方法相匹配并且最后加一个额外的参数，类型为  <code>BlockException</code> 。blockHandler 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定  <code>blockHandlerClass</code>  为对应的类的  <code>Class</code>  对象，注意对应的函数必需为 static 函数，否则无法解析。</li>\n<li><code>fallback</code> / <code>fallbackClass</code> ：fallback 函数名称，可选项，用于在抛出异常的时候提供 fallback 处理逻辑。fallback 函数可以针对所有类型的异常（除了 <code>exceptionsToIgnore</code>  里面排除掉的异常类型）进行处理。fallback 函数签名和位置要求：\n<ul>\n<li>返回值类型必须与原函数返回值类型一致；</li>\n<li>方法参数列表需要和原函数一致，或者可以额外多一个  <code>Throwable</code>  类型的参数用于接收对应的异常。</li>\n<li>fallback 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定  <code>fallbackClass</code>  为对应的类的  <code>Class</code>  对象，注意对应的函数必需为 static 函数，否则无法解析。</li>\n</ul>\n</li>\n<li><code>defaultFallback</code> （since 1.6.0）：默认的 fallback 函数名称，可选项，通常用于通用的 fallback 逻辑（即可以用于很多服务或方法）。默认 fallback 函数可以针对所有类型的异常（除了 <code>exceptionsToIgnore</code>  里面排除掉的异常类型）进行处理。若同时配置了 fallback 和 defaultFallback，则只有 fallback 会生效。defaultFallback 函数签名要求：\n<ul>\n<li>返回值类型必须与原函数返回值类型一致；</li>\n<li>方法参数列表需要为空，或者可以额外多一个  <code>Throwable</code>  类型的参数用于接收对应的异常。</li>\n<li>defaultFallback 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定  <code>fallbackClass</code>  为对应的类的  <code>Class</code>  对象，注意对应的函数必需为 static 函数，否则无法解析。</li>\n</ul>\n</li>\n<li><code>exceptionsToIgnore</code> （since 1.6.0）：用于指定哪些异常被排除掉，不会计入异常统计中，也不会进入 fallback 逻辑中，而是会原样抛出。</li>\n</ul>\n<p>1.8.0 版本开始， <code>defaultFallback</code>  支持在类级别进行配置。</p>\n<blockquote>\n<p>注：1.6.0 之前的版本 fallback 函数只针对降级异常（ <code>DegradeException</code> ）进行处理，<strong>不能针对业务异常进行处理</strong>。</p>\n</blockquote>\n<p>特别地，若 blockHandler 和 fallback 都进行了配置，则被限流降级而抛出  <code>BlockException</code>  时只会进入  <code>blockHandler</code>  处理逻辑。若未配置  <code>blockHandler</code> 、 <code>fallback</code>  和  <code>defaultFallback</code> ，则被限流降级时会将  <code>BlockException</code>  <strong>直接抛出</strong>（若方法本身未定义 throws BlockException 则会被 JVM 包装一层  <code>UndeclaredThrowableException</code> ）。</p>\n<h3 id=\"持久化\"><a class=\"markdownIt-Anchor\" href=\"#持久化\">#</a> 持久化</h3>\n<ul>\n<li>\n<p>导入依赖</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba.csp<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>sentinel-datasource-nacos<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"><div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 编写配置</span><br><span class=\"line\"></span><br><span class=\"line\">  - ```yaml</span><br><span class=\"line\">    server:</span><br><span class=\"line\">      port: 8401</span><br><span class=\"line\">    spring:</span><br><span class=\"line\">      application:</span><br><span class=\"line\">        name: cloud-sentinel-service-8401</span><br><span class=\"line\">      cloud:</span><br><span class=\"line\">        nacos:</span><br><span class=\"line\">          discovery:</span><br><span class=\"line\">            # Nacos服务注册中心地址</span><br><span class=\"line\">            server-addr: 39.106.88.176:8849</span><br><span class=\"line\">        sentinel:</span><br><span class=\"line\">          transport:</span><br><span class=\"line\">            # 配置 Sentinel Dashboard 地址</span><br><span class=\"line\">            dashboard: http://localhost:8858</span><br><span class=\"line\">          eager: true</span><br><span class=\"line\">          web-context-unify: false</span><br><span class=\"line\">          datasource:</span><br><span class=\"line\">            ds1:</span><br><span class=\"line\">              nacos:</span><br><span class=\"line\">                serverAddr: 39.106.88.176:8849</span><br><span class=\"line\">                dataId: $&#123;spring.application.name&#125;</span><br><span class=\"line\">                groupId: DEFAULT_GROUP</span><br><span class=\"line\">                dataType: json</span><br><span class=\"line\">                ruleType: flow</span><br><span class=\"line\">                username: nacos</span><br><span class=\"line\">                password: nacos</span><br><span class=\"line\">    management:</span><br><span class=\"line\">      endpoints:</span><br><span class=\"line\">        web:</span><br><span class=\"line\">          exposure:</span><br><span class=\"line\">            include: &quot;*&quot;</span><br><span class=\"line\">      endpoint:</span><br><span class=\"line\">        sentinel:</span><br><span class=\"line\">          enabled: true</span><br></pre></td></tr></table></figure></div></div></span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>在 nacos 配置中心进行配置</p>\n<ul>\n<li>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220205215859164.png\"\n                      alt=\"image-20220205215859164\"\n                ></p>\n</li>\n<li>\n<p>其中</p>\n<ul>\n<li>resource 表示资源名称</li>\n<li>limitApp 表示针对来源</li>\n<li>grade 表示阈值类型</li>\n<li>count 表示阈值</li>\n<li>strategy 表示流控模式</li>\n<li>controlBehavior 表示流控效果</li>\n<li>clusterMode 表示是否集群</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"spring-cloud-alibaba-seata-处理分布式事务\"><a class=\"markdownIt-Anchor\" href=\"#spring-cloud-alibaba-seata-处理分布式事务\">#</a> Spring Cloud Alibaba Seata 处理分布式事务</h2>\n<h3 id=\"分布式事务问题\"><a class=\"markdownIt-Anchor\" href=\"#分布式事务问题\">#</a> 分布式事务问题</h3>\n<ul>\n<li>分布式之前\n<ul>\n<li>单机单库没有问题</li>\n</ul>\n</li>\n<li>分布式之后\n<ul>\n<li>单体应用被拆分成微服务应用，原来的三个模块被拆分成三个独立的应用，分别使用三个独立的数据源。业务操作需要调用三个服务来完成，此时<mark>每隔服务内部的数据一致性由本地事务来保证，但是全局的数据一致性问题没法保证</mark></li>\n<li><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220206155229696.png\"\n                      alt=\"image-20220206155229696\"\n                ></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"seata简介\"><a class=\"markdownIt-Anchor\" href=\"#seata简介\">#</a> Seata 简介</h3>\n<blockquote>\n<p>是什么</p>\n</blockquote>\n<ul>\n<li>Seata 是一款开源的分布式事务解决方案，致力于在微服务架构下提供高性能和简单易用的分布式事务服务</li>\n</ul>\n<blockquote>\n<p>能干什么</p>\n</blockquote>\n<ul>\n<li>\n<p>一个典型的分布式事务过程</p>\n<ul>\n<li>分布式事务处理过程的一 ID 和三组件模型\n<ul>\n<li>Transaction ID XID\n<ul>\n<li>全局唯一的事务 ID</li>\n</ul>\n</li>\n<li>三组件概念\n<ul>\n<li>Transaction Coordinator(TC)\n<ul>\n<li>事务协调者</li>\n<li>维护全局和分支事务的状态，驱动全局事务的提交和回滚</li>\n</ul>\n</li>\n<li>Transaction Manager™\n<ul>\n<li>事务管理器</li>\n<li>定义全局事务的范围：开始全局事务、提交和回滚全局事务</li>\n</ul>\n</li>\n<li>Resource Manager(RM)\n<ul>\n<li>资源管理器</li>\n<li>管理分支事务处理的资源，与 TC 交谈以注册分支事务和报告分支事务的状态，并驱动分支事务的提交和回滚</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>处理过程</p>\n<ol>\n<li>TM 向 TC 申请开启一个全局事务，全局事务创建成功并生成一个全局唯一的 XID</li>\n<li>XID 在微服务调用链路的上下文中传播</li>\n<li>RM 向 TC 注册分支事务，将其纳入 XID 对应全局事务的管辖</li>\n<li>TM 向 TC 发起针对 XID 的全局提交或回滚决议</li>\n<li>TC 调度 XID 下管辖的全部分支事务完成提交或回滚请求</li>\n</ol>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220206173145685.png\"\n                      alt=\"image-20220206173145685\"\n                ></p>\n</li>\n</ul>\n<h3 id=\"启动与配置\"><a class=\"markdownIt-Anchor\" href=\"#启动与配置\">#</a> 启动与配置</h3>\n<p><a class=\"link\"   href=\"https://seata.io/zh-cn/docs/ops/deploy-by-docker-compose.html\" >https://seata.io/zh-cn/docs/ops/deploy-by-docker-compose.html <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<ol>\n<li>\n<p>Docker-Compose 部署 nacos 注册中心 db 存储</p>\n<ul>\n<li>\n<p>docker-compose.yaml</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Yaml\"><figure class=\"iseeu highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3.1'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">seata-server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> seataio/seata<span class=\"token punctuation\">-</span>server<span class=\"token punctuation\">:</span><span class=\"token number\">1.4</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">hostname</span><span class=\"token punctuation\">:</span> seata<span class=\"token punctuation\">-</span>server</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"8091:8091\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token comment\"># 指定 seata 服务启动端口</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token punctuation\">-</span> SEATA_PORT=8091</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token comment\"># 注册到 nacos 上的 ip，客户端将通过该 ip 访问 seata 服务</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token comment\"># 注意公网 ip 和内网 ip 的差异</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token punctuation\">-</span> SEATA_IP=39.106.88.176</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token punctuation\">-</span> SEATA_CONFIG_NAME=file<span class=\"token punctuation\">:</span>/root/seata<span class=\"token punctuation\">-</span>config/registry.conf</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token comment\"># 因为 registry.conf 中是 nacos 配置中心，只需要把 registry.conf 放到 /root/seata-server/config 文件夹中</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"/root/seata-server/config:/root/seata-config\"</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>&lt;<span class=\"token tag\">!--code</span>￼53<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span><span class=\"token punctuation\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>在容器编排之前，完善数据库</p>\n<ul>\n<li>\n<pre><code class=\"language-mysql\">-- -------------------------------- The script used when storeMode is 'db' --------------------------------\n-- the table to store GlobalSession data\nCREATE TABLE IF NOT EXISTS `global_table`\n(\n    `xid`                       VARCHAR(128) NOT NULL,\n    `transaction_id`            BIGINT,\n    `status`                    TINYINT      NOT NULL,\n    `application_id`            VARCHAR(32),\n    `transaction_service_group` VARCHAR(32),\n    `transaction_name`          VARCHAR(128),\n    `timeout`                   INT,\n    `begin_time`                BIGINT,\n    `application_data`          VARCHAR(2000),\n    `gmt_create`                DATETIME,\n    `gmt_modified`              DATETIME,\n    PRIMARY KEY (`xid`),\n    KEY `idx_gmt_modified_status` (`gmt_modified`, `status`),\n    KEY `idx_transaction_id` (`transaction_id`)\n) ENGINE = InnoDB\n  DEFAULT CHARSET = utf8;\n\n-- the table to store BranchSession data\nCREATE TABLE IF NOT EXISTS `branch_table`\n(\n    `branch_id`         BIGINT       NOT NULL,\n    `xid`               VARCHAR(128) NOT NULL,\n    `transaction_id`    BIGINT,\n    `resource_group_id` VARCHAR(32),\n    `resource_id`       VARCHAR(256),\n    `branch_type`       VARCHAR(8),\n    `status`            TINYINT,\n    `client_id`         VARCHAR(64),\n    `application_data`  VARCHAR(2000),\n    `gmt_create`        DATETIME(6),\n    `gmt_modified`      DATETIME(6),\n    PRIMARY KEY (`branch_id`),\n    KEY `idx_xid` (`xid`)\n) ENGINE = InnoDB\n  DEFAULT CHARSET = utf8;\n\n-- the table to store lock data\nCREATE TABLE IF NOT EXISTS `lock_table`\n(\n    `row_key`        VARCHAR(128) NOT NULL,\n    `xid`            VARCHAR(128),\n    `transaction_id` BIGINT,\n    `branch_id`      BIGINT       NOT NULL,\n    `resource_id`    VARCHAR(256),\n    `table_name`     VARCHAR(32),\n    `pk`             VARCHAR(36),\n    `status`         TINYINT      NOT NULL DEFAULT '0' COMMENT '0:locked ,1:rollbacking',\n    `gmt_create`     DATETIME,\n    `gmt_modified`   DATETIME,\n    PRIMARY KEY (`row_key`),\n    KEY `idx_status` (`status`),\n    KEY `idx_branch_id` (`branch_id`)\n) ENGINE = InnoDB\n  DEFAULT CHARSET = utf8;\n\nCREATE TABLE IF NOT EXISTS `distributed_lock`\n(\n    `lock_key`       CHAR(20) NOT NULL,\n    `lock_value`     VARCHAR(20) NOT NULL,\n    `expire`         BIGINT,\n    primary key (`lock_key`)\n) ENGINE = InnoDB\n  DEFAULT CHARSET = utf8mb4;\n\nINSERT INTO `distributed_lock` (lock_key, lock_value, expire) VALUES ('AsyncCommitting', ' ', 0);\nINSERT INTO `distributed_lock` (lock_key, lock_value, expire) VALUES ('RetryCommitting', ' ', 0);\nINSERT INTO `distributed_lock` (lock_key, lock_value, expire) VALUES ('RetryRollbacking', ' ', 0);\nINSERT INTO `distributed_lock` (lock_key, lock_value, expire) VALUES ('TxTimeoutCheck', ' ', 0);\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 在nacos编写配置</span><br><span class=\"line\"></span><br><span class=\"line\">  - dataId</span><br><span class=\"line\"></span><br><span class=\"line\">    - `` seataServer.properties``</span><br><span class=\"line\"></span><br><span class=\"line\">  - Group</span><br><span class=\"line\"></span><br><span class=\"line\">    - ``SEATA_GROUP``</span><br><span class=\"line\"></span><br><span class=\"line\">  - ```properties</span><br><span class=\"line\">    # 存储模式</span><br><span class=\"line\">    store.mode=db</span><br><span class=\"line\">    </span><br><span class=\"line\">    store.db.datasource=druid</span><br><span class=\"line\">    store.db.dbType=mysql</span><br><span class=\"line\">    # 需要根据mysql的版本调整driverClassName</span><br><span class=\"line\">    # mysql8及以上版本对应的driver：com.mysql.cj.jdbc.Driver</span><br><span class=\"line\">    # mysql8以下版本的driver：com.mysql.jdbc.Driver</span><br><span class=\"line\">    store.db.driverClassName=com.mysql.cj.jdbc.Driver</span><br><span class=\"line\">    # 注意根据生产实际情况调整参数host和port</span><br><span class=\"line\">    store.db.url=jdbc:mysql://bj-cdb-c504ejce.sql.tencentcdb.com:60161/seata_server?useUnicode=true&amp;characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useSSL=false</span><br><span class=\"line\">    # 数据库用户名</span><br><span class=\"line\">    store.db.user=root</span><br><span class=\"line\">    # 用户名密码</span><br><span class=\"line\">    store.db.password=020921lhw</span><br></pre></td></tr></table></figure></div>\n\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>dataId</p>\n<ul>\n<li><code>service.vgroupMapping.default_tx_group</code></li>\n</ul>\n</li>\n<li>\n<p>Group</p>\n<ul>\n<li><code>SEATA_GROUP</code></li>\n</ul>\n</li>\n<li>\n<p>内容</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Text\"><figure class=\"iseeu highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>seata-server</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- docker-compose运行</span><br><span class=\"line\"></span><br><span class=\"line\">  - ```dockerfile</span><br><span class=\"line\">    docker-compose up -d</span><br></pre></td></tr></table></figure></div></div></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>编写代码</p>\n<ul>\n<li>\n<p>导入依赖</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>         <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>parent</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>cn.wenhe9.springcloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>cn.wenhe9<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0-SNAPSHOT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>parent</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>modelVersion</span><span class=\"token punctuation\">></span></span>4.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>modelVersion</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>seata-order-service-2001<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>maven.compiler.source</span><span class=\"token punctuation\">></span></span>8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>maven.compiler.source</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>maven.compiler.target</span><span class=\"token punctuation\">></span></span>8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>maven.compiler.target</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-alibaba-nacos-config<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-alibaba-seata<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exclusions</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exclusion</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>io.seata<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>seata-all<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exclusion</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exclusions</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>io.seata<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>seata-all<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.4.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-openfeign<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-web<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-actuator<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>mysql<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mysql-connector-java<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>druid-spring-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.mybatis.spring.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mybatis-spring-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>cn.wenhe9<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>cloud-api-commons<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0-SNAPSHOT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token comment\"><div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 编写配置</span><br><span class=\"line\"></span><br><span class=\"line\">- ``bootstrap.yml``</span><br><span class=\"line\"></span><br><span class=\"line\">  - ```yaml</span><br><span class=\"line\">    # 抽取出nacos的公共配置 方便修改 启动配置中只配置nacos的 其他的在application.yml</span><br><span class=\"line\">    nacos:</span><br><span class=\"line\">      service-address: 39.106.88.176:8849  #nacos地址需要带端口80也需要</span><br><span class=\"line\">      namespace: 19d81780-9128-4e5d-89f5-a26591a9ee99 # nacos命名空间 比如dev 开发环境</span><br><span class=\"line\">      group: SEATA_GROUP # nacos分组 比如 XXX业务组</span><br><span class=\"line\">      username: nacos</span><br><span class=\"line\">      password: nacos</span><br><span class=\"line\">      seata:</span><br><span class=\"line\">        server: seata-server # 这里必须和seata注册到nacos的服务名一样</span><br><span class=\"line\">        group: SEATA_GROUP # seata服务注册到nacos的组名seata-group</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 配置注册中心</span><br><span class=\"line\">    spring:</span><br><span class=\"line\">      application:</span><br><span class=\"line\">        name: seata-order-service # 应用名称</span><br><span class=\"line\">      main:</span><br><span class=\"line\">        allow-bean-definition-overriding: true # 解决bean重复定义问题</span><br><span class=\"line\">      cloud:</span><br><span class=\"line\">        nacos:</span><br><span class=\"line\">          discovery:</span><br><span class=\"line\">            server-addr: $&#123;nacos.service-address&#125; # nacos服务注册地址</span><br><span class=\"line\">            namespace: $&#123;nacos.namespace&#125; # nacos注册的命名空间</span><br><span class=\"line\">            group: $&#123;nacos.group&#125; # nacos注册的group</span><br><span class=\"line\">          config:</span><br><span class=\"line\">            server-addr: $&#123;nacos.service-address&#125; # nacos配置中心地址</span><br><span class=\"line\">            namespace: $&#123;nacos.namespace&#125; # nacos配置中心的命名空间</span><br><span class=\"line\">            group: $&#123;nacos.group&#125; # nacos配置中心的group</span><br><span class=\"line\">            file-extension: yml # 程序读取的主配置文件 拼接起来为 seata-order-service.yml (spring.application.name + spring.profiles.active + file-extension)</span><br><span class=\"line\">            extension-configs[0]: # 第一个扩展配置(seata-order-service.yml有配置相同项将覆盖下面配置)</span><br><span class=\"line\">              data-id: common.yml # 配置文件名字</span><br><span class=\"line\">              group: $&#123;nacos.group&#125; # 配置文件所属分组</span><br><span class=\"line\">              refresh: true # 是否动态刷新</span><br></pre></td></tr></table></figure></div></div></span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p><code>application.yml</code></p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Yaml\"><figure class=\"iseeu highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2001</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">datasource</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> com.alibaba.druid.pool.DruidDataSource</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">driver-class-name</span><span class=\"token punctuation\">:</span> com.mysql.cj.jdbc.Driver</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> jdbc<span class=\"token punctuation\">:</span>mysql<span class=\"token punctuation\">:</span>//bj<span class=\"token punctuation\">-</span>cdb<span class=\"token punctuation\">-</span>c504ejce.sql.tencentcdb.com<span class=\"token punctuation\">:</span>60161/seata_order<span class=\"token punctuation\">?</span>useUnicode=true<span class=\"token important\">&amp;characterEncoding=utf-8&amp;useSSL=false</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> root</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"020921lhw\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># seata 配置</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token key atrule\">seata</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 开启 seata 支持</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token key atrule\">tx-service-group</span><span class=\"token punctuation\">:</span> default_tx_group <span class=\"token comment\"># 这里需要和 config.txt 文件中的 service.vgroupMpping:my_test_tx_group=default 一致</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token key atrule\">vgroup-mapping</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token key atrule\">default_tx_group</span><span class=\"token punctuation\">:</span> seata<span class=\"token punctuation\">-</span>server</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token key atrule\">enable-auto-data-source-proxy</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\"># seata 整合 nacos 配置中心</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token key atrule\">config</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> nacos</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token key atrule\">nacos</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token key atrule\">server-addr</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">&#123;</span>nacos.service<span class=\"token punctuation\">-</span>address<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token key atrule\">group</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">&#123;</span>nacos.seata.group<span class=\"token punctuation\">&#125;</span> <span class=\"token comment\"># seata 服务注册到 nacos 的组名 SEATA_GROUP</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">&#123;</span>nacos.namespace<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">&#123;</span>nacos.username<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">&#123;</span>nacos.password<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token key atrule\">registry</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> nacos</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token key atrule\">nacos</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token key atrule\">server-addr</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">&#123;</span>nacos.service<span class=\"token punctuation\">-</span>address<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token key atrule\">group</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">&#123;</span>nacos.seata.group<span class=\"token punctuation\">&#125;</span> <span class=\"token comment\"># seata 服务注册到 nacos 的组名 SEATA_GROUP</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">&#123;</span>nacos.seata.server<span class=\"token punctuation\">&#125;</span> <span class=\"token comment\"># 这里必须和 seata 注册到 nacos 的服务名一样默认 seata-server</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">&#123;</span>nacos.namespace<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">&#123;</span>nacos.username<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">&#123;</span>nacos.password<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token key atrule\">mybatis</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token key atrule\">mapper-locations</span><span class=\"token punctuation\">:</span> classpath<span class=\"token punctuation\">:</span>mapper/<span class=\"token important\">*.xml</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token key atrule\">type-aliases-package</span><span class=\"token punctuation\">:</span> cn.wenhe9.springcloud.entities</pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token key atrule\">feign</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token key atrule\">hystrix</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token key atrule\">management</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token key atrule\">endpoints</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token key atrule\">web</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      <span class=\"token key atrule\">exposure</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token key atrule\">include</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"*\"</span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p>SEATA 的执行流程</p>\n<ol>\n<li>TM 开启分布式事务（TM 向 TC 注册全局事务记录）</li>\n<li>按业务场景，编排数据库、等事务内资源（RM 向 TC 汇报资源准备状态）</li>\n<li>TM 结束分布式事务，事务一阶段结束（TM 通知 TC 提交 / 回滚分布式事务）</li>\n<li>TC 汇总事务信息，决定分布式事务是提交还是回滚</li>\n<li>TC 通知所有 RM 提交 / 回滚资源，事务二阶段结束</li>\n</ol>\n<h3 id=\"at原理\"><a class=\"markdownIt-Anchor\" href=\"#at原理\">#</a> AT 原理</h3>\n<ul>\n<li>SEATA 如何实现无侵入式的事务管理</li>\n</ul>\n<blockquote>\n<p>一阶段加载</p>\n</blockquote>\n<ul>\n<li>在一阶段，SEATA 会拦截 “业务 SQL”\n<ol>\n<li>解析 SQL 语义，找到业务 SQL 要更新的业务数据，在业务数据被更新之前，将其保存成 <code>before image</code></li>\n<li>执行业务 SQL 更新业务数据，在业务数据更新之后</li>\n<li>将其保存成 <code>after image</code> ，最后生成行锁</li>\n</ol>\n</li>\n<li>以上操作全部在一个数据库事务内完成，这样保证了一阶段操作的原子性</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220208152334509.png\"\n                      alt=\"image-20220208152334509\"\n                ></p>\n<blockquote>\n<p>二阶段提交</p>\n</blockquote>\n<ul>\n<li>\n<p>二阶段如是顺利提交的话，因为业务 SQL 在一阶段已经提交给数据库，所以 SEATA 框架只需将<mark>一阶段保存的快照数据和行锁删掉，完成数据请立即可</mark></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220208152556235.png\"\n                      alt=\"image-20220208152556235\"\n                ></p>\n</li>\n</ul>\n<blockquote>\n<p>二阶段回滚</p>\n</blockquote>\n<ul>\n<li>二阶段如果是回滚的话，SEATA 就需要回滚一阶段已经执行的业务 SQL，还原业务数据</li>\n<li>回滚方式便是利用 <code>before image</code>  还原业务数据，但在还原前首先要校验脏写，对比数据库当前业务数据和 <code>after image</code> ，如果两份数据完全一致就说明没有脏写，可以还原业务数据，如果不一致就说明有脏写，出现脏写就需要人工处理</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220208152953670.png\"\n                      alt=\"image-20220208152953670\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220208153436295.png\"\n                      alt=\"image-20220208153436295\"\n                ></p>\n",
            "tags": [
                "Spring Cloud"
            ]
        },
        {
            "id": "https://wait-you.github.io/2023/06/06/Service-Mesh/",
            "url": "https://wait-you.github.io/2023/06/06/Service-Mesh/",
            "title": "Service Mesh",
            "date_published": "2023-06-06T01:04:38.000Z",
            "content_html": "<h2 id=\"service-mesh\"><a class=\"markdownIt-Anchor\" href=\"#service-mesh\">#</a> Service Mesh</h2>\n<p><strong>下一代微服务技术</strong></p>\n<h3 id=\"服务开发模式和service-mesh的演化过程\"><a class=\"markdownIt-Anchor\" href=\"#服务开发模式和service-mesh的演化过程\">#</a> 服务开发模式和 Service Mesh 的演化过程</h3>\n<p>时代 0：开发人员想象中，不同服务间通信的方式，抽象表示如下：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202212052320689.png\"\n                      alt=\"image-20221205232021596\"\n                ></p>\n<p>时代 1：原始通信时代</p>\n<p>然而现实远比想象的复杂，在实际情况中，通信需要底层能够传输字节码和电子信号的物理层来完成，在 TCP 协议出现之前，服务需要自己处理网络通信所面临的丢包、乱序、重试等一系列流控问题，因此服务实现中，除了业务逻辑外，还夹杂着对网络传输问题的处理逻辑。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202212052320123.png\"\n                      alt=\"image-20221205232053063\"\n                ></p>\n<p>时代 2：TCP 时代</p>\n<p>为了避免每个服务都需要自己实现一套相似的网络传输处理逻辑，TCP 协议出现了，它解决了网络传输中通用的流量控制问题，将技术栈下移，从服务的实现中抽离出来，成为操作系统网络层的一部分。<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202212052321899.png\"\n                      alt=\"image-20221205232111840\"\n                ></p>\n<p>时代 3：第一代微服务</p>\n<p>在 TCP 出现之后，机器之间的网络通信不再是一个难题，以 GFS/BigTable/MapReduce 为代表的分布式系统得以蓬勃发展。这时，分布式系统特有的通信语义又出现了，如熔断策略、负载均衡、服务发现、认证和授权、quota 限制、trace 和监控等等，于是服务根据业务需求来实现一部分所需的通信语义。</p>\n<p>时代 4：第二代微服务</p>\n<p>为了避免每个服务都需要自己实现一套分布式系统通信的语义功能，随着技术的发展，一些面向微服务架构的开发框架出现了，如 Twitter 的 Finagle、Facebook 的 Proxygen 以及 Spring Cloud 等等，这些框架实现了分布式系统通信需要的各种通用语义功能：如负载均衡和服务发现等，因此一定程度上屏蔽了这些通信细节，使得开发人员使用较少的框架代码就能开发出健壮的分布式系统。<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202212052322328.png\"\n                      alt=\"image-20221205232220241\"\n                ></p>\n<p>时代 5：第一代 Service Mesh</p>\n<p>第二代微服务模式看似完美，但开发人员很快又发现，它也存在一些本质问题：</p>\n<ul>\n<li>其一，虽然框架本身屏蔽了分布式系统通信的一些通用功能实现细节，但开发者却要花更多精力去掌握和管理复杂的框架本身，在实际应用中，去<strong>追踪和解决框架出现的问题</strong>也绝非易事；</li>\n<li>其二，<strong>开发框架通常只支持一种或几种特定的语言</strong>，回过头来看文章最开始对<strong>微服务的定义，一个重要的特性就是语言无关</strong>，但那些没有框架支持的语言编写的服务，很难融入面向微服务的架构体系，想因地制宜的用多种语言实现架构体系中的不同模块也很难做到；</li>\n<li>其三，框架以 lib 库的形式和服务联编，<strong>复杂项目依赖时的库版本兼容问题</strong>非常棘手，同时，框架库的升级也无法对服务透明，服务会因为和业务无关的 lib 库升级而被迫升级；</li>\n</ul>\n<p>因此以 Linkerd，Envoy，NginxMesh 为代表的代理模式（边车模式）应运而生，这就是第一代 Service Mesh，它将分布式服务的通信抽象为单独一层，在这一层中实现负载均衡、服务发现、认证授权、监控追踪、流量控制等分布式系统所需要的功能，作为一个和服务对等的代理服务，和服务部署在一起，接管服务的流量，通过代理之间的通信间接完成服务之间的通信请求，这样上边所说的三个问题也迎刃而解。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202212052324688.png\"\n                      alt=\"image-20221205232402606\"\n                ></p>\n<p>如果我们从一个全局视角来看，就会得到如下部署图：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202212052324365.png\"\n                      alt=\"image-20221205232415268\"\n                ></p>\n<p>如果我们暂时略去服务，只看 Service Mesh 的单机组件组成的网络：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202212052324621.png\"\n                      alt=\"image-20221205232426529\"\n                ></p>\n<p>所谓 Service Mesh，也就是服务网格。它看起来确实就像是一个由若干服务代理所组成的错综复杂的网格。</p>\n<p>时代 6：第二代 Service Mesh</p>\n<p>第一代 Service Mesh 由一系列独立运行的单机代理服务构成，为了提供统一的上层运维入口，演化出了集中式的控制面板，所有的单机代理组件通过和控制面板交互进行网络拓扑策略的更新和单机数据的汇报。这就是以 Istio 为代表的第二代 Service Mesh。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202212052325344.png\"\n                      alt=\"image-20221205232533256\"\n                ></p>\n<p>只看单机代理组件 (数据面板) 和控制面板的 Service Mesh 全局部署视图如下：<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202212052325162.png\"\n                      alt=\"image-20221205232545075\"\n                ></p>\n<p>Service Mesh 的定义：</p>\n<blockquote>\n<p>服务网格是一个<em><strong>基础设施层</strong>，用于处理服务间通信。云原生应用有着复杂的服务拓扑，服务网格保证</em><em>请求在这些拓扑中可靠地穿梭</em> *。在实际应用当中，服务网格通常是由一系列轻量级的<strong>网络代理</strong>组成的，它们与应用程序部署在一起，但<strong>对应用程序透明</strong>。</p>\n</blockquote>\n<p>这个定义中，有四个关键词：</p>\n<p><em><strong>基础设施层</strong></em> +<em><strong> 请求在这些拓扑中可靠穿梭</strong></em>：这两个词加起来描述了 Service Mesh 的定位和功能，是不是似曾相识？没错，你一定想到了 TCP；</p>\n<p><em><strong>网络代理</strong></em>：这描述了 Service Mesh 的实现形态；</p>\n<p><em><strong>对应用透明</strong></em>：这描述了 Service Mesh 的关键特点，正是由于这个特点，Service Mesh 能够解决以 Spring Cloud 为代表的第二代微服务框架所面临的三个本质问题；</p>\n<p>Service Mesh 优点：</p>\n<ul>\n<li>屏蔽分布式系统通信的复杂性 (负载均衡、服务发现、认证授权、监控追踪、流量控制等等)，服务只用关注业务逻辑；</li>\n<li>真正的语言无关，服务可以用任何语言编写，只需和 Service Mesh 通信即可；</li>\n<li>对应用透明，Service Mesh 组件可以单独升级；</li>\n</ul>\n<p>Service Mesh 的挑战：</p>\n<ul>\n<li>Service Mesh 组件以代理模式计算并转发请求，一定程度上会降低通信系统性能，并增加系统资源开销；</li>\n<li>Service Mesh 组件接管了网络流量，因此服务的整体稳定性依赖于 Service Mesh，同时额外引入的大量 Service Mesh 服务实例的运维和管理也是一个挑战；</li>\n</ul>\n<h2 id=\"东西流量和南北流量\"><a class=\"markdownIt-Anchor\" href=\"#东西流量和南北流量\">#</a> 东西流量和南北流量</h2>\n<p>南北流量（NORTH-SOUTH traffic）和东西流量（EAST-WEST traffic）是数据中心环境中的网络流量模式。</p>\n<p>假设我们尝试通过浏览器访问某些 Web 应用。Web 应用部署在位于某个数据中心的应用服务器中。在多层体系结构中，典型的数据中心不仅包含应用服务器，还包含其他服务器，如负载均衡器、数据库等，以及路由器和交换机等网络组件。假设应用服务器是负载均衡器的前端。</p>\n<p>当我们访问 web 应用时，会发生以下类型的网络流量：</p>\n<ul>\n<li>客户端（位于数据中心一侧的浏览器）与负载均衡器（位于数据中心）之间的网络流量</li>\n<li>负载均衡器、应用服务器、数据库等之间的网络流量，它们都位于数据中心。</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202212052334033.png\"\n                      alt=\"image-20221205233404891\"\n                ></p>\n<h3 id=\"南北流量\"><a class=\"markdownIt-Anchor\" href=\"#南北流量\">#</a> 南北流量</h3>\n<p>在这个例子中，前者即即客户端和服务器之间的流量被称为南北流量。简而言之，南北流量是 server-client 流量。</p>\n<h3 id=\"东西流量\"><a class=\"markdownIt-Anchor\" href=\"#东西流量\">#</a> 东西流量</h3>\n<p>第二种流量即不同服务器之间的流量与数据中心或不同数据中心之间的网络流被称为东西流量。简而言之，东西流量是 server-server 流量。</p>\n",
            "tags": [
                "Service Mesh"
            ]
        },
        {
            "id": "https://wait-you.github.io/2023/06/06/Python/",
            "url": "https://wait-you.github.io/2023/06/06/Python/",
            "title": "Python",
            "date_published": "2023-06-06T01:03:36.000Z",
            "content_html": "<h1 id=\"python\"><a class=\"markdownIt-Anchor\" href=\"#python\">#</a> Python</h1>\n<h2 id=\"基础语法\"><a class=\"markdownIt-Anchor\" href=\"#基础语法\">#</a> 基础语法</h2>\n<h3 id=\"字面量\"><a class=\"markdownIt-Anchor\" href=\"#字面量\">#</a> 字面量</h3>\n<h4 id=\"什么是字面量\"><a class=\"markdownIt-Anchor\" href=\"#什么是字面量\">#</a> 什么是字面量</h4>\n<p>字面量：在代码中，被写下来的固定的值，称之为字面量</p>\n<h4 id=\"常见值类型\"><a class=\"markdownIt-Anchor\" href=\"#常见值类型\">#</a> 常见值类型</h4>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202210111425899.png\"\n                      alt=\"image-20221011142529705\"\n                ></p>\n<h4 id=\"字符串\"><a class=\"markdownIt-Anchor\" href=\"#字符串\">#</a> 字符串</h4>\n<p>字符串 (string)，又称文本，是由任意数量的字符如中文、英文、各类符号、数字组成的。所以叫做字符的串。</p>\n<h3 id=\"注释\"><a class=\"markdownIt-Anchor\" href=\"#注释\">#</a> 注释</h3>\n<h4 id=\"注释的概念\"><a class=\"markdownIt-Anchor\" href=\"#注释的概念\">#</a> 注释的概念</h4>\n<p>注释：在程序代码中对程序代码进行解释说明的文字</p>\n<p>作用：注释不是程序，不能被执行，只是对程序代码进行解释说明，让别人可以看懂程序代码的作用，能够大大增强程序的可读性。</p>\n<h4 id=\"注释的分类\"><a class=\"markdownIt-Anchor\" href=\"#注释的分类\">#</a> 注释的分类</h4>\n<p>单行注释：以  <code>#</code>  开头， <code>#</code>  右边的所有文字当做说明，而不是真正要执行的程序，起辅助说明作用</p>\n<ul>\n<li>注意：  <code>#</code> 号和注释内容一般建议以一个空格隔开</li>\n</ul>\n<p>多行注释：以一对 三个双引号引起来的 (“”&quot; 注释内容 “”) 来解释说明一段代码的作用使用方法</p>\n<h3 id=\"变量\"><a class=\"markdownIt-Anchor\" href=\"#变量\">#</a> 变量</h3>\n<p>变量：在程序运行时，能存储计算结果或能表示值的抽象概念</p>\n<p>简单来说，变量就是程序在运行时，记录数据用的</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202210111440457.png\"\n                      alt=\"image-20221011144030395\"\n                ></p>\n<h3 id=\"数据类型\"><a class=\"markdownIt-Anchor\" href=\"#数据类型\">#</a> 数据类型</h3>\n<p>使用 <code>type()</code>  查询数据的类型</p>\n<p>变量没有数据类型，但它所存储的数据有类型</p>\n<h3 id=\"数据类型转换\"><a class=\"markdownIt-Anchor\" href=\"#数据类型转换\">#</a> 数据类型转换</h3>\n<h4 id=\"常见的转换语句\"><a class=\"markdownIt-Anchor\" href=\"#常见的转换语句\">#</a> 常见的转换语句</h4>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202210111604356.png\"\n                      alt=\"image-20221011160411271\"\n                ></p>\n<h3 id=\"标识符\"><a class=\"markdownIt-Anchor\" href=\"#标识符\">#</a> 标识符</h3>\n<p>用户在编程的时候所使用一系列名字，用于给变量、类、方法等命名</p>\n<p>标识符的命名规则主要有三类：</p>\n<ul>\n<li>内容限定</li>\n<li>大小写敏感</li>\n<li>不可使用关键字</li>\n</ul>\n<p>标识符命名中，只允许出现：</p>\n<ul>\n<li>英文</li>\n<li>中文</li>\n<li>数字</li>\n<li>下划线 (_)</li>\n</ul>\n<p>不推荐使用中文</p>\n<p>数字不可以开头</p>\n<h3 id=\"运算符\"><a class=\"markdownIt-Anchor\" href=\"#运算符\">#</a> 运算符</h3>\n<h4 id=\"算术运算符\"><a class=\"markdownIt-Anchor\" href=\"#算术运算符\">#</a> 算术运算符</h4>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202210111622356.png\"\n                      alt=\"image-20221011162253269\"\n                ></p>\n<h4 id=\"赋值运算符\"><a class=\"markdownIt-Anchor\" href=\"#赋值运算符\">#</a> 赋值运算符</h4>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202210111626143.png\"\n                      alt=\"image-20221011162634027\"\n                ></p>\n<h3 id=\"字符串扩展\"><a class=\"markdownIt-Anchor\" href=\"#字符串扩展\">#</a> 字符串扩展</h3>\n<h4 id=\"字符串的三种定义方式\"><a class=\"markdownIt-Anchor\" href=\"#字符串的三种定义方式\">#</a> 字符串的三种定义方式</h4>\n<p>单引号定义法</p>\n<div class=\"highlight-container\" data-rel=\"Python\"><figure class=\"iseeu highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = <span class=\"string\">&#x27;hello world&#x27;</span></span><br></pre></td></tr></table></figure></div>\n<p>双引号定义法</p>\n<div class=\"highlight-container\" data-rel=\"Python\"><figure class=\"iseeu highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = <span class=\"string\">&quot;hello world&quot;</span></span><br></pre></td></tr></table></figure></div>\n<p>三引号定义法</p>\n<div class=\"highlight-container\" data-rel=\"Python\"><figure class=\"iseeu highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = <span class=\"string\">&quot;&quot;&quot;hello world&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></div>\n<p>三引号定义法，和多行注释写法一样，同样支持换行操作</p>\n<p>使用变量接受他，他就是字符串</p>\n<p>不使用变量接收他，就可以作为多行注释使用</p>\n<p>引号的嵌套：</p>\n<ul>\n<li>可以使用 <code>\\</code>  来进行转义</li>\n<li>单引号内可以使用双引号或双引号内可以写单引号</li>\n</ul>\n<h4 id=\"字符串拼接\"><a class=\"markdownIt-Anchor\" href=\"#字符串拼接\">#</a> 字符串拼接</h4>\n<ol>\n<li>使用两个字符串字面量、两个字符串变量之间的拼接 使用  <code>+</code>  号\n<ul>\n<li>无法和非字符串拼接</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"字符串格式化\"><a class=\"markdownIt-Anchor\" href=\"#字符串格式化\">#</a> 字符串格式化</h4>\n<p>使用 <code>%s</code>  的方式完成占位，实现字符串的拼接</p>\n<ul>\n<li>% 表示 占位</li>\n<li>s 表示将变量变成字符串放入占位的地方</li>\n</ul>\n<h4 id=\"数字精度控制\"><a class=\"markdownIt-Anchor\" href=\"#数字精度控制\">#</a> 数字精度控制</h4>\n<p>可以使用辅助符号 &quot;m.n&quot; 来控制数据的宽度和精度</p>\n<ul>\n<li>m ， 控制宽度，要求是数字，设置的宽度小于数字自身，不生效\n<ul>\n<li>小数点和小数部分也算入宽度计算</li>\n</ul>\n</li>\n<li>.n ， 控制小数点精度，要求是数字，会进行小数的四舍五入</li>\n</ul>\n<h4 id=\"快速写法\"><a class=\"markdownIt-Anchor\" href=\"#快速写法\">#</a> 快速写法</h4>\n<p>通过语法  <code>f&quot;内容{变量}&quot;</code>  的格式来快速格式化</p>\n<div class=\"highlight-container\" data-rel=\"Python\"><figure class=\"iseeu highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;hello <span class=\"subst\">&#123;<span class=\"built_in\">str</span>&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"数据输入\"><a class=\"markdownIt-Anchor\" href=\"#数据输入\">#</a> 数据输入</h3>\n<p><code>input()</code>  语句的功能是，获取键盘输入的数据</p>\n<p>可以使用 <code>input(提示信息)</code> ，用以在使用者输入内容之前显示提示内容</p>\n<p>要注意，无论键盘输入什么类型的数据，获取到的数据永远都是字符串类型</p>\n<h2 id=\"判断语句\"><a class=\"markdownIt-Anchor\" href=\"#判断语句\">#</a> 判断语句</h2>\n<h3 id=\"布尔类型和比较运算符\"><a class=\"markdownIt-Anchor\" href=\"#布尔类型和比较运算符\">#</a> 布尔类型和比较运算符</h3>\n<p>在 python 中可以表示真假的数据类型是：</p>\n<ul>\n<li>布尔类型，字面量 <code>True</code>  表示真，字面量 <code>Flase</code>  表示假</li>\n</ul>\n<p>除了布尔类型外，还可以通过比较运算得到布尔类型</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202210111921177.png\"\n                      alt=\"image-20221011192159062\"\n                ></p>\n<h3 id=\"if语句的基本格式\"><a class=\"markdownIt-Anchor\" href=\"#if语句的基本格式\">#</a> if 语句的基本格式</h3>\n<div class=\"highlight-container\" data-rel=\"Python\"><figure class=\"iseeu highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    num = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入一个数字\\n&quot;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> num &gt; <span class=\"number\">10</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;大于10&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> num == <span class=\"number\">10</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;刚好10&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;小于10&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;必须为数字&quot;</span>)</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"while循环\"><a class=\"markdownIt-Anchor\" href=\"#while循环\">#</a> while 循环</h3>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202210112007156.png\"\n                      alt=\"image-20221011200746081\"\n                ></p>\n<h3 id=\"for循环\"><a class=\"markdownIt-Anchor\" href=\"#for循环\">#</a> for 循环</h3>\n<h4 id=\"遍历字符串\"><a class=\"markdownIt-Anchor\" href=\"#遍历字符串\">#</a> 遍历字符串</h4>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202210112057435.png\"\n                      alt=\"image-20221011205711371\"\n                ></p>\n<h4 id=\"range语句\"><a class=\"markdownIt-Anchor\" href=\"#range语句\">#</a> range 语句</h4>\n<p>range 用来获取一个简单的数字序列</p>\n<ol>\n<li>语法 1\n<ul>\n<li>range(num)</li>\n<li>获取一个从 0 开始，到 num 结束的数字序列（不含 num 本身）</li>\n<li>如 range (5) 取得的数据是: [0, 1 ,2 , 3, 4]</li>\n</ul>\n</li>\n<li>语法 2\n<ul>\n<li>range(num1, num2)</li>\n<li>获得一个从 num1 开始，到 num2 结束的数字序列（不含 num2 本身）</li>\n<li>如 range (5, 10) 取得的数据是： [5, 6, 7, 8, 9]</li>\n</ul>\n</li>\n<li>语法 3\n<ul>\n<li>range(num1, num2, step)</li>\n<li>获得一个从 num1 开始，到 num2 结束的数字序列（不含 num2 本身）</li>\n<li>数字之间的步长，以 step 为基准（step 默认为 1）</li>\n<li>如 range (5, 10, 2) 取得的数据是: [5, 7, 9]</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"函数\"><a class=\"markdownIt-Anchor\" href=\"#函数\">#</a> 函数</h2>\n<h4 id=\"函数的概念\"><a class=\"markdownIt-Anchor\" href=\"#函数的概念\">#</a> 函数的概念</h4>\n<p>函数： 是组织好的、可重复使用的，用来实现特定功能的代码段</p>\n<p>好处：</p>\n<ul>\n<li>将功能封装在函数中，可供随时随地的重复使用</li>\n<li>提高代码的复用性，减少重复代码，提高开发效率</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202210112214421.png\"\n                      alt=\"image-20221011221401358\"\n                ></p>\n<h4 id=\"函数的传入参数\"><a class=\"markdownIt-Anchor\" href=\"#函数的传入参数\">#</a> 函数的传入参数</h4>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202210112221602.png\"\n                      alt=\"image-20221011222111504\"\n                ></p>\n<h4 id=\"none类型\"><a class=\"markdownIt-Anchor\" href=\"#none类型\">#</a> None 类型</h4>\n<p>None 是类型 <code>NoneType</code>  的字面量，用于表示：空的、无意义的</p>\n<p>不使用 return 语句即返回 None</p>\n<p>主动 return None</p>\n<p>使用场景</p>\n<ul>\n<li>函数返回值</li>\n<li>if 判断</li>\n<li>变量定义</li>\n</ul>\n<h4 id=\"变量在函数中的作用域\"><a class=\"markdownIt-Anchor\" href=\"#变量在函数中的作用域\">#</a> 变量在函数中的作用域</h4>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202210112254761.png\"\n                      alt=\"image-20221011225427693\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Python\"><figure class=\"iseeu highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num = <span class=\"number\">400</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_a</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(num)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_b</span>():</span><br><span class=\"line\">    <span class=\"keyword\">global</span> num</span><br><span class=\"line\">    num = <span class=\"number\">500</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(num)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">test_a()</span><br><span class=\"line\">test_b()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(num)</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"数据容器\"><a class=\"markdownIt-Anchor\" href=\"#数据容器\">#</a> 数据容器</h2>\n<h3 id=\"概念\"><a class=\"markdownIt-Anchor\" href=\"#概念\">#</a> 概念</h3>\n<p>数据容器：一种可以容纳多份数据的数据类型，容纳的每一份数据称之为 1 个元素，每一个元素可以是任意类型的数据，如字符串、数字、布尔等。</p>\n<p>数据容器根据特点的不同，如：</p>\n<ul>\n<li>是否支持重复元素</li>\n<li>是否可以修改</li>\n<li>是否有序，等</li>\n</ul>\n<p>分为 5 类，分别是：</p>\n<p>列表 (List)、元组 (Tuple)、字符串 (Str)、集合 (Set)、字典 (dict)</p>\n<h3 id=\"列表\"><a class=\"markdownIt-Anchor\" href=\"#列表\">#</a> 列表</h3>\n<ol>\n<li>\n<p>列表的定义语法</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Python\"><figure class=\"iseeu highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>元素<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> 元素<span class=\"token number\">2</span><span class=\"token punctuation\">,</span> 元素<span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>什么是元素</p>\n<ul>\n<li>数据容器内的每一份数据，都称之为元素</li>\n</ul>\n</li>\n<li>\n<p>元素的类型有限制吗</p>\n<ul>\n<li>元素的数据类型没有限制，甚至元素也可以是列表，这样就定义了嵌套列表</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"列表的下标索引\"><a class=\"markdownIt-Anchor\" href=\"#列表的下标索引\">#</a> 列表的下标索引</h4>\n<p>正向</p>\n<p>反向</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202210121056386.png\"\n                      alt=\"image-20221012105629230\"\n                ></p>\n<h4 id=\"列表的方法\"><a class=\"markdownIt-Anchor\" href=\"#列表的方法\">#</a> 列表的方法</h4>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202210121109655.png\"\n                      alt=\"image-20221012110958532\"\n                ></p>\n<h4 id=\"列表的特点\"><a class=\"markdownIt-Anchor\" href=\"#列表的特点\">#</a> 列表的特点</h4>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202210121111367.png\"\n                      alt=\"image-20221012111150309\"\n                ></p>\n<h3 id=\"元组\"><a class=\"markdownIt-Anchor\" href=\"#元组\">#</a> 元组</h3>\n<p>元组同列表一样，都是可以封装多个、不同类型的元素在内。</p>\n<p>但最大的不同点在于，元组一旦定义完成，就不可修改</p>\n<h4 id=\"元组的相关操作\"><a class=\"markdownIt-Anchor\" href=\"#元组的相关操作\">#</a> 元组的相关操作</h4>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202210121225178.png\"\n                      alt=\"image-20221012122549110\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202210121231496.png\"\n                      alt=\"image-20221012123101405\"\n                ></p>\n<h3 id=\"字符串-2\"><a class=\"markdownIt-Anchor\" href=\"#字符串-2\">#</a> 字符串</h3>\n<p>字符串可以看做是一个字符的容器，支持下标索引等特性</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202210121356277.png\"\n                      alt=\"image-20221012135626146\"\n                ></p>\n<p>字符串的特点</p>\n<ul>\n<li>只可以存储字符串</li>\n<li>长度任意（取决于内存大小）</li>\n<li>支持下标索引</li>\n<li>允许重复字符串存在</li>\n<li>不可以修改（增加或删除元素等）</li>\n<li>支持 for 循环</li>\n</ul>\n<h3 id=\"序列\"><a class=\"markdownIt-Anchor\" href=\"#序列\">#</a> 序列</h3>\n<p>序列是指：内容连续、有序、而是用下标索引的一类数据容器</p>\n<p>列表、元组、字符串均可以视为序列</p>\n<p>序列支持切片，即：列表、元组、字符串均支持进行切片操作</p>\n<p>切片：从一个序列中，取出一个子序列</p>\n<p>语法： 序列 [起始下标：结束下标：步长]</p>\n<p>表示从序列中，从指定位置开始，依次取出元素，到指定位置结束，得到一个新序列</p>\n<ul>\n<li>起始下标表示从何处开始，可以留空，留空视作从头开始</li>\n<li>结束下标（不含）表示何处结束，可以留空，留空视作截取到尾部</li>\n<li>步长表示，依次取元素的间隔\n<ul>\n<li>步长 1 表示，一个个取元素</li>\n<li>步长 2 表示，每次跳过一个元素取</li>\n<li>步长 N 表示，每次跳过 N-1 个元素取</li>\n<li>步长为负数表示，反向取（注意，起始下标和结束下标也要反向标记）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"集合\"><a class=\"markdownIt-Anchor\" href=\"#集合\">#</a> 集合</h3>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202210121448620.png\"\n                      alt=\"image-20221012144818453\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202210121448777.png\"\n                      alt=\"image-20221012144839711\"\n                ></p>\n<h3 id=\"字典\"><a class=\"markdownIt-Anchor\" href=\"#字典\">#</a> 字典</h3>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202210121504310.png\"\n                      alt=\"image-20221012150409214\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202210121544041.png\"\n                      alt=\"image-20221012154431936\"\n                ></p>\n<h3 id=\"数据容器特点的对比\"><a class=\"markdownIt-Anchor\" href=\"#数据容器特点的对比\">#</a> 数据容器特点的对比</h3>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202210121557610.png\"\n                      alt=\"image-20221012155704430\"\n                ></p>\n<h3 id=\"容器通用功能\"><a class=\"markdownIt-Anchor\" href=\"#容器通用功能\">#</a> 容器通用功能</h3>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202210121622353.png\"\n                      alt=\"image-20221012162202237\"\n                ></p>\n<h2 id=\"文件\"><a class=\"markdownIt-Anchor\" href=\"#文件\">#</a> 文件</h2>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202210121713744.png\"\n                      alt=\"image-20221012171348670\"\n                ></p>\n",
            "tags": [
                "Python"
            ]
        },
        {
            "id": "https://wait-you.github.io/2023/06/06/Node-js/",
            "url": "https://wait-you.github.io/2023/06/06/Node-js/",
            "title": "Node.js",
            "date_published": "2023-06-06T01:02:34.000Z",
            "content_html": "<h1 id=\"nodejs\"><a class=\"markdownIt-Anchor\" href=\"#nodejs\">#</a> Node.js</h1>\n<h2 id=\"概念\"><a class=\"markdownIt-Anchor\" href=\"#概念\">#</a> 概念</h2>\n<ul>\n<li>\n<p>一句话介绍</p>\n<ul>\n<li>Node.js 是一个基于 <code>Chrome V8</code>  引擎的 <code>JavaScript\t</code> 运行时</li>\n</ul>\n</li>\n<li>\n<p>js 运行时，也叫 js 执行环境</p>\n<ul>\n<li>编写 js 代码 -&gt; html -&gt; 浏览器\n<ul>\n<li>浏览器为什么可以解析一个 网页？\n<ul>\n<li>UI 渲染引擎</li>\n<li>JS 执行引擎</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>主要目的</p>\n<ul>\n<li>是为了让 js 在其他地方执行，应对各种业务\n<ul>\n<li>web 服务开发\n<ul>\n<li>游戏服务器</li>\n<li>接口服务器</li>\n<li>…</li>\n</ul>\n</li>\n<li>构建工具</li>\n<li>命令行工具\n<ul>\n<li>npm</li>\n<li>git</li>\n<li>…</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>node 相当于将引擎单独封装，所以他可以识别 es 语法部分，但无法识别 DOM 和 BOM</p>\n</li>\n</ul>\n<h2 id=\"初体验\"><a class=\"markdownIt-Anchor\" href=\"#初体验\">#</a> 初体验</h2>\n<ul>\n<li>\n<p>准备代码</p>\n<ul>\n<li>\n<p>创建一个单独的 js 文件</p>\n</li>\n<li>\n<p>代码内容</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> content <span class=\"token operator\">=</span> <span class=\"token string\">'hello world'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"版本管理nvm\"><a class=\"markdownIt-Anchor\" href=\"#版本管理nvm\">#</a> 版本管理 NVM</h2>\n<h3 id=\"常用命令\"><a class=\"markdownIt-Anchor\" href=\"#常用命令\">#</a> 常用命令</h3>\n<ul>\n<li>nvm 操作\n<ul>\n<li>查看版本\n<ul>\n<li><code>nvm -v</code></li>\n</ul>\n</li>\n<li>查看 / 設置根路徑\n<ul>\n<li><code>nvm root [path]</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Node.js 版本操作\n<ul>\n<li>查看全部安裝版本\n<ul>\n<li><code>nvm ls</code></li>\n</ul>\n</li>\n<li>查看全部可安裝版本\n<ul>\n<li><code>nvm ls-remote</code></li>\n</ul>\n</li>\n<li>安裝指定版本 Node.js\n<ul>\n<li><code>nvm install &lt;version&gt;</code></li>\n</ul>\n</li>\n<li>卸載指定版本 Node.js\n<ul>\n<li><code>nvm uninstall &lt;version&gt;</code></li>\n</ul>\n</li>\n<li>安裝最新長期支持版本\n<ul>\n<li><code>nvm install --lts</code></li>\n</ul>\n</li>\n<li>切換指定版本 Node.js\n<ul>\n<li><code>nvm use node &lt;version&gt;</code></li>\n</ul>\n</li>\n<li>查看當前使用的 Node.js 版本\n<ul>\n<li><code>nvm current</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"node全局的變量\"><a class=\"markdownIt-Anchor\" href=\"#node全局的變量\">#</a> Node 全局的變量</h2>\n<h3 id=\"概念-2\"><a class=\"markdownIt-Anchor\" href=\"#概念-2\">#</a> 概念</h3>\n<ul>\n<li>全局环境可直接调用的变量</li>\n</ul>\n<h3 id=\"常用全局变量\"><a class=\"markdownIt-Anchor\" href=\"#常用全局变量\">#</a> 常用全局变量</h3>\n<ul>\n<li>console\n<ul>\n<li>log\n<ul>\n<li>日志</li>\n</ul>\n</li>\n<li>warn\n<ul>\n<li>警告</li>\n</ul>\n</li>\n<li>time + timeEnd\n<ul>\n<li>定义相同的标签，计算标签中间的代码的执行时间</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>_dirname\n<ul>\n<li>当前文件所在目录的绝对路径</li>\n</ul>\n</li>\n<li>_filename\n<ul>\n<li>当前文件所在的绝对路径</li>\n</ul>\n</li>\n<li>setInterval(callback, dealay[,…args])\n<ul>\n<li>定时器</li>\n<li>clearInterval (intervalObject) 清除定时器</li>\n</ul>\n</li>\n<li>setTimeout(callback, delay[,…args])\n<ul>\n<li>计时器</li>\n<li>clearTimeout (timeoutObject) 清除计时器</li>\n</ul>\n</li>\n<li>export</li>\n<li>module</li>\n<li>require()</li>\n</ul>\n<h2 id=\"模块和包的概念\"><a class=\"markdownIt-Anchor\" href=\"#模块和包的概念\">#</a> 模块和包的概念</h2>\n<h3 id=\"模块的概念\"><a class=\"markdownIt-Anchor\" href=\"#模块的概念\">#</a> 模块的概念</h3>\n<ul>\n<li>\n<p>将一组相关的 API 封装在同一个文件内部，供外界引入使用，这个文件被称为 “模块”</p>\n</li>\n<li>\n<p>不同的模块有不同的名称</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Level1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token function-variable function\">jia</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n1<span class=\"token punctuation\">,</span> n2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> n1<span class=\"token operator\">+</span>n2</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token function-variable function\">jian</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n1<span class=\"token punctuation\">,</span> n2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> n1<span class=\"token operator\">-</span>n2</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Level2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token function-variable function\">cheng</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n1<span class=\"token punctuation\">,</span> n2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> n1<span class=\"token operator\">*</span>n2</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token function-variable function\">chu</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n1<span class=\"token punctuation\">,</span> n2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> n1<span class=\"token operator\">/</span>n2</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    Level1<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    Level2</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">1</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n<li>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span>Level1<span class=\"token punctuation\">,</span> Level2<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./01-math'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span>gDate<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./02-date'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Level1<span class=\"token punctuation\">.</span><span class=\"token function\">jia</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Level2<span class=\"token punctuation\">.</span><span class=\"token function\">cheng</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>gDate<span class=\"token punctuation\">.</span><span class=\"token function\">gDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"包的概念\"><a class=\"markdownIt-Anchor\" href=\"#包的概念\">#</a> 包的概念</h3>\n<ul>\n<li>\n<p>有些功能的实现，并不能单独的由一个模块实现，需要多个相关模块的配合</p>\n</li>\n<li>\n<p>把这些相关的模块，放在同一个文件夹内部，再辅助以描述文件，形成了包的概念</p>\n</li>\n<li>\n<p>描述文件：  <code>package.json</code></p>\n<ul>\n<li>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>描述</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td>项目名称</td>\n<td>“itlike”</td>\n</tr>\n<tr>\n<td>version</td>\n<td>版本号（大版本，中版本，小版本）</td>\n<td>“1.1.0”</td>\n</tr>\n<tr>\n<td>description</td>\n<td>项目功能描述</td>\n<td>“纯属测试，没啥意义”</td>\n</tr>\n<tr>\n<td>keywords</td>\n<td>项目关键词，发布后供用户检索用</td>\n<td>[“撩课”, “SZ”, “Node”]</td>\n</tr>\n<tr>\n<td>homepage</td>\n<td>项目主页地址</td>\n<td>“<a class=\"link\"   href=\"http://wenhe9.cn\" >http://wenhe9.cn <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>”</td>\n</tr>\n<tr name=\"\" :=\"\" 撩课-Sz,=\"\" email=\"\" :=\"\" itlke-sz@vx.com=\"\">\n<td>author</td>\n<td>项目作者</td>\n<td></td>\n</tr>\n<tr>\n<td>main</td>\n<td>项目主文件</td>\n<td>“index.js”</td>\n</tr>\n<tr like_start=\"\" :=\"\" nodeindex.js=\"\">\n<td>scripts</td>\n<td>可用脚本 (npm run 名称)</td>\n<td></td>\n</tr>\n<tr axios=\"\" :=\"\" 0.21.1=\"\">\n<td>dependencies</td>\n<td>生产环境依赖的包</td>\n<td></td>\n</tr>\n<tr>\n<td>devDependencies</td>\n<td>开发环境依赖的包</td>\n<td><ruby>“webpack” : &quot;<rp>【</rp><rt>4.29.6&quot;</rt><rp>】</rp></ruby></td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"node就遵循了这种模块化的设计\"><a class=\"markdownIt-Anchor\" href=\"#node就遵循了这种模块化的设计\">#</a> node 就遵循了这种模块化的设计</h3>\n<ul>\n<li>将不同的功能，放在了不同的包 / 模块中</li>\n<li>在需要用到的地方，直接引入使用即可</li>\n</ul>\n<h2 id=\"模块的分类\"><a class=\"markdownIt-Anchor\" href=\"#模块的分类\">#</a> 模块的分类</h2>\n<h3 id=\"核心模块\"><a class=\"markdownIt-Anchor\" href=\"#核心模块\">#</a> 核心模块</h3>\n<h4 id=\"概念-3\"><a class=\"markdownIt-Anchor\" href=\"#概念-3\">#</a> 概念</h4>\n<ul>\n<li>因为有些功能是 Node 自带的，提供给我们使用</li>\n<li>那把这一部分称作是 Node 的核心模块\n<ul>\n<li>fs</li>\n<li>path</li>\n<li>http</li>\n<li>os</li>\n<li>…</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"特性\"><a class=\"markdownIt-Anchor\" href=\"#特性\">#</a> 特性</h4>\n<ul>\n<li>已经被编译成二进制，无法查看源码</li>\n</ul>\n<h3 id=\"三方模块\"><a class=\"markdownIt-Anchor\" href=\"#三方模块\">#</a> 三方模块</h3>\n<ul>\n<li>一般都是通过 npm/yarn 安装</li>\n</ul>\n<h3 id=\"自定义模块\"><a class=\"markdownIt-Anchor\" href=\"#自定义模块\">#</a> 自定义模块</h3>\n<h2 id=\"模块化实施规范\"><a class=\"markdownIt-Anchor\" href=\"#模块化实施规范\">#</a> 模块化实施规范</h2>\n<h3 id=\"解决的问题\"><a class=\"markdownIt-Anchor\" href=\"#解决的问题\">#</a> 解决的问题</h3>\n<ul>\n<li>一个模块内的东西，如何导出去让别的模块使用</li>\n<li>另一个模块，如何引入这个模块来使用</li>\n</ul>\n<h3 id=\"规范方案\"><a class=\"markdownIt-Anchor\" href=\"#规范方案\">#</a> 规范方案</h3>\n<h4 id=\"es6之前\"><a class=\"markdownIt-Anchor\" href=\"#es6之前\">#</a> ES6 之前</h4>\n<ul>\n<li>并没有官方标准的模块化实施方案</li>\n<li>在社区中产生了几个主流规范\n<ul>\n<li>AMD\n<ul>\n<li>代表框架 ---- RequireJS</li>\n</ul>\n</li>\n<li>CMD\n<ul>\n<li>代表框架 ---- SeaJS</li>\n</ul>\n</li>\n<li>CommonJS\n<ul>\n<li><code>module.exports</code>  导出</li>\n<li><code>require()</code>  导入</li>\n<li>注意\n<ul>\n<li>前端浏览器不支持，在后端 Node 使用</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"es6之后\"><a class=\"markdownIt-Anchor\" href=\"#es6之后\">#</a> ES6 之后</h4>\n<ul>\n<li>之前的主流规范都没有采用</li>\n<li>定义了新的规范\n<ul>\n<li>import</li>\n<li>export</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"commonjs模块使用规范\"><a class=\"markdownIt-Anchor\" href=\"#commonjs模块使用规范\">#</a> CommonJS 模块使用规范</h4>\n<ul>\n<li>模块作用域\n<ul>\n<li>概念\n<ul>\n<li>文件作用域\n<ul>\n<li>Node 中，没法定义自己的全局作用域，只有模块作用域</li>\n</ul>\n</li>\n<li>所以不需要担心一个文件中的变量，会被其他文件修改影响</li>\n<li>外部访问不到内部，内部也访问不到外部</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>模块内向外导出\n<ul>\n<li>exports 使用\n<ul>\n<li>分开导出\n<ul>\n<li><code>exports.key = value</code></li>\n</ul>\n</li>\n<li>统一导出\n<ul>\n<li><code>module.exports = 需要导出去的数据</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>使用方导入模块</li>\n</ul>\n<h2 id=\"核心模块如何使用\"><a class=\"markdownIt-Anchor\" href=\"#核心模块如何使用\">#</a> 核心模块如何使用</h2>\n<ul>\n<li>核心模块为 node 安装时自带的，直接通过 <code>require</code>  引入使用即可</li>\n</ul>\n<h3 id=\"常用模块操作\"><a class=\"markdownIt-Anchor\" href=\"#常用模块操作\">#</a> 常用模块操作</h3>\n<h4 id=\"路径处理模块-path\"><a class=\"markdownIt-Anchor\" href=\"#路径处理模块-path\">#</a> 路径处理模块 ： path</h4>\n<ul>\n<li>作用\n<ul>\n<li>处理各种路径问题</li>\n</ul>\n</li>\n<li>常用 API\n<ul>\n<li>路径的拼接\n<ul>\n<li><code>path.join([path1][,path2]...)</code></li>\n</ul>\n</li>\n<li>路径处理为绝对路径\n<ul>\n<li><code>path.resolve([from...,], to)</code></li>\n</ul>\n</li>\n<li>获取一个路径的拓展名\n<ul>\n<li><code>path.extname(p)</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"文件操作模块-fs\"><a class=\"markdownIt-Anchor\" href=\"#文件操作模块-fs\">#</a> 文件操作模块 fs</h4>\n<ul>\n<li>作用\n<ul>\n<li>可以使用此模块提供的 API 来读写文件</li>\n<li>在 fs 模块中，所有的方法都分为同步和异步两种实现\n<ul>\n<li>有 sync 后缀的方法为同步方法</li>\n<li>不具有 sync 后缀的方法为异步方法</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "Node.js"
            ]
        },
        {
            "id": "https://wait-you.github.io/2023/06/06/Mybatis%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F%E6%95%88%E7%8E%87%E5%AF%B9%E6%AF%94/",
            "url": "https://wait-you.github.io/2023/06/06/Mybatis%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F%E6%95%88%E7%8E%87%E5%AF%B9%E6%AF%94/",
            "title": "Mybatis批量插入数据的三种方式效率对比",
            "date_published": "2023-06-06T01:01:14.000Z",
            "content_html": "<h1 id=\"mybatis批量插入数据的三种方式效率对比\"><a class=\"markdownIt-Anchor\" href=\"#mybatis批量插入数据的三种方式效率对比\">#</a> Mybatis 批量插入数据的三种方式效率对比</h1>\n<ul>\n<li>写项目碰到一个场景，解析从前端传来的 excel 文件，然后逐行添加到数据库中，当当因为是逐行添加，如果采用传统的一行创建一个 sql 的花，效率是比较低的，所以采用批量添加的方式，以下为三种插入数据方式的对比：</li>\n</ul>\n<h2 id=\"逐行insert\"><a class=\"markdownIt-Anchor\" href=\"#逐行insert\">#</a> 逐行 insert</h2>\n<p>首先来看代码：</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SubjectListener</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AnalysisEventListener</span>&lt;SubjectEeVo&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 锁</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">ReentrantLock</span> <span class=\"variable\">lock</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReentrantLock</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> SubjectMapper subjectMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">invoke</span><span class=\"params\">(SubjectEeVo subjectEeVo, AnalysisContext analysisContext)</span> &#123;</span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Subject</span> <span class=\"variable\">subject</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Subject</span>();</span><br><span class=\"line\">            <span class=\"comment\">//SubjectEeVo -&gt; Subject</span></span><br><span class=\"line\">            BeanUtils.copyProperties(subjectEeVo, subject);</span><br><span class=\"line\">            <span class=\"comment\">//添加</span></span><br><span class=\"line\">            subjectMapper.insert(subject);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doAfterAllAnalysed</span><span class=\"params\">(AnalysisContext analysisContext)</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>因为 spring 由 ioc 创建的对象默认为单例类，所以会出现线程安全问题，这里采用 <code>reentranlock</code>  来解决这个问题，以下是执行时间：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220818094722514.png\"\n                      alt=\"image-20220818094722514\"\n                ></p>\n<h2 id=\"mybatis-的-batch-模式\"><a class=\"markdownIt-Anchor\" href=\"#mybatis-的-batch-模式\">#</a> mybatis 的 batch 模式</h2>\n<p>mybatis 是由一个 batch, 也就是批量模式，在配置类中添加 <code>sqlSession</code> ，设定为主要的 <code>bean</code></p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@MapperScan(&quot;cn.wenhe9.ggkt.*.mapper&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MybatisPlusConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 新的分页插件,一缓和二缓遵循mybatis的规则,需要设置 MybatisConfiguration#useDeprecatedExecutor = false 避免缓存出现问题(该属性会在旧插件移除后一同移除)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> MybatisPlusInterceptor <span class=\"title function_\">mybatisPlusInterceptor</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MybatisPlusInterceptor</span> <span class=\"variable\">interceptor</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MybatisPlusInterceptor</span>();</span><br><span class=\"line\">        interceptor.addInnerInterceptor(<span class=\"keyword\">new</span> <span class=\"title class_\">PaginationInnerInterceptor</span>(DbType.H2));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> interceptor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ConfigurationCustomizer <span class=\"title function_\">configurationCustomizer</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> configuration -&gt; configuration.setUseDeprecatedExecutor(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 开启批量添加模式</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> SqlSession <span class=\"title function_\">sqlSession</span><span class=\"params\">(SqlSessionTemplate sqlSessionTemplate)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sqlSessionTemplate.getSqlSessionFactory().openSession(ExecutorType.BATCH, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<p>业务代码不需要变更:</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SubjectListener</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AnalysisEventListener</span>&lt;SubjectEeVo&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 锁</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">ReentrantLock</span> <span class=\"variable\">lock</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReentrantLock</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> SubjectMapper subjectMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">invoke</span><span class=\"params\">(SubjectEeVo subjectEeVo, AnalysisContext analysisContext)</span> &#123;</span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Subject</span> <span class=\"variable\">subject</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Subject</span>();</span><br><span class=\"line\">            <span class=\"comment\">//SubjectEeVo -&gt; Subject</span></span><br><span class=\"line\">            BeanUtils.copyProperties(subjectEeVo, subject);</span><br><span class=\"line\">            <span class=\"comment\">//添加</span></span><br><span class=\"line\">            subjectMapper.insert(subject);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doAfterAllAnalysed</span><span class=\"params\">(AnalysisContext analysisContext)</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>时间略微提升：<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220818095032494.png\"\n                      alt=\"image-20220818095032494\"\n                ></p>\n<h2 id=\"构建批量插入sql\"><a class=\"markdownIt-Anchor\" href=\"#构建批量插入sql\">#</a> 构建批量插入 sql</h2>\n<p>这种方式效率是最高的，但也有参数最大数量上限或者 sql 条数的限制或者 sql 语句大小有所限制，这个是由不同的数据库由不同的限制，mysql 语句的长度限制为<strong> 4MB</strong></p>\n<p>同样有并发问题，因为需要将每行的数据添加到集合中，再调用一次的 sql 来执行，并且这里是写多读少的情况，所以这里使用 <code>ThreadLocal</code>  来实现</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SubjectListener</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AnalysisEventListener</span>&lt;SubjectEeVo&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ThreadLocal&lt;List&lt;Subject&gt;&gt; subjectTL = <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadLocal</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> SubjectMapper subjectMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">invoke</span><span class=\"params\">(SubjectEeVo subjectEeVo, AnalysisContext analysisContext)</span> &#123;</span><br><span class=\"line\">        List&lt;Subject&gt; subjectList = subjectTL.get();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (subjectList == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            subjectList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">            subjectTL.set(subjectList);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">Subject</span> <span class=\"variable\">subject</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Subject</span>();</span><br><span class=\"line\">        <span class=\"comment\">//SubjectEeVo -&gt; Subject</span></span><br><span class=\"line\">        BeanUtils.copyProperties(subjectEeVo, subject);</span><br><span class=\"line\">        <span class=\"comment\">//添加</span></span><br><span class=\"line\">        subjectList.add(subject);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doAfterAllAnalysed</span><span class=\"params\">(AnalysisContext analysisContext)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            List&lt;Subject&gt; subjectList = subjectTL.get();</span><br><span class=\"line\">            subjectMapper.insertBatch(subjectList);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            subjectTL.remove();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>这里对 <code>mapper</code>  和 <code>xml</code>  文件进行修改，新增 <code>insertBatch</code>  批量插入的方法</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">SubjectMapper</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseMapper</span>&lt;Subject&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 批量插入数据</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">insertBatch</span><span class=\"params\">(<span class=\"meta\">@Param(&quot;subjectList&quot;)</span> List&lt;Subject&gt; subjectList)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">mapper</span> <span class=\"keyword\">PUBLIC</span> <span class=\"string\">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class=\"string\">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">&quot;cn.wenhe9.ggkt.vod.mapper.SubjectMapper&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">insert</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;insertBatch&quot;</span>&gt;</span></span><br><span class=\"line\">        insert into `subject`</span><br><span class=\"line\">            (`id`, `title`, `parent_id`, `sort`)</span><br><span class=\"line\">        values </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">foreach</span> <span class=\"attr\">collection</span>=<span class=\"string\">&quot;subjectList&quot;</span> <span class=\"attr\">item</span>=<span class=\"string\">&quot;subject&quot;</span> <span class=\"attr\">separator</span>=<span class=\"string\">&quot;,&quot;</span>&gt;</span></span><br><span class=\"line\">            (#&#123;subject.id&#125;, #&#123;subject.title&#125;, #&#123;subject.parentId&#125;, #&#123;subject.sort&#125;)</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">foreach</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n<p>可以看到效率提高了将近一半</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220818094543492.png\"\n                      alt=\"image-20220818094543492\"\n                ></p>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>这里测试的 excel 行数较少，数据可能不够准确，但也足以说明问题</p>\n<p><strong>构建批量插入 sql</strong>  &gt; <strong>mybatis 的 batch 模式</strong> &gt; <strong>逐行 insert</strong></p>\n",
            "tags": [
                "MyBatis"
            ]
        },
        {
            "id": "https://wait-you.github.io/2023/06/06/Kotlin%E5%8D%8F%E7%A8%8B/",
            "url": "https://wait-you.github.io/2023/06/06/Kotlin%E5%8D%8F%E7%A8%8B/",
            "title": "Kotlin协程",
            "date_published": "2023-06-06T00:53:30.000Z",
            "content_html": "<h1 id=\"kotlin协程\"><a class=\"markdownIt-Anchor\" href=\"#kotlin协程\">#</a> Kotlin 协程</h1>\n<h2 id=\"一-kotlin-协程\"><a class=\"markdownIt-Anchor\" href=\"#一-kotlin-协程\">#</a> 一、Kotlin 协程</h2>\n<p>Kotlin <a class=\"link\"   href=\"https://link.juejin.cn?target=https%3A%2F%2Flinks.jianshu.com%2Fgo%3Fto%3Dhttps%3A%2F%2FKotlinlang.org%2Fdocs%2Freference%2Fcoroutines-overview.html\" >协程 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>提供了一种全新处理并发的方式，你可以在 Android 平台上使用它来简化异步执行的代码。协程从 Kotlin 1.3 版本开始引入，但这一概念在编程世界诞生的黎明之际就有了，最早使用协程的编程语言可以追溯到 1967 年的 <a class=\"link\"   href=\"https://link.juejin.cn?target=https%3A%2F%2Flinks.jianshu.com%2Fgo%3Fto%3Dhttps%3A%2F%2Fen.wikipedia.org%2Fwiki%2FSimula\" >Simula <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a> 语言。在过去几年间，协程这个概念发展势头迅猛，现已经被诸多主流编程语言采用，比如 <a class=\"link\"   href=\"https://link.juejin.cn?target=https%3A%2F%2Flinks.jianshu.com%2Fgo%3Fto%3Dhttps%3A%2F%2Fjavascript.info%2Fasync-await\" >Javascript <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>、<a class=\"link\"   href=\"https://link.juejin.cn?target=https%3A%2F%2Flinks.jianshu.com%2Fgo%3Fto%3Dhttps%3A%2F%2Fdocs.microsoft.com%2Fen-us%2Fdotnet%2Fcsharp%2Fprogramming-guide%2Fconcepts%2Fasync%2F\" >C# <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>、<a class=\"link\"   href=\"https://link.juejin.cn?target=https%3A%2F%2Flinks.jianshu.com%2Fgo%3Fto%3Dhttps%3A%2F%2Fdocs.python.org%2F3%2Flibrary%2Fasyncio-task.html\" >Python <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>、<a class=\"link\"   href=\"https://link.juejin.cn?target=https%3A%2F%2Flinks.jianshu.com%2Fgo%3Fto%3Dhttps%3A%2F%2Fruby-doc.org%2Fcore-2.1.1%2FFiber.html\" >Ruby <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a> 以及 <a class=\"link\"   href=\"https://link.juejin.cn?target=https%3A%2F%2Flinks.jianshu.com%2Fgo%3Fto%3Dhttps%3A%2F%2Ftour.golang.org%2Fconcurrency%2F1\" >Go <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a> 等。Kotlin 协程是基于来自其他语言的既定概念</p>\n<p>Google 官方推荐将 Kotlin 协程作为在 Android 上进行异步编程的解决方案，值得关注的功能点包括：</p>\n<ul>\n<li><strong>轻量</strong>：你可以在单个线程上运行多个协程，因为协程支持<a class=\"link\"   href=\"https://link.juejin.cn?target=https%3A%2F%2FKotlinlang.org%2Fdocs%2Freference%2Fcoroutines%2Fbasics.html\" >挂起 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>，不会使正在运行协程的线程阻塞。挂起比阻塞节省内存，且支持多个并行操作</li>\n<li><strong>内存泄露更少</strong>：使用<a class=\"link\"   href=\"https://link.juejin.cn?target=https%3A%2F%2FKotlinlang.org%2Fdocs%2Freference%2Fcoroutines%2Fbasics.html%23structured-concurrency\" >结构化并发 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>机制在一个作用域内执行多个操作</li>\n<li><strong>内置取消支持</strong>：<a class=\"link\"   href=\"https://link.juejin.cn?target=https%3A%2F%2FKotlinlang.org%2Fdocs%2Freference%2Fcoroutines%2Fcancellation-and-timeouts.html\" >取消 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>功能会自动通过正在运行的协程层次结构传播</li>\n<li><strong>Jetpack 集成</strong>：许多 Jetpack 库都包含提供全面协程支持的<a class=\"link\"   href=\"https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.android.google.cn%2FKotlin%2Fktx\" >扩展 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>。某些库还提供自己的<a class=\"link\"   href=\"https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.android.google.cn%2Ftopic%2Flibraries%2Farchitecture%2Fcoroutines\" >协程作用域 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>，可供你用于结构化并发</li>\n</ul>\n<p>引入依赖：</p>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation <span class=\"string\">&#x27;org.jetbrains.Kotlinx:Kotlinx-coroutines-core:1.4.2&#x27;</span></span><br><span class=\"line\">implementation <span class=\"string\">&#x27;org.jetbrains.Kotlinx:Kotlinx-coroutines-android:1.4.2&#x27;</span></span><br></pre></td></tr></table></figure></div>\n<h2 id=\"二-第一个协程\"><a class=\"markdownIt-Anchor\" href=\"#二-第一个协程\">#</a> 二、第一个协程</h2>\n<p>协程可以称为<strong>轻量级线程</strong>。Kotlin 协程在 CoroutineScope 的上下文中通过 launch、async 等<strong>协程构造器</strong>（CoroutineBuilder）来声明并启动</p>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    GlobalScope.launch(context = Dispatchers.IO) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//延时一秒</span></span><br><span class=\"line\">        delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">        log(<span class=\"string\">&quot;launch&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//主动休眠两秒，防止JVM过快退出</span></span><br><span class=\"line\">    Thread.sleep(<span class=\"number\">2000</span>)</span><br><span class=\"line\">    log(<span class=\"string\">&quot;end&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">log</span><span class=\"params\">(msg: <span class=\"type\">Any</span>?)</span></span> = println(<span class=\"string\">&quot;[<span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>] <span class=\"variable\">$msg</span>&quot;</span>)</span><br><span class=\"line\">[DefaultDispatcher-worker-<span class=\"number\">1</span> <span class=\"meta\">@coroutine</span>#<span class=\"number\">1</span>] launch</span><br><span class=\"line\">[main] end</span><br></pre></td></tr></table></figure></div>\n<p>在上面的例子中，通过 GlobalScope（即<strong>全局作用域</strong>）启动了一个协程，在延迟一秒后输出一行日志。从输出结果可以看出来，启动的协程是运行在协程内部的<strong>线程池</strong>中。虽然从表现结果上来看，启动一个协程类似于我们直接使用 Thread 来执行耗时任务，但实际上协程和线程有着本质上的区别。通过使用协程，可以极大的提高线程的并发效率，避免以往的嵌套回调地狱，极大提高了代码的可读性</p>\n<p>以上代码就涉及到了协程的四个基础概念：</p>\n<ul>\n<li>suspend function。即挂起函数，delay 函数就是协程库提供的一个用于实现非阻塞式延时的挂起函数</li>\n<li>CoroutineScope。即协程作用域，GlobalScope 是 CoroutineScope 的一个实现类，用于指定协程的作用范围，可用于管理多个协程的生命周期，所有协程都需要通过 CoroutineScope 来启动</li>\n<li>CoroutineContext。即协程上下文，包含多种类型的配置参数。<a class=\"link\"   href=\"http://Dispatchers.IO\" >Dispatchers.IO <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a> 就是 CoroutineContext 这个抽象概念的一种实现，用于指定协程的运行载体，即用于指定协程要运行在哪类线程上</li>\n<li>CoroutineBuilder。即协程构建器，协程在 CoroutineScope 的上下文中通过 launch、async 等协程构建器来进行声明并启动。launch、async 等均被声明 CoroutineScope 的扩展方法</li>\n</ul>\n<h2 id=\"三-suspend-function\"><a class=\"markdownIt-Anchor\" href=\"#三-suspend-function\">#</a> 三、suspend function</h2>\n<p>如果上述例子试图直接在 GlobalScope 外调用  <code>delay()</code>  函数的话，IDE 就会提示一个错误：<strong>Suspend function ‘delay’ should be called only from a coroutine or another suspend function</strong>。意思是： <code>delay()</code>  函数是一个挂起函数，只能由协程或者由其它挂起函数来调用</p>\n<p><code>delay()</code>  函数就使用了 suspend 进行修饰，用 suspend 修饰的函数就是挂起函数</p>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">suspend</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">delay</span><span class=\"params\">(timeMillis: <span class=\"type\">Long</span>)</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<p>读者在网上看关于协程的文章的时候，应该经常会看到这么一句话：<strong>挂起函数不会阻塞其所在线程，而是会将协程挂起，在特定的时候才再恢复协程</strong></p>\n<p>对于这句话我的理解是： <code>delay()</code>  函数类似于 Java 中的  <code>Thread.sleep()</code> ，而之所以说  <code>delay()</code>  函数是非阻塞的，是因为它和单纯的线程休眠有着本质的区别。协程是运行于线程上的，一个线程可以运行多个（几千上万个）协程。线程的调度行为是由操作系统来管理的，而协程的调度行为是可以由开发者来指定并由编译器来实现的，协程能够细粒度地控制多个任务的执行时机和执行线程，当某个特定的线程上的所有协程被 suspend 后，该线程便可腾出资源去处理其他任务</p>\n<p>例如，当在 ThreadA 上运行的 CoroutineA 调用了 <code>delay(1000L)</code>  函数指定延迟一秒后再运行，ThreadA 会转而去执行 CoroutineB，等到一秒后再来继续执行 CoroutineA。所以，ThreadA 并不会因为 CoroutineA 的延时而阻塞，而是能继续去执行其它任务，所以挂起函数并不会阻塞其所在线程，这样就极大地提高了线程的并发灵活度，最大化了线程的利用效率。而如果是使用 <code>Thread.sleep()</code>  的话，线程就只能干等着而不会去执行其它任务，降低了线程的利用效率</p>\n<h2 id=\"四-suspend-function-的挂起与恢复\"><a class=\"markdownIt-Anchor\" href=\"#四-suspend-function-的挂起与恢复\">#</a> 四、suspend function 的挂起与恢复</h2>\n<p>协程在常规函数的基础上添加了两项操作用于处理长时间运行的任务。在 <code>invoke</code> （或  <code>call</code> ）和 <code>return</code>  之外，协程添加了 <code>suspend</code>  和  <code>resume</code> ：</p>\n<ul>\n<li><code>suspend</code>  用于暂停执行当前协程，并保存所有局部变量</li>\n<li><code>resume</code>  用于让已暂停的协程从暂停处继续执行</li>\n</ul>\n<p>suspend 函数只能由其它 suspend 函数调用，或者是由协程来调用</p>\n<p>以下示例展示了一项任务（假设 get 方法是一个网络请求任务）的简单协程实现：</p>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">suspend</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">fetchDocs</span><span class=\"params\">()</span></span> &#123;                             <span class=\"comment\">// Dispatchers.Main</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> result = <span class=\"keyword\">get</span>(<span class=\"string\">&quot;https://developer.android.com&quot;</span>) <span class=\"comment\">// Dispatchers.IO for `get`</span></span><br><span class=\"line\">    show(result)                                      <span class=\"comment\">// Dispatchers.Main</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">suspend</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">get</span><span class=\"params\">(url: <span class=\"type\">String</span>)</span></span> = withContext(Dispatchers.IO) &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<p>在上面的示例中， <code>get()</code>  仍在主线程上被调用，但它会在启动网络请求之前暂停协程。 <code>get()</code>  主体内通过调用  <code>withContext(Dispatchers.IO)</code>  创建了一个在 IO 线程池中运行的代码块，在该块内的任何代码都始终通过 IO 调度器执行。当网络请求完成后， <code>get()</code>  会恢复已暂停的协程，使得主线程协程可以直接拿到网络请求结果而不用使用回调来通知主线程。Retrofit 就是以这种方式来实现对协程的支持的</p>\n<p>Kotlin 使用堆栈帧管理要运行哪个函数以及所有局部变量。暂停协程时，系统会复制并保存当前的堆栈帧以供稍后使用。恢复时，会将堆栈帧从其保存位置复制回来，然后函数再次开始运行。即使代码可能看起来像普通的顺序阻塞请求，协程也能确保网络请求避免阻塞主线程</p>\n<p>在主线程进行的<strong>暂停协程</strong>和<strong>恢复协程</strong>的两个操作，既实现了将耗时任务交由后台线程完成，保障了主线程安全，又以同步代码的方式完成了实际上的多线程异步调用。可以说，在 Android 平台上协程主要就用来解决两个问题：</p>\n<ol>\n<li><strong>处理耗时任务 (Long running tasks)</strong>，这种任务常常会阻塞住主线程</li>\n<li><strong>保证主线程安全 (Main-safety)</strong> ，即确保安全地从主线程调用任何 suspend 函数</li>\n</ol>\n<h2 id=\"五-coroutinescope\"><a class=\"markdownIt-Anchor\" href=\"#五-coroutinescope\">#</a> 五、CoroutineScope</h2>\n<p>CoroutineScope 即<strong>协程作用域</strong>，用于对协程进行追踪。如果我们启动了多个协程但是没有一个可以对其进行统一管理的途径的话，那么就会导致我们的代码臃肿杂乱，甚至发生<strong>内存泄露</strong>或者<strong>任务泄露</strong>。为了确保所有的协程都会被追踪，Kotlin 不允许在没有使用 CoroutineScope 的情况下启动新的协程。CoroutineScope 可被看作是一个具有超能力的 ExecutorService 的轻量级版本。它能启动新的协程，同时这个协程还具备上文所说的 suspend 和 resume 的优势</p>\n<p>所有的协程都需要通过 CoroutineScope 来启动，它会跟踪它使用  <code>launch</code>  或  <code>async</code>  创建的所有协程，你可以随时调用  <code>scope.cancel()</code>  取消正在运行的协程。CoroutineScope 本身并不运行协程，它只是确保你不会失去对协程的追踪，即使协程被挂起也是如此。在 Android 中，某些 KTX 库为某些生命周期类提供了自己的  <code>CoroutineScope</code> 。例如， <code>ViewModel</code>  有 <a href=\"https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.android.google.cn%2Freference%2FKotlin%2Fandroidx%2Flifecycle%2Fpackage-summary%23(androidx.lifecycle.ViewModel).viewModelScope%3AKotlinx.coroutines.CoroutineScope\"> <code>viewModelScope</code> </a>， <code>Lifecycle</code>  有 <a href=\"https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.android.google.cn%2Freference%2FKotlin%2Fandroidx%2Flifecycle%2Fpackage-summary%23lifecyclescope\"> <code>lifecycleScope</code> </a></p>\n<p>CoroutineScope 大体上可以分为三种：</p>\n<ul>\n<li>GlobalScope。即全局协程作用域，在这个范围内启动的协程可以一直运行直到应用停止运行。GlobalScope 本身不会阻塞当前线程，且启动的协程相当于守护线程，不会阻止 JVM 结束运行</li>\n<li>runBlocking。一个顶层函数，和 GlobalScope 不一样，它会阻塞当前线程直到其内部所有相同作用域的协程执行结束</li>\n<li>自定义 CoroutineScope。可用于实现主动控制协程的生命周期范围，对于 Android 开发来说最大意义之一就是可以避免内存泄露</li>\n</ul>\n<h4 id=\"1-globalscope\"><a class=\"markdownIt-Anchor\" href=\"#1-globalscope\">#</a> 1、GlobalScope</h4>\n<p>GlobalScope 属于<strong>全局作用域</strong>，这意味着通过 GlobalScope 启动的协程的生命周期只受整个应用程序的生命周期的限制，只要整个应用程序还在运行且协程的任务还未结束，协程就可以一直运行</p>\n<p>GlobalScope 不会阻塞其所在线程，所以以下代码中主线程的日志会早于 GlobalScope 内部输出日志。此外，GlobalScope 启动的协程相当于守护线程，不会阻止 JVM 结束运行，所以如果将主线程的休眠时间改为三百毫秒的话，就不会看到 launch A 输出日志</p>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    log(<span class=\"string\">&quot;start&quot;</span>)</span><br><span class=\"line\">    GlobalScope.launch &#123;</span><br><span class=\"line\">        launch &#123;</span><br><span class=\"line\">            delay(<span class=\"number\">400</span>)</span><br><span class=\"line\">            log(<span class=\"string\">&quot;launch A&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        launch &#123;</span><br><span class=\"line\">            delay(<span class=\"number\">300</span>)</span><br><span class=\"line\">            log(<span class=\"string\">&quot;launch B&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        log(<span class=\"string\">&quot;GlobalScope&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    log(<span class=\"string\">&quot;end&quot;</span>)</span><br><span class=\"line\">    Thread.sleep(<span class=\"number\">500</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[main] start</span><br><span class=\"line\">[main] end</span><br><span class=\"line\">[DefaultDispatcher-worker-<span class=\"number\">1</span> <span class=\"meta\">@coroutine</span>#<span class=\"number\">1</span>] GlobalScope</span><br><span class=\"line\">[DefaultDispatcher-worker-<span class=\"number\">3</span> <span class=\"meta\">@coroutine</span>#<span class=\"number\">3</span>] launch B</span><br><span class=\"line\">[DefaultDispatcher-worker-<span class=\"number\">3</span> <span class=\"meta\">@coroutine</span>#<span class=\"number\">2</span>] launch A</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<p><code>GlobalScope.launch</code>  会创建一个顶级协程，尽管它很轻量级，但在运行时还是会消耗一些内存资源，且可以一直运行直到整个应用程序停止（只要任务还未结束），这可能会导致内存泄露，所以在日常开发中应该谨慎使用 GlobalScope</p>\n<h4 id=\"2-runblocking\"><a class=\"markdownIt-Anchor\" href=\"#2-runblocking\">#</a> 2、runBlocking</h4>\n<p>也可以使用 runBlocking 这个顶层函数来启动协程，runBlocking 函数的第二个参数即协程的执行体，该参数被声明为 CoroutineScope 的扩展函数，因此执行体就包含了一个隐式的 CoroutineScope，所以在 runBlocking 内部可以来直接启动协程</p>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T&gt;</span> <span class=\"title\">runBlocking</span><span class=\"params\">(context: <span class=\"type\">CoroutineContext</span> = EmptyCoroutineContext, block: <span class=\"type\">suspend</span> <span class=\"type\">CoroutineScope</span>.() -&gt; <span class=\"type\">T</span>)</span></span>: T</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<p>runBlocking 的一个方便之处就是：只有当内部<strong>相同作用域</strong>的所有协程都运行结束后，声明在 runBlocking 之后的代码才能执行，即 runBlocking 会阻塞其所在线程</p>\n<p>看以下代码。runBlocking 内部启动的两个协程会各自做耗时操作，从输出结果可以看出来两个协程还是在交叉并发执行，且 runBlocking 会等到两个协程都执行结束后才会退出，外部的日志输出结果有明确的先后顺序。即 runBlocking 内部启动的协程是非阻塞式的，但 runBlocking 阻塞了其所在线程。此外，runBlocking 只会等待相同作用域的协程完成才会退出，而不会等待 GlobalScope 等其它作用域启动的协程</p>\n<p><strong>所以说，runBlocking 本身带有阻塞线程的意味，但其内部运行的协程又是非阻塞的，读者需要意会这两者的区别</strong></p>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    log(<span class=\"string\">&quot;start&quot;</span>)</span><br><span class=\"line\">    runBlocking &#123;</span><br><span class=\"line\">        launch &#123;</span><br><span class=\"line\">            repeat(<span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">                delay(<span class=\"number\">100</span>)</span><br><span class=\"line\">                log(<span class=\"string\">&quot;launchA - <span class=\"variable\">$it</span>&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        launch &#123;</span><br><span class=\"line\">            repeat(<span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">                delay(<span class=\"number\">100</span>)</span><br><span class=\"line\">                log(<span class=\"string\">&quot;launchB - <span class=\"variable\">$it</span>&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        GlobalScope.launch &#123;</span><br><span class=\"line\">            repeat(<span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">                delay(<span class=\"number\">120</span>)</span><br><span class=\"line\">                log(<span class=\"string\">&quot;GlobalScope - <span class=\"variable\">$it</span>&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    log(<span class=\"string\">&quot;end&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[main] start</span><br><span class=\"line\">[main] launchA - <span class=\"number\">0</span></span><br><span class=\"line\">[main] launchB - <span class=\"number\">0</span></span><br><span class=\"line\">[DefaultDispatcher-worker-<span class=\"number\">1</span>] GlobalScope - <span class=\"number\">0</span></span><br><span class=\"line\">[main] launchA - <span class=\"number\">1</span></span><br><span class=\"line\">[main] launchB - <span class=\"number\">1</span></span><br><span class=\"line\">[DefaultDispatcher-worker-<span class=\"number\">1</span>] GlobalScope - <span class=\"number\">1</span></span><br><span class=\"line\">[main] launchA - <span class=\"number\">2</span></span><br><span class=\"line\">[main] launchB - <span class=\"number\">2</span></span><br><span class=\"line\">[main] end</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<p>基于是否会阻塞线程的区别，以下代码中 runBlocking 会早于 GlobalScope 输出日志</p>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    GlobalScope.launch(Dispatchers.IO) &#123;</span><br><span class=\"line\">        delay(<span class=\"number\">600</span>)</span><br><span class=\"line\">        log(<span class=\"string\">&quot;GlobalScope&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    runBlocking &#123;</span><br><span class=\"line\">        delay(<span class=\"number\">500</span>)</span><br><span class=\"line\">        log(<span class=\"string\">&quot;runBlocking&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//主动休眠两百毫秒，使得和 runBlocking 加起来的延迟时间少于六百毫秒</span></span><br><span class=\"line\">    Thread.sleep(<span class=\"number\">200</span>)</span><br><span class=\"line\">    log(<span class=\"string\">&quot;after sleep&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[main] runBlocking</span><br><span class=\"line\">[DefaultDispatcher-worker-<span class=\"number\">1</span>] GlobalScope</span><br><span class=\"line\">[main] after sleep</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<h4 id=\"3-coroutinescope\"><a class=\"markdownIt-Anchor\" href=\"#3-coroutinescope\">#</a> 3、coroutineScope</h4>\n<p><code>coroutineScope</code>  函数用于创建一个独立的协程作用域，直到所有启动的协程都完成后才结束自身。 <code>runBlocking</code>  和  <code>coroutineScope</code>  看起来很像，因为它们都需要等待其内部所有相同作用域的协程结束后才会结束自己。两者的主要区别在于  <code>runBlocking</code>  方法会阻塞当前线程，而  <code>coroutineScope</code>  不会阻塞线程，而是会挂起并释放底层线程以供其它协程使用。由于这个差别， <code>runBlocking</code>  是一个普通函数，而  <code>coroutineScope</code>  是一个挂起函数</p>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    launch &#123;</span><br><span class=\"line\">        delay(<span class=\"number\">100</span>)</span><br><span class=\"line\">        log(<span class=\"string\">&quot;Task from runBlocking&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    coroutineScope &#123;</span><br><span class=\"line\">        launch &#123;</span><br><span class=\"line\">            delay(<span class=\"number\">500</span>)</span><br><span class=\"line\">            log(<span class=\"string\">&quot;Task from nested launch&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        delay(<span class=\"number\">100</span>)</span><br><span class=\"line\">        log(<span class=\"string\">&quot;Task from coroutine scope&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    log(<span class=\"string\">&quot;Coroutine scope is over&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[main] Task from coroutine scope</span><br><span class=\"line\">[main] Task from runBlocking</span><br><span class=\"line\">[main] Task from nested launch</span><br><span class=\"line\">[main] Coroutine scope <span class=\"keyword\">is</span> over</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<h4 id=\"4-supervisorscope\"><a class=\"markdownIt-Anchor\" href=\"#4-supervisorscope\">#</a> 4、supervisorScope</h4>\n<p><code>supervisorScope</code>  函数用于创建一个使用了 SupervisorJob 的 coroutineScope，该作用域的特点就是抛出的异常不会连锁取消同级协程和父协程</p>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    launch &#123;</span><br><span class=\"line\">        delay(<span class=\"number\">100</span>)</span><br><span class=\"line\">        log(<span class=\"string\">&quot;Task from runBlocking&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    supervisorScope &#123;</span><br><span class=\"line\">        launch &#123;</span><br><span class=\"line\">            delay(<span class=\"number\">500</span>)</span><br><span class=\"line\">            log(<span class=\"string\">&quot;Task throw Exception&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> Exception(<span class=\"string\">&quot;failed&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        launch &#123;</span><br><span class=\"line\">            delay(<span class=\"number\">600</span>)</span><br><span class=\"line\">            log(<span class=\"string\">&quot;Task from nested launch&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    log(<span class=\"string\">&quot;Coroutine scope is over&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[main <span class=\"meta\">@coroutine</span>#<span class=\"number\">2</span>] Task from runBlocking</span><br><span class=\"line\">[main <span class=\"meta\">@coroutine</span>#<span class=\"number\">3</span>] Task <span class=\"keyword\">throw</span> Exception</span><br><span class=\"line\">[main <span class=\"meta\">@coroutine</span>#<span class=\"number\">4</span>] Task from nested launch</span><br><span class=\"line\">[main <span class=\"meta\">@coroutine</span>#<span class=\"number\">1</span>] Coroutine scope <span class=\"keyword\">is</span> over</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<h4 id=\"5-自定义-coroutinescope\"><a class=\"markdownIt-Anchor\" href=\"#5-自定义-coroutinescope\">#</a> 5、自定义 CoroutineScope</h4>\n<p>假设我们在 Activity 中先后启动了多个协程用于执行异步耗时操作，那么当 Activity 退出时，必须取消所有协程以避免内存泄漏。我们可以通过保留每一个 Job 引用然后在  <code>onDestroy</code>  方法里来手动取消，但这种方式相当来说会比较繁琐和低效。kotlinx.coroutines 提供了 CoroutineScope 来管理多个协程的生命周期</p>\n<p>我们可以通过创建与 Activity 生命周期相关联的协程作用域的实例来管理协程的生命周期。CoroutineScope 的实例可以通过  <code>CoroutineScope()</code>  或  <code>MainScope()</code>  的工厂函数来构建。前者创建通用作用域，后者创建 UI 应用程序的作用域并使用 Dispatchers.Main 作为默认的调度器</p>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Activity</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> mainScope = MainScope()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        mainScope.launch &#123;</span><br><span class=\"line\">            repeat(<span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">                delay(<span class=\"number\">1000L</span> * it)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        mainScope.cancel()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<p>或者，我们可以通过委托模式来让 Activity 实现 CoroutineScope 接口，从而可以在 Activity 内直接启动协程而不必显示地指定它们的上下文，并且在  <code>onDestroy()</code>  中自动取消所有协程</p>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Activity</span> : <span class=\"type\">CoroutineScope</span> <span class=\"title\">by</span> <span class=\"title\">CoroutineScope</span>(Dispatchers.Default) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        launch &#123;</span><br><span class=\"line\">            repeat(<span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">                delay(<span class=\"number\">200L</span> * it)</span><br><span class=\"line\">                log(it)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        log(<span class=\"string\">&quot;Activity Created&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        cancel()</span><br><span class=\"line\">        log(<span class=\"string\">&quot;Activity Destroyed&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<p>从输出结果可以看出，当回调了 <code>onDestroy()</code>  方法后协程就不会再输出日志了</p>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> activity = Activity()</span><br><span class=\"line\">    activity.onCreate()</span><br><span class=\"line\">    delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">    activity.onDestroy()</span><br><span class=\"line\">    delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[main <span class=\"meta\">@coroutine</span>#<span class=\"number\">1</span>] Activity Created</span><br><span class=\"line\">[DefaultDispatcher-worker-<span class=\"number\">1</span> <span class=\"meta\">@coroutine</span>#<span class=\"number\">2</span>] <span class=\"number\">0</span></span><br><span class=\"line\">[DefaultDispatcher-worker-<span class=\"number\">1</span> <span class=\"meta\">@coroutine</span>#<span class=\"number\">2</span>] <span class=\"number\">1</span></span><br><span class=\"line\">[DefaultDispatcher-worker-<span class=\"number\">1</span> <span class=\"meta\">@coroutine</span>#<span class=\"number\">2</span>] <span class=\"number\">2</span></span><br><span class=\"line\">[main <span class=\"meta\">@coroutine</span>#<span class=\"number\">1</span>] Activity Destroyed</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<p>已取消的作用域无法再创建协程。因此，仅当控制其生命周期的类被销毁时，才应调用  <code>scope.cancel()</code> 。例如，使用  <code>viewModelScope</code>  时，<a href=\"https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.android.google.cn%2Ftopic%2Flibraries%2Farchitecture%2Fviewmodel\"> <code>ViewModel</code> </a> 类会在 ViewModel 的  <code>onCleared()</code>  方法中自动取消作用域</p>\n<h2 id=\"六-coroutinebuilder\"><a class=\"markdownIt-Anchor\" href=\"#六-coroutinebuilder\">#</a> 六、CoroutineBuilder</h2>\n<h4 id=\"1-launch\"><a class=\"markdownIt-Anchor\" href=\"#1-launch\">#</a> 1、launch</h4>\n<p>看下  <code>launch</code>  函数的方法签名。 <code>launch</code>  是一个作用于 CoroutineScope 的扩展函数，用于在不阻塞当前线程的情况下启动一个协程，并返回对该协程任务的引用，即 Job 对象</p>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">fun</span> CoroutineScope.<span class=\"title\">launch</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    context: <span class=\"type\">CoroutineContext</span> = EmptyCoroutineContext,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    start: <span class=\"type\">CoroutineStart</span> = CoroutineStart.DEFAULT,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    block: <span class=\"type\">suspend</span> <span class=\"type\">CoroutineScope</span>.() -&gt; <span class=\"type\">Unit</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>: Job</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<p><code>launch</code>  函数共包含三个参数：</p>\n<ol>\n<li>context。用于指定协程的上下文</li>\n<li>start。用于指定协程的启动方式。默认值为  <code>CoroutineStart.DEFAULT</code> ，即协程会在声明的同时就立即进入等待调度的状态，即可以立即执行的状态。可以通过将其设置为 <code>CoroutineStart.LAZY</code>  来实现延迟启动，即懒加载</li>\n<li>block。用于传递协程的执行体，即希望交由协程执行的任务</li>\n</ol>\n<p>可以看到 launchA 和 launchB 是并行交叉执行的</p>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> launchA = launch &#123;</span><br><span class=\"line\">        repeat(<span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">            delay(<span class=\"number\">100</span>)</span><br><span class=\"line\">            log(<span class=\"string\">&quot;launchA - <span class=\"variable\">$it</span>&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> launchB = launch &#123;</span><br><span class=\"line\">        repeat(<span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">            delay(<span class=\"number\">100</span>)</span><br><span class=\"line\">            log(<span class=\"string\">&quot;launchB - <span class=\"variable\">$it</span>&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[main] launchA - <span class=\"number\">0</span></span><br><span class=\"line\">[main] launchB - <span class=\"number\">0</span></span><br><span class=\"line\">[main] launchA - <span class=\"number\">1</span></span><br><span class=\"line\">[main] launchB - <span class=\"number\">1</span></span><br><span class=\"line\">[main] launchA - <span class=\"number\">2</span></span><br><span class=\"line\">[main] launchB - <span class=\"number\">2</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<h4 id=\"2-job\"><a class=\"markdownIt-Anchor\" href=\"#2-job\">#</a> 2、Job</h4>\n<p>Job 是协程的句柄。使用  <code>launch</code>  或  <code>async</code>  创建的每个协程都会返回一个  <code>Job</code>  实例，该实例唯一标识协程并管理其生命周期。Job 是一个接口类型，这里列举 Job 几个比较有用的属性和函数</p>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//当 Job 处于活动状态时为 true</span></span><br><span class=\"line\"><span class=\"comment\">//如果 Job 未被取消或没有失败，则均处于 active 状态</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">val</span> isActive: <span class=\"built_in\">Boolean</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//当 Job 正常结束或者由于异常结束，均返回 true</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">val</span> isCompleted: <span class=\"built_in\">Boolean</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//当 Job 被主动取消或者由于异常结束，均返回 true</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">val</span> isCancelled: <span class=\"built_in\">Boolean</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//启动 Job</span></span><br><span class=\"line\"><span class=\"comment\">//如果此调用的确启动了 Job，则返回 true</span></span><br><span class=\"line\"><span class=\"comment\">//如果 Job 调用前就已处于 started 或者是 completed 状态，则返回 false </span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">start</span><span class=\"params\">()</span></span>: <span class=\"built_in\">Boolean</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用于取消 Job，可同时通过传入 Exception 来标明取消原因</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">cancel</span><span class=\"params\">(cause: <span class=\"type\">CancellationException</span>? = <span class=\"literal\">null</span>)</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//阻塞等待直到此 Job 结束运行</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">suspend</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">join</span><span class=\"params\">()</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//当 Job 结束运行时（不管由于什么原因）回调此方法，可用于接收可能存在的运行异常</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">invokeOnCompletion</span><span class=\"params\">(handler: <span class=\"type\">CompletionHandler</span>)</span></span>: DisposableHandle</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<p>Job 具有以下几种状态值，每种状态对应的属性值各不相同</p>\n<table>\n<thead>\n<tr>\n<th><strong>State</strong></th>\n<th><a class=\"link\"   href=\"https://link.juejin.cn?target=https%3A%2F%2FKotlin.github.io%2FKotlinx.coroutines%2FKotlinx-coroutines-core%2FKotlinx.coroutines%2F-job%2Fis-active.html\" >isActive <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></th>\n<th><a class=\"link\"   href=\"https://link.juejin.cn?target=https%3A%2F%2FKotlin.github.io%2FKotlinx.coroutines%2FKotlinx-coroutines-core%2FKotlinx.coroutines%2F-job%2Fis-completed.html\" >isCompleted <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></th>\n<th><a class=\"link\"   href=\"https://link.juejin.cn?target=https%3A%2F%2FKotlin.github.io%2FKotlinx.coroutines%2FKotlinx-coroutines-core%2FKotlinx.coroutines%2F-job%2Fis-cancelled.html\" >isCancelled <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>New</em> (optional initial state)</td>\n<td>false</td>\n<td>false</td>\n<td>false</td>\n</tr>\n<tr>\n<td><em>Active</em> (default initial state)</td>\n<td>true</td>\n<td>false</td>\n<td>false</td>\n</tr>\n<tr>\n<td><em>Completing</em> (transient state)</td>\n<td>true</td>\n<td>false</td>\n<td>false</td>\n</tr>\n<tr>\n<td><em>Cancelling</em> (transient state)</td>\n<td>false</td>\n<td>false</td>\n<td>true</td>\n</tr>\n<tr>\n<td><em>Cancelled</em> (final state)</td>\n<td>false</td>\n<td>true</td>\n<td>true</td>\n</tr>\n<tr>\n<td><em>Completed</em> (final state)</td>\n<td>false</td>\n<td>true</td>\n<td>false</td>\n</tr>\n</tbody>\n</table>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//将协程设置为延迟启动</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> job = GlobalScope.launch(start = CoroutineStart.LAZY) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">0.</span><span class=\"number\">.100</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//每循环一次均延迟一百毫秒</span></span><br><span class=\"line\">            delay(<span class=\"number\">100</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    job.invokeOnCompletion &#123;</span><br><span class=\"line\">        log(<span class=\"string\">&quot;invokeOnCompletion：<span class=\"variable\">$it</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    log(<span class=\"string\">&quot;1. job.isActive：<span class=\"subst\">$&#123;job.isActive&#125;</span>&quot;</span>)</span><br><span class=\"line\">    log(<span class=\"string\">&quot;1. job.isCancelled：<span class=\"subst\">$&#123;job.isCancelled&#125;</span>&quot;</span>)</span><br><span class=\"line\">    log(<span class=\"string\">&quot;1. job.isCompleted：<span class=\"subst\">$&#123;job.isCompleted&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    job.start()</span><br><span class=\"line\"></span><br><span class=\"line\">    log(<span class=\"string\">&quot;2. job.isActive：<span class=\"subst\">$&#123;job.isActive&#125;</span>&quot;</span>)</span><br><span class=\"line\">    log(<span class=\"string\">&quot;2. job.isCancelled：<span class=\"subst\">$&#123;job.isCancelled&#125;</span>&quot;</span>)</span><br><span class=\"line\">    log(<span class=\"string\">&quot;2. job.isCompleted：<span class=\"subst\">$&#123;job.isCompleted&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//休眠四百毫秒后再主动取消协程</span></span><br><span class=\"line\">    Thread.sleep(<span class=\"number\">400</span>)</span><br><span class=\"line\">    job.cancel(CancellationException(<span class=\"string\">&quot;test&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//休眠四百毫秒防止JVM过快停止导致 invokeOnCompletion 来不及回调</span></span><br><span class=\"line\">    Thread.sleep(<span class=\"number\">400</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    log(<span class=\"string\">&quot;3. job.isActive：<span class=\"subst\">$&#123;job.isActive&#125;</span>&quot;</span>)</span><br><span class=\"line\">    log(<span class=\"string\">&quot;3. job.isCancelled：<span class=\"subst\">$&#123;job.isCancelled&#125;</span>&quot;</span>)</span><br><span class=\"line\">    log(<span class=\"string\">&quot;3. job.isCompleted：<span class=\"subst\">$&#123;job.isCompleted&#125;</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[main] <span class=\"number\">1.</span> job.isActive：<span class=\"literal\">false</span></span><br><span class=\"line\">[main] <span class=\"number\">1.</span> job.isCancelled：<span class=\"literal\">false</span></span><br><span class=\"line\">[main] <span class=\"number\">1.</span> job.isCompleted：<span class=\"literal\">false</span></span><br><span class=\"line\">[main] <span class=\"number\">2.</span> job.isActive：<span class=\"literal\">true</span></span><br><span class=\"line\">[main] <span class=\"number\">2.</span> job.isCancelled：<span class=\"literal\">false</span></span><br><span class=\"line\">[main] <span class=\"number\">2.</span> job.isCompleted：<span class=\"literal\">false</span></span><br><span class=\"line\">[DefaultDispatcher-worker-<span class=\"number\">2</span>] invokeOnCompletion：java.util.concurrent.CancellationException: test</span><br><span class=\"line\">[main] <span class=\"number\">3.</span> job.isActive：<span class=\"literal\">false</span></span><br><span class=\"line\">[main] <span class=\"number\">3.</span> job.isCancelled：<span class=\"literal\">true</span></span><br><span class=\"line\">[main] <span class=\"number\">3.</span> job.isCompleted：<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<h4 id=\"3-async\"><a class=\"markdownIt-Anchor\" href=\"#3-async\">#</a> 3、async</h4>\n<p>看下  <code>async</code>  函数的方法签名。 <code>async</code>  也是一个作用于 CoroutineScope 的扩展函数，和  <code>launch</code>  的区别主要就在于： <code>async</code>  可以返回协程的执行结果，而  <code>launch</code>  不行</p>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T&gt;</span> CoroutineScope.<span class=\"title\">async</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    context: <span class=\"type\">CoroutineContext</span> = EmptyCoroutineContext,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    start: <span class=\"type\">CoroutineStart</span> = CoroutineStart.DEFAULT,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    block: <span class=\"type\">suspend</span> <span class=\"type\">CoroutineScope</span>.() -&gt; <span class=\"type\">T</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>: Deferred&lt;T&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<p>通过 <code>await()</code>  方法可以拿到 async 协程的执行结果，可以看到两个协程的总耗时是远少于七秒的，总耗时基本等于耗时最长的协程</p>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> time = measureTimeMillis &#123;</span><br><span class=\"line\">        runBlocking &#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> asyncA = async &#123;</span><br><span class=\"line\">                delay(<span class=\"number\">3000</span>)</span><br><span class=\"line\">                <span class=\"number\">1</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> asyncB = async &#123;</span><br><span class=\"line\">                delay(<span class=\"number\">4000</span>)</span><br><span class=\"line\">                <span class=\"number\">2</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            log(asyncA.await() + asyncB.await())</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    log(time)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[main] <span class=\"number\">3</span></span><br><span class=\"line\">[main] <span class=\"number\">4070</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<blockquote>\n<p>由于 launch 和 async 仅能够在 CouroutineScope 中使用，所以任何创建的协程都会被该 scope 追踪。Kotlin 禁止创建不能够被追踪的协程，从而避免协程泄漏</p>\n</blockquote>\n<h4 id=\"4-async-的错误用法\"><a class=\"markdownIt-Anchor\" href=\"#4-async-的错误用法\">#</a> 4、async 的错误用法</h4>\n<p>修改下上述代码，可以发现两个协程的总耗时就会变为七秒左右</p>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> time = measureTimeMillis &#123;</span><br><span class=\"line\">        runBlocking &#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> asyncA = async(start = CoroutineStart.LAZY) &#123;</span><br><span class=\"line\">                delay(<span class=\"number\">3000</span>)</span><br><span class=\"line\">                <span class=\"number\">1</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> asyncB = async(start = CoroutineStart.LAZY) &#123;</span><br><span class=\"line\">                delay(<span class=\"number\">4000</span>)</span><br><span class=\"line\">                <span class=\"number\">2</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            log(asyncA.await() + asyncB.await())</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    log(time)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[main] <span class=\"number\">3</span></span><br><span class=\"line\">[main] <span class=\"number\">7077</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<p>会造成这不同区别是因为  <code>CoroutineStart.LAZY</code>  不会主动启动协程，而是直到调用 <code>async.await()</code>  或者 <code>async.satrt()</code>  后才会启动（即懒加载模式），所以 <code>asyncA.await() + asyncB.await()</code>  会导致两个协程其实是在顺序执行。而默认值  <code>CoroutineStart.DEFAULT</code>  参数会使得协程在声明的同时就被启动了（实际上还需要等待被调度执行，但可以看做是立即就执行了），所以即使  <code>async.await()</code>  会阻塞当前线程直到协程返回结果值，但两个协程其实都是处于运行状态，所以总耗时就是四秒左右</p>\n<p>此时可以通过先调用 <code>start()</code>  再调用 <code>await()</code>  来实现第一个例子的效果</p>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">asyncA.start()</span><br><span class=\"line\">asyncB.start()</span><br><span class=\"line\">log(asyncA.await() + asyncB.await())</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<h4 id=\"5-async-并行分解\"><a class=\"markdownIt-Anchor\" href=\"#5-async-并行分解\">#</a> 5、async 并行分解</h4>\n<p>由  <code>suspend</code>  函数启动的所有协程都必须在该函数返回结果时停止，因此你可能需要保证这些协程在返回结果之前完成。借助 Kotlin 中的结构化并发机制，你可以定义用于启动一个或多个协程的  <code>coroutineScope</code> 。然后，你可以使用  <code>await()</code> （针对单个协程）或  <code>awaitAll()</code> （针对多个协程）保证这些协程在从函数返回结果之前完成</p>\n<p>例如，假设我们定义一个用于异步获取两个文档的  <code>coroutineScope</code> 。通过对每个延迟引用调用  <code>await()</code> ，我们可以保证这两项  <code>async</code>  操作在返回值之前完成：</p>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">suspend</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">fetchTwoDocs</span><span class=\"params\">()</span></span> =</span><br><span class=\"line\">   \tcoroutineScope &#123;</span><br><span class=\"line\">       \t<span class=\"keyword\">val</span> deferredOne = async &#123; fetchDoc(<span class=\"number\">1</span>) &#125;</span><br><span class=\"line\">       \t<span class=\"keyword\">val</span> deferredTwo = async &#123; fetchDoc(<span class=\"number\">2</span>) &#125;</span><br><span class=\"line\">       \tdeferredOne.await()</span><br><span class=\"line\">       \tdeferredTwo.await()</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<p>你还可以对集合使用  <code>awaitAll()</code> ，如以下示例所示：</p>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">suspend</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">fetchTwoDocs</span><span class=\"params\">()</span></span> =        <span class=\"comment\">// called on any Dispatcher (any thread, possibly Main)</span></span><br><span class=\"line\">    coroutineScope &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> deferreds = listOf(     <span class=\"comment\">// fetch two docs at the same time</span></span><br><span class=\"line\">            async &#123; fetchDoc(<span class=\"number\">1</span>) &#125;,  <span class=\"comment\">// async returns a result for the first doc</span></span><br><span class=\"line\">            async &#123; fetchDoc(<span class=\"number\">2</span>) &#125;   <span class=\"comment\">// async returns a result for the second doc</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        deferreds.awaitAll()        <span class=\"comment\">// use awaitAll to wait for both network requests</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<p>虽然  <code>fetchTwoDocs()</code>  使用  <code>async</code>  启动新协程，但该函数使用  <code>awaitAll()</code>  等待启动的协程完成后才会返回结果。不过请注意，即使我们没有调用  <code>awaitAll()</code> ， <code>coroutineScope</code>  构建器也会等到所有新协程都完成后才恢复名为  <code>fetchTwoDocs</code>  的协程。此外， <code>coroutineScope</code>  会捕获协程抛出的所有异常，并将其传送回调用方</p>\n<h4 id=\"6-deferred\"><a class=\"markdownIt-Anchor\" href=\"#6-deferred\">#</a> 6、Deferred</h4>\n<p><code>async</code>  函数的返回值是一个 Deferred 对象。Deferred 是一个接口类型，继承于 Job 接口，所以 Job 包含的属性和方法 Deferred 都有，其主要就是在 Job 的基础上扩展了  <code>await()</code>  方法</p>\n<h2 id=\"七-coroutinecontext\"><a class=\"markdownIt-Anchor\" href=\"#七-coroutinecontext\">#</a> 七、CoroutineContext</h2>\n<p>CoroutineContext 使用以下元素集定义协程的行为：</p>\n<ul>\n<li>Job：控制协程的生命周期</li>\n<li>CoroutineDispatcher：将工作分派到适当的线程</li>\n<li>CoroutineName：协程的名称，可用于调试</li>\n<li>CoroutineExceptionHandler：处理未捕获的异常</li>\n</ul>\n<h4 id=\"1-job\"><a class=\"markdownIt-Anchor\" href=\"#1-job\">#</a> 1、Job</h4>\n<p>协程中的 Job 是其上下文 CoroutineContext 中的一部分，可以通过  <code>coroutineContext[Job]</code>  表达式从上下文中获取到</p>\n<p>以下两个 log 语句虽然是运行在不同的协程上，但是其指向的 Job 其实是同个对象</p>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job = launch &#123;</span><br><span class=\"line\">        log(<span class=\"string\">&quot;My job is <span class=\"subst\">$&#123;coroutineContext[Job]&#125;</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    log(<span class=\"string\">&quot;My job is <span class=\"variable\">$job</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[main <span class=\"meta\">@coroutine</span>#<span class=\"number\">1</span>] My job <span class=\"keyword\">is</span> <span class=\"string\">&quot;coroutine#2&quot;</span>:StandaloneCoroutine&#123;Active&#125;@75a1cd57</span><br><span class=\"line\">[main <span class=\"meta\">@coroutine</span>#<span class=\"number\">2</span>] My job <span class=\"keyword\">is</span> <span class=\"string\">&quot;coroutine#2&quot;</span>:StandaloneCoroutine&#123;Active&#125;@75a1cd57</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<p>实际上 CoroutineScope 的  <code>isActive</code>  这个扩展属性只是  <code>coroutineContext[Job]?.isActive == true</code>  的一种简便写法</p>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">val</span> CoroutineScope.isActive: <span class=\"built_in\">Boolean</span></span><br><span class=\"line\">    <span class=\"keyword\">get</span>() = coroutineContext[Job]?.isActive ?: <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<h4 id=\"2-coroutinedispatcher\"><a class=\"markdownIt-Anchor\" href=\"#2-coroutinedispatcher\">#</a> 2、CoroutineDispatcher</h4>\n<p>CoroutineContext 包含一个 CoroutineDispatcher（协程调度器）用于指定执行协程的目标载体，即<strong>运行于哪个线程</strong>。CoroutineDispatcher 可以将协程的执行操作限制在特定线程上，也可以将其分派到线程池中，或者让它无限制地运行。所有的协程构造器（如 launch 和 async）都接受一个可选参数，即 CoroutineContext ，该参数可用于显式指定要创建的协程和其它上下文元素所要使用的 CoroutineDispatcher</p>\n<p>要在主线程之外运行代码，可以让 Kotlin 协程在 Default 或 IO 调度程序上执行工作。在 Kotlin 中，所有协程都必须在 CoroutineDispatcher 中运行，即使它们在主线程上运行也是如此。协程可以自行暂停，而 CoroutineDispatcher 负责将其恢复</p>\n<p>Kotlin 协程库提供了四个 Dispatcher 用于指定在何处运行协程，大部分情况下我们只会接触以下三个：</p>\n<ul>\n<li><strong>Dispatchers.Main</strong> - 使用此调度程序可在 Android 主线程上运行协程。此调度程序只能用于与界面交互和执行快速工作。示例包括调用  <code>suspend</code>  函数、运行 Android 界面框架操作，以及更新 <a href=\"https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.android.google.cn%2Ftopic%2Flibraries%2Farchitecture%2Flivedata\"> <code>LiveData</code> </a> 对象</li>\n<li><strong><a class=\"link\"   href=\"https://link.juejin.cn?target=http%3A%2F%2FDispatchers.IO\" >Dispatchers.IO <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></strong> - 此调度程序经过了专门优化，适合在主线程之外执行磁盘或网络 I/O。示例包括使用 <a class=\"link\"   href=\"https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.android.google.cn%2Ftopic%2Flibraries%2Farchitecture%2Froom\" >Room 组件 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>、从文件中读取数据或向文件中写入数据，以及运行任何网络操作</li>\n<li><strong>Dispatchers.Default</strong> - 此调度程序经过了专门优化，适合在主线程之外执行占用大量 CPU 资源的工作。用例示例包括对列表排序和解析 JSON</li>\n</ul>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> = runBlocking&lt;<span class=\"built_in\">Unit</span>&gt; &#123;</span><br><span class=\"line\">    launch &#123;</span><br><span class=\"line\">        log(<span class=\"string\">&quot;main runBlocking&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    launch(Dispatchers.Default) &#123;</span><br><span class=\"line\">        log(<span class=\"string\">&quot;Default&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    launch(Dispatchers.IO) &#123;</span><br><span class=\"line\">        log(<span class=\"string\">&quot;IO&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    launch(newSingleThreadContext(<span class=\"string\">&quot;MyOwnThread&quot;</span>)) &#123;</span><br><span class=\"line\">        log(<span class=\"string\">&quot;newSingleThreadContext&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[DefaultDispatcher-worker-<span class=\"number\">1</span> <span class=\"meta\">@coroutine</span>#<span class=\"number\">3</span>] Default</span><br><span class=\"line\">[DefaultDispatcher-worker-<span class=\"number\">2</span> <span class=\"meta\">@coroutine</span>#<span class=\"number\">4</span>] IO</span><br><span class=\"line\">[MyOwnThread <span class=\"meta\">@coroutine</span>#<span class=\"number\">5</span>] newSingleThreadContext</span><br><span class=\"line\">[main <span class=\"meta\">@coroutine</span>#<span class=\"number\">2</span>] main runBlocking</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<p>当  <code>launch {...}</code>  在不带参数的情况下使用时，它从外部的协程作用域继承上下文和调度器，即和 runBlocking 保持一致。而在 GlobalScope 中启动协程时默认使用的调度器是 Dispatchers.default，并使用共享的后台线程池，因此  <code>launch(Dispatchers.default){...}</code>  与  <code>GlobalScope.launch{...}</code>  是使用相同的调度器。 <code>newSingleThreadContext</code>  用于为协程专门创建一个新的线程来运行，专用线程是一种成本非常昂贵的资源，在实际的应用程序中必须在不再需要时释放掉，或者存储在顶级变量中以便在整个应用程序中进行重用</p>\n<h4 id=\"3-withcontext\"><a class=\"markdownIt-Anchor\" href=\"#3-withcontext\">#</a> 3、withContext</h4>\n<p>对于以下代码， <code>get</code>  方法内使用 <code>withContext(Dispatchers.IO)</code>  创建了一个指定在 IO 线程池中运行的代码块，该区间内的任何代码都始终通过 IO 线程来执行。由于  <code>withContext</code>  方法本身就是一个挂起函数，因此  <code>get</code>  方法也必须定义为挂起函数</p>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">suspend</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">fetchDocs</span><span class=\"params\">()</span></span> &#123;                      <span class=\"comment\">// Dispatchers.Main</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> result = <span class=\"keyword\">get</span>(<span class=\"string\">&quot;developer.android.com&quot;</span>)  <span class=\"comment\">// Dispatchers.Main</span></span><br><span class=\"line\">    show(result)                               <span class=\"comment\">// Dispatchers.Main</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">suspend</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">get</span><span class=\"params\">(url: <span class=\"type\">String</span>)</span></span> =                 <span class=\"comment\">// Dispatchers.Main</span></span><br><span class=\"line\">    withContext(Dispatchers.IO) &#123;              <span class=\"comment\">// Dispatchers.IO (main-safety block)</span></span><br><span class=\"line\">        <span class=\"comment\">/* perform network IO here */</span>          <span class=\"comment\">// Dispatchers.IO (main-safety block)</span></span><br><span class=\"line\">    &#125;                                          <span class=\"comment\">// Dispatchers.Main</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<p>借助协程，你可以细粒度地来调度线程。由于 <code>withContext()</code>  支持让你在不引入回调的情况下控制任何代码的执行线程池，因此你可以将其应用于非常小的函数，例如从数据库中读取数据或执行网络请求。一种不错的做法是使用  <code>withContext()</code>  来确保每个函数都是主线程安全的，这意味着，你可以从主线程调用每个函数。这样，调用方就从不需要考虑应该使用哪个线程来执行函数了</p>\n<p>在前面的示例中， <code>fetchDocs()</code>  方法在主线程上执行；不过，它可以安全地调用  <code>get</code>  方法，这样会在后台执行网络请求。由于协程支持  <code>suspend</code>  和  <code>resume</code> ，因此  <code>withContext</code>  块完成后，主线程上的协程会立即根据  <code>get</code>  结果恢复</p>\n<p>与基于回调的等效实现相比，<a href=\"https://link.juejin.cn?target=https%3A%2F%2FKotlin.github.io%2FKotlinx.coroutines%2FKotlinx-coroutines-core%2FKotlinx.coroutines%2Fwith-context.html\"> <code>withContext()</code> </a> 不会增加额外的开销。此外在某些情况下，还可以优化  <code>withContext()</code>  调用，使其超越基于回调的等效实现。例如，如果某个函数对一个网络进行十次调用，你可以使用外部  <code>withContext()</code>  让 Kotlin 只切换一次线程。这样，即使网络库多次使用  <code>withContext()</code> ，它也会留在同一调度程序上，并避免切换线程。此外，Kotlin 还优化了  <code>Dispatchers.Default</code>  与  <code>Dispatchers.IO</code>  之间的切换，以尽可能避免线程切换</p>\n<blockquote>\n<p>利用一个使用线程池的调度程序（例如  <code>Dispatchers.IO</code>  或  <code>Dispatchers.Default</code> ）不能保证代码块一直在同一线程上从上到下执行。在某些情况下，Kotlin 协程在  <code>suspend</code>  和  <code>resume</code>  后可能会将执行工作移交给另一个线程。这意味着，对于整个  <code>withContext()</code>  块，线程局部变量可能并不指向同一个值</p>\n</blockquote>\n<h4 id=\"4-coroutinename\"><a class=\"markdownIt-Anchor\" href=\"#4-coroutinename\">#</a> 4、CoroutineName</h4>\n<p>CoroutineName 用于为协程指定一个名字，方便调试和定位问题</p>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> = runBlocking&lt;<span class=\"built_in\">Unit</span>&gt;(CoroutineName(<span class=\"string\">&quot;RunBlocking&quot;</span>)) &#123;</span><br><span class=\"line\">    log(<span class=\"string\">&quot;start&quot;</span>)</span><br><span class=\"line\">    launch(CoroutineName(<span class=\"string\">&quot;MainCoroutine&quot;</span>)) &#123;</span><br><span class=\"line\">        launch(CoroutineName(<span class=\"string\">&quot;Coroutine#A&quot;</span>)) &#123;</span><br><span class=\"line\">            delay(<span class=\"number\">400</span>)</span><br><span class=\"line\">            log(<span class=\"string\">&quot;launch A&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        launch(CoroutineName(<span class=\"string\">&quot;Coroutine#B&quot;</span>)) &#123;</span><br><span class=\"line\">            delay(<span class=\"number\">300</span>)</span><br><span class=\"line\">            log(<span class=\"string\">&quot;launch B&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[main <span class=\"meta\">@RunBlocking</span>#<span class=\"number\">1</span>] start</span><br><span class=\"line\">[main <span class=\"meta\">@Coroutine</span>#B#<span class=\"number\">4</span>] launch B</span><br><span class=\"line\">[main <span class=\"meta\">@Coroutine</span>#A#<span class=\"number\">3</span>] launch A</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<h4 id=\"5-coroutineexceptionhandler\"><a class=\"markdownIt-Anchor\" href=\"#5-coroutineexceptionhandler\">#</a> 5、CoroutineExceptionHandler</h4>\n<p>在下文的异常处理会讲到</p>\n<h4 id=\"6-组合上下文元素\"><a class=\"markdownIt-Anchor\" href=\"#6-组合上下文元素\">#</a> 6、组合上下文元素</h4>\n<p>有时我们需要为协程上下文定义多个元素，那就可以用  <code>+</code>  运算符。例如，我们可以同时为协程指定 Dispatcher 和 CoroutineName</p>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> = runBlocking&lt;<span class=\"built_in\">Unit</span>&gt; &#123;</span><br><span class=\"line\">    launch(Dispatchers.Default + CoroutineName(<span class=\"string\">&quot;test&quot;</span>)) &#123;</span><br><span class=\"line\">        log(<span class=\"string\">&quot;Hello World&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[DefaultDispatcher-worker-<span class=\"number\">1</span> <span class=\"meta\">@test</span>#<span class=\"number\">2</span>] Hello World</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<p>此外，由于 CoroutineContext 是由一组元素组成的，所以加号右侧的元素会覆盖加号左侧的元素，进而组成新创建的 CoroutineContext。比如， <code>(Dispatchers.Main, &quot;name&quot;) + (Dispatchers.IO) = (Dispatchers.IO, &quot;name&quot;)</code></p>\n<h2 id=\"八-取消协程\"><a class=\"markdownIt-Anchor\" href=\"#八-取消协程\">#</a> 八、取消协程</h2>\n<p>如果用户退出某个启动了协程的 Activity/Fragment 的话，那么大部分情况下就应该取消所有协程</p>\n<p><code>job.cancel()</code>  就用于取消协程， <code>job.join()</code>  用于阻塞等待协程运行结束。因为  <code>cancel()</code>  函数调用后会马上返回而不是等待协程结束后再返回，所以此时协程不一定就是已经停止运行了。如果需要确保协程结束运行后再执行后续代码，就需要调用  <code>join()</code>  方法来阻塞等待。也可以通过调用 Job 的扩展函数  <code>cancelAndJoin()</code>  来完成相同操作，它结合了  <code>cancel</code>  和  <code>join</code>  两个操作</p>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job = launch &#123;</span><br><span class=\"line\">        repeat(<span class=\"number\">1000</span>) &#123; i -&gt;</span><br><span class=\"line\">            log(<span class=\"string\">&quot;job: I&#x27;m sleeping <span class=\"variable\">$i</span> ...&quot;</span>)</span><br><span class=\"line\">            delay(<span class=\"number\">500L</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    delay(<span class=\"number\">1300L</span>)</span><br><span class=\"line\">    log(<span class=\"string\">&quot;main: I&#x27;m tired of waiting!&quot;</span>)</span><br><span class=\"line\">    job.cancel()</span><br><span class=\"line\">    job.join()</span><br><span class=\"line\">    log(<span class=\"string\">&quot;main: Now I can quit.&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[main] job: I<span class=\"string\">&#x27;m sleeping 0 ...</span></span><br><span class=\"line\"><span class=\"string\">[main] job: I&#x27;</span>m sleeping <span class=\"number\">1</span> ...</span><br><span class=\"line\">[main] job: I<span class=\"string\">&#x27;m sleeping 2 ...</span></span><br><span class=\"line\"><span class=\"string\">[main] main: I&#x27;</span>m tired of waiting!</span><br><span class=\"line\">[main] main: Now I can quit.</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<h4 id=\"1-协程可能无法取消\"><a class=\"markdownIt-Anchor\" href=\"#1-协程可能无法取消\">#</a> 1、协程可能无法取消</h4>\n<p>并不是所有协程都可以响应取消操作，协程的取消操作是需要协作 (cooperative) 完成的，协程必须协作才能取消。协程库中的所有挂起函数都是可取消的，它们在运行时会检查协程是否被取消了，并在取消时抛出 CancellationException 从而结束整个任务。但如果协程正在执行计算任务并且未检查是否已处于取消状态的话，就无法取消协程</p>\n<p>所以即使以下代码主动取消了协程，协程也只会在完成既定循环后才结束运行，因为协程没有在每次循环前先进行检查，导致任务不受取消操作的影响</p>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> startTime = System.currentTimeMillis()</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job = launch(Dispatchers.Default) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> nextPrintTime = startTime</span><br><span class=\"line\">        <span class=\"keyword\">var</span> i = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (System.currentTimeMillis() &gt;= nextPrintTime) &#123;</span><br><span class=\"line\">                log(<span class=\"string\">&quot;job: I&#x27;m sleeping <span class=\"subst\">$&#123;i++&#125;</span> ...&quot;</span>)</span><br><span class=\"line\">                nextPrintTime += <span class=\"number\">500L</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    delay(<span class=\"number\">1300L</span>)</span><br><span class=\"line\">    log(<span class=\"string\">&quot;main: I&#x27;m tired of waiting!&quot;</span>)</span><br><span class=\"line\">    job.cancelAndJoin()</span><br><span class=\"line\">    log(<span class=\"string\">&quot;main: Now I can quit.&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[DefaultDispatcher-worker-<span class=\"number\">1</span>] job: I<span class=\"string\">&#x27;m sleeping 0 ...</span></span><br><span class=\"line\"><span class=\"string\">[DefaultDispatcher-worker-1] job: I&#x27;</span>m sleeping <span class=\"number\">1</span> ...</span><br><span class=\"line\">[DefaultDispatcher-worker-<span class=\"number\">1</span>] job: I<span class=\"string\">&#x27;m sleeping 2 ...</span></span><br><span class=\"line\"><span class=\"string\">[main] main: I&#x27;</span>m tired of waiting!</span><br><span class=\"line\">[DefaultDispatcher-worker-<span class=\"number\">1</span>] job: I<span class=\"string\">&#x27;m sleeping 3 ...</span></span><br><span class=\"line\"><span class=\"string\">[DefaultDispatcher-worker-1] job: I&#x27;</span>m sleeping <span class=\"number\">4</span> ...</span><br><span class=\"line\">[main] main: Now I can quit.</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<p>为了实现取消协程的目的，就需要为上述代码加上判断协程是否还处于可运行状态的逻辑，当不可运行时就主动退出协程。 <code>isActive</code>  是 CoroutineScope 的扩展属性，就用于判断协程是否还处于可运行状态</p>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> startTime = System.currentTimeMillis()</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job = launch(Dispatchers.Default) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> nextPrintTime = startTime</span><br><span class=\"line\">        <span class=\"keyword\">var</span> i = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isActive) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (System.currentTimeMillis() &gt;= nextPrintTime) &#123;</span><br><span class=\"line\">                    log(<span class=\"string\">&quot;job: I&#x27;m sleeping <span class=\"subst\">$&#123;i++&#125;</span> ...&quot;</span>)</span><br><span class=\"line\">                    nextPrintTime += <span class=\"number\">500L</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span><span class=\"symbol\">@launch</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    delay(<span class=\"number\">1300L</span>)</span><br><span class=\"line\">    log(<span class=\"string\">&quot;main: I&#x27;m tired of waiting!&quot;</span>)</span><br><span class=\"line\">    job.cancelAndJoin()</span><br><span class=\"line\">    log(<span class=\"string\">&quot;main: Now I can quit.&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<p>取消协程这个操作类似于在 Java 中调用 <code>Thread.interrupt()</code>  方法来向线程发起中断请求，这两个操作都不会强制停止协程和线程，外部只是相当于发起一个停止运行的请求，需要依靠协程和线程响应请求后主动停止运行。Kotlin 和 Java 之所以均没有提供一个可以直接强制停止协程或线程的方法，是因为这个操作可能会带来各种意想不到的情况。在停止协程和线程的时候，它们可能还持有着某些排他性资源（例如：锁，数据库链接），如果强制性地停止，它们持有的锁就会一直无法得到释放，导致其他协程和线程一直无法得到目标资源，最终可能导致线程死锁。所以 <code>Thread.stop()</code>  方法目前也是处于废弃状态，Java 官方并没有提供可靠的停止线程的方法</p>\n<h4 id=\"2-用-finally-释放资源\"><a class=\"markdownIt-Anchor\" href=\"#2-用-finally-释放资源\">#</a> 2、用 finally 释放资源</h4>\n<p>可取消的挂起函数在取消时会抛出 CancellationException，可以依靠 <code>try {...} finally {...}</code>  或者 Kotlin 的  <code>use</code>  函数在取消协程后释放持有的资源</p>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job = launch &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            repeat(<span class=\"number\">1000</span>) &#123; i -&gt;</span><br><span class=\"line\">                log(<span class=\"string\">&quot;job: I&#x27;m sleeping <span class=\"variable\">$i</span> ...&quot;</span>)</span><br><span class=\"line\">                delay(<span class=\"number\">500L</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e: Throwable) &#123;</span><br><span class=\"line\">            log(e.message)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            log(<span class=\"string\">&quot;job: I&#x27;m running finally&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    delay(<span class=\"number\">1300L</span>)</span><br><span class=\"line\">    log(<span class=\"string\">&quot;main: I&#x27;m tired of waiting!&quot;</span>)</span><br><span class=\"line\">    job.cancelAndJoin()</span><br><span class=\"line\">    log(<span class=\"string\">&quot;main: Now I can quit.&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[main] job: I<span class=\"string\">&#x27;m sleeping 0 ...</span></span><br><span class=\"line\"><span class=\"string\">[main] job: I&#x27;</span>m sleeping <span class=\"number\">1</span> ...</span><br><span class=\"line\">[main] job: I<span class=\"string\">&#x27;m sleeping 2 ...</span></span><br><span class=\"line\"><span class=\"string\">[main] main: I&#x27;</span>m tired of waiting!</span><br><span class=\"line\">[main] StandaloneCoroutine was cancelled</span><br><span class=\"line\">[main] job: I<span class=\"string\">&#x27;m running finally</span></span><br><span class=\"line\"><span class=\"string\">[main] main: Now I can quit.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br></pre></td></tr></table></figure></div>\n<h4 id=\"3-noncancellable\"><a class=\"markdownIt-Anchor\" href=\"#3-noncancellable\">#</a> 3、NonCancellable</h4>\n<p>如果在上一个例子中的  <code>finally</code>  块中再调用挂起函数的话，将会导致抛出 CancellationException，因为此时协程已经被取消了。通常我们并不会遇到这种情况，因为常见的资源释放操作都是非阻塞的，且不涉及任何挂起函数。但在极少数情况下我们需要在取消的协程中再调用挂起函数，此时可以使用  <code>withContext</code>  函数和  <code>NonCancellable</code>  上下文将相应的代码包装在  <code>withContext(NonCancellable) {...}</code>  代码块中，NonCancellable 就用于创建一个无法取消的协程作用域</p>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    log(<span class=\"string\">&quot;start&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> launchA = launch &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            repeat(<span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">                delay(<span class=\"number\">50</span>)</span><br><span class=\"line\">                log(<span class=\"string\">&quot;launchA-<span class=\"variable\">$it</span>&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            delay(<span class=\"number\">50</span>)</span><br><span class=\"line\">            log(<span class=\"string\">&quot;launchA isCompleted&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> launchB = launch &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            repeat(<span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">                delay(<span class=\"number\">50</span>)</span><br><span class=\"line\">                log(<span class=\"string\">&quot;launchB-<span class=\"variable\">$it</span>&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            withContext(NonCancellable) &#123;</span><br><span class=\"line\">                delay(<span class=\"number\">50</span>)</span><br><span class=\"line\">                log(<span class=\"string\">&quot;launchB isCompleted&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//延时一百毫秒，保证两个协程都已经被启动了</span></span><br><span class=\"line\">    delay(<span class=\"number\">200</span>)</span><br><span class=\"line\">    launchA.cancel()</span><br><span class=\"line\">    launchB.cancel()</span><br><span class=\"line\">    log(<span class=\"string\">&quot;end&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[main] start</span><br><span class=\"line\">[main] launchA-<span class=\"number\">0</span></span><br><span class=\"line\">[main] launchB-<span class=\"number\">0</span></span><br><span class=\"line\">[main] launchA-<span class=\"number\">1</span></span><br><span class=\"line\">[main] launchB-<span class=\"number\">1</span></span><br><span class=\"line\">[main] launchA-<span class=\"number\">2</span></span><br><span class=\"line\">[main] launchB-<span class=\"number\">2</span></span><br><span class=\"line\">[main] end</span><br><span class=\"line\">[main] launchB isCompleted</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<h4 id=\"4-父协程和子协程\"><a class=\"markdownIt-Anchor\" href=\"#4-父协程和子协程\">#</a> 4、父协程和子协程</h4>\n<p>当一个协程在另外一个协程的协程作用域中启动时，它将通过  <code>CoroutineScope.coroutineContext</code>  继承其上下文，新启动的协程就被称为子协程，子协程的 Job 将成为父协程 Job 的子 Job。父协程总是会等待其所有子协程都完成后才结束自身，所以父协程不必显式跟踪它启动的所有子协程，也不必使用  <code>Job.join</code>  在末尾等待子协程完成</p>\n<p>所以虽然 parentJob 启动的三个子协程的延时时间各不相同，但它们最终都会打印出日志</p>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> parentJob = launch &#123;</span><br><span class=\"line\">        repeat(<span class=\"number\">3</span>) &#123; i -&gt;</span><br><span class=\"line\">            launch &#123;</span><br><span class=\"line\">                delay((i + <span class=\"number\">1</span>) * <span class=\"number\">200L</span>)</span><br><span class=\"line\">                log(<span class=\"string\">&quot;Coroutine <span class=\"variable\">$i</span> is done&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        log(<span class=\"string\">&quot;request: I&#x27;m done and I don&#x27;t explicitly join my children that are still active&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[main <span class=\"meta\">@coroutine</span>#<span class=\"number\">2</span>] request: I<span class=\"string\">&#x27;m done and I don&#x27;</span>t explicitly join my children that are still active</span><br><span class=\"line\">[main <span class=\"meta\">@coroutine</span>#<span class=\"number\">3</span>] Coroutine <span class=\"number\">0</span> <span class=\"keyword\">is</span> done</span><br><span class=\"line\">[main <span class=\"meta\">@coroutine</span>#<span class=\"number\">4</span>] Coroutine <span class=\"number\">1</span> <span class=\"keyword\">is</span> done</span><br><span class=\"line\">[main <span class=\"meta\">@coroutine</span>#<span class=\"number\">5</span>] Coroutine <span class=\"number\">2</span> <span class=\"keyword\">is</span> done</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<h4 id=\"5-传播取消操作\"><a class=\"markdownIt-Anchor\" href=\"#5-传播取消操作\">#</a> 5、传播取消操作</h4>\n<p>一般情况下，协程的取消操作会通过协程的层次结构来进行传播。如果取消父协程或者父协程抛出异常，那么子协程都会被取消。而如果子协程被取消，则不会影响同级协程和父协程，但如果子协程抛出异常则也会导致同级协程和父协程被取消</p>\n<p>对于以下代码，子协程 jon1 被取消并不影响子协程 jon2 和父协程继续运行，但父协程被取消后子协程都会被递归取消</p>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> request = launch &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> job1 = launch &#123;</span><br><span class=\"line\">            repeat(<span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">                delay(<span class=\"number\">300</span>)</span><br><span class=\"line\">                log(<span class=\"string\">&quot;job1: <span class=\"variable\">$it</span>&quot;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (it == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                    log(<span class=\"string\">&quot;job1 canceled&quot;</span>)</span><br><span class=\"line\">                    cancel()</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> job2 = launch &#123;</span><br><span class=\"line\">            repeat(<span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">                delay(<span class=\"number\">300</span>)</span><br><span class=\"line\">                log(<span class=\"string\">&quot;job2: <span class=\"variable\">$it</span>&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    delay(<span class=\"number\">1600</span>)</span><br><span class=\"line\">    log(<span class=\"string\">&quot;parent job canceled&quot;</span>)</span><br><span class=\"line\">    request.cancel()</span><br><span class=\"line\">    delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[main <span class=\"meta\">@coroutine</span>#<span class=\"number\">3</span>] job1: <span class=\"number\">0</span></span><br><span class=\"line\">[main <span class=\"meta\">@coroutine</span>#<span class=\"number\">4</span>] job2: <span class=\"number\">0</span></span><br><span class=\"line\">[main <span class=\"meta\">@coroutine</span>#<span class=\"number\">3</span>] job1: <span class=\"number\">1</span></span><br><span class=\"line\">[main <span class=\"meta\">@coroutine</span>#<span class=\"number\">4</span>] job2: <span class=\"number\">1</span></span><br><span class=\"line\">[main <span class=\"meta\">@coroutine</span>#<span class=\"number\">3</span>] job1: <span class=\"number\">2</span></span><br><span class=\"line\">[main <span class=\"meta\">@coroutine</span>#<span class=\"number\">3</span>] job1 canceled</span><br><span class=\"line\">[main <span class=\"meta\">@coroutine</span>#<span class=\"number\">4</span>] job2: <span class=\"number\">2</span></span><br><span class=\"line\">[main <span class=\"meta\">@coroutine</span>#<span class=\"number\">4</span>] job2: <span class=\"number\">3</span></span><br><span class=\"line\">[main <span class=\"meta\">@coroutine</span>#<span class=\"number\">4</span>] job2: <span class=\"number\">4</span></span><br><span class=\"line\">[main <span class=\"meta\">@coroutine</span>#<span class=\"number\">1</span>] parent job canceled</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<h4 id=\"6-withtimeout\"><a class=\"markdownIt-Anchor\" href=\"#6-withtimeout\">#</a> 6、withTimeout</h4>\n<p><code>withTimeout</code>  函数用于指定协程的运行超时时间，如果超时则会抛出 TimeoutCancellationException，从而令协程结束运行</p>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    log(<span class=\"string\">&quot;start&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> result = withTimeout(<span class=\"number\">300</span>) &#123;</span><br><span class=\"line\">        repeat(<span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">            delay(<span class=\"number\">100</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"number\">200</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    log(result)</span><br><span class=\"line\">    log(<span class=\"string\">&quot;end&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[main] start</span><br><span class=\"line\">Exception <span class=\"keyword\">in</span> thread <span class=\"string\">&quot;main&quot;</span> kotlinx.coroutines.TimeoutCancellationException: Timed <span class=\"keyword\">out</span> waiting <span class=\"keyword\">for</span> <span class=\"number\">300</span> ms</span><br><span class=\"line\">\tat kotlinx.coroutines.TimeoutKt.TimeoutCancellationException(Timeout.kt:<span class=\"number\">186</span>)</span><br><span class=\"line\">\tat kotlinx.coroutines.TimeoutCoroutine.run(Timeout.kt:<span class=\"number\">156</span>)</span><br><span class=\"line\">\tat kotlinx.coroutines.EventLoopImplBase$DelayedRunnableTask.run(EventLoop.common.kt:<span class=\"number\">497</span>)</span><br><span class=\"line\">\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:<span class=\"number\">274</span>)</span><br><span class=\"line\">\tat kotlinx.coroutines.DefaultExecutor.run(DefaultExecutor.kt:<span class=\"number\">69</span>)</span><br><span class=\"line\">\tat java.lang.Thread.run(Thread.java:<span class=\"number\">748</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<p><code>withTimeout</code>  方法抛出的 TimeoutCancellationException 是 CancellationException 的子类，之前我们并未在输出日志上看到关于 CancellationException 这类异常的堆栈信息，这是因为对于一个已取消的协程来说，CancellationException 被认为是触发协程结束的正常原因。但对于 <code>withTimeout</code>  方法来说，抛出异常是其上报超时情况的一种手段，所以该异常不会被协程内部消化掉</p>\n<p>如果不希望因为异常导致协程结束，可以改用 <code>withTimeoutOrNull</code>  方法，如果超时就会返回 null</p>\n<h2 id=\"九-异常处理\"><a class=\"markdownIt-Anchor\" href=\"#九-异常处理\">#</a> 九、异常处理</h2>\n<p>当一个协程由于异常而运行失败时，它会传播这个异常并传递给它的父协程。接下来，父协程会进行下面几步操作：</p>\n<ul>\n<li>取消它自己的子级</li>\n<li>取消它自己</li>\n<li>将异常传播并传递给它的父级</li>\n</ul>\n<p>异常会到达层级的根部，而且当前 CoroutineScope 所启动的所有协程都会被取消，但协程并非都是一发现异常就执行以上流程，launch 和 async 在处理异常方面有着很大的差异</p>\n<p>launch 将异常视为未捕获异常，类似于 Java 的 Thread.uncaughtExceptionHandler，当发现异常时就会马上抛出。async 期望最终是通过调用 await 来获取结果 (或者异常)，所以默认情况下它不会抛出异常。这意味着如果使用 async 启动新的协程，它会静默地将异常丢弃，直到调用  <code>async.await()</code>  才会得到目标值或者抛出存在的异常</p>\n<p>例如，以下代码中 launchA 抛出的异常会先连锁导致 launchB 也被取消（抛出 JobCancellationException），然后再导致父协程 BlockingCoroutine 也被取消</p>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> launchA = launch &#123;</span><br><span class=\"line\">        delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">        <span class=\"number\">1</span> / <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> launchB = launch &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            delay(<span class=\"number\">1300</span>)</span><br><span class=\"line\">            log(<span class=\"string\">&quot;launchB&quot;</span>)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e: CancellationException) &#123;</span><br><span class=\"line\">            e.printStackTrace()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    launchA.join()</span><br><span class=\"line\">    launchB.join()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">kotlinx.coroutines.JobCancellationException: Parent job <span class=\"keyword\">is</span> Cancelling; job=BlockingCoroutine&#123;Cancelling&#125;@5eb5c224</span><br><span class=\"line\">Caused <span class=\"keyword\">by</span>: java.lang.ArithmeticException: / <span class=\"keyword\">by</span> zero</span><br><span class=\"line\">\tat coroutines.CoroutinesMainKt$main$<span class=\"number\">1</span>$launchA$<span class=\"number\">1.</span>invokeSuspend(CoroutinesMain.kt:<span class=\"number\">11</span>)</span><br><span class=\"line\">\t···</span><br><span class=\"line\">Exception <span class=\"keyword\">in</span> thread <span class=\"string\">&quot;main&quot;</span> java.lang.ArithmeticException: / <span class=\"keyword\">by</span> zero</span><br><span class=\"line\">\tat coroutines.CoroutinesMainKt$main$<span class=\"number\">1</span>$launchA$<span class=\"number\">1.</span>invokeSuspend(CoroutinesMain.kt:<span class=\"number\">11</span>)</span><br><span class=\"line\">\t···</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<h4 id=\"1-coroutineexceptionhandler\"><a class=\"markdownIt-Anchor\" href=\"#1-coroutineexceptionhandler\">#</a> 1、CoroutineExceptionHandler</h4>\n<p>如果不想将所有的异常信息都打印到控制台上，那么可以使用 CoroutineExceptionHandler 作为协程的上下文元素之一，在这里进行自定义日志记录或异常处理，它类似于对线程使用 Thread.uncaughtExceptionHandler。但是，CoroutineExceptionHandler 只会在预计不会由用户处理的异常上调用，因此在 async 中使用它没有任何效果，当 async 内部发生了异常且没有捕获时，那么调用  <code>async.await()</code>  依然会导致应用崩溃</p>\n<p>以下代码只会捕获到 launch 抛出的异常</p>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> handler = CoroutineExceptionHandler &#123; _, exception -&gt;</span><br><span class=\"line\">        log(<span class=\"string\">&quot;Caught <span class=\"variable\">$exception</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job = GlobalScope.launch(handler) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> AssertionError()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> deferred = GlobalScope.async(handler) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> ArithmeticException()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    joinAll(job, deferred)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[DefaultDispatcher-worker-<span class=\"number\">2</span>] Caught java.lang.AssertionError</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<h4 id=\"2-supervisorjob\"><a class=\"markdownIt-Anchor\" href=\"#2-supervisorjob\">#</a> 2、SupervisorJob</h4>\n<p>由于异常导致的取消在协程中是一种双向关系，会在整个协程层次结构中传播，但如果我们需要的是单向取消该怎么实现呢？</p>\n<p>例如，假设在 Activity 中启动了多个协程，如果单个协程所代表的子任务失败了，此时并不一定需要连锁终止整个 Activity 内部的所有其它协程任务，即此时希望子协程的异常不会传播给同级协程和父协程。而当 Activity 退出后，父协程的异常（即 CancellationException）又应该连锁传播给所有子协程，终止所有子协程</p>\n<p>可以使用 SupervisorJob 来实现上述效果，它类似于常规的 Job，唯一的区别就是取消操作只会向下传播，一个子协程的运行失败不会影响到其他子协程</p>\n<p>例如，以下示例中 firstChild 抛出的异常不会导致 secondChild 被取消，但当 supervisor 被取消时 secondChild 也被同时取消了</p>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> supervisor = SupervisorJob()</span><br><span class=\"line\">    with(CoroutineScope(coroutineContext + supervisor)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> firstChild = launch(CoroutineExceptionHandler &#123; _, _ -&gt; &#125;) &#123;</span><br><span class=\"line\">            log(<span class=\"string\">&quot;First child is failing&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> AssertionError(<span class=\"string\">&quot;First child is cancelled&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> secondChild = launch &#123;</span><br><span class=\"line\">            firstChild.join()</span><br><span class=\"line\">            log(<span class=\"string\">&quot;First child is cancelled: <span class=\"subst\">$&#123;firstChild.isCancelled&#125;</span>, but second one is still active&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                delay(<span class=\"built_in\">Long</span>.MAX_VALUE)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                log(<span class=\"string\">&quot;Second child is cancelled because supervisor is cancelled&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        firstChild.join()</span><br><span class=\"line\">        log(<span class=\"string\">&quot;Cancelling supervisor&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\">//取消所有协程</span></span><br><span class=\"line\">        supervisor.cancel()</span><br><span class=\"line\">        secondChild.join()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[main] First child <span class=\"keyword\">is</span> failing</span><br><span class=\"line\">[main] First child <span class=\"keyword\">is</span> cancelled: <span class=\"literal\">true</span>, but second one <span class=\"keyword\">is</span> still active</span><br><span class=\"line\">[main] Cancelling supervisor</span><br><span class=\"line\">[main] Second child <span class=\"keyword\">is</span> cancelled because supervisor <span class=\"keyword\">is</span> cancelled</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<p>但是，如果异常没有被处理且 CoroutineContext 没有包含一个 CoroutineExceptionHandler 的话，异常会到达默认线程的 ExceptionHandler。在 JVM 中，异常会被打印在控制台；而在 Android 中，无论异常在那个 Dispatcher 中发生，都会直接导致应用崩溃。所以如果上述例子中移除了 firstChild 包含的 CoroutineExceptionHandler 的话，就会导致 Android 应用崩溃</p>\n<p>💥 <strong>未被捕获的异常一定会被抛出，无论使用的是哪种 Job</strong></p>\n<h2 id=\"十-android-ktx\"><a class=\"markdownIt-Anchor\" href=\"#十-android-ktx\">#</a> 十、Android KTX</h2>\n<p>Android KTX 是包含在 Android <a class=\"link\"   href=\"https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.android.google.cn%2Fjetpack\" >Jetpack <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a> 及其他 Android 库中的一组 Kotlin 扩展程序。KTX 扩展程序可以为 Jetpack、Android 平台及其他 API 提供简洁的惯用 Kotlin 代码。为此，这些扩展程序利用了多种 Kotlin 语言功能，其中就包括了对 Kotlin 协程的支持</p>\n<h4 id=\"1-viewmodel-ktx\"><a class=\"markdownIt-Anchor\" href=\"#1-viewmodel-ktx\">#</a> 1、ViewModel KTX</h4>\n<p>ViewModel KTX 库提供了一个  <code>viewModelScope</code> ，用于在 ViewModel 启动协程，该作用域的生命周期和 ViewModel 相等，当 ViewModel 回调了  <code>onCleared()</code>  方法后会自动取消所有当前 ViewModel 中的所有协程</p>\n<p>引入依赖：</p>\n<div class=\"highlight-container\" data-rel=\"Groovy\"><figure class=\"iseeu highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    implementation <span class=\"string\">&quot;androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<p>例如，以下  <code>fetchDocs()</code>  方法内就依靠  <code>viewModelScope</code>  启动了一个协程，用于在后台线程发起网络请求</p>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyViewModel</span> : <span class=\"type\">ViewModel</span>() &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">fetchDocs</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        viewModelScope.launch &#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> result = <span class=\"keyword\">get</span>(<span class=\"string\">&quot;https://developer.android.com&quot;</span>)</span><br><span class=\"line\">            show(result)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">suspend</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">get</span><span class=\"params\">(url: <span class=\"type\">String</span>)</span></span> = withContext(Dispatchers.IO) &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<h4 id=\"2-lifecycle-ktx\"><a class=\"markdownIt-Anchor\" href=\"#2-lifecycle-ktx\">#</a> 2、Lifecycle KTX</h4>\n<p>Lifecycle KTX 为每个 <a href=\"https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.android.google.cn%2Ftopic%2Flibraries%2Farchitecture%2Flifecycle\"> <code>Lifecycle</code> </a> 对象定义了一个  <code>LifecycleScope</code> ，该作用域具有生命周期安全的保障，在此范围内启动的协程会在  <code>Lifecycle</code>  被销毁时同时取消，可以使用  <code>lifecycle.coroutineScope</code>  或  <code>lifecycleOwner.lifecycleScope</code>  属性来拿到该 CoroutineScope</p>\n<p>引入依赖：</p>\n<div class=\"highlight-container\" data-rel=\"Groovy\"><figure class=\"iseeu highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    implementation <span class=\"string\">&quot;androidx.lifecycle:lifecycle-runtime-ktx:2.2.0&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<p>以下示例演示了如何使用  <code>lifecycleOwner.lifecycleScope</code>  异步创建预计算文本：</p>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyFragment</span>: <span class=\"type\">Fragment</span>() &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onViewCreated</span><span class=\"params\">(view: <span class=\"type\">View</span>, savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onViewCreated(view, savedInstanceState)</span><br><span class=\"line\">        viewLifecycleOwner.lifecycleScope.launch &#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> params = TextViewCompat.getTextMetricsParams(textView)</span><br><span class=\"line\">            <span class=\"keyword\">val</span> precomputedText = withContext(Dispatchers.Default) &#123;</span><br><span class=\"line\">                PrecomputedTextCompat.create(longTextContent, params)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            TextViewCompat.setPrecomputedText(textView, precomputedText)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<h4 id=\"3-livedata-ktx\"><a class=\"markdownIt-Anchor\" href=\"#3-livedata-ktx\">#</a> 3、LiveData KTX</h4>\n<p>使用 LiveData 时，你可能需要异步计算值。例如，你可能需要检索用户的偏好设置并将其传送给界面。在这些情况下，LiveData KTX 提供了一个  <code>liveData</code>  构建器函数，该函数会调用 suspend 函数并将结果赋值给 LiveData</p>\n<p>引入依赖：</p>\n<div class=\"highlight-container\" data-rel=\"Groovy\"><figure class=\"iseeu highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    implementation <span class=\"string\">&quot;androidx.lifecycle:lifecycle-livedata-ktx:2.2.0&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<p>在以下示例中， <code>loadUser()</code>  是在其他地方声明的 suspend 函数。 你可以使用  <code>liveData</code>  构建器函数异步调用  <code>loadUser()</code> ，然后使用  <code>emit()</code>  来发出结果：</p>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> user: LiveData&lt;User&gt; = liveData &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> <span class=\"keyword\">data</span> = database.loadUser() <span class=\"comment\">// loadUser is a suspend function.</span></span><br><span class=\"line\">    emit(<span class=\"keyword\">data</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n",
            "tags": [
                "协程"
            ]
        },
        {
            "id": "https://wait-you.github.io/2023/06/06/Kotlin/",
            "url": "https://wait-you.github.io/2023/06/06/Kotlin/",
            "title": "Kotlin",
            "date_published": "2023-06-06T00:52:48.000Z",
            "content_html": "<p># Kotlin</p>\n<h2 id=\"变量和函数\"><a class=\"markdownIt-Anchor\" href=\"#变量和函数\">#</a> 变量和函数</h2>\n<h3 id=\"变量\"><a class=\"markdownIt-Anchor\" href=\"#变量\">#</a> 变量</h3>\n<ul>\n<li>\n<p>如果代码要定义一个变量，需要在变量前面声明这个变量的类型，比如</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token class-name\">String</span> b <span class=\"token operator\">=</span> <span class=\"token string\">\"杜金亮\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n<li>\n<p>可以看到在声明变量时，并没有为了限定类型，那么他的类型时怎么确定的呢？</p>\n<ul>\n<li>这是由于 Kotlin 的类型推导机制完成的</li>\n</ul>\n</li>\n<li>\n<p>但是这种类型推导机制并不是万能的，在一些延迟赋值的情况下，Kotlin 就无法自动推导他的类型了<br>\n这时候就需要显式的声明变量类型才行，语法如下</p>\n</li>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> a <span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span> <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">1</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>语法糖，当一个函数只有一行时，Kotlin 允许我们不必写函数体，可以直接将唯一的一行代码写在函数定义<br>\n尾部，中间用等号连接即可</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">fun</span> <span class=\"token function\">largerNum</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> num2 <span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> Int <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>param1<span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">===</span><span class=\"token operator\">=</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">fun</span> <span class=\"token function\">largerNum</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> num2 <span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">2</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"程序的逻辑控制\"><a class=\"markdownIt-Anchor\" href=\"#程序的逻辑控制\">#</a> 程序的逻辑控制</h2>\n<h3 id=\"if条件控制\"><a class=\"markdownIt-Anchor\" href=\"#if条件控制\">#</a> if 条件控制</h3>\n<ul>\n<li>\n<p>Kotlin 中的 <code>if</code>  语句和 Java 中的 <code>if</code>  语句几乎没有任何区别</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">fun</span> <span class=\"token function\">largerNum</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> num2 <span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> Int<span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">var</span> temp <span class=\"token operator\">=</span> <span class=\"token number\">0</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">></span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        temp <span class=\"token operator\">=</span> num1 </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        temp <span class=\"token operator\">=</span> num2 </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> temp</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">3</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>可以看到 temp 是一个多余的变量，故可以再次修改</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">fun</span> <span class=\"token function\">largerNum</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> num2 <span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> Int<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">></span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        num1 </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        num2 </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">4</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n<p>​</p>\n<h3 id=\"when条件语句\"><a class=\"markdownIt-Anchor\" href=\"#when条件语句\">#</a> when 条件语句</h3>\n<ul>\n<li>\n<p><code>when</code>  语句有点类似 Java 中的 <code>switch</code>  语句，但他又远比语句强大得多</p>\n<ul>\n<li><code>switch</code>  有着种种限制，比如他只能传入整型或短于整型或者字符串变量作为条件，其次每一个 case 条件都要<br>\n最后主动加上一个 break, 否则执行完当前 case 之后会一次执行下面的 case</li>\n</ul>\n</li>\n<li>\n<p>下面看一个实例</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">fun</span> <span class=\"token function\">getScore</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Tom\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token number\">86</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Jim\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token number\">77</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Jack\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">5</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>因为和 <code>if</code>  语句一样，也是可以有返回值的，所以仍旧可以使用单行代码函数的语法糖</p>\n</li>\n<li>\n<p>语句允许传入一个任意类型的参数，然后可以在 when 的结构提中定义一系列的条件，格式是</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>匹配值 <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>执行逻辑<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">6</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n<li>\n<p>上述代码中，关键字是类型匹配的核心，它相当于 Java 中的 <code>instanceof</code>  关键字，由于 <code>checkNumber()</code>  函数接受一个 <code>Number</code>  类型的参数，这是 <code>Kotlin</code>  内置的一个抽象类，像 <code>Int、Float、Double</code>  等与数字相关的类都是他的子类，所以这里就可以使用了类型匹配来判断传入的参数到底属于什么类型</p>\n</li>\n</ul>\n</li>\n<li>\n<p><code>when</code>  语句的基本用法就这些，但其实 <code>when</code>  语句还有一种不带参数的用法</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">fun</span> <span class=\"token function\">getScore</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">when</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    name <span class=\"token operator\">==</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Tom\"</span></span> <span class=\"token operator\">-></span> <span class=\"token number\">86</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    name <span class=\"token operator\">==</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Jack\"</span></span> <span class=\"token operator\">-></span> <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token operator\">-></span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">7</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"循环语句\"><a class=\"markdownIt-Anchor\" href=\"#循环语句\">#</a> 循环语句</h3>\n<ul>\n<li>\n<p>熟悉 Java 的人都晓得，Java 中主要有两种循环语句: <code>while</code>  循环和 <code>for</code>  循环。Kotlin 中也提供了 <code>while</code>  和 <code>for</code>  循环，其中 <code>while</code>  循环不论是语法还是使用技巧上都和 Java 一样，故不讨论</p>\n</li>\n<li>\n<p>Kotlin 在 <code>for</code>  循环方面做了很大幅度的修改，Java 中最常用的 <code>for-i</code>  循环在 Kotlin 直接被舍弃，而 Java 中另一种 <code>for-each</code>  循环则被 Kotlin 进行了大幅度的增强，变成了 <code>for-in</code>  循环</p>\n</li>\n<li>\n<p>在此之前，先普及一个区间的概念</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> range <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token operator\">..</span><span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">8</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>在很多情况下，双端闭区间却不如单端闭区间好用，比如数组的下标是从 0 开始，一个长度为 10 的数组，他的下标区间范围是 0 到 9，因此左闭右开的区间更加常用，Kotlin 中可以使用 <code>until</code>  关键字来创建一个左闭右开的区间</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> range <span class=\"token operator\">=</span> <span class=\"token number\">0</span> until <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">9</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>默认情况下， <code>for-in</code>  循环每次执行循环时会在区间回味内递增 1，相当于 Java  <code>for-i</code>  循环中 <code>i++</code>  的效果，而如果你想要跳过其中的一些元素，可以使用 <code>step</code>  关键字：</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token keyword\">in</span> <span class=\"token number\">0</span> until <span class=\"token number\">10</span> step <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">10</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n<li>\n<p>相当于 <code>[10, 1]</code></p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"面向对象编程\"><a class=\"markdownIt-Anchor\" href=\"#面向对象编程\">#</a> 面向对象编程</h2>\n<ul>\n<li><strong>什么是面向对象编程？</strong>\n<ul>\n<li>先将实物封装成具体的类，然后将事物所有的属性和能力分别定义成类中的字段和函数，接下来对类进行实例化，再根据具体的变成需求调用类中的字段和方法即可</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"类与对象\"><a class=\"markdownIt-Anchor\" href=\"#类与对象\">#</a> 类与对象</h3>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> Person<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">var</span> age <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">fun</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"is eating. He is \"</span></span> <span class=\"token operator\">+</span> age <span class=\"token operator\">+</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"years old.\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">val</span> p <span class=\"token operator\">=</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span><span class=\"token operator\">===</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">val</span> p <span class=\"token operator\">=</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    p<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Jack\"</span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    p<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">21</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    p<span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">11</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n<li>\n<p>想要让 Student 类继承 Person 类需要做两件事</p>\n<ul>\n<li>\n<p>第一，使 Person 类可以被继承</p>\n<ul>\n<li>\n<p>在 Kotlin 中，任何一个非抽象类默认都是不可以被继承的，相当于 Java 中给类声明了 <code>final</code>  关键字，之所以这样设计和 <code>val</code>  关键字的原因是差不多的，因为类和变量一样，最好都是不可变的，而一个类允许被继承的话，他无法预知子类会如何实现，因此可能就会存在一些未知的风险。</p>\n</li>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">open</span> <span class=\"token keyword\">class</span> Person<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">..</span><span class=\"token operator\">..</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">12</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>为什么继承的 Person 后面有括号？</strong></p>\n<ul>\n<li>\n<p>在 Java 的继承中，我们知道在子类的构造函数中是要调用父类的构造函数的，但是在 Kotlin 中，构造函数分为主构造函数和次构造函数，最常用的是主构造函数</p>\n</li>\n<li>\n<p>主构造函数的特点是没有函数体，直接定义在类名的后面即可</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token function\">Student</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> id <span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token keyword\">val</span> grade <span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">13</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n<li>\n<p>根据继承特性的规定，子类的构造函数必须调用父类的构造函数，可是主构造函数并没有函数体，我们怎样去调用父类的构造函数呢？你可能会说，在 <code>init</code>  结构体中去调用不就好了。这或许是一种办法，但是在绝大多数场景下，我们是不需要编写 <code>init</code>  结构体的。在 Kotlin 中子类的主构造函数调用父类中的哪个构造函数，在继承的时候通过括号指定</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token function\">Student</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> id <span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token keyword\">val</span> grade <span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">14</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n<li>\n<p>这时子类就会出错，需修改为</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token function\">Student</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> id <span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token keyword\">val</span> grade <span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> name <span class=\"token operator\">:</span>String<span class=\"token punctuation\">,</span> age <span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">15</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>还有一种特殊的情况：类中只有次构造函数，没有主构造函数，即当一个类没有显式定义主构造函数且定义了次构造函数时，他就是没有主构造函数的</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> Student <span class=\"token operator\">:</span> Person<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> age <span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">16</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>当一个类没有任何代码时，可以将大括号省略</p>\n</li>\n</ul>\n</li>\n<li>\n<p>单例类，某个类在全局只能有一个实例，私有一个静态实例，写一个 get 方法，实例化的时候判断实例是否为空，不为空就返回，为空赋值返回</p>\n<ul>\n<li>\n<p>Kotlin 只需要把 <code>class</code>  换为 <code>object</code>  即可</p>\n</li>\n<li>\n<p>调用类似 Java 的静态方法的调用，实际上 Kotlin 在背后自动创建了一个 Singleton 的实例，并且保证全局只会存在一个 Singleton 实例</p>\n</li>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Object Singleton<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">fun</span> <span class=\"token function\">singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"singleton is called.\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">17</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n<li>\n<p>Set</p>\n<ul>\n<li></li>\n</ul>\n  <div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#不可变集合</span><br><span class=\"line\"><span class=\"keyword\">val</span> <span class=\"keyword\">set</span> = setOf(<span class=\"string\">&quot;Apple&quot;</span>, <span class=\"string\">&quot;Banana&quot;</span>, <span class=\"string\">&quot;Orange&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(fruit <span class=\"keyword\">in</span> <span class=\"keyword\">set</span>)&#123;</span><br><span class=\"line\">    println(fruit)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#可变集合</span><br><span class=\"line\"><span class=\"keyword\">val</span> <span class=\"keyword\">set</span> = mutableListOf(<span class=\"string\">&quot;Apple&quot;</span>, <span class=\"string\">&quot;Banana&quot;</span>, <span class=\"string\">&quot;Orange&quot;</span>)</span><br><span class=\"line\">list.add( <span class=\"string\">&quot;Pear&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(fruit <span class=\"keyword\">in</span> <span class=\"keyword\">set</span>)&#123;</span><br><span class=\"line\">    println(fruit)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n</li>\n<li>\n<p>Map</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>#存数据</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>map<span class=\"token punctuation\">[</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Apple\"</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>#取数据</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">val</span> number <span class=\"token operator\">=</span> map<span class=\"token punctuation\">[</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Apple\"</span></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>#不可变集合</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">val</span> map <span class=\"token operator\">=</span> <span class=\"token function\">mapOf</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Apple\"</span></span> <span class=\"token keyword\">to</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Banana\"</span></span> <span class=\"token keyword\">to</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>#可变集合</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">val</span> map <span class=\"token operator\">=</span> <span class=\"token function\">mutableMapOf</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Apple\"</span></span> <span class=\"token keyword\">to</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Banana\"</span></span> <span class=\"token keyword\">to</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>map<span class=\"token punctuation\">[</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Pear\"</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>fruit<span class=\"token punctuation\">,</span> number<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"fruit is\"</span></span> <span class=\"token operator\">+</span> fruit <span class=\"token operator\">+</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\",number is \"</span></span> <span class=\"token operator\">+</span> number<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">19</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>集合的函数式 API 实质上就是接受了一个 Lambda 参数</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>#按给定条件查询最大值</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">val</span> maxLengthFruit <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">maxBy</span><span class=\"token punctuation\">&#123;</span> it<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>#按给定条件将集合中的每个元素映射成另外一个值，最终生成一个新的集合</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">val</span> newList <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">&#123;</span> it<span class=\"token punctuation\">.</span>toUppercase <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>#按给定条件过滤，最终生成一个新的集合</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">val</span> newList <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">&#123;</span> it<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>#判断集合中是否至少存一个元素满足条件</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">val</span> flag <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">any</span><span class=\"token punctuation\">&#123;</span> it<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">5</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>#判断集合中所有元素是否都满足条件</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">val</span> flag <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">&#123;</span> it<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">5</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">20</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>但是需要注意的是，一旦参数可以为空，那么下方的调用则必须判断是否为空，不为空才可以调用方法，否则会报错</p>\n</li>\n</ul>\n</li>\n<li>\n<p>如果每个方法都要写判断语句的话，会很繁琐，所以 Kotlin 提供了一系列的辅助工具</p>\n<ul>\n<li>\n<p><code>?.</code></p>\n<ul>\n<li>\n<p>就是当对象不为空时正常调用，为空则什么都不做</p>\n</li>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">fun</span> <span class=\"token function\">doStudy</span><span class=\"token punctuation\">(</span>study <span class=\"token operator\">:</span> Study<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    study<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">readBooks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">21</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p><code>!!</code></p>\n<ul>\n<li>\n<p>就是非空断言，表示你非常确信这里的对象不会为空，但是在使用断言时，最好还是问下自己还有没有更好的方案</p>\n</li>\n<li>\n<p>在这里虽然在 main 方法判空了，但是在调用 toUpperCase () 时还会认为这里存在风险，编译不通过</p>\n</li>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> content <span class=\"token operator\">:</span> String<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"hello\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>content <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">printUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">fun</span> <span class=\"token function\">printUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">val</span> upperCase <span class=\"token operator\">=</span> content<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>upperCase<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">22</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n<li>\n<p>调用了 obj 的 let 函数，然后 Lambda 表达式中的代码就会立即执行，并且这个 obj 对象本身还会作为参数传递到 Lambda 表达式中，不过为了防止变量重名，这里将参数改成了 obj2，但实际上他们是一个对象，这就是 let 的作用</p>\n</li>\n<li>\n<p>重新审视下这个代码</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">fun</span> <span class=\"token function\">doStudy</span><span class=\"token punctuation\">(</span>study <span class=\"token operator\">:</span> Study<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    study<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">readBooks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    study<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">23</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>可以看到对对象的判断出现了两次，这无疑是冗余的，使用 <code>let</code>  修改</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">fun</span> <span class=\"token function\">doStudy</span><span class=\"token punctuation\">(</span>study <span class=\"token operator\">:</span> Study<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    study<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">let</span><span class=\"token punctuation\">&#123;</span> stu <span class=\"token operator\">-></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         stu<span class=\"token punctuation\">.</span><span class=\"token function\">readBook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>         stu<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">24</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>需要补充的一点是，对于全局变量的判空问题，可以使用 <code>let</code> ，但是使用 <code>if</code>  时仍旧会出错，这是因为全局变量的值随时都有可能被其他线程修改，即使做了判空处理，仍然无法保证 <code>if</code>  与剧中的 study 变量没有空指针风险</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"补充\"><a class=\"markdownIt-Anchor\" href=\"#补充\">#</a> 补充</h2>\n<h3 id=\"字符串内嵌表达式\"><a class=\"markdownIt-Anchor\" href=\"#字符串内嵌表达式\">#</a> 字符串内嵌表达式</h3>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> name <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"杜金亮\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"hello world\"</span></span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"hello world </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token expression\">name</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 当表达式内只有一个变量时，大括号可以省略</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"hello world </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">name</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">25</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n<h2 id=\"进阶\"><a class=\"markdownIt-Anchor\" href=\"#进阶\">#</a> 进阶</h2>\n<h3 id=\"标准函数\"><a class=\"markdownIt-Anchor\" href=\"#标准函数\">#</a> 标准函数</h3>\n<h4 id=\"let见上\"><a class=\"markdownIt-Anchor\" href=\"#let见上\">#</a> let (见上)</h4>\n<h4 id=\"with\"><a class=\"markdownIt-Anchor\" href=\"#with\">#</a> with</h4>\n<ul>\n<li>\n<p><code>with</code>  函数接受两个参数：第一个参数可以是一个任意类型的对象，第二个参数是一个 Lambda 表达式， <code>with</code>  函数会在 Lambda 表达式中提供一个参数对象的上下文，并使用 Lambda 表达式的最后一行代码作为返回值返回</p>\n</li>\n<li>\n<p>普通代码举例</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> list <span class=\"token operator\">=</span> listOf<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Apple\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Banada\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"barrery\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">val</span> builder <span class=\"token operator\">=</span> <span class=\"token function\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>builder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Start eating fruits : \\n\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    builder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>it<span class=\"token operator\">+</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"\\n\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>builder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Ate All fruit\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">val</span> result <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">26</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"run\"><a class=\"markdownIt-Anchor\" href=\"#run\">#</a> run</h4>\n<ul>\n<li>\n<p>和 <code>with</code>  函数类似，只是稍微做了一些语法的修改，首先 <code>run</code>  函数通常不会直接调用，而是要在某个对象的基础上调用；其次 <code>run</code>  函数只接受一个 Lambda 参数，斌企鹅会在 Lambda 表达式中提供调用对象的上下文，其他方面和 <code>with</code>  函数一样，包括也会使用 Lambda 表达式中的最后一行代码作为返回值返回</p>\n</li>\n<li>\n<p>对上面的代码进行修改得到:</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> result <span class=\"token operator\">=</span> <span class=\"token function\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Start eating fruits:\\n\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>it <span class=\"token operator\">+</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"\\n\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Ate All fruits\\n\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">27</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"use\"><a class=\"markdownIt-Anchor\" href=\"#use\">#</a> use</h4>\n<ul>\n<li>\n<p>保证在 <code>lambda</code>  表达式中的代码全部执行完毕后自动将外层的流关闭，这样就不需要我们再去手动关闭流了</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span>inputText <span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">val</span> output <span class=\"token operator\">=</span> <span class=\"token function\">openFileOutput</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"data\"</span></span><span class=\"token punctuation\">,</span> Context<span class=\"token punctuation\">.</span>MODE_PRIVATE<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">val</span> writer <span class=\"token operator\">=</span> <span class=\"token function\">BufferedWriter</span><span class=\"token punctuation\">(</span><span class=\"token function\">OutputStreamWriter</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        writer<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            it<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>inputText<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">:</span> IOException<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">28</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"定义静态方法\"><a class=\"markdownIt-Anchor\" href=\"#定义静态方法\">#</a> 定义静态方法</h3>\n<ul>\n<li>\n<p>在 <code>Kotlin</code>  中极度弱化了静态方法这个概念，因为 <code>Kotlin</code>  提供了比静态方法更好的语法特性：<strong>单例类</strong></p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">object</span> Util<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">fun</span> <span class=\"token function\">doAction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"doSomething\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">29</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>`</pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>不过， <code>doAction2</code>  方法其实也并不是静态方法， <code>companion object</code>  这个关键字实际上会在 Util 类的内部创建一个伴生类，而 <code>doAction2</code>  方法就是定义在这个伴生类里面的实例方法，只是 Kotlin 会保证 Util 类始终只会存在一个伴生类对象，因此调用 <code>Util.doAction2()</code>  方法实际上就是调用了 Util 类中伴生对象的 <code>doAction2</code>  方法</p>\n</li>\n<li>\n<p>由此可以看出，Kotlin 确实没有直接定义静态方法的关键字，但是提供了一些语法特性来支持类似静态方法调用的写法，这些语法特性基本可以满足我们平时的开发需求了</p>\n</li>\n<li>\n<p>但是如果，你确确实实想要定义真正的静态方法，Kotlin 仍然提供了两种实现方式：注解和顶层方法：</p>\n</li>\n<li>\n<p>先看注解，前面使用单例类和 <code>companion object</code>  都只是在语法的形式上模仿了静态方法的调用方式，实际上他们都不是真正的静态方法，因此如果你在 Java 代码中以静态方法的形式去调用的话，你会发现这些方法并不存在，而如果我们给单例类或 <code>companion object</code>  中的方法加上 <code>@JvmStatic</code>  注解，那么 Kotlin 编译器就会讲这些方法编译成真正的静态方法：</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> Util<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">fun</span> <span class=\"token function\">doAction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        print<span class=\"token punctuation\">;</span><span class=\"token function\">n</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"doSomething\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">companion</span> <span class=\"token keyword\">object</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token annotation builtin\">@JvmStatic</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">fun</span> <span class=\"token function\">doAction2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"do Something\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">30</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"对变量延迟初始化\"><a class=\"markdownIt-Anchor\" href=\"#对变量延迟初始化\">#</a> 对变量延迟初始化</h3>\n<ul>\n<li>\n<p>当你的类中存在很多全局变量实例，为了保证他们能够满足 <code>Kotlin</code>  的空指针检查语法标准，你不得不做许多的非空判断才可以，即使你非常确定他们不会为空</p>\n</li>\n<li>\n<p>延迟初始化使用的关键字是 <code>lateinit</code>  关键字，他可以告诉 <code>Kotlin</code>  编辑器，我会在晚些时候对这个变量进行初始化，这样就不用一开始的时候将他赋值为 <code>null</code>  了.</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> MainActivity <span class=\"token operator\">:</span> <span class=\"token function\">AppCompatActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> View<span class=\"token punctuation\">.</span><span class=\"token function\">OnClinkListener</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> adapter <span class=\"token operator\">:</span> MsgAdapter</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>saveInstance <span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        adapter <span class=\"token operator\">=</span> \t<span class=\"token function\">MsgAdapter</span><span class=\"token punctuation\">(</span>msgList<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">31</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>这里定义了一个 Result 接口，用于表示某个操作的结果， 接口中不用编写任何内容，然后定义了两个类去实现 Result 接口，一个 Success 类表示用于成功时的结果，一个 Fail 类表示用于失败时的结果</p>\n</li>\n<li>\n<p>再定义一个 getResultMsg () 方法，用于获取最终结果的信息</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">fun</span> <span class=\"token function\">getResultMsg</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">:</span> Result<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">when</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">is</span> Success <span class=\"token operator\">-></span> result<span class=\"token punctuation\">.</span>msg</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">is</span> Fail <span class=\"token operator\">-></span> result<span class=\"token punctuation\">.</span>msg</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">throw</span> <span class=\"token function\">IllegaArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">32</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>此时，getResultMsg 中的 else 已经不再需要了</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">fun</span> <span class=\"token function\">getResultMsg</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">:</span> Result<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">when</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">is</span> Success <span class=\"token operator\">-></span> result<span class=\"token punctuation\">.</span>msg</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">is</span> Fail <span class=\"token operator\">-></span> result<span class=\"token punctuation\">.</span>msg</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">33</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>示例</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">fun</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">letterCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> Int<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">var</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>char <span class=\"token keyword\">in</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">.</span>isLetter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            count<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> count</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">34</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>语法糖表达式和实际调用函数对照表</p>\n<ul>\n<li><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/epub_37683759_182\"\n                      alt=\"img\"\n                ></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"高阶函数\"><a class=\"markdownIt-Anchor\" href=\"#高阶函数\">#</a> 高阶函数</h3>\n<ul>\n<li>\n<p>基本规则</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>String <span class=\"token punctuation\">,</span> Int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">35</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"内联函数\"><a class=\"markdownIt-Anchor\" href=\"#内联函数\">#</a> 内联函数</h3>\n<ul>\n<li>上述的高阶函数对应到 Java 中是什么样子的呢，其实是高阶函数的位置是一个匿名对象，内部重写了方法，这样的效果，就说明当我们大量使用高阶函数时，会有大量的对象的创建和内存的占用，为了解决这种现象我们可以使用内联函数，关键字是 <code>inline</code></li>\n<li>使用了内联函数的话，由 <code>kotlin</code>  编辑器的作用，会将高阶函数在编译时完成对调用地方的替换，则避免了无用对象的创建</li>\n<li>当我们参数里使用了一个之多个高阶函数时，内联函数都会在编译时完成调用时代码的替换，但是如果我们想要某一个参数不去替换呢，就可以使用 <code>noinline</code>  关键字，为什么会有这种想法呢，是因为内联函数可以 <code>return</code>  而非内联函数不能 <code>return</code>  但可以局部 <code>return</code>  即 <code>return@printString</code> ，需要注意内联函数的 <code>return</code>  其实是外部的 <code>return</code>  即替换位置的 <code>return</code> ，而局部 <code>return</code>  则是匿名对象函数内部的 <code>return</code></li>\n<li>但是当我们在一个内联函数的内部调用 <code>Lambda</code>  匿名类时如果使用内联函数会出现错误，这是因为内联函数允许 <code>return</code>  而匿名类不允许 <code>return</code> ，出现了矛盾，就可以使用 <code>crossinline</code>  关键字，他是一个契约，用于保证在内联函数的 <code>Lambda</code>  表达式中一定不会使用 <code>return</code>  关键字，这样矛盾就不存在了</li>\n</ul>\n",
            "tags": [
                "Kotlin"
            ]
        },
        {
            "id": "https://wait-you.github.io/2023/06/06/JWT/",
            "url": "https://wait-you.github.io/2023/06/06/JWT/",
            "title": "JWT",
            "date_published": "2023-06-06T00:46:17.000Z",
            "content_html": "<h1 id=\"jwt-实战教程\"><a class=\"markdownIt-Anchor\" href=\"#jwt-实战教程\">#</a> JWT 实战教程</h1>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200726102546868.png\"\n                      alt=\"image-20200726102546868\"\n                ></p>\n<h2 id=\"1什么是jwt\"><a class=\"markdownIt-Anchor\" href=\"#1什么是jwt\">#</a> 1. 什么是 JWT</h2>\n<p>JSON Web Token (JWT) is an open standard (<a class=\"link\"   href=\"https://tools.ietf.org/html/rfc7519\" >RFC 7519 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. This information can be verified and trusted because it is digitally signed. JWTs can be signed using a secret (with the <strong>HMAC</strong> algorithm) or a public/private key pair using <strong>RSA</strong> or <strong>ECDSA</strong>.</p>\n<p>​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t—[摘自官网]</p>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 1.翻译</span></span><br><span class=\"line\"><span class=\"bullet\">-</span>  官网地址: https://jwt.io/introduction/</span><br><span class=\"line\"><span class=\"bullet\">-</span>  翻译: jsonwebtoken（JWT）是一个开放标准（rfc7519），它定义了一种紧凑的、自包含的方式，用于在各方之间以JSON对象安全地传输信息。此信息可以验证和信任，因为它是数字签名的。jwt可以使用秘密（使用HMAC算法）或使用RSA或ECDSA的公钥/私钥对进行签名</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\"># 2.通俗解释</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> JWT简称JSON Web Token,也就是通过JSON形式作为Web应用中的令牌,用于在各方之间安全地将信息作为JSON对象传输。在数据传输过程中还可以完成数据加密、签名等相关处理。</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"2jwt能做什么\"><a class=\"markdownIt-Anchor\" href=\"#2jwt能做什么\">#</a> 2.JWT 能做什么</h2>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 1.授权</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> 这是使用JWT的最常见方案。一旦用户登录，每个后续请求将包括JWT，从而允许用户访问该令牌允许的路由，服务和资源。单点登录是当今广泛使用JWT的一项功能，因为它的开销很小并且可以在不同的域中轻松使用。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\"># 2.信息交换</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> JSON Web Token是在各方之间安全地传输信息的好方法。因为可以对JWT进行签名（例如，使用公钥/私钥对），所以您可以确保发件人是他们所说的人。此外，由于签名是使用标头和有效负载计算的，因此您还可以验证内容是否遭到篡改。</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"3为什么是jwt\"><a class=\"markdownIt-Anchor\" href=\"#3为什么是jwt\">#</a> 3. 为什么是 JWT</h2>\n<h3 id=\"基于传统的session认证\"><a class=\"markdownIt-Anchor\" href=\"#基于传统的session认证\">#</a> 基于传统的 Session 认证</h3>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 1.认证方式</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> 我们知道，http协议本身是一种无状态的协议，而这就意味着如果用户向我们的应用提供了用户名和密码来进行用户认证，那么下一次请求时，用户还要再一次进行用户认证才行，因为根据http协议，我们并不能知道是哪个用户发出的请求，所以为了让我们的应用能识别是哪个用户发出的请求，我们只能在服务器存储一份用户登录的信息，这份登录信息会在响应时传递给浏览器，告诉其保存为cookie,以便下次请求时发送给我们的应用，这样我们的应用就能识别请求来自哪个用户了,这就是传统的基于session认证。</span><br><span class=\"line\">t</span><br><span class=\"line\"><span class=\"section\"># 2.认证流程</span></span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200726103959013.png\"\n                      alt=\"image-20200726103959013\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 3.暴露问题</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> 1.每个用户经过我们的应用认证之后，我们的应用都要在服务端做一次记录，以方便用户下次请求的鉴别，通常而言session都是保存在内存中，而随着认证用户的增多，服务端的开销会明显增大</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> 2.用户认证之后，服务端做认证记录，如果认证的记录被保存在内存中的话，这意味着用户下次请求还必须要请求在这台服务器上,这样才能拿到授权的资源，这样在分布式的应用上，相应的限制了负载均衡器的能力。这也意味着限制了应用的扩展能力。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> 3.因为是基于cookie来进行用户识别的, cookie如果被截获，用户就会很容易受到跨站请求伪造的攻击。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> 4.在前后端分离系统中就更加痛苦:如下图所示</span><br><span class=\"line\"><span class=\"code\">\t也就是说前后端分离在应用解耦后增加了部署的复杂性。通常用户一次请求就要转发多次。如果用session 每次携带sessionid 到服务\t器，服务器还要查询用户信息。同时如果用户很多。这些信息存储在服务器内存中，给服务器增加负担。还有就是CSRF（跨站伪造请求攻\t击）攻击，session是基于cookie进行用户识别的, cookie如果被截获，用户就会很容易受到跨站请求伪造的攻击。还有就是\t     sessionid就是一个特征值，表达的信息不够丰富。不容易扩展。而且如果你后端应用是多节点部署。那么就需要实现session共享机制。\t不方便集群应用。</span></span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200804212240422.png\"\n                      alt=\"image-20200804212240422\"\n                ></p>\n<h3 id=\"基于jwt认证\"><a class=\"markdownIt-Anchor\" href=\"#基于jwt认证\">#</a> 基于 JWT 认证</h3>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200726183248298.png\"\n                      alt=\"image-20200726183248298\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 1.认证流程</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> 首先，前端通过Web表单将自己的用户名和密码发送到后端的接口。这一过程一般是一个HTTP POST请求。建议的方式是通过SSL加密的传输（https协议），从而避免敏感信息被嗅探。</span><br><span class=\"line\"><span class=\"bullet\">-</span> 后端核对用户名和密码成功后，将用户的id等其他信息作为JWT Payload（负载），将其与头部分别进行Base64编码拼接后签名，形成一个JWT(Token)。形成的JWT就是一个形同lll.zzz.xxx的字符串。 token head.payload.singurater</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> 后端将JWT字符串作为登录成功的返回结果返回给前端。前端可以将返回的结果保存在localStorage或sessionStorage上，退出登录时前端删除保存的JWT即可。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> 前端在每次请求时将JWT放入HTTP Header中的Authorization位。(解决XSS和XSRF问题) HEADER</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> 后端检查是否存在，如存在验证JWT的有效性。例如，检查签名是否正确；检查Token是否过期；检查Token的接收方是否是自己（可选）。</span><br><span class=\"line\"><span class=\"bullet\">-</span> 验证通过后后端使用JWT中包含的用户信息进行其他逻辑操作，返回相应结果。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\"># 2.jwt优势</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> 简洁(Compact): 可以通过URL，POST参数或者在HTTP header发送，因为数据量小，传输速度也很快</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> 自包含(Self-contained)：负载中包含了所有用户所需要的信息，避免了多次查询数据库</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> 因为Token是以JSON加密的形式保存在客户端的，所以JWT是跨语言的，原则上任何web形式都支持。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> 不需要在服务端保存会话信息，特别适用于分布式微服务。</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"4jwt的结构是什么\"><a class=\"markdownIt-Anchor\" href=\"#4jwt的结构是什么\">#</a> 4.JWT 的结构是什么？</h2>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">token   string  ====&gt;  header.payload.singnature   token   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\"># 1.令牌组成</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> 1.标头(Header)</span><br><span class=\"line\"><span class=\"bullet\">-</span> 2.有效载荷(Payload)</span><br><span class=\"line\"><span class=\"bullet\">-</span> 3.签名(Signature)</span><br><span class=\"line\"><span class=\"bullet\">-</span> 因此，JWT通常如下所示:xxxxx.yyyyy.zzzzz   Header.Payload.Signature</span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 2.Header</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> 标头通常由两部分组成：令牌的类型（即JWT）和所使用的签名算法，例如HMAC SHA256或RSA。它会使用 Base64 编码组成 JWT 结构的第一部分。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> 注意:Base64是一种编码，也就是说，它是可以被翻译回原来的样子来的。它并不是一种加密过程。</span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Json\"><figure class=\"iseeu highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;alg&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;HS256&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;typ&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;JWT&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 3.Payload</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> 令牌的第二部分是有效负载，其中包含声明。声明是有关实体（通常是用户）和其他数据的声明。同样的，它会使用 Base64 编码组成 JWT 结构的第二部分</span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Json\"><figure class=\"iseeu highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;sub&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;1234567890&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;John Doe&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;admin&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 4.Signature</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> 前面两部分都是使用 Base64 进行编码的，即前端可以解开知道里面的信息。Signature 需要使用编码后的 header 和 payload 以及我们提供的一个密钥，然后使用 header 中指定的签名算法（HS256）进行签名。签名的作用是保证 JWT 没有被篡改过</span><br><span class=\"line\"><span class=\"bullet\">-</span> 如:</span><br><span class=\"line\"><span class=\"code\">\tHMACSHA256(base64UrlEncode(header) + &quot;.&quot; + base64UrlEncode(payload),secret);</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\"><span class=\"section\"># 签名目的</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> 最后一步签名的过程，实际上是对头部以及负载内容进行签名，防止内容被窜改。如果有人对头部以及负载的内容解码之后进行修改，再进行编码，最后加上之前的签名组合形成新的JWT的话，那么服务器端会判断出新的头部和负载形成的签名和JWT附带上的签名是不一样的。如果要对新的头部和负载进行签名，在不知道服务器加密时用的密钥的话，得出来的签名也是不一样的。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\"># 信息安全问题</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> 在这里大家一定会问一个问题：Base64是一种编码，是可逆的，那么我的信息不就被暴露了吗？</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> 是的。所以，在JWT中，不应该在负载里面加入任何敏感的数据。在上面的例子中，我们传输的是用户的User ID。这个值实际上不是什么敏\t感内容，一般情况下被知道也是安全的。但是像密码这样的内容就不能被放在JWT中了。如果将用户的密码放在了JWT中，那么怀有恶意的第\t三方通过Base64解码就能很快地知道你的密码了。因此JWT适合用于向Web应用传递一些非敏感信息。JWT还经常用于设计用户认证和授权系\t统，甚至实现Web应用的单点登录。</span><br></pre></td></tr></table></figure></div>\n<p>![image-20200726181136113](…/…/…/…/ 笔记 / JWT 实战教程.assets/image-20200726181136113.png)</p>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 5.放在一起</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> 输出是三个由点分隔的Base64-URL字符串，可以在HTML和HTTP环境中轻松传递这些字符串，与基于XML的标准（例如SAML）相比，它更紧凑。</span><br><span class=\"line\"><span class=\"bullet\">-</span> 简洁(Compact)</span><br><span class=\"line\"><span class=\"code\">\t可以通过URL, POST 参数或者在 HTTP header 发送，因为数据量小，传输速度快</span></span><br><span class=\"line\"><span class=\"code\">- 自包含(Self-contained)</span></span><br><span class=\"line\"><span class=\"code\">\t负载中包含了所有用户所需要的信息，避免了多次查询数据库</span></span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200726124257203.png\"\n                      alt=\"image-20200726124257203\"\n                ></p>\n<h2 id=\"5使用jwt\"><a class=\"markdownIt-Anchor\" href=\"#5使用jwt\">#</a> 5. 使用 JWT</h2>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 1.引入依赖</span></span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--引入jwt--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.auth0<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>java-jwt<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.4.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 2.生成token</span></span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Calendar</span> <span class=\"variable\">instance</span> <span class=\"operator\">=</span> Calendar.getInstance();</span><br><span class=\"line\">instance.add(Calendar.SECOND, <span class=\"number\">90</span>);</span><br><span class=\"line\"><span class=\"comment\">//生成令牌</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">token</span> <span class=\"operator\">=</span> JWT.create()</span><br><span class=\"line\">  .withClaim(<span class=\"string\">&quot;username&quot;</span>, <span class=\"string\">&quot;张三&quot;</span>)<span class=\"comment\">//设置自定义用户名</span></span><br><span class=\"line\">  .withExpiresAt(instance.getTime())<span class=\"comment\">//设置过期时间</span></span><br><span class=\"line\">  .sign(Algorithm.HMAC256(<span class=\"string\">&quot;token!Q2W#E$RW&quot;</span>));<span class=\"comment\">//设置签名 保密 复杂</span></span><br><span class=\"line\"><span class=\"comment\">//输出令牌</span></span><br><span class=\"line\">System.out.println(token);</span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> 生成结果</span><br><span class=\"line\">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdWQiOlsicGhvbmUiLCIxNDMyMzIzNDEzNCJdLCJleHAiOjE1OTU3Mzk0NDIsInVzZXJuYW1lIjoi5byg5LiJIn0.aHmE3RNqvAjFr<span class=\"emphasis\">_dvyn_</span>sD2VJ46P7EGiS5OBMO<span class=\"emphasis\">_TI5jg</span></span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 3.根据令牌和签名解析数据</span></span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">JWTVerifier</span> <span class=\"variable\">jwtVerifier</span> <span class=\"operator\">=</span> JWT.require(Algorithm.HMAC256(<span class=\"string\">&quot;token!Q2W#E$RW&quot;</span>)).build();</span><br><span class=\"line\"><span class=\"type\">DecodedJWT</span> <span class=\"variable\">decodedJWT</span> <span class=\"operator\">=</span> jwtVerifier.verify(token);</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;用户名: &quot;</span> + decodedJWT.getClaim(<span class=\"string\">&quot;username&quot;</span>).asString());</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;过期时间: &quot;</span>+decodedJWT.getExpiresAt());</span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 4.常见异常信息</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> SignatureVerificationException:\t\t\t\t签名不一致异常</span><br><span class=\"line\"><span class=\"bullet\">-</span> TokenExpiredException:    \t\t\t\t\t\t令牌过期异常</span><br><span class=\"line\"><span class=\"bullet\">-</span> AlgorithmMismatchException:\t\t\t\t\t\t算法不匹配异常</span><br><span class=\"line\"><span class=\"bullet\">-</span> InvalidClaimException:\t\t\t\t\t\t\t\t失效的payload异常</span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200805184517282.png\"\n                      alt=\"image-20200805184517282\"\n                ></p>\n<h2 id=\"6封装工具类\"><a class=\"markdownIt-Anchor\" href=\"#6封装工具类\">#</a> 6. 封装工具类</h2>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JWTUtils</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">TOKEN</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;token!Q@W3e4r&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 生成token</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> map  //传入payload</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 返回token</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">getToken</span><span class=\"params\">(Map&lt;String,String&gt; map)</span>&#123;</span><br><span class=\"line\">        JWTCreator.<span class=\"type\">Builder</span> <span class=\"variable\">builder</span> <span class=\"operator\">=</span> JWT.create();</span><br><span class=\"line\">        map.forEach((k,v)-&gt;&#123;</span><br><span class=\"line\">            builder.withClaim(k,v);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"type\">Calendar</span> <span class=\"variable\">instance</span> <span class=\"operator\">=</span> Calendar.getInstance();</span><br><span class=\"line\">        instance.add(Calendar.SECOND,<span class=\"number\">7</span>);</span><br><span class=\"line\">        builder.withExpiresAt(instance.getTime());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder.sign(Algorithm.HMAC256(TOKEN)).toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 验证token</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> token</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">verify</span><span class=\"params\">(String token)</span>&#123;</span><br><span class=\"line\">        JWT.require(Algorithm.HMAC256(TOKEN)).build().verify(token);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取token中payload</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> token</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> DecodedJWT <span class=\"title function_\">getToken</span><span class=\"params\">(String token)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JWT.require(Algorithm.HMAC256(TOKEN)).build().verify(token);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"7整合springboot\"><a class=\"markdownIt-Anchor\" href=\"#7整合springboot\">#</a> 7. 整合 springboot</h2>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 0.搭建springboot+mybatis+jwt环境</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> 引入依赖</span><br><span class=\"line\"><span class=\"bullet\">-</span> 编写配置</span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--引入jwt--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.auth0<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>java-jwt<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.4.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--引入mybatis--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.spring.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.1.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--引入lombok--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.18.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--引入druid--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>druid<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.19<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--引入mysql--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.38<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Properties\"><figure class=\"iseeu highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server.port</span>=<span class=\"string\">8989</span></span><br><span class=\"line\"><span class=\"attr\">spring.application.name</span>=<span class=\"string\">jwt</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring.datasource.type</span>=<span class=\"string\">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class=\"line\"><span class=\"attr\">spring.datasource.driver-class-name</span>=<span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\"><span class=\"attr\">spring.datasource.url</span>=<span class=\"string\">jdbc:mysql://localhost:3306/jwt?characterEncoding=UTF-8</span></span><br><span class=\"line\"><span class=\"attr\">spring.datasource.username</span>=<span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"attr\">spring.datasource.password</span>=<span class=\"string\">root</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">mybatis.type-aliases-package</span>=<span class=\"string\">com.baizhi.entity</span></span><br><span class=\"line\"><span class=\"attr\">mybatis.mapper-locations</span>=<span class=\"string\">classpath:com/baizhi/mapper/*.xml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">logging.level.com.baizhi.dao</span>=<span class=\"string\">debug</span></span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 1.开发数据库</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> 这里采用最简单的表结构验证JWT使用</span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200805212226422.png\"\n                      alt=\"image-20200805212226422\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Sql\"><figure class=\"iseeu highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> IF <span class=\"keyword\">EXISTS</span> `<span class=\"keyword\">user</span>`;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> `<span class=\"keyword\">user</span>` (</span><br><span class=\"line\">  `id` <span class=\"type\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> AUTO_INCREMENT COMMENT <span class=\"string\">&#x27;主键&#x27;</span>,</span><br><span class=\"line\">  `name` <span class=\"type\">varchar</span>(<span class=\"number\">80</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;用户名&#x27;</span>,</span><br><span class=\"line\">  `password` <span class=\"type\">varchar</span>(<span class=\"number\">40</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;用户密码&#x27;</span>,</span><br><span class=\"line\">  <span class=\"keyword\">PRIMARY</span> KEY (`id`)</span><br><span class=\"line\">) ENGINE<span class=\"operator\">=</span>InnoDB AUTO_INCREMENT<span class=\"operator\">=</span><span class=\"number\">2</span> <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8;</span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 2.开发entity</span></span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@Accessors(chain=true)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200805213539471.png\"\n                      alt=\"image-20200805213539471\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 3.开发DAO接口和mapper.xml</span></span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserDAO</span> &#123;</span><br><span class=\"line\">    User <span class=\"title function_\">login</span><span class=\"params\">(User user)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200805213603655.png\"\n                      alt=\"image-20200805213603655\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">&quot;com.baizhi.dao.UserDAO&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--这里就写的简单点了毕竟不是重点--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;login&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;User&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;User&quot;</span>&gt;</span></span><br><span class=\"line\">        select * from user where name=#&#123;name&#125; and password = #&#123;password&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200805213628252.png\"\n                      alt=\"image-20200805213628252\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 4.开发Service 接口以及实现类</span></span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserService</span> &#123;</span><br><span class=\"line\">    User <span class=\"title function_\">login</span><span class=\"params\">(User user)</span>;<span class=\"comment\">//登录接口</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200805213648147.png\"\n                      alt=\"image-20200805213648147\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"meta\">@Transactional</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">UserService</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserDAO userDAO;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"meta\">@Transactional(propagation = Propagation.SUPPORTS)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> User <span class=\"title function_\">login</span><span class=\"params\">(User user)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">userDB</span> <span class=\"operator\">=</span> userDAO.login(user);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(userDB!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> userDB;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span>  <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;登录失败~~&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200805213704965.png\"\n                      alt=\"image-20200805213704965\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 5.开发controller</span></span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService userService;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/user/login&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Map&lt;String,Object&gt; <span class=\"title function_\">login</span><span class=\"params\">(User user)</span> &#123;</span><br><span class=\"line\">        Map&lt;String,Object&gt; result = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;用户名: [&#123;&#125;]&quot;</span>, user.getName());</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;密码: [&#123;&#125;]&quot;</span>, user.getPassword());</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">User</span> <span class=\"variable\">userDB</span> <span class=\"operator\">=</span> userService.login(user);</span><br><span class=\"line\">            Map&lt;String, String&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();<span class=\"comment\">//用来存放payload</span></span><br><span class=\"line\">            map.put(<span class=\"string\">&quot;id&quot;</span>,userDB.getId());</span><br><span class=\"line\">            map.put(<span class=\"string\">&quot;username&quot;</span>, userDB.getName());</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">token</span> <span class=\"operator\">=</span> JWTUtils.getToken(map);</span><br><span class=\"line\">            result.put(<span class=\"string\">&quot;state&quot;</span>,<span class=\"literal\">true</span>);</span><br><span class=\"line\">            result.put(<span class=\"string\">&quot;msg&quot;</span>,<span class=\"string\">&quot;登录成功!!!&quot;</span>);</span><br><span class=\"line\">            result.put(<span class=\"string\">&quot;token&quot;</span>,token); <span class=\"comment\">//成功返回token信息</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            result.put(<span class=\"string\">&quot;state&quot;</span>,<span class=\"string\">&quot;false&quot;</span>);</span><br><span class=\"line\">            result.put(<span class=\"string\">&quot;msg&quot;</span>,e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200805214235426.png\"\n                      alt=\"image-20200805214235426\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 6.数据库添加测试数据启动项目</span></span><br></pre></td></tr></table></figure></div>\n<p>![image-20200805214324868](…/…/…/…/ 笔记 / JWT 实战教程.assets/image-20200805214324868.png)</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200805214424786.png\"\n                      alt=\"image-20200805214424786\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 7.通过postman模拟登录失败</span></span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200805214610668.png\"\n                      alt=\"image-20200805214610668\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 8.通过postman模拟登录成功</span></span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200805214749469.png\"\n                      alt=\"image-20200805214749469\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 9.编写测试接口</span></span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PostMapping(&quot;/test/test&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Map&lt;String, Object&gt; <span class=\"title function_\">test</span><span class=\"params\">(String token)</span> &#123;</span><br><span class=\"line\">  Map&lt;String, Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    JWTUtils.verify(token);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;msg&quot;</span>, <span class=\"string\">&quot;验证通过~~~&quot;</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;state&quot;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (TokenExpiredException e) &#123;</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;state&quot;</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;msg&quot;</span>, <span class=\"string\">&quot;Token已经过期!!!&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (SignatureVerificationException e)&#123;</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;state&quot;</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;msg&quot;</span>, <span class=\"string\">&quot;签名错误!!!&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (AlgorithmMismatchException e)&#123;</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;state&quot;</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;msg&quot;</span>, <span class=\"string\">&quot;加密算法不匹配!!!&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;state&quot;</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;msg&quot;</span>, <span class=\"string\">&quot;无效token~~&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200805215119590.png\"\n                      alt=\"image-20200805215119590\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 10.通过postman请求接口</span></span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200805215337303.png\"\n                      alt=\"image-20200805215337303\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200805215451442.png\"\n                      alt=\"image-20200805215451442\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 11.问题?</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> 使用上述方式每次都要传递token数据,每个方法都需要验证token代码冗余,不够灵活? 如何优化</span><br><span class=\"line\"><span class=\"bullet\">-</span> 使用拦截器进行优化</span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">preHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">  <span class=\"type\">String</span> <span class=\"variable\">token</span> <span class=\"operator\">=</span> request.getHeader(<span class=\"string\">&quot;token&quot;</span>);</span><br><span class=\"line\">  Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    JWTUtils.verify(token);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (TokenExpiredException e) &#123;</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;state&quot;</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;msg&quot;</span>, <span class=\"string\">&quot;Token已经过期!!!&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (SignatureVerificationException e)&#123;</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;state&quot;</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;msg&quot;</span>, <span class=\"string\">&quot;签名错误!!!&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (AlgorithmMismatchException e)&#123;</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;state&quot;</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;msg&quot;</span>, <span class=\"string\">&quot;加密算法不匹配!!!&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;state&quot;</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;msg&quot;</span>, <span class=\"string\">&quot;无效token~~&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"type\">String</span> <span class=\"variable\">json</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectMapper</span>().writeValueAsString(map);</span><br><span class=\"line\">  response.setContentType(<span class=\"string\">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class=\"line\">  response.getWriter().println(json);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InterceptorConfig</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">WebMvcConfigurer</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addInterceptors</span><span class=\"params\">(InterceptorRegistry registry)</span> &#123;</span><br><span class=\"line\">        registry.addInterceptor(<span class=\"keyword\">new</span> <span class=\"title class_\">JwtTokenInterceptor</span>()).</span><br><span class=\"line\">          excludePathPatterns(<span class=\"string\">&quot;/user/**&quot;</span>)</span><br><span class=\"line\">          .addPathPatterns(<span class=\"string\">&quot;/**&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n",
            "tags": [
                "JWT"
            ]
        },
        {
            "id": "https://wait-you.github.io/2023/06/06/JVM/",
            "url": "https://wait-you.github.io/2023/06/06/JVM/",
            "title": "JVM",
            "date_published": "2023-06-06T00:45:23.000Z",
            "content_html": "<h1 id=\"jvm\"><a class=\"markdownIt-Anchor\" href=\"#jvm\">#</a> JVM</h1>\n<h2 id=\"引言\"><a class=\"markdownIt-Anchor\" href=\"#引言\">#</a> 引言</h2>\n<h3 id=\"什么是jvm\"><a class=\"markdownIt-Anchor\" href=\"#什么是jvm\">#</a> 什么是 JVM</h3>\n<h4 id=\"定义\"><a class=\"markdownIt-Anchor\" href=\"#定义\">#</a> 定义</h4>\n<p>Java Virtual Machine - java 程序的运行环境（java 二进制字节码的运行环境）</p>\n<h4 id=\"好处\"><a class=\"markdownIt-Anchor\" href=\"#好处\">#</a> 好处</h4>\n<ul>\n<li>一次编写，导出运行\n<ul>\n<li>jvm 屏蔽了字节码和底层操作系统的差异，对外提供了一致的运行环境</li>\n</ul>\n</li>\n<li>自动内存管理，垃圾回收功能</li>\n<li>数组下标越界检查</li>\n<li>多态</li>\n</ul>\n<h4 id=\"比较\"><a class=\"markdownIt-Anchor\" href=\"#比较\">#</a> 比较</h4>\n<p>jvm jre jdk</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220218195638285.png\"\n                      alt=\"image-20220218195638285\"\n                ></p>\n<p>​</p>\n<h3 id=\"学习路线\"><a class=\"markdownIt-Anchor\" href=\"#学习路线\">#</a> 学习路线</h3>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220218200452408.png\"\n                      alt=\"image-20220218200452408\"\n                ></p>\n<h2 id=\"内存结构\"><a class=\"markdownIt-Anchor\" href=\"#内存结构\">#</a> 内存结构</h2>\n<h3 id=\"程序计数器\"><a class=\"markdownIt-Anchor\" href=\"#程序计数器\">#</a> 程序计数器</h3>\n<h4 id=\"定义-2\"><a class=\"markdownIt-Anchor\" href=\"#定义-2\">#</a> 定义</h4>\n<p>Program Counter Register 程序计数器（寄存器）</p>\n<ul>\n<li>\n<p>作用</p>\n<ul>\n<li>记住下一条 jvm 指令的执行地址</li>\n</ul>\n</li>\n<li>\n<p>特点</p>\n<ul>\n<li>\n<p>是线程私有的</p>\n</li>\n<li>\n<p>不会存在内存溢出</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"虚拟机栈\"><a class=\"markdownIt-Anchor\" href=\"#虚拟机栈\">#</a> 虚拟机栈</h3>\n<h4 id=\"定义-3\"><a class=\"markdownIt-Anchor\" href=\"#定义-3\">#</a> 定义</h4>\n<p>Java Virtual Machine Stacks (Java 虚拟机栈)</p>\n<ul>\n<li>每个线程运行时所需要的内存，称为虚拟机栈</li>\n<li>每个栈由多个栈帧（Frame）组成，对应着每次方法调用时所占用的内存</li>\n<li>每个线程只能有一个活动栈帧，对应着当前正在执行的那个方法</li>\n</ul>\n<p><code>问题辨析</code></p>\n<ul>\n<li>垃圾回收是否涉及栈内存？</li>\n</ul>\n<blockquote>\n<p>栈内存是一次次的方法调用产生的栈桢内存，而栈桢内存在方法调用结束后都会被弹出栈，也就是会自动的被回收掉，所以不需要垃圾回收管理栈内存</p>\n</blockquote>\n<ul>\n<li>栈内存的分配越大越好吗？</li>\n</ul>\n<blockquote>\n<p>栈内存划分的越大，反而会让线程数越少，因为物理内存是一定的，比如，物理内存是 500M, 一个线程使用的是 1M 的栈内存，那么可以开启 500 个线程，如果一个线程使用的是 2M 的栈内存，那么只可以开启 250 个栈内存。所以栈内存不是越大越好，划分的大了，通常只是能够进行更多次的方法递归调用，而不会增强程序的运行效率</p>\n</blockquote>\n<ul>\n<li>方法内的局部变量是否线程安全？</li>\n</ul>\n<blockquote>\n<p>看一个变量是否是线程安全的，其实就看多个线程对这个变量是共享的，还是这个变量对每个线程是私有的。如果方法内局部变量没有逃离方法的作用访问，他是线程安全的。如果是局部变量引用了对象，并逃离方法的作用方法，需要考虑线程安全</p>\n</blockquote>\n<h3 id=\"栈内存溢出\"><a class=\"markdownIt-Anchor\" href=\"#栈内存溢出\">#</a> 栈内存溢出</h3>\n<ol>\n<li><strong>栈桢过多导致栈内存溢出</strong></li>\n<li><strong>栈桢过大导致栈内存溢出</strong></li>\n</ol>\n<h3 id=\"线程运行诊断\"><a class=\"markdownIt-Anchor\" href=\"#线程运行诊断\">#</a> 线程运行诊断</h3>\n<ul>\n<li>案例 1 : cpu 占用过多\n<ul>\n<li>定位\n<ul>\n<li>用 <code>top H -eo pid,tid,%cpu | grep 进程id</code> （用 ps 命令进一步定位是哪一个线程引起的 cpu 占用过高）</li>\n<li><code>jstack 进程id</code>\n<ul>\n<li>可以根据线程 id 找到有问题的线程，进一步定位到问题代码的源代码行号</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>案例 2：程序运行很长时间没有结果</li>\n</ul>\n<h3 id=\"本地方法栈\"><a class=\"markdownIt-Anchor\" href=\"#本地方法栈\">#</a> 本地方法栈</h3>\n<p>本地方法是指的是不是由 Java 代码编写的方法，因为 Java 代码有一定的限制，有时候不能够直接和操作系统底层打交道，所以需要用一些用 C/C++ 编写的本地方法和操作系统底层打交道，Java 代码可以间接的通过本地方法和来调用底层的功能，这些本地方法使用的内存就叫本地方法栈</p>\n<p>给本地方法的运行提供一个内存空间</p>\n<h3 id=\"堆\"><a class=\"markdownIt-Anchor\" href=\"#堆\">#</a> 堆</h3>\n<p>程序计数器、虚拟机栈、本地方法栈都是线程私有的</p>\n<p>堆、方法区都是线程共享的区</p>\n<h4 id=\"定义-4\"><a class=\"markdownIt-Anchor\" href=\"#定义-4\">#</a> 定义</h4>\n<p>Heap 堆</p>\n<ul>\n<li>通过 new 关键字，创建对象都会使用堆内存</li>\n</ul>\n<p>特点</p>\n<ul>\n<li>他是线程共享的，堆中对象都需要考虑线程安全问题</li>\n<li>有垃圾回收机制</li>\n</ul>\n<h4 id=\"堆内存溢出\"><a class=\"markdownIt-Anchor\" href=\"#堆内存溢出\">#</a> 堆内存溢出</h4>\n<p>通过 <code>-Xmx8M</code>  改变堆大小</p>\n<h4 id=\"堆内存诊断\"><a class=\"markdownIt-Anchor\" href=\"#堆内存诊断\">#</a> 堆内存诊断</h4>\n<ol>\n<li>jps 工具\n<ul>\n<li>查看当前系统中有哪些 Java 进程</li>\n</ul>\n</li>\n<li>jmap 工具\n<ul>\n<li>查看堆内存占用情况   <code>jmap -heap 进程id</code></li>\n</ul>\n</li>\n<li>jconsole 工具\n<ul>\n<li>图形界面的，多功能的检测工具，可以连续监测</li>\n</ul>\n</li>\n</ol>\n<p>案例</p>\n<ul>\n<li>垃圾回收后，内存占用仍然很高\n<ul>\n<li>jps 查询 进程 id</li>\n<li>jmap 查看内存占用情况</li>\n<li>或 jconsole 查看内存占用情况</li>\n<li>使用 jvirtulvm 堆转储查看对象使用情况</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"方法区\"><a class=\"markdownIt-Anchor\" href=\"#方法区\">#</a> 方法区</h3>\n<h4 id=\"定义-5\"><a class=\"markdownIt-Anchor\" href=\"#定义-5\">#</a> 定义</h4>\n<p>所有 java 虚拟机线程共享的区</p>\n<p>它存储了跟类的结构相关的信息：类的成员变量、方法数据：成员方法和构造方法、运行时常量池</p>\n<p>方法区在虚拟机启动时被创建，逻辑上是堆的组成部分</p>\n<p>方法区是规范，永久代和元空间是实现，不同的厂商实现不同</p>\n<p>方法区也会导致内存溢出的错误</p>\n<h4 id=\"组成\"><a class=\"markdownIt-Anchor\" href=\"#组成\">#</a> 组成</h4>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220221142729070.png\"\n                      alt=\"image-20220221142729070\"\n                ></p>\n<p>在 1.8 以前类的结构信息和常量池都在方法区（实现永久代）中，1.8 之后的字符串常量池在堆中，类的结构信息和常量池在不包括字符串常量池在系统内存（元空间）中</p>\n<h4 id=\"内存溢出\"><a class=\"markdownIt-Anchor\" href=\"#内存溢出\">#</a> 内存溢出</h4>\n<p><code>-XX:MaxPermSize=8M</code>  设置永久代大小</p>\n<p><code>-XX:MaxMetaspaceSize=8M</code>  设置元空间大小</p>\n<p><code>Classloader</code>  类可以用来加载类的二进制字节码</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestMapper</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ClassLoader</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">TestMapper</span> <span class=\"variable\">testMapper</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TestMapper</span>();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (; j &lt; <span class=\"number\">10000</span>; j++) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//ClassWriter 作用是生成类的二进制字节码</span></span><br><span class=\"line\">                <span class=\"type\">ClassWriter</span> <span class=\"variable\">cs</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassWriter</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">                <span class=\"comment\">//版本号 public 类名 包名 父类 接口</span></span><br><span class=\"line\">                cs.visit(Opcodes.V1_8, Opcodes.ACC_PUBLIC, <span class=\"string\">&quot;Class&quot;</span> + j, <span class=\"literal\">null</span>, <span class=\"string\">&quot;java/lang/Object&quot;</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">                <span class=\"comment\">//返回 byte[]</span></span><br><span class=\"line\">                <span class=\"type\">byte</span>[] code = cs.toByteArray();</span><br><span class=\"line\">                <span class=\"comment\">//执行类的加载</span></span><br><span class=\"line\">                testMapper.defineClass(<span class=\"string\">&quot;Class&quot;</span> + j, code, <span class=\"number\">0</span>, code.length); <span class=\"comment\">//class对象</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            System.out.println(j);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"运行时常量池\"><a class=\"markdownIt-Anchor\" href=\"#运行时常量池\">#</a> 运行时常量池</h3>\n<ul>\n<li>常量池，就是一张表，虚拟机指令根据这张常量表找到要执行的类名、方法名、参数类型、字面量等信息</li>\n<li>运行时常量池，常量池是 *.class 文件中的，当该类被加载，他的常量池信息就会放入运行时常量池，并把里面的符号地址变为真实地址</li>\n</ul>\n<p>二进制字节码包括类基本信息、常量池、类方法定义包含虚拟机指令</p>\n<p><code>javac HelloWorld.java</code>  编译</p>\n<p><code>javap -v HelloWorld.class</code>  反编译</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloWorld</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;hello world&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Classfile /home/meteor/code/yygh-parent/service/service_hosp/src/test/java/cn/wenhe9/yygh/hosp/test/HelloWorld.<span class=\"keyword\">class</span></span><br><span class=\"line\">  <span class=\"title class_\">Last</span> modified <span class=\"number\">2022</span>年<span class=\"number\">2</span>月<span class=\"number\">21</span>日; size <span class=\"number\">450</span> bytes</span><br><span class=\"line\">  SHA-<span class=\"number\">256</span> checksum 312583e7cc82948e86fee9a726d80a777ce140ca021a9ab44dcd6d238ad50381</span><br><span class=\"line\">  Compiled from <span class=\"string\">&quot;HelloWorld.java&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">cn</span>.wenhe9.yygh.hosp.test.HelloWorld</span><br><span class=\"line\">  minor version: <span class=\"number\">0</span></span><br><span class=\"line\">  major version: <span class=\"number\">61</span></span><br><span class=\"line\">  flags: (<span class=\"number\">0x0021</span>) ACC_PUBLIC, ACC_SUPER</span><br><span class=\"line\">  this_class: #<span class=\"number\">21</span>                         <span class=\"comment\">// cn/wenhe9/yygh/hosp/test/HelloWorld</span></span><br><span class=\"line\">  super_class: #<span class=\"number\">2</span>                         <span class=\"comment\">// java/lang/Object</span></span><br><span class=\"line\">  interfaces: <span class=\"number\">0</span>, fields: <span class=\"number\">0</span>, methods: <span class=\"number\">2</span>, attributes: <span class=\"number\">1</span></span><br><span class=\"line\">Constant pool:</span><br><span class=\"line\">   #<span class=\"number\">1</span> = Methodref          #<span class=\"number\">2.</span>#<span class=\"number\">3</span>          <span class=\"comment\">// java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class=\"line\">   #<span class=\"number\">2</span> = Class              #<span class=\"number\">4</span>             <span class=\"comment\">// java/lang/Object</span></span><br><span class=\"line\">   #<span class=\"number\">3</span> = NameAndType        #<span class=\"number\">5</span>:#<span class=\"number\">6</span>          <span class=\"comment\">// &quot;&lt;init&gt;&quot;:()V</span></span><br><span class=\"line\">   #<span class=\"number\">4</span> = Utf8               java/lang/Object</span><br><span class=\"line\">   #<span class=\"number\">5</span> = Utf8               &lt;init&gt;</span><br><span class=\"line\">   #<span class=\"number\">6</span> = Utf8               ()V</span><br><span class=\"line\">   #<span class=\"number\">7</span> = Fieldref           #<span class=\"number\">8.</span>#<span class=\"number\">9</span>          <span class=\"comment\">// java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class=\"line\">   #<span class=\"number\">8</span> = Class              #<span class=\"number\">10</span>            <span class=\"comment\">// java/lang/System</span></span><br><span class=\"line\">   #<span class=\"number\">9</span> = NameAndType        #<span class=\"number\">11</span>:#<span class=\"number\">12</span>        <span class=\"comment\">// out:Ljava/io/PrintStream;</span></span><br><span class=\"line\">  #<span class=\"number\">10</span> = Utf8               java/lang/System</span><br><span class=\"line\">  #<span class=\"number\">11</span> = Utf8               out</span><br><span class=\"line\">  #<span class=\"number\">12</span> = Utf8               Ljava/io/PrintStream;</span><br><span class=\"line\">  #<span class=\"number\">13</span> = String             #<span class=\"number\">14</span>            <span class=\"comment\">// hello world</span></span><br><span class=\"line\">  #<span class=\"number\">14</span> = Utf8               hello world</span><br><span class=\"line\">  #<span class=\"number\">15</span> = Methodref          #<span class=\"number\">16.</span>#<span class=\"number\">17</span>        <span class=\"comment\">// java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class=\"line\">  #<span class=\"number\">16</span> = Class              #<span class=\"number\">18</span>            <span class=\"comment\">// java/io/PrintStream</span></span><br><span class=\"line\">  #<span class=\"number\">17</span> = NameAndType        #<span class=\"number\">19</span>:#<span class=\"number\">20</span>        <span class=\"comment\">// println:(Ljava/lang/String;)V</span></span><br><span class=\"line\">  #<span class=\"number\">18</span> = Utf8               java/io/PrintStream</span><br><span class=\"line\">  #<span class=\"number\">19</span> = Utf8               println</span><br><span class=\"line\">  #<span class=\"number\">20</span> = Utf8               (Ljava/lang/String;)V</span><br><span class=\"line\">  #<span class=\"number\">21</span> = Class              #<span class=\"number\">22</span>            <span class=\"comment\">// cn/wenhe9/yygh/hosp/test/HelloWorld</span></span><br><span class=\"line\">  #<span class=\"number\">22</span> = Utf8               cn/wenhe9/yygh/hosp/test/HelloWorld</span><br><span class=\"line\">  #<span class=\"number\">23</span> = Utf8               Code</span><br><span class=\"line\">  #<span class=\"number\">24</span> = Utf8               LineNumberTable</span><br><span class=\"line\">  #<span class=\"number\">25</span> = Utf8               main</span><br><span class=\"line\">  #<span class=\"number\">26</span> = Utf8               ([Ljava/lang/String;)V</span><br><span class=\"line\">  #<span class=\"number\">27</span> = Utf8               SourceFile</span><br><span class=\"line\">  #<span class=\"number\">28</span> = Utf8               HelloWorld.java</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> cn.wenhe9.yygh.hosp.test.HelloWorld();</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\">    flags: (<span class=\"number\">0x0001</span>) ACC_PUBLIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=<span class=\"number\">1</span>, locals=<span class=\"number\">1</span>, args_size=<span class=\"number\">1</span></span><br><span class=\"line\">         <span class=\"number\">0</span>: aload_0</span><br><span class=\"line\">         <span class=\"number\">1</span>: invokespecial #<span class=\"number\">1</span>                  <span class=\"comment\">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class=\"line\">         <span class=\"number\">4</span>: <span class=\"keyword\">return</span></span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line <span class=\"number\">7</span>: <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(java.lang.String[])</span>;</span><br><span class=\"line\">    descriptor: ([Ljava/lang/String;)V</span><br><span class=\"line\">    flags: (<span class=\"number\">0x0009</span>) ACC_PUBLIC, ACC_STATIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=<span class=\"number\">2</span>, locals=<span class=\"number\">1</span>, args_size=<span class=\"number\">1</span></span><br><span class=\"line\">         <span class=\"number\">0</span>: getstatic     #<span class=\"number\">7</span>                  <span class=\"comment\">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class=\"line\">         <span class=\"number\">3</span>: ldc           #<span class=\"number\">13</span>                 <span class=\"comment\">// String hello world</span></span><br><span class=\"line\">         <span class=\"number\">5</span>: invokevirtual #<span class=\"number\">15</span>                 <span class=\"comment\">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class=\"line\">         <span class=\"number\">8</span>: <span class=\"keyword\">return</span></span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line <span class=\"number\">9</span>: <span class=\"number\">0</span></span><br><span class=\"line\">        line <span class=\"number\">10</span>: <span class=\"number\">8</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">SourceFile: <span class=\"string\">&quot;HelloWorld.java&quot;</span></span><br></pre></td></tr></table></figure></div>\n<h3 id=\"stringtable\"><a class=\"markdownIt-Anchor\" href=\"#stringtable\">#</a> StringTable</h3>\n<p>常量池和串池的关系</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//StringTable[&quot;a&quot;, &quot;b&quot;, &quot;ab&quot;] hashtable结构，不能扩容</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloWorld</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//常量池中的信息，都会被加载到运行时常量池中，这时 a b ab 都是常量值中的符号，还没有变为 java 字符串对象</span></span><br><span class=\"line\">        <span class=\"comment\">//ldc #2 会把 a 符号 变为 &quot;a&quot; 字符串对象</span></span><br><span class=\"line\">        <span class=\"comment\">//ldc #3 会把 b 符号 变为 &quot;b&quot; 字符串对象</span></span><br><span class=\"line\">        <span class=\"comment\">//ldc #4 会把 ab 符号 变为 &quot;ab&quot; 字符串对象</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;a&quot;</span>; <span class=\"comment\">//懒惰的 当运行到时，先去串池找，没有把他放入串池，有就用串池的</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s2</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;b&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s3</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;ab&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s4</span> <span class=\"operator\">=</span> s1 + s2; <span class=\"comment\">// new StringBuilder().append(&quot;a&quot;).append(&quot;b&quot;).toString() new String(&quot;ab&quot;)</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s5</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;a&quot;</span> + <span class=\"string\">&quot;b&quot;</span>; <span class=\"comment\">//javac在编译器的优化，&quot;a&quot;和&quot;b&quot;都是常量，拼接的结果是确定的，既然是确定的，那么在编译期间知道他的结果就是&quot;ab&quot;不会是其他的,不需要再像上面的方式进行拼接</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n<h4 id=\"特性\"><a class=\"markdownIt-Anchor\" href=\"#特性\">#</a> 特性</h4>\n<ul>\n<li>常量池中的字符串近是符号，第一次用到时才变为对象</li>\n<li>利用串池的机制，来避免重复创建字符串对象</li>\n<li>字符串变量拼接的原理是 StringBuilder (1.8)</li>\n<li>字符串常量拼接的原理是编译器优化</li>\n<li>可以使用 <code>intern</code>  方法，主动将串池中还没有的字符串对象放入串池</li>\n</ul>\n<blockquote>\n<p>返回字符串对象的规范表示。一个字符串池，最初是空的，由 String 类私下维护。当调用 intern 方法时，如果池中已经包含一个等于该 String 对象的字符串，由 equals (Object) 方法确定，则返回池中的字符串。否则，将此 String 对象添加到池中并返回对该 String 对象的引用。</p>\n</blockquote>\n<p>在 1.6 中，常量池包括字符串常量池在永久代 perm 中，所以，当使用常量时是直接放在常量池中，当使用变量拼接时字符串时，他先经过创建 StringBuilder，调用构造方法，加载参数，调用 append 方法，最后调用 toString 方法，在 toString 方法中，通过 new String (value) 创建对象，是在堆中。当使用 intern 方法时，先看字符串常量池中是否有该字符串，如果有，就不放入，如果没有，就把这个字符串的值拷贝到字符串常量池中，在返回他的地址引用，所以此时有两个该字符串，一个是最开始的在堆中，一个因为拷贝在字符串常量池或者说是在永久代中，所以两个对象不相同</p>\n<p>在 1.8 中，常量池在元空间中，而字符串常量池在堆中，并且当调用 intren 方法时，先看字符串常量池中是否有该字符串，如果有，就返回字符串常量池中的地址引用，如果没有，就把该字符串的地址存入字符串常量池并返回这个地址引用</p>\n<p>在 1.6 中，如果要测试，字符串常量池在永久代中，可以 <code>-XX:MaxPermSize=10m</code>  设置永久代的大小，之后程序一直往字符串常量池中添加字符串，并占有字符串的引用</p>\n<p>在 1.8 中，如果要测试，字符串常量池在堆中，除了要设置 <code>-Xmx10m</code>  设置堆内存的大小，还要设置 <code>-XX:-UseGCOverHeadLimit</code> ，这是这是垃圾回收的一个限制，当 98% 的时间花在了垃圾回收，但是只有 2% 的对空间被回收，会出现内存溢出异常异常 <code>+</code>  就是打开， <code>-</code>  就是关闭</p>\n<h4 id=\"stringtable垃圾回收\"><a class=\"markdownIt-Anchor\" href=\"#stringtable垃圾回收\">#</a> StringTable 垃圾回收</h4>\n<p>StringTable 在堆内存中，也会触发垃圾回收</p>\n<p>测试:</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.wenhe9.yygh.hosp.test;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> DuJinliang</span></span><br><span class=\"line\"><span class=\"comment\"> * 2022/2/21</span></span><br><span class=\"line\"><span class=\"comment\"> -Xmx10M -XX:+PrintStringTableStatistics -XX:+PrintGCDetails -verbose:gc</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloWorld</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; <span class=\"number\">100</span>; j++) &#123;</span><br><span class=\"line\">                String.valueOf(j).intern();</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Throwable e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            System.out.println(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<ul>\n<li><code>-Xmx10M -XX:+PrintStringTableStatistics -XX:+PrintGCDetails -verbose:gc</code>\n<ul>\n<li><code>-Xmx10M</code>  设置堆内存大小为 10M</li>\n<li><code>-XX:+PrintStringTableStatistics</code>  打印字符串表的信息</li>\n<li><code>-XX:+PrintGCDetails</code>  打印垃圾回收的信息</li>\n<li><code>verbose:gc</code>  设置日志级别为 gc</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"stringtable性能调优\"><a class=\"markdownIt-Anchor\" href=\"#stringtable性能调优\">#</a> StringTable 性能调优</h4>\n<ol>\n<li>​\t <code>-XX:StringTableSize=1009</code>  设置串表的 hash 表的桶的大小尽可能的大</li>\n<li>字符串对象为什么要入池？\n<ul>\n<li>防止重复的字符串对象占用内存</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"直接内存\"><a class=\"markdownIt-Anchor\" href=\"#直接内存\">#</a> 直接内存</h3>\n<h4 id=\"定义-6\"><a class=\"markdownIt-Anchor\" href=\"#定义-6\">#</a> 定义</h4>\n<p>Direct Memory</p>\n<ul>\n<li>常见于 NIO 操作时，用于数据缓冲区</li>\n<li>分配回收成本较高，单独写性能高</li>\n<li>不受 JVM 内存回收管理</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220226195015543.png\"\n                      alt=\"image-20220226195015543\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220226195035365.png\"\n                      alt=\"image-20220226195035365\"\n                ></p>\n<h4 id=\"分配和回收原理\"><a class=\"markdownIt-Anchor\" href=\"#分配和回收原理\">#</a> 分配和回收原理</h4>\n<ul>\n<li>使用了 Unsafe 对象完成直接内存的分配和回收，并且回收需要主动调用 freeMemory 方法</li>\n<li>ByteBuffer 的实现类内部，使用了 Cleaner（虚引用）来监测 ByteBuffer 对象，一旦 ByteBuffer 对象被垃圾回收，那么就会由 ReferenceHandler 线程通过 Cleaner 的 clean 方法调用 freeMemory 方法来释放内存</li>\n</ul>\n<h4 id=\"性能调优\"><a class=\"markdownIt-Anchor\" href=\"#性能调优\">#</a> 性能调优</h4>\n<ul>\n<li>禁用显式回收对直接内存的影响\n<ul>\n<li><code>-XX:+DisableExplictGC</code>  禁用显式垃圾回收</li>\n<li>如 <code>System.gc()</code>  显式的垃圾回收， Full GC 除了 新生代 老年代也会被回收</li>\n</ul>\n</li>\n<li>可以使用 <code>Unsafe</code>  对象直接进行对内存的分配和回收，直接来管理这块直接内存</li>\n</ul>\n<h2 id=\"执行引擎\"><a class=\"markdownIt-Anchor\" href=\"#执行引擎\">#</a> 执行引擎</h2>\n<h3 id=\"垃圾回收\"><a class=\"markdownIt-Anchor\" href=\"#垃圾回收\">#</a> 垃圾回收</h3>\n<h4 id=\"如何判断对象可以回收\"><a class=\"markdownIt-Anchor\" href=\"#如何判断对象可以回收\">#</a> 如何判断对象可以回收</h4>\n<h5 id=\"引用计数法\"><a class=\"markdownIt-Anchor\" href=\"#引用计数法\">#</a> 引用计数法</h5>\n<p>只要一个对象被其他对象所引用，那么这个对象的引用加一，如果引用了两次那么引用计数加二，如果一个变量不再引用她了，那么他的引用计数减一，当他的引用计数变为 0 的时候，代表没有对象再引用他了，那么他就可以作为一个垃圾进行一个回收。</p>\n<p><strong>弊端</strong> ： 循环引用</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220226203108552.png\"\n                      alt=\"image-20220226203108552\"\n                ></p>\n<h5 id=\"可达性分析算法\"><a class=\"markdownIt-Anchor\" href=\"#可达性分析算法\">#</a> 可达性分析算法</h5>\n<p>首先确定一系列的根对象，所谓根对象，就是肯定不能被当成垃圾回收的对象，就称之为根对象，在垃圾回收之前，首先会对堆内存中的所有对象进行一遍扫描，看每一个对象是否被刚刚的根对象直接或者间接的引用，如果是，那么这个对象就不能被回收，反之，如果一个对象没有被根对象直接或者间接的引用，那么这个对象就可以作为垃圾将来被回收</p>\n<p><code>jmap -dump:format=b,live,file=文件名称 进程号</code> 抓取当前 jvm 堆的状态 b 是二进制，live 是获取当前存活的对象，会触发一次垃圾回收</p>\n<p>使用 mat（Memory Analyze Tool）工具分析堆</p>\n<h5 id=\"四中引用\"><a class=\"markdownIt-Anchor\" href=\"#四中引用\">#</a> 四中引用</h5>\n<ol>\n<li>强引用\n<ul>\n<li><code>new</code>  了一个对象，把这个对象通过 <code>=</code>  赋值运算符赋值给了一个变量，那么这个变量就强引用了这个对象</li>\n<li>特点\n<ul>\n<li>只要沿着 GC Root 的引用链能够找到他，就不会被垃圾回收</li>\n</ul>\n</li>\n<li>总结\n<ul>\n<li>只有所有 GC Roots 对象都不通过【强引用】引用该对象，该对象才能被垃圾回收</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>软引用 (SoftReference)\n<ul>\n<li>当垃圾回收时，并且内存不够时，会把软引用的对象回收掉，前提是没有强引用引用他</li>\n<li>总结\n<ul>\n<li>仅有软引用引用该对象时，在垃圾回收后，内存仍不足会再次发出垃圾回收，回收软引用的对象</li>\n<li>可以配合引用队列来释放软引用自身</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>弱引用（WeakReference）\n<ul>\n<li>只要发生了垃圾回收，不管内存是否充足，都会把若引用的对象回收掉，前提是没有强引用引用他</li>\n<li>总结\n<ul>\n<li>仅有弱引用引用该对象时，在垃圾回收时，无论内存是否充足，都会回收弱引用对象</li>\n<li>可以配合引用队列来释放弱引用自身</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>虚引用（PhantomReference）\n<ul>\n<li>直接内存</li>\n<li>在虚引用引用的对象在垃圾回收时，虚引用自己就会放入引用队列，从而间接的用一个线程调用虚引用的 unsafe 的 freeMemory 方法去释放那块直接内存</li>\n<li>总结\n<ul>\n<li>必须配合引用队列使用，主要配合 ByteBuffer 使用，被引用对象回收时，会将虚引用入队，由 Reference Handler 线程调用虚引用相关方法释放直接内存</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>终接器引用（finalReference）\n<ul>\n<li>当没有强引用引用对象时，对象会由虚拟机创建对应的终结器引用，当这个对象被垃圾回收时， 把终结器引用加入引用队列，由一个优先级很低的 finalizeHandler 线程，在某些时机查看引用队列中是否有终结器引用，如果有，就根据终结器引用找到刚刚要垃圾回收的对象，并且调用他的 finalize 方法，等调用完了，下一次垃圾回收时，就会把这个对象回收掉</li>\n<li>总结\n<ul>\n<li>无需手动编码，但其内部配合引用队列使用，在垃圾回收时，终结器引用入队（被引用对象暂时没有被回收），再由 Finalizer 线程通过终结器引用找到被引用对象并调用他的 finalize 方法，第二次 GC 时才能回收被引用对象</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>当软引用和弱引用没有直接的强引用所引用，那么当垃圾回收发生时，他们都有可能被回收掉</p>\n<p>如果软引用、若引用，当引用的对象被回收掉了以后，那么软引用自身也是一个对象，他如果在创建时给他分配了一个引用对队列，他所引用的对象被回收时，他就会进入引用队列，因为软引用、弱引用自身也占了一定的内存，如果要对他两所占用的内存做进一步的释放，可以通过引用队列找到他两，对他作进一步的处理，比如他两还可能被强引用所引用，所以可以在引用队列中依次遍历，把他们释放掉</p>\n<p>软、弱队列既可以配合引用队列使用也可以不配合引用队列使用</p>\n<p>虚引用和终结器引用必须配合引用队列使用</p>\n</blockquote>\n<ul>\n<li>\n<p>软引用</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 内存空间比较有限，一些不重要的资源用软引用去关联，当空间紧张时就可以回收掉</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 引用队列</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">ReferenceQueue</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReferenceQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">SoftReference</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">>></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token comment\">// 关联了引用队列，当软引用所关联的 byte [] 被回收时，软引用自己会加入到 queue 中去</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token class-name\">SoftReference</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> ref <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SoftReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 从队列中获取无用的 软引用 对象，并移除</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">Reference</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> poll <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>poll <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            list<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>poll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            poll <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SoftReference</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> softReference <span class=\"token operator\">:</span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>softReference<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">5</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"垃圾回收算法\"><a class=\"markdownIt-Anchor\" href=\"#垃圾回收算法\">#</a> 垃圾回收算法</h4>\n<h5 id=\"标记清除\"><a class=\"markdownIt-Anchor\" href=\"#标记清除\">#</a> 标记清除</h5>\n<p>分两个阶段，第一个阶段，根据可达性算法标记不再被使用的对象，第二个阶段，对被标记的对象进行回收，回收只是将垃圾对象的内存起始结束地址做一个标记，存储到空闲分区表中</p>\n<ul>\n<li>优点\n<ul>\n<li>速度快，清楚操作只需要把垃圾对象的内存起始结束地址做一个记录，不需要做更多的额外处理，所以他的清楚速度、整个垃圾回收的速度是比较快的</li>\n</ul>\n</li>\n<li>缺点\n<ul>\n<li>容易产生内存碎片，在清除以后不会再对空闲的内存空间作进一步的整理工作，如果分配了一个较大的对象，每个空闲的内存空间都不足以满足需要，但是若干个空闲的总内存空间是足够的，但是因为空间不连续（内存碎片），造成新对象仍然不能有一个有效的内存来使用，还是会造成内存溢出</li>\n</ul>\n</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220228125439542.png\"\n                      alt=\"image-20220228125439542\"\n                ></p>\n<h5 id=\"标记整理\"><a class=\"markdownIt-Anchor\" href=\"#标记整理\">#</a> 标记整理</h5>\n<p>分两个阶段，第一个阶段标记，先对对象进行标记，看哪些对象是垃圾，第二个阶段整理，在清除垃圾的过程中，他会把可用的对象向前移动，使内存更为紧凑</p>\n<ul>\n<li>优点\n<ul>\n<li>没有内存碎片</li>\n</ul>\n</li>\n<li>缺点\n<ul>\n<li>由于整理牵扯到对象的移动，效率变得较低</li>\n</ul>\n</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220228125709844.png\"\n                      alt=\"image-20220228125709844\"\n                ></p>\n<h5 id=\"复制\"><a class=\"markdownIt-Anchor\" href=\"#复制\">#</a> 复制</h5>\n<p>将内存分为两个区域，一个 FROM 区，一个 TO 区两个阶段，其中 TO 区始终空闲着，一个对象都没有，找到哪些被引用的对象，将他们标记为垃圾，从 FROM 区上存活的对象复制到 TO 区，复制的过程中就会完成碎片的整理，等复制完成 FROM 区全是垃圾的，把 FROM 区清空，交换 FROM 和 TO 的位置，TO 总是空闲的一块分区</p>\n<ul>\n<li>优点\n<ul>\n<li>不会产生碎片</li>\n</ul>\n</li>\n<li>缺点\n<ul>\n<li>复制算法会占用双倍的内存空间</li>\n</ul>\n</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220228131040558.png\"\n                      alt=\"image-20220228131040558\"\n                ></p>\n<p>虚拟机不会采用单独的一种算法，结合前面的三种算法协同工作，具体实现是虚拟机中分代的垃圾回收机制，他把堆内存大的区域分成两块，一块是新生代，一块是老年代，而在新生代里又进一步划分成三个小的区域：伊甸园、幸存区 From、幸存区 To</p>\n<blockquote>\n<p>为什么要这样的区域划分？</p>\n<p>主要是因为 Java 中有的对象需要长时间使用，长时间使用的对象就放在老年代中，而用完就要丢弃的对象，就放在新生代中，这样就可以针对对象的生命周期的不同特点进行不同的垃圾回收策略，老年代的垃圾回收很久才发生一次，新生代的垃圾回收就发生的比较频繁，新生代处理的都是朝生夕死的对象，而老年代处理的都是更有价值、长时间存活的对象，这样不同的区域采用不同的算法可以更有效得对垃圾回收做一个管理</p>\n</blockquote>\n<ul>\n<li>当创建一个新的对象时，那这个新的对象，就会默认采用伊甸园的一片空间，</li>\n<li>当新的对象不断的创建，伊甸园逐渐被占满了，当再有一个对象被创建时，伊甸园的空间已经不够了、容纳不下了，这时候就会触发一次垃圾回收，</li>\n<li>新生代的垃圾回收称作 <code>Minor GC</code> ，引发  <code>Stop the World</code>  暂停其他的用户线程，由垃圾回收线程完成垃圾回收的动作，当垃圾回收动作做完用户线程才能继续运行，</li>\n<li>采用复制算法，把存活的对象复制到幸存区 To 中，复制过来以后，会将幸存对象的寿命加一，刚开始寿命是 0，经历了一次垃圾回收还不死，那么寿命加一，交换幸存区 From 和幸存区 To 的位置（实际变得不是物理地址，而是地址引用），</li>\n<li>继续向伊甸园分配新的对象，刚才放不下的对象就放进去了，</li>\n<li>又经过了一段时间，伊甸园又满了，又触发一次垃圾回收，这一次除了要把伊甸园中存活的对象找到，还要找到幸存区 From 中存活的对象，把所有存活的对象放到幸存区 To 中，寿命加一，交换 From 和 To，那么新对象又可以放入伊甸园</li>\n<li>当幸存区 From 中存活的对象经历了 15 次垃圾回收还活着（寿命超过一定的阈值，最大寿命是 15，4bit，在不同的垃圾回收器阈值不同），说明该对象价值比较高，就把他晋升到老年代，因为老年代的垃圾回收频率比较低，不会轻易地回收掉，那么价值较高的对象，就把他晋升到老年代中。</li>\n<li>如果老年代的内存空间不足时，先尝试 <code>Minor GC</code>  看能否把新生代的空间释放一部分分配对象，结果发现 <code>Minor GC</code>  以后空间还不足，就会触发 <code>Full GC</code> ，从新生到老年一个全面的清理，相对于 <code>Minor GC</code>  的 STW 的时间要更长，老年代采用的回收算法和新生代是不一样的，老年代的对象比较多，采用的算法是标记清除或者标记整理，后者较慢，老年代的对象都不是那么容易被当成垃圾回收，所以回收效率、时间更低，STW 的时间也会更长，如果 <code>FULL GC</code>  后，空间足够，则皆大欢喜，否则，分配失败，抛出内存溢出异常</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220228135050354.png\"\n                      alt=\"image-20220228135050354\"\n                ></p>\n<blockquote>\n<p>为什么垃圾回收的时候会把其他用户正在执行的线程暂停掉？</p>\n<p>因为垃圾回收牵扯到对象的复制，对象的地址会发成改变，如果多个线程同时运行，就会造成混乱，对象都移动了，其他线程在根据原来的地址就找不到了</p>\n</blockquote>\n<h3 id=\"相关vm参数\"><a class=\"markdownIt-Anchor\" href=\"#相关vm参数\">#</a> 相关 VM 参数</h3>\n<table>\n<thead>\n<tr>\n<th>含义</th>\n<th>参数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>堆初始大小</td>\n<td>-Xms</td>\n</tr>\n<tr>\n<td>堆最大大小</td>\n<td>-Xmx 或 -XX:MaxHeapSize=size</td>\n</tr>\n<tr>\n<td>新生代大小</td>\n<td>-Xmn 或 (-XX:NewSize=size + -XX:MaxNewSize=size)</td>\n</tr>\n<tr>\n<td>幸存区比例（动态）</td>\n<td>-XX:InitialSurvivorRatio=ratio 和 -XX:+UseAdaptiveSizePolicy</td>\n</tr>\n<tr>\n<td>幸存区比例</td>\n<td>-XX:SuvivorRatio=ratio</td>\n</tr>\n<tr>\n<td>晋升阈值</td>\n<td>-XX:MaxTenuringThreshold=threshold</td>\n</tr>\n<tr>\n<td>晋升详情</td>\n<td>-XX:+PrintTenuringDistribution</td>\n</tr>\n<tr>\n<td>GC 详情</td>\n<td>-XX:+PringGCDetails -verbose:gc</td>\n</tr>\n<tr>\n<td>FullGC 前 MinorGC</td>\n<td>-XX:+ScavengeBeforeFullGC</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>当子线程发生 OOM 错误时，会将子线程的全部资源释放掉，故而不影响到主线程</p>\n</blockquote>\n<h3 id=\"垃圾回收器\"><a class=\"markdownIt-Anchor\" href=\"#垃圾回收器\">#</a> 垃圾回收器</h3>\n<ol>\n<li>串行\n<ul>\n<li>单线程</li>\n<li>堆内存较小，适合个人电脑</li>\n</ul>\n</li>\n<li>吞吐量优先\n<ul>\n<li>多线程</li>\n<li>堆内存较大，多核 CPU</li>\n<li>让单位时间内，STW 的时间最短</li>\n</ul>\n</li>\n<li>响应时间有效\n<ul>\n<li>多线程</li>\n<li>堆内存较大，多核 CPU</li>\n<li>尽可能让 STW 的单次时间最短</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"串行\"><a class=\"markdownIt-Anchor\" href=\"#串行\">#</a> 串行</h4>\n<p><code>-XX:+UseSerialGC = Serial + SerialOld</code></p>\n<p>Serial 工作在新生代，使用复制算法</p>\n<p>SerialOld 工作在老年代，采用标记加整理算法</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220228151826294.png\"\n                      alt=\"image-20220228151826294\"\n                ></p>\n<h4 id=\"吞吐量优先\"><a class=\"markdownIt-Anchor\" href=\"#吞吐量优先\">#</a> 吞吐量优先</h4>\n<p>1.8 默认使用并行的垃圾回收器 Parallel  Parallel（并行）</p>\n<p>-XX:+UseParallelGC 新生代的垃圾回收器 复制算法 开启其中一个会连带着开启另一个</p>\n<p>-XX:+UseParallelOldGC 老年代的垃圾回收器 标记 + 整理算法</p>\n<p>-XX:+UseAdaptiveSizePolicy 动态调整伊甸园和幸存区的比例包括整个堆的大小以及晋升阈值的大小</p>\n<p>-XX:GCTimeRatio=ratio 一般是 19 0.05 一百分钟内允许五分钟的垃圾回收时间 调整垃圾回收的时间占总时间的占比 1/1+ratio 如果达不到目标，Parallel 回收期就会调整堆的大小来达到这个目标</p>\n<p>-XX:MaxGCPauseMillis=ms 最大暂停毫秒数 默认 200 毫秒 与上一个冲突</p>\n<p>-XX:ParallelGCThreads=n</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220228152400678.png\"\n                      alt=\"image-20220228152400678\"\n                ></p>\n<h4 id=\"响应时间优先\"><a class=\"markdownIt-Anchor\" href=\"#响应时间优先\">#</a> 响应时间优先</h4>\n<p>concurrent 垃圾回收器工作的同时，其他的用户线程，也能同时进行，也就是用户线程和垃圾回收线程是并发执行，而 parallel 是多个垃圾回收器并行运行，在此期间，不允许用户工作线程继续运行，stop the world</p>\n<p>-XX:+UseConcMarkSweepGC  基于标记清除算法的垃圾回收器并且是并发的 concurrent (并发) 老年代 有时候会发生并发失败的问题，就会采取补救的措施，退化到 SerialOld 单线程的垃圾回收器</p>\n<p>-XX:+UseParNewGC \t复制算法 新生代</p>\n<p>-XX:ParallelGCThreads=n ~ -XX:ConcThreads=threads n/4</p>\n<p>-XX:CMSInitiatingOccupancyFraction=percent 执行 CMS 的内存占比 比如 80 当老年代的内存占用达到 80% 时就执行一次垃圾回收，这样可以预留一些空间给浮动垃圾来用。默认值是 65%</p>\n<p>-XX:+CMSScavengeBeforeRemark 在重新标记之前，对新生代进行一次垃圾回收，减轻重新标记的压力</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220228160055673.png\"\n                      alt=\"image-20220228160055673\"\n                ></p>\n<p>因为是基于标记和清除算法，可以可能产生比较多的内存碎片，这样的话，就会造成，将来 Minor GC 不足，结果老年代过多，GC 也不足，就会造成并发失败，CMS 的垃圾回收器就不能正常操作，这个时候，垃圾回收器就会退化为 SerialOld 串行化的垃圾回收，做一些整理，碎片变少了，才能继续操作</p>\n<h4 id=\"g1\"><a class=\"markdownIt-Anchor\" href=\"#g1\">#</a> G1</h4>\n<p>定义：Garbage First</p>\n<p>使用场景</p>\n<ul>\n<li>同时注重吞吐量（Throught）和低延迟（Low latency），默认的暂停目标的是 200ms</li>\n<li>超大堆内存，会将堆划分为多个大小相等的 Region</li>\n<li>整体上是标记 + 整理算法，两个区域之间是复制算法</li>\n</ul>\n<p>相关 JVM 参数</p>\n<p>-XX:+UseG1GC</p>\n<p>-XX:G1HeapRegionSize=size</p>\n<p>-XX:MaxGCPauseMillis=time</p>\n<h5 id=\"1垃圾回收阶段\"><a class=\"markdownIt-Anchor\" href=\"#1垃圾回收阶段\">#</a> 1) 垃圾回收阶段</h5>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220301083352858.png\"\n                      alt=\"image-20220301083352858\"\n                ></p>\n<h5 id=\"2young-collection\"><a class=\"markdownIt-Anchor\" href=\"#2young-collection\">#</a> 2)Young Collection</h5>\n<ul>\n<li>会 STW</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220301083706505.png\"\n                      alt=\"image-20220301083706505\"\n                ></p>\n<p>垃圾回收时，会把幸存对象复制进幸存区</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220301083804132.png\"\n                      alt=\"image-20220301083804132\"\n                ></p>\n<p>当幸存区内存不足时，会再次触发垃圾回收，会将寿命达到阈值的对象放进老年代，寿命不够的会复制进另一个幸存区</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220301084022984.png\"\n                      alt=\"image-20220301084022984\"\n                ></p>\n<h5 id=\"3young-collection-cm\"><a class=\"markdownIt-Anchor\" href=\"#3young-collection-cm\">#</a> 3)Young Collection + CM</h5>\n<ul>\n<li>在 Young GC 时会进行 GC Roots 的初始标记</li>\n<li>老年代占用比例达到阈值时，进行并发标记（不会 STW），由下面的 JVM 参数决定\n<ul>\n<li>``-XX:InitiatingHeapOccupancyPercent=percent （默认 45%）</li>\n</ul>\n</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220301084507087.png\"\n                      alt=\"image-20220301084507087\"\n                ></p>\n<h5 id=\"4mixed-collection\"><a class=\"markdownIt-Anchor\" href=\"#4mixed-collection\">#</a> 4)Mixed Collection</h5>\n<p>会对 E、S、O 进行全面的垃圾回收</p>\n<ul>\n<li>最终标记（Remark）会 STW</li>\n<li>拷贝存活（Evacuation）会 STW</li>\n</ul>\n<p>会将新生代存活的对象复制进幸存区，幸存区达到寿命阈值的会进入老年代，幸存区寿命没有达到阈值的，复制进入另一个幸存区，若时间足够，即是否达到 <code>-XX:MaxGCPauseMillis=ms</code> ，若没有达到，则全部老年代的幸存对象进行复制进新的老年代中，否则，只选取部分回收价值最高的老年代进行回收和复制，一方面是为了保存存货对象，另一方面是为了减少内存碎片</p>\n<p>STW 是因为并发标记时，用户线程还在运行，可能会改变一些对象的引用或者产生新的垃圾，对并发标记的最终结果产生影响，所以在最终标记时需要 STW</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220301085135007.png\"\n                      alt=\"image-20220301085135007\"\n                ></p>\n<h5 id=\"5full-gc\"><a class=\"markdownIt-Anchor\" href=\"#5full-gc\">#</a> 5)Full GC</h5>\n<ul>\n<li>SerialGC\n<ul>\n<li>新生代内存不足时发生的垃圾收集 - minor gc</li>\n<li>老年代内存不足时发生的垃圾收集 - full gc</li>\n</ul>\n</li>\n<li>ParallelGC\n<ul>\n<li>新生代内存不足时发生的垃圾收集 - minor gc</li>\n<li>老年代内存不足时发生的垃圾收集 - full gc</li>\n</ul>\n</li>\n<li>CMS\n<ul>\n<li>新生代内存不足时发生的垃圾收集 - minor gc</li>\n<li>老年代内存不足时\n<ul>\n<li>如果并发收集没有失败（也就是垃圾回收后，内存足够时），那么就是并发收集</li>\n<li>如果并发收集失败（也就是垃圾回收后，内存碎片严重，内存不足时），那么 CMS 回收器会退化成 Serial GC 使用标记整理算法，对内存碎片进行整理</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>G1\n<ul>\n<li>新生代内存不足时发生的垃圾收集 - minor gc</li>\n<li>老年代内存不足时\n<ul>\n<li>如果垃圾回收的效率大于用户线程产生垃圾的效率，那么使用的是并发收集</li>\n<li>如果垃圾回收的效率小于用户线程产生垃圾的效率，那么 G1 回收器退化为 Serial GC 使用标记 - 整理算法对内存碎片进行整理</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"6young-collection跨代引用\"><a class=\"markdownIt-Anchor\" href=\"#6young-collection跨代引用\">#</a> 6) Young Collection 跨代引用</h5>\n<ul>\n<li>新生代回收的跨代引用（老年代引用新生代）问题</li>\n</ul>\n<p>在垃圾回收时，会将存活对象复制进幸存区，但是有一些新生代的根对象是来自老年代的，老年代中存活的对象对比较多，如果要遍历整个老年代去找这个根对象，效率是非常低的，因此采用卡表的技术 Card Table，把老年代的区域再进行一次细分，分成一个个的卡，每一个卡是 512k，如果老年代其中有一个对象引用了新生代的对象，就把这个卡标记为脏卡， 这样的话，就不用去找整个老年代，只需要去找脏卡的区域即可，减少搜索范围，提高扫描根对象的效率</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220301092711562.png\"\n                      alt=\"image-20220301092711562\"\n                ></p>\n<ul>\n<li>卡表与 Remember Set\n<ul>\n<li>在新生代这边有一个 Remember Set 记录从外部对新生代的引用，即脏卡</li>\n<li>根据 Remember Set 知道有哪些脏卡，再到脏卡去遍历 GC Roots，减少了 GC Roots 的遍历时间</li>\n</ul>\n</li>\n<li>在引用变更时，通过写屏障，异步的线程去完成脏卡的更新操作\n<ul>\n<li><code>post-write barrier + dirty card queue</code></li>\n</ul>\n</li>\n<li><code>concurrent refinement threads</code>  更新 Remember Set</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220301133805597.png\"\n                      alt=\"image-20220301133805597\"\n                ></p>\n<h5 id=\"7remark\"><a class=\"markdownIt-Anchor\" href=\"#7remark\">#</a> 7)Remark</h5>\n<ul>\n<li><code>pre-write barrier + satb_mark_queue</code></li>\n<li>在并发标记的过程中，对已经标记的对象会加上一个写屏障，当在并发标记之后，用户线程更改了这个对象的引用，就会触发写屏障，将这个对象放入 <code>satb_mark_queue</code>  队列，当重新标记时，会对这个队列的对象进行重行检测</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220301140303919.png\"\n                      alt=\"image-20220301140303919\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220301140328043.png\"\n                      alt=\"image-20220301140328043\"\n                ></p>\n<h5 id=\"8jdk8u20字符串去重\"><a class=\"markdownIt-Anchor\" href=\"#8jdk8u20字符串去重\">#</a> 8) JDK8u20 字符串去重</h5>\n<ul>\n<li>优点：节省大量内存</li>\n<li>缺点：略微多占用了 cpu 时间，新生代回收时间略微增加</li>\n</ul>\n<p>-XX:+UseStringDeduplication</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;abc&quot;</span>); <span class=\"comment\">//char[]&#123;&quot;a&quot;, &quot;b&quot;, &quot;c&quot;&#125;</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;abc&quot;</span>); <span class=\"comment\">//char[]&#123;&quot;a&quot;, &quot;b&quot;, &quot;c&quot;&#125;</span></span><br></pre></td></tr></table></figure></div>\n<ul>\n<li>将所有新分配的字符串放入一个队列</li>\n<li>当新生代回收时，G1 并发检查是否有字符串重复</li>\n<li>如果他们的值一样，让他们引用同一个 char []</li>\n<li>注意，与 <code>String.intern()</code>  不一样\n<ul>\n<li><code>String.intern()</code>  关注的是字符串对象</li>\n<li>而字符串去重关注的是 char []</li>\n<li>在 JVM 内部，使用了不同的字符串表</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>如果他们的值一样，让他们引用同一个 char []，那么两个字符串对象 == 是否为 true?</p>\n</blockquote>\n<ul>\n<li>\n<p>还是为 false，但是这里又说指向了同一个 char [] 是什么意思呢？</p>\n</li>\n<li>\n<p>观察 String 源码，我们发现，String 对象的值是采用的 char [] 类型的 value 属性，这里所说的指向了同一个 char []，是指两个不同的 String 对象的 value 属性指向了同一个 char []</p>\n</li>\n<li>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">String</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">implements</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>Serializable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">CharSequence</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/** The value is used for character storage. */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">char</span> value<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">7</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n<p>执行 javac -parameters -d .HelloWorld.java</p>\n<p>编译为 HelloWorld.class 后是这个样子</p>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">od -t xC HelloWorld.class</span><br><span class=\"line\">0000000 ca fe ba be 00 00 00 34 00 1f 0a 00 06 00 11 09</span><br><span class=\"line\">0000020 00 12 00 13 08 00 14 0a 00 15 00 16 07 00 17 07</span><br><span class=\"line\">0000040 00 18 01 00 06 3c 69 6e 69 74 3e 01 00 03 28 29</span><br><span class=\"line\">0000060 56 01 00 04 43 6f 64 65 01 00 0f 4c 69 6e 65 4e</span><br><span class=\"line\">0000100 75 6d 62 65 72 54 61 62 6c 65 01 00 04 6d 61 69</span><br><span class=\"line\">0000120 6e 01 00 16 28 5b 4c 6a 61 76 61 2f 6c 61 6e 67</span><br><span class=\"line\">0000140 2f 53 74 72 69 6e 67 3b 29 56 01 00 10 4d 65 74</span><br><span class=\"line\">0000160 68 6f 64 50 61 72 61 6d 65 74 65 72 73 01 00 04</span><br><span class=\"line\">0000200 61 72 67 73 01 00 0a 53 6f 75 72 63 65 46 69 6c</span><br><span class=\"line\">0000220 65 01 00 0f 48 65 6c 6c 6f 57 6f 72 6c 64 2e 6a</span><br><span class=\"line\">0000240 61 76 61 0c 00 07 00 08 07 00 19 0c 00 1a 00 1b</span><br><span class=\"line\">0000260 01 00 0b 68 65 6c 6c 6f 20 77 6f 72 6c 64 07 00</span><br><span class=\"line\">0000300 1c 0c 00 1d 00 1e 01 00 19 63 6e 2f 77 65 6e 68</span><br><span class=\"line\">0000320 65 39 2f 74 65 78 74 2f 48 65 6c 6c 6f 57 6f 72</span><br><span class=\"line\">0000340 6c 64 01 00 10 6a 61 76 61 2f 6c 61 6e 67 2f 4f</span><br><span class=\"line\">0000360 62 6a 65 63 74 01 00 10 6a 61 76 61 2f 6c 61 6e</span><br><span class=\"line\">0000400 67 2f 53 79 73 74 65 6d 01 00 03 6f 75 74 01 00</span><br><span class=\"line\">0000420 15 4c 6a 61 76 61 2f 69 6f 2f 50 72 69 6e 74 53</span><br><span class=\"line\">0000440 74 72 65 61 6d 3b 01 00 13 6a 61 76 61 2f 69 6f</span><br><span class=\"line\">0000460 2f 50 72 69 6e 74 53 74 72 65 61 6d 01 00 07 70</span><br><span class=\"line\">0000500 72 69 6e 74 6c 6e 01 00 15 28 4c 6a 61 76 61 2f</span><br><span class=\"line\">0000520 6c 61 6e 67 2f 53 74 72 69 6e 67 3b 29 56 00 21</span><br><span class=\"line\">0000540 00 05 00 06 00 00 00 00 00 02 00 01 00 07 00 08</span><br><span class=\"line\">0000560 00 01 00 09 00 00 00 1d 00 01 00 01 00 00 00 05</span><br><span class=\"line\">0000600 2a b7 00 01 b1 00 00 00 01 00 0a 00 00 00 06 00</span><br><span class=\"line\">0000620 01 00 00 00 07 00 09 00 0b 00 0c 00 02 00 09 00</span><br><span class=\"line\">0000640 00 00 25 00 02 00 01 00 00 00 09 b2 00 02 12 03</span><br><span class=\"line\">0000660 b6 00 04 b1 00 00 00 01 00 0a 00 00 00 0a 00 02</span><br><span class=\"line\">0000700 00 00 00 09 00 08 00 0a 00 0d 00 00 00 05 01 00</span><br><span class=\"line\">0000720 0e 00 00 00 01 00 0f 00 00 00 02 00 10</span><br><span class=\"line\">0000735</span><br></pre></td></tr></table></figure></div>\n<p>根据 JVM 规范，类文件结构如下</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220304104332861.png\"\n                      alt=\"image-20220304104332861\"\n                ></p>\n<h4 id=\"魔数\"><a class=\"markdownIt-Anchor\" href=\"#魔数\">#</a> 魔数</h4>\n<p>0-3 字节，表示他是否是【class】类型的文件</p>\n<p>0000000 <span style=\"background-color : red\">ca fe ba be</span> 00 00 00 34 00 23 0a 00 06 00 15 09</p>\n<h4 id=\"版本\"><a class=\"markdownIt-Anchor\" href=\"#版本\">#</a> 版本</h4>\n<p>4-7 字节，表示类的版本 00 34 (52) 表示 Java8</p>\n<p>十六进制，34H 等于十进制的 52 ，52 就是 Java8 53 是 Java9</p>\n<p>0000000 ca fe ba be <span style=\"background-color : red\">00 00 00 34</span>  00 23 0a 00 06 00 15 09</p>\n<h3 id=\"类加载阶段\"><a class=\"markdownIt-Anchor\" href=\"#类加载阶段\">#</a> 类加载阶段</h3>\n<h4 id=\"类加载\"><a class=\"markdownIt-Anchor\" href=\"#类加载\">#</a> 类加载</h4>\n<ul>\n<li>将类的字节码载入方法区中，内部采用 C++ 的 instanceKlass 的描述 java 类，他的重要 field 有：\n<ul>\n<li>_java_mirror 即 java 的类镜像，例如对 String 来说，就是 String.class，作用是把 klass 暴露给 java 使用</li>\n<li>_super 即父类</li>\n<li>_fields 即成员变量</li>\n<li>_methods 即方法</li>\n<li>_constants 即常量池</li>\n<li>_class_loader 即类加载器</li>\n<li>_vtable 虚方法表</li>\n<li>_itable 接口方法表</li>\n</ul>\n</li>\n<li>如果这个类还有父类没有加载，先加载父类</li>\n<li>加载和链接可能是交替运行的</li>\n</ul>\n<blockquote>\n<p>注意</p>\n<p>instanceKlass 这样的【元数据】是存储在方法区（1.8 后的元空间内），但_java_mirror 是存储在堆中的</p>\n<p>可以通过 hsdb 查看</p>\n</blockquote>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220305152956911.png\"\n                      alt=\"image-20220305152956911\"\n                ></p>\n<h4 id=\"连接\"><a class=\"markdownIt-Anchor\" href=\"#连接\">#</a> 连接</h4>\n<ol>\n<li>验证：验证类是否符合 JVM 规范，安全性检查\n<ul>\n<li>用 UE 等支持二进制的编辑器修改 HelloWorld.class 的魔数，在控制台运行</li>\n</ul>\n</li>\n<li>准备：为 static 变量分配空间，设置默认值\n<ul>\n<li>static 变量在 JDK7 之前存储于 instanceKlass 末尾，从 JDK7 开始，存储于_java_mirror 末尾</li>\n<li>static 变量分配空间和赋值是两个步骤，分配空间在准备阶段完成，赋值在初始化阶段完成</li>\n<li>如果 static 变量是 final 的基本类型，那么编译阶段值就确定了，赋值在准备阶段完成</li>\n<li>如果 static 变量是 final 的，但属于引用类型，那么赋值也会在初始化阶段完成</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"解析\"><a class=\"markdownIt-Anchor\" href=\"#解析\">#</a> 解析</h4>\n<ul>\n<li>将常量池中的符号引用解析为直接引用</li>\n</ul>\n<h4 id=\"初始化\"><a class=\"markdownIt-Anchor\" href=\"#初始化\">#</a> 初始化</h4>\n<p><cinit>() V 方法</p>\n<p>初始化即调用<cinit>() V 方法，虚拟机会保证这个类的【构造方法】的线程安全</p>\n<h5 id=\"发生的时机\"><a class=\"markdownIt-Anchor\" href=\"#发生的时机\">#</a> 发生的时机</h5>\n<p>概括的说，类初始化是【懒惰的】</p>\n<ul>\n<li>main 方法所在的类，总会被首先初始化</li>\n<li>首次访问这个类的静态变量或静态方法时</li>\n<li>子类初始化，如果父类还没初始化，会引发</li>\n<li>子类访问父类的静态变量，只会触发父类的初始化</li>\n<li>Class.forName</li>\n<li>new 会导致初始化</li>\n</ul>\n<p>不会导致类初始化的情况</p>\n<ul>\n<li>访问类的 static final 静态常量（基本类型和字符串）不会触发初始化</li>\n<li>类对象.class 不会触发初始化</li>\n<li>创建该类的数组不会触发初始化</li>\n<li>类加载器的 loadClass 方法</li>\n<li>Class.forName 的参数 2 为 false 时</li>\n</ul>\n<h3 id=\"类加载器\"><a class=\"markdownIt-Anchor\" href=\"#类加载器\">#</a> 类加载器</h3>\n<p>以 JDK8 为例</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>加载哪的类</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Bootstrap ClassLoader（C++）</td>\n<td>JAVA_HOME/jre/lib</td>\n<td>无法直接访问</td>\n</tr>\n<tr>\n<td>Extension ClassLoader</td>\n<td>JAVA_HOME/jre/lib/ext</td>\n<td>上级为 Bootstrap，显示为 null</td>\n</tr>\n<tr>\n<td>Application ClassLoader</td>\n<td>classpath</td>\n<td>上级为 Extension</td>\n</tr>\n<tr>\n<td>自定义类加载器</td>\n<td>自定义</td>\n<td>上极为 Application</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"启动类加载器\"><a class=\"markdownIt-Anchor\" href=\"#启动类加载器\">#</a> 启动类加载器</h5>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -Xbootclasspath/a:. cn.wenhe9.jvm.t3.load.load5_1</span><br><span class=\"line\">bootstrap F init</span><br><span class=\"line\">null</span><br></pre></td></tr></table></figure></div>\n<ul>\n<li><code>-Xbootclasspath</code>  表示设置 bootclasspath</li>\n<li>其中 /a:. 表示将当前目录追加至 bootclasspath 之后</li>\n<li>可以用这个方法替换核心类\n<ul>\n<li><code>java  -Xbootclasspath:&lt;new bootclaspath&gt;</code></li>\n<li><code>java -Xbootclasspath/a:&lt;追加路径&gt;</code></li>\n<li><code>java -Xbootclasspath/p:&lt;追加路径&gt;</code></li>\n</ul>\n</li>\n</ul>\n<h5 id=\"扩展类加载器\"><a class=\"markdownIt-Anchor\" href=\"#扩展类加载器\">#</a> 扩展类加载器</h5>\n<h6 id=\"双亲委派模式\"><a class=\"markdownIt-Anchor\" href=\"#双亲委派模式\">#</a> 双亲委派模式</h6>\n<p>所谓的双亲委派，就是指调用类加载器的 loadClass 方法时，查找类的规则</p>\n<blockquote>\n<p>注意</p>\n<p>这里的双亲，翻译为上级似乎更为合适，因为他们没有继承关系</p>\n</blockquote>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> Class&lt;?&gt; loadClass(String name, <span class=\"type\">boolean</span> resolve)</span><br><span class=\"line\">    <span class=\"keyword\">throws</span> ClassNotFoundException</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// First, check if the class has already been loaded</span></span><br><span class=\"line\">        Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">long</span> <span class=\"variable\">t0</span> <span class=\"operator\">=</span> System.nanoTime();</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (parent != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    c = parent.loadClass(name, <span class=\"literal\">false</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    c = findBootstrapClassOrNull(name);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// ClassNotFoundException thrown if class not found</span></span><br><span class=\"line\">                <span class=\"comment\">// from the non-null parent class loader</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// If still not found, then invoke findClass in order</span></span><br><span class=\"line\">                <span class=\"comment\">// to find the class.</span></span><br><span class=\"line\">                <span class=\"type\">long</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> System.nanoTime();</span><br><span class=\"line\">                c = findClass(name);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// this is the defining class loader; record the stats</span></span><br><span class=\"line\">                PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class=\"line\">                PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class=\"line\">                PerfCounter.getFindClasses().increment();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (resolve) &#123;</span><br><span class=\"line\">            resolveClass(c);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h5 id=\"线程上下文类加载器\"><a class=\"markdownIt-Anchor\" href=\"#线程上下文类加载器\">#</a> 线程上下文类加载器</h5>\n<p>我们在使用 JDBC 时，都需要加载 Driver 驱动，不知道你注意没有，不写</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class.forName(<span class=\"string\">&quot;com.mysql.jdbc.Driver&quot;</span>)</span><br></pre></td></tr></table></figure></div>\n<p>也是可以让 com.mysql.jdbc.Driver 正确加载的</p>\n<p>让我们追踪一下源码：</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DriverManager</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//注册驱动的集合</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> CopyOnWriteArrayList&lt;DriverInfo&gt; registeredDrivers = <span class=\"keyword\">new</span> <span class=\"title class_\">CopyOnWriteArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//初始化驱动</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        loadInitialDrivers();</span><br><span class=\"line\">        println(<span class=\"string\">&quot;JDBC DriverManager Initialized&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>先不看别的，看看 DriverManager 的类加载器：</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(DriverManager.class.getClassLoader());</span><br></pre></td></tr></table></figure></div>\n<p>打印 null，表示他的类加载器是 Bootstrap ClassLoader，会到 JAVA_HOME/jre/lib 下搜索类，但 JAVA_HOME/jre/lib 下显然没有 mysql-connector-java-5.1.47.jar 包，这样问题来了，在 DriverManager 的静态代码块中，怎么能正确的加载 com.mysql.jdbc.Driver 呢？</p>\n<p>继续看 loadInitialDivers () 方法</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">loadInitialDrivers</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    String drivers;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        drivers = AccessController.doPrivileged(<span class=\"keyword\">new</span> <span class=\"title class_\">PrivilegedAction</span>&lt;String&gt;() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">public</span> String <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> System.getProperty(<span class=\"string\">&quot;jdbc.drivers&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">        drivers = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// If the driver is packaged as a Service Provider, load it.</span></span><br><span class=\"line\">    <span class=\"comment\">// Get all the drivers through the classloader</span></span><br><span class=\"line\">    <span class=\"comment\">// exposed as a java.sql.Driver.class service.</span></span><br><span class=\"line\">    <span class=\"comment\">// ServiceLoader.load() replaces the sun.misc.Providers()</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//1)使用ServiceLoader机制加载驱动，即SPI</span></span><br><span class=\"line\">    AccessController.doPrivileged(<span class=\"keyword\">new</span> <span class=\"title class_\">PrivilegedAction</span>&lt;Void&gt;() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Void <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            ServiceLoader&lt;Driver&gt; loadedDrivers = ServiceLoader.load(Driver.class);</span><br><span class=\"line\">            Iterator&lt;Driver&gt; driversIterator = loadedDrivers.iterator();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/* Load these drivers, so that they can be instantiated.</span></span><br><span class=\"line\"><span class=\"comment\">             * It may be the case that the driver class may not be there</span></span><br><span class=\"line\"><span class=\"comment\">             * i.e. there may be a packaged driver with the service class</span></span><br><span class=\"line\"><span class=\"comment\">             * as implementation of java.sql.Driver but the actual class</span></span><br><span class=\"line\"><span class=\"comment\">             * may be missing. In that case a java.util.ServiceConfigurationError</span></span><br><span class=\"line\"><span class=\"comment\">             * will be thrown at runtime by the VM trying to locate</span></span><br><span class=\"line\"><span class=\"comment\">             * and load the service.</span></span><br><span class=\"line\"><span class=\"comment\">             *</span></span><br><span class=\"line\"><span class=\"comment\">             * Adding a try catch block to catch those runtime errors</span></span><br><span class=\"line\"><span class=\"comment\">             * if driver not available in classpath but it&#x27;s</span></span><br><span class=\"line\"><span class=\"comment\">             * packaged as service and that service is there in classpath.</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span>(driversIterator.hasNext()) &#123;</span><br><span class=\"line\">                    driversIterator.next();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span>(Throwable t) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Do nothing</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    println(<span class=\"string\">&quot;DriverManager.initialize: jdbc.drivers = &quot;</span> + drivers);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//2）使用jdbc.drivers定义的驱动名加载驱动</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (drivers == <span class=\"literal\">null</span> || drivers.equals(<span class=\"string\">&quot;&quot;</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    String[] driversList = drivers.split(<span class=\"string\">&quot;:&quot;</span>);</span><br><span class=\"line\">    println(<span class=\"string\">&quot;number of Drivers:&quot;</span> + driversList.length);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String aDriver : driversList) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            println(<span class=\"string\">&quot;DriverManager.Initialize: loading &quot;</span> + aDriver);</span><br><span class=\"line\">            <span class=\"comment\">//这里的CLassloader.getSystemClassLoader()就是应用程序类加载器</span></span><br><span class=\"line\">            Class.forName(aDriver, <span class=\"literal\">true</span>,</span><br><span class=\"line\">                    ClassLoader.getSystemClassLoader());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">            println(<span class=\"string\">&quot;DriverManager.Initialize: load failed: &quot;</span> + ex);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>因为 JDK 在某些时候需要打破双亲委派的模式，就会调用应用程序类加载器去加载，否则一些类是找不到的</p>\n<p>再看 1)，他就是大名鼎鼎的 Service Provider Interface（SPI）</p>\n<p>约定如下，在 jar 包的 META-INF/services 包下，以接口权限定名为文件，文件内容是实现类内容</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220306085831834.png\"\n                      alt=\"image-20220306085831834\"\n                ></p>\n<p>这样可以使用</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ServiceLoader&lt;接口类型&gt; allImpls = ServiceLoader.load(接口类型.class);</span><br><span class=\"line\">Iterator&lt;接口类型&gt; iter = allImpls.iterator();</span><br><span class=\"line\"><span class=\"keyword\">while</span>(iter.hasNext())&#123;</span><br><span class=\"line\">\titer.hasNext();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>来得到实现类，体现的是【面向接口编程 + 解耦】的思想，在下面的一些框架中运用了此思想：</p>\n<ul>\n<li>\n<p>JDBC</p>\n</li>\n<li>\n<p>Servlet 初始化容器</p>\n</li>\n<li>\n<p>Dubbo （对 SPI 进行了扩展）</p>\n</li>\n</ul>\n<p>接着看 ServiceLoader.load 方法</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;S&gt; ServiceLoader&lt;S&gt; <span class=\"title function_\">load</span><span class=\"params\">(Class&lt;S&gt; service)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取线程上下文类加载器</span></span><br><span class=\"line\">    <span class=\"type\">ClassLoader</span> <span class=\"variable\">cl</span> <span class=\"operator\">=</span> Thread.currentThread().getContextClassLoader();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ServiceLoader.load(service, cl);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>线程上下文类加载是当前线程使用的类加载器，默认就是应用程序类加载器，他内部又是由 Class.forName 调用了线程上下文类加载器完成类加载，具体代码在 ServiceLoader 的内部类 LazyIterator 中：</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> S <span class=\"title function_\">nextService</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!hasNextService())</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NoSuchElementException</span>();</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">cn</span> <span class=\"operator\">=</span> nextName;</span><br><span class=\"line\">            nextName = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            Class&lt;?&gt; c = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                c = Class.forName(cn, <span class=\"literal\">false</span>, loader);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException x) &#123;</span><br><span class=\"line\">                fail(service,</span><br><span class=\"line\">                     <span class=\"string\">&quot;Provider &quot;</span> + cn + <span class=\"string\">&quot; not found&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!service.isAssignableFrom(c)) &#123;</span><br><span class=\"line\">                fail(service,</span><br><span class=\"line\">                     <span class=\"string\">&quot;Provider &quot;</span> + cn  + <span class=\"string\">&quot; not a subtype&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"type\">S</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> service.cast(c.newInstance());</span><br><span class=\"line\">                providers.put(cn, p);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Throwable x) &#123;</span><br><span class=\"line\">                fail(service,</span><br><span class=\"line\">                     <span class=\"string\">&quot;Provider &quot;</span> + cn + <span class=\"string\">&quot; could not be instantiated&quot;</span>,</span><br><span class=\"line\">                     x);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>();          <span class=\"comment\">// This cannot happen</span></span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure></div>\n<h5 id=\"自定义类加载器\"><a class=\"markdownIt-Anchor\" href=\"#自定义类加载器\">#</a> 自定义类加载器</h5>\n<p>问问自己，什么时候需要自定义类加载器</p>\n<ol>\n<li>想加载非 classpath 随意路径中的类文件</li>\n<li>都是通过接口来使用实现，希望解耦，常用在框架设计</li>\n<li>这些类予以隔离，不同应用的同类名都可以加载，不冲突，常见于 tomcat 容器</li>\n</ol>\n<p>步骤：</p>\n<ol>\n<li>继承 classLoader 父类</li>\n<li>要遵从双亲委派的机制，重写 findClass 方法\n<ul>\n<li>注意不是重谢 loadClass 方法，否则不会走双亲委派机制</li>\n</ul>\n</li>\n<li>读取类文件的字节码</li>\n<li>调用父类的 defineClass 方法来加载类</li>\n<li>使用者调用该类加载器的 loadClass 方法</li>\n</ol>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Load7</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ClassNotFoundException &#123;</span><br><span class=\"line\">        <span class=\"type\">MyClassLoader</span> <span class=\"variable\">classLoader</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyClassLoader</span>();</span><br><span class=\"line\">        Class&lt;?&gt; c1 = classLoader.loadClass(<span class=\"string\">&quot;MapImpl1&quot;</span>);</span><br><span class=\"line\">        Class&lt;?&gt; c2 = classLoader.loadClass(<span class=\"string\">&quot;MapImpl1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(c1 == c2); <span class=\"comment\">//true 第一次类加载会放在自定义的类加载器的缓存中，下次在调用在缓存中能找到，就不会重复加载了</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">MyClassLoader</span> <span class=\"variable\">classLoader2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyClassLoader</span>();</span><br><span class=\"line\">        Class&lt;?&gt; c3 = classLoader2.loadClass(<span class=\"string\">&quot;MapImpl1&quot;</span>);</span><br><span class=\"line\">        System.out.println(c1 == c3); <span class=\"comment\">//false 包名类名相同，而且类加载器也是同一个，才能说这两个类是完全一致的</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClassLoader</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ClassLoader</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Class&lt;?&gt; findClass(String name) <span class=\"keyword\">throws</span> ClassNotFoundException &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">path</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;/usr/local/lib&quot;</span> + name + <span class=\"string\">&quot;.class&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">ByteArrayOutputStream</span> <span class=\"variable\">os</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ByteArrayOutputStream</span>();</span><br><span class=\"line\">            Files.copy(Paths.get(path), os);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//得到字节数组</span></span><br><span class=\"line\">            <span class=\"type\">byte</span>[] bytes = os.toByteArray();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//byte[] -&gt; *.class</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> defineClass(name, bytes, <span class=\"number\">0</span>, bytes.length);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassNotFoundException</span>(<span class=\"string\">&quot;类文件未找到&quot;</span>, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"运行期优化\"><a class=\"markdownIt-Anchor\" href=\"#运行期优化\">#</a> 运行期优化</h2>\n<h3 id=\"即时编译\"><a class=\"markdownIt-Anchor\" href=\"#即时编译\">#</a> 即时编译</h3>\n<h4 id=\"分层编译\"><a class=\"markdownIt-Anchor\" href=\"#分层编译\">#</a> 分层编译</h4>\n<p>（TieredCompilation）</p>\n<p>JVM 将执行状态分成了五个层次：</p>\n<ul>\n<li>0 层，解释执行（Interpreter）</li>\n<li>1 层，使用 C1 即时编译器编译执行（不带 profiling）</li>\n<li>2 层，使用 C1 即时编译器编译执行（带基本的 profiling）</li>\n<li>3 层， 使用 C1 即时编译器编译执行（带完全的 profiling）</li>\n<li>4 层，使用 C2 即时编译器编译执行</li>\n</ul>\n<blockquote>\n<p>profiling 是指在运行过程中，收集一些程序执行状态的数据，例如【方法的调用次数】，【循环的会边次数】等</p>\n</blockquote>\n<ul>\n<li>即时编译器（JIT）与解释器的区别\n<ul>\n<li>解释器是将字节码解释为机器码，下次即使遇到相同的字节码，仍会执行重复的解释</li>\n<li>JIT 是将一些字节码编译为机器码，并存入 Code Cache，下次遇到相同的代码，直接执行，无需再编译</li>\n<li>解释器是将字节码解释为针对所有平台都通用的机器码</li>\n<li>JIT 行根据平台类型，生成平台特定的机器码</li>\n</ul>\n</li>\n</ul>\n<p>对于占据大部分的不常用的代码，我们无需耗费时间将其编译成机器码，而是采用解释执行的方试运行；另一方面，对于近战小部分的热点代码，我们则可以将其编译成机器码，以达到理想的运行速度。执行效率上简单比较一下 Interpreter &lt; C1 &lt; C2，总的目标是发现热点代码（hotspot 名称的由来），优化之</p>\n<p>逃逸分析：发现新建的对象是否逃逸，可以使用 <code>-XX:DoEscapeAnalysis</code>  关闭</p>\n<h3 id=\"方法内联\"><a class=\"markdownIt-Anchor\" href=\"#方法内联\">#</a> 方法内联</h3>\n<p>（Inlining）</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">square</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"type\">int</span> i)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i * i;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(square(<span class=\"number\">9</span>));</span><br></pre></td></tr></table></figure></div>\n<p>如果发现 square 是热点方法，并且长度不太长时，会进行内联，所谓的内联就是把方法内代码拷贝、黏贴到调用者的位置</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(<span class=\"number\">9</span> * <span class=\"number\">9</span>);</span><br></pre></td></tr></table></figure></div>\n<p>还能进行常量折叠（constant folding）得到优化</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(<span class=\"number\">81</span>);</span><br></pre></td></tr></table></figure></div>\n<p><code>-XX:+UnlockDiagnosticVMoptions -XX:+PrintInlining</code>  打印针对哪些方法使用了内联</p>\n<p><code>-XX:CompileCommand=donotinline,*JIT2.square</code>  禁止内联，后面是使用通配符禁止哪些方法的内联</p>\n<h3 id=\"字段优化\"><a class=\"markdownIt-Anchor\" href=\"#字段优化\">#</a> 字段优化</h3>\n<p>尽可能使用局部变量而不是成员变量，减少循环时查询成员变量的次数，提高效率</p>\n<h3 id=\"反射优化\"><a class=\"markdownIt-Anchor\" href=\"#反射优化\">#</a> 反射优化</h3>\n<p>默认使用 DelegatingMethodAccessorImpl 调用 NativeMethodAccessorImpl 的 invoke 方法，在调用本地方法 invoke0 进行反射方法调用</p>\n<p>当某一个方法反射调用达到 15 次时，会再 NativeMethodAccessorImpl 的 invoke 方法根据调用方法的信息生成一个继承自 MethodAccessorImpl 的 MethodAccessor，并赋值给 DelegatingMethodAccessorImpl</p>\n<p>当之后的该方法的反射调用触发时，就会调用生成的这个 MethodAccessor，在这个方法的 invoke 中，会直接调用该方法而不用再去调用本地方法</p>\n<h2 id=\"内存模型\"><a class=\"markdownIt-Anchor\" href=\"#内存模型\">#</a> 内存模型</h2>\n<h3 id=\"java内存模型\"><a class=\"markdownIt-Anchor\" href=\"#java内存模型\">#</a> java 内存模型</h3>\n<p>简单地说，JMM 定义了一套在多线程读写共享数据时（成员变量和数组）时，对数据的可见性、有序性和原子性的规则和保障</p>\n<h4 id=\"原子性\"><a class=\"markdownIt-Anchor\" href=\"#原子性\">#</a> 原子性</h4>\n<p>问题提出：两个线程对初始值为 0 的静态变量一个做自增，一个做自减，各做 5000 次，结果是 0 吗？</p>\n<h5 id=\"问题分析\"><a class=\"markdownIt-Anchor\" href=\"#问题分析\">#</a> 问题分析</h5>\n<p>以上的结果可能是正数、负数、零。为什么呢？因为 Java 中对静态变量的自增、自减并不是原子操作</p>\n<p>例如对于 i++ 而言（i 为静态变量），实际会产生的 JVM 字节码指令：</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getstatic\t\ti <span class=\"comment\">//获取静态变量i的值</span></span><br><span class=\"line\">iconst_1\t\t  <span class=\"comment\">//准备常量1</span></span><br><span class=\"line\">iadd\t\t\t  <span class=\"comment\">//自增</span></span><br><span class=\"line\">putstatic\t\ti <span class=\"comment\">//将修改后的值存入静态变量i</span></span><br></pre></td></tr></table></figure></div>\n<p>而对应 i–也是类似</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getstatic\t\ti <span class=\"comment\">//获取静态变量i的值</span></span><br><span class=\"line\">iconst_1\t\t  <span class=\"comment\">//准备常量1</span></span><br><span class=\"line\">isub\t\t\t  <span class=\"comment\">//自减</span></span><br><span class=\"line\">putstatic\t\ti <span class=\"comment\">//将修改后的值存入静态变量i</span></span><br></pre></td></tr></table></figure></div>\n<p>而 Java 的内存模型如下，完成静态变量的自增、自减需要在主存和线程中进行数据交换</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220306143623411.png\"\n                      alt=\"image-20220306143623411\"\n                ></p>\n<p>如果是单线程以上 8 行代码是顺序执行（不会交错），没有问题</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getstatic\t\ti <span class=\"comment\">//获取静态变量i的值</span></span><br><span class=\"line\">iconst_1\t\t  <span class=\"comment\">//准备常量1</span></span><br><span class=\"line\">iadd\t\t\t  <span class=\"comment\">//自增</span></span><br><span class=\"line\">putstatic\t\ti <span class=\"comment\">//将修改后的值存入静态变量i</span></span><br><span class=\"line\">getstatic\t\ti <span class=\"comment\">//获取静态变量i的值</span></span><br><span class=\"line\">iconst_1\t\t  <span class=\"comment\">//准备常量1</span></span><br><span class=\"line\">isub\t\t\t  <span class=\"comment\">//自减</span></span><br><span class=\"line\">putstatic\t\ti <span class=\"comment\">//将修改后的值存入静态变量i</span></span><br></pre></td></tr></table></figure></div>\n<p>但在多线程下这 8 行代码可能交错运行</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220306143959628.png\"\n                      alt=\"image-20220306143959628\"\n                ></p>\n<h5 id=\"解决方法\"><a class=\"markdownIt-Anchor\" href=\"#解决方法\">#</a> 解决方法</h5>\n<p>synchronized (同步关键字)</p>\n<p>语法</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">synchronized</span>(对象)&#123;</span><br><span class=\"line\">    要作为原子操作的代码</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestReflect</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (obj)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; <span class=\"number\">5000</span>; j++) &#123;</span><br><span class=\"line\">                        i++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (obj)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; <span class=\"number\">5000</span>; j++) &#123;</span><br><span class=\"line\">                        i--;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        t1.join();</span><br><span class=\"line\">        t2.join();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h4 id=\"可见性\"><a class=\"markdownIt-Anchor\" href=\"#可见性\">#</a> 可见性</h4>\n<h5 id=\"退不出的循环\"><a class=\"markdownIt-Anchor\" href=\"#退不出的循环\">#</a> 退不出的循环</h5>\n<p>先来看一个现象，main 线程的 run 变量的修改对于 t 线程不可见，导致了 t 线程无法停止</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"variable\">run</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">Thread</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(run)&#123;</span><br><span class=\"line\">            ....</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    t.start();</span><br><span class=\"line\">    </span><br><span class=\"line\">    Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">    run = <span class=\"literal\">false</span>; <span class=\"comment\">//线程t不会如预想的停下来</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>为什么呢？分析一下</p>\n<ol>\n<li>初始状态，t 线程刚刚开始从主内存读取了 run 的值到工作内存\n<ul>\n<li><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220306150058186.png\"\n                      alt=\"image-20220306150058186\"\n                ></li>\n</ul>\n</li>\n<li>因为 t 线程少频繁的从主内存中读取 run 的值，JIT 编辑器会将 run 的值缓存至自己工作内存中的高速缓存中，减少对主存中 run 的访问，提高效率\n<ul>\n<li><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220306150235738.png\"\n                      alt=\"image-20220306150235738\"\n                ></li>\n</ul>\n</li>\n<li>1 秒之后，main 线程修改了 run 的值，并同步至主存，而 t 是从自己工作内存中的高速缓存中读取这个变量的值，结果永远是旧值\n<ul>\n<li><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220306150432081.png\"\n                      alt=\"image-20220306150432081\"\n                ></li>\n</ul>\n</li>\n</ol>\n<h5 id=\"解决办法\"><a class=\"markdownIt-Anchor\" href=\"#解决办法\">#</a> 解决办法</h5>\n<p>volatile（易变关键字）</p>\n<p>他可以用来修饰成员变量和静态成员变量，他可以避免线程从自己的工作内存缓存中查找变量的值，必须到主存中获取他的值，线程操作 volatile 变量都是直接操作内存</p>\n<h5 id=\"可见性-2\"><a class=\"markdownIt-Anchor\" href=\"#可见性-2\">#</a> 可见性</h5>\n<p>前面例子体现的实际就是可见性，他保证的是在多个线程之间，一个线程对 volatile 变量的修改对另一个线程可见，不能保证原子性，仅用在一个写线程，多个读线程的情况</p>\n<blockquote>\n<p>注意</p>\n<p>synchronized 语句块既可以保证代码块的原子性，也同时保证代码内变量的可见性，但缺点是 sychronized 是属于重量级操作，性能相对较低</p>\n<p>如果在前面示例的死循环中加入 System.out.println () 会发现即使不加 volatile 修饰符，线程 t 也能正确看到 run 变量的修改了</p>\n</blockquote>\n<h4 id=\"有序性\"><a class=\"markdownIt-Anchor\" href=\"#有序性\">#</a> 有序性</h4>\n<p>可能出现指令重排，使用 volatile 修饰变量</p>\n<h4 id=\"happens-before\"><a class=\"markdownIt-Anchor\" href=\"#happens-before\">#</a> happens-before</h4>\n<p>happens-before 规定了哪些写操作对其他线程的读操作可见，他是可见性与有序性嗯对一套规则总结</p>\n<ul>\n<li>\n<p>线程解锁 m 之前对变量的写，对于接下来对 m 加锁的其他线程对该变量的读可见</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token class-name\">Object</span> m <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"t1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"t2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">29</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>线程 start 对变量的写，对该线程开始后对该变量的读可见</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"t1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">30</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>线程 t1 打断 t2（interrupt）前对变量的写，对于其他线程得知 t2 被打断后对变量的读可见（通过 t2 的 interrupted () 或 t2.isInterrupted ()）</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoApplicationTests</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isInterrupted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        t2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            t2<span class=\"token punctuation\">.</span><span class=\"token function\">interrupt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>t2<span class=\"token punctuation\">.</span><span class=\"token function\">isInterrupted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">31</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n<p>获取共享变量时，为了保证该变量的可见性，需要使用 volatile 修饰，结合 CAS 和 volatile 可以实现无锁并发，适用于竞争不激烈，多核 CPU 的场景下</p>\n<ul>\n<li>因为没有使用 sychronzied，所以线程不会陷入阻塞，这是效率提升的因素之一</li>\n<li>但如果竞争激烈，可以想到尝试必然频繁发生，反而效率会受影响</li>\n</ul>\n<p>CAS 底层依赖于一个 UnSafe 类来直接调用操作系统底层的 CAS 指令，下面是直接使用 Unsafe 类对象进行线程安全保护的一个例子</p>\n<h4 id=\"乐观锁和悲观锁\"><a class=\"markdownIt-Anchor\" href=\"#乐观锁和悲观锁\">#</a> 乐观锁和悲观锁</h4>\n<ul>\n<li>CAS 是基于乐观锁的思想：最乐观的估计，不怕别的线程来修改共享变量，就算改了也没关系，我吃亏点再重试呗</li>\n<li>synchroized 是基于悲观锁的思想：最悲观的估计，得防着其他线程来修改共享变量，我上了锁你们都别想改，我改完了解开锁，你们才有机会</li>\n</ul>\n<h4 id=\"原子操作类\"><a class=\"markdownIt-Anchor\" href=\"#原子操作类\">#</a> 原子操作类</h4>\n<p>juc（java.util.concurrent）中提供了原子操作类，可以提供线程安全的操作，例如 AtomicInteger、AtomicBoolean 等，他们底层就是采用 CAS 技术 + volatile 实现的</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220306171823369.png\"\n                      alt=\"image-20220306171823369\"\n                ></p>\n<h3 id=\"synchronized优化\"><a class=\"markdownIt-Anchor\" href=\"#synchronized优化\">#</a> synchronized 优化</h3>\n<p>Java HotSpot 虚拟机中，每个对象都有对象头（包括 class 指针和 Mark Word）。Mark Word 平时存储这个对象的哈希吗、分代年龄，当加锁时，这些信息就根据情况被替换为 标记位、线程锁记录指针、重量级锁指针、线程 ID 等内容</p>\n<h4 id=\"轻量级锁\"><a class=\"markdownIt-Anchor\" href=\"#轻量级锁\">#</a> 轻量级锁</h4>\n<p>如果一个对象虽然有多线程访问，但多线程访问的时间是错开的（也就是没有竞争），那么可以使用轻量级锁</p>\n<h4 id=\"锁膨胀\"><a class=\"markdownIt-Anchor\" href=\"#锁膨胀\">#</a> 锁膨胀</h4>\n<p>如果在尝试加轻量级锁的过程中，CAS 操作无法成功，这时一种情况就是有其他线程为此对象加了轻量级锁（有竞争），这时需要进行锁膨胀，将轻量级的锁变为重量级锁</p>\n<h4 id=\"重量锁\"><a class=\"markdownIt-Anchor\" href=\"#重量锁\">#</a> 重量锁</h4>\n<p>重量锁竞争的时候，还可以使用自旋来进行优化，如果当前线程自旋成功（即这时候持锁线程已经退出了同步块，释放了锁），这时当前线程就可以避免阻塞</p>\n<p>在 Java6 之后自旋是自适应的，比如对象刚刚的一次自旋操作成功过，那么认为这次自旋成功的可能性会高，就多自旋几次，反之就少自旋几次甚至不自旋</p>\n<ul>\n<li>自旋会占用 CPU 时间，单核 CPU 自旋就是浪费，多核 CPU 自旋才能发挥优势</li>\n<li>Java 之后不能控制是否开启自旋功能</li>\n</ul>\n<h4 id=\"偏向锁\"><a class=\"markdownIt-Anchor\" href=\"#偏向锁\">#</a> 偏向锁</h4>\n<p>轻量级锁在没有竞争时（就自己这个线程），每次重入仍然需要执行 CAS 操作，Java6 中引入了偏向锁开做进一步优化：只有第一次使用 CAS 将线程 ID 设置到对象的 Mark Word 中头，之后发现这个线程 ID 是自己的就表示没有竞争，不用重新 CAS</p>\n<ul>\n<li>撤销偏向需要将持锁线程升级为轻量级锁，这个过程中所有线程需要暂停（STW）</li>\n<li>访问对象的 hashCode 也会撤销偏向锁</li>\n<li>如果对象虽然被多个线程访问，但没有竞争，这时偏向了线程 T1 的对象仍有机会重新偏向 T2，重偏向会重置对象的 ThreadID</li>\n<li>撤销偏析和重偏向都是批量进行的，以类为单位</li>\n<li>如果撤销偏向到达某个阈值，整个类的所有对象都会变为不可偏向的</li>\n<li>可以主动使用 <code>-XX:-UseBiasedLocking</code>  禁用偏向锁</li>\n</ul>\n<h4 id=\"其他优化\"><a class=\"markdownIt-Anchor\" href=\"#其他优化\">#</a> 其他优化</h4>\n<h5 id=\"减少上锁时间\"><a class=\"markdownIt-Anchor\" href=\"#减少上锁时间\">#</a> 减少上锁时间</h5>\n<p>同步代码块中尽量短</p>\n<h5 id=\"减少锁的粒度\"><a class=\"markdownIt-Anchor\" href=\"#减少锁的粒度\">#</a> 减少锁的粒度</h5>\n<p>将一个锁拆分为多个锁提高并发度</p>\n<h5 id=\"锁粗化\"><a class=\"markdownIt-Anchor\" href=\"#锁粗化\">#</a> 锁粗化</h5>\n<p>多次循环进入同步代码块不如把同步代码块内多次循环</p>\n<p>另外 JVM 可能会做如下优化，把多次 append 的加锁操作粗化为一次（因为我都是对同一个对象加锁，没必要置入多次）</p>\n<h5 id=\"锁消除\"><a class=\"markdownIt-Anchor\" href=\"#锁消除\">#</a> 锁消除</h5>\n<p>JVM 会进行代码的逃逸分析，例如某个加锁对象是方法内局部变量，不会被其他线程锁访问到，这时候就会被即时编译器忽略掉所有同步操作</p>\n<h5 id=\"读写分离\"><a class=\"markdownIt-Anchor\" href=\"#读写分离\">#</a> 读写分离</h5>\n<p>CopyOnWriteArrayList</p>\n<p>CopyOnWri</p>\n",
            "tags": [
                "JVM"
            ]
        },
        {
            "id": "https://wait-you.github.io/2023/06/06/JSR303%E6%95%B0%E6%8D%AE%E6%A0%A1%E9%AA%8C/",
            "url": "https://wait-you.github.io/2023/06/06/JSR303%E6%95%B0%E6%8D%AE%E6%A0%A1%E9%AA%8C/",
            "title": "JSR303数据校验",
            "date_published": "2023-06-06T00:44:31.000Z",
            "content_html": "<h1 id=\"jsr303数据校验\"><a class=\"markdownIt-Anchor\" href=\"#jsr303数据校验\">#</a> JSR303 数据校验</h1>\n<h2 id=\"使用流程\"><a class=\"markdownIt-Anchor\" href=\"#使用流程\">#</a> 使用流程</h2>\n<ol>\n<li>给 Bean 添加校验注解</li>\n<li>在控制层的参数处加一个注解 @Valid 或者 @Validated\n<ul>\n<li>校验错误会有默认的错误提示</li>\n</ul>\n</li>\n<li>给校验的 bean 后缀一个 BindingResult，就可以获取到校验的结果</li>\n<li>统一的异常处理\n<ul>\n<li>去除之前的 bindResult，让异常抛出</li>\n<li>ControllerAdvice，集中处理异常</li>\n<li>ExceptionHandler</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"错误提示\"><a class=\"markdownIt-Anchor\" href=\"#错误提示\">#</a> 错误提示</h2>\n<p>默认的错误提示，是满足需要的，所以需要自定义错误消息的返回</p>\n<p>在每一个注解的内部都有一个 message 属性， 默认错误消息是从 <code>javax.validation.constraints.NotEmpty.message</code>  配置文件中拿取</p>\n<p>可以在注解处，重写 message 自定义错误消息</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 品牌名</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@NotEmpty(message = &quot;不能为空&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String name;</span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220414100742816.png\"\n                      alt=\"image-20220414100742816\"\n                ></p>\n<p>在校验的 bean 后缀一个 BeanResult，并在方法内对校验结果进行判断</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ApiOperation(&quot;保存新的品牌&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/save&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ResultResponse <span class=\"title function_\">saveBrand</span><span class=\"params\">(<span class=\"meta\">@Validated</span> <span class=\"meta\">@RequestBody</span> PmsBrand brand, BindingResult result)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result.hasErrors())&#123;</span><br><span class=\"line\">            Map&lt;String, String&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">            <span class=\"comment\">//1.获取校验的错误结果</span></span><br><span class=\"line\">            result.getFieldErrors().forEach(item -&gt; &#123;</span><br><span class=\"line\">                <span class=\"comment\">//FiledError 获取到错误提示</span></span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> item.getDefaultMessage();</span><br><span class=\"line\">                <span class=\"comment\">//获取错误的属性的名字</span></span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">field</span> <span class=\"operator\">=</span> item.getField();</span><br><span class=\"line\">                map.put(field, message);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ResultResponse.fail().message(<span class=\"string\">&quot;提交的数据不合法&quot;</span>).data(map);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        brandService.save(brand);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ResultResponse.ok();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n<p>查看最的返回结果：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220414115237136.png\"\n                      alt=\"image-20220414115237136\"\n                ></p>\n<h2 id=\"统一异常处理\"><a class=\"markdownIt-Anchor\" href=\"#统一异常处理\">#</a> 统一异常处理</h2>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@RestControllerAdvice</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GlobalException</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler(value = &#123;MethodArgumentNotValidException.class&#125;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ResultResponse <span class=\"title function_\">handlerNotValidException</span><span class=\"params\">(MethodArgumentNotValidException e)</span>&#123;</span><br><span class=\"line\">        log.error(<span class=\"string\">&quot;数据校验出现问题&#123;&#125;，异常类型：&#123;&#125;&quot;</span>, e.getMessage(), e.getClass());</span><br><span class=\"line\">        <span class=\"type\">BindingResult</span> <span class=\"variable\">bindingResult</span> <span class=\"operator\">=</span> e.getBindingResult();</span><br><span class=\"line\">        Map&lt;String, String&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        bindingResult.getFieldErrors().forEach(item -&gt; &#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> item.getDefaultMessage();</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">filed</span> <span class=\"operator\">=</span> item.getField();</span><br><span class=\"line\">            map.put(filed, message);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ResultResponse.build(<span class=\"number\">400</span>, <span class=\"string\">&quot;数据校验出现问题&quot;</span>).data(map);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler(Throwable.class)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ResultResponse <span class=\"title function_\">handlerException</span><span class=\"params\">(Throwable e)</span>&#123;</span><br><span class=\"line\">        log.error(<span class=\"string\">&quot;出现异常&#123;&#125;，异常类型：&#123;&#125;&quot;</span>, e.getMessage(), e.getCause());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ResultResponse.fail();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"关于异常状态码\"><a class=\"markdownIt-Anchor\" href=\"#关于异常状态码\">#</a> 关于异常状态码</h3>\n<ul>\n<li>错误码和错误信息定义类\n<ol>\n<li>错误码定义规则为 5 位数字</li>\n<li>前两位表示业务，最后三位表示错误码。例如 10001，10 通用 001 系统未知错误</li>\n<li>维护错误码后需要维护错误描述，将他们定义为枚举样式</li>\n</ol>\n</li>\n</ul>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Getter</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">ResultCodeEnum</span> &#123;</span><br><span class=\"line\">    SUCCESS(<span class=\"number\">200</span>, <span class=\"string\">&quot;成功&quot;</span>),</span><br><span class=\"line\">    FAIL(<span class=\"number\">201</span>, <span class=\"string\">&quot;失败&quot;</span>),</span><br><span class=\"line\">    UNKNOW_EXCEPTION(<span class=\"number\">10000</span>, <span class=\"string\">&quot;系统未知异常&quot;</span>),</span><br><span class=\"line\">    VALID_EXCEPTION(<span class=\"number\">10001</span>, <span class=\"string\">&quot;参数格式校验失败&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer code;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String message;</span><br><span class=\"line\"></span><br><span class=\"line\">    ResultCodeEnum(Integer code, String message) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.code = code;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.message = message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"分组校验\"><a class=\"markdownIt-Anchor\" href=\"#分组校验\">#</a> 分组校验</h2>\n<p>新增和修改的校验规则不同，采用分组来进行区分</p>\n<p>给校验注解表示什么情况需要进行校验，不指定分组是不会去校验的</p>\n<p>分组以接口的形式</p>\n<p>在控制层声明要校验的分组</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220414144444577.png\"\n                      alt=\"image-20220414144444577\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.wenhe9.gulimall.product.domain;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> cn.wenhe9.common.valid.AddGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> cn.wenhe9.common.valid.UpdateGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.hibernate.validator.constraints.URL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.validation.constraints.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 品牌</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@TableName</span> pms_brand</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@TableName(value =&quot;pms_brand&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PmsBrand</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 品牌id</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@NotNull(message = &quot;修改必须指定id&quot;, groups = &#123;UpdateGroup.class&#125;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Null(message = &quot;新增不能指定id&quot;, groups = &#123;AddGroup.class&#125;)</span></span><br><span class=\"line\">    <span class=\"meta\">@TableId(type = IdType.AUTO)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long brandId;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 品牌名</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@NotEmpty(message = &quot;品牌名必须提交&quot;, groups = &#123;AddGroup.class, UpdateGroup.class&#125;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 品牌logo地址</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@NotEmpty</span></span><br><span class=\"line\">    <span class=\"meta\">@URL(message = &quot;logo必须是一个合法的URL地址&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String logo;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 介绍</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String descript;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 显示状态[0-不显示；1-显示]</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer showStatus;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 检索首字母</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@NotEmpty</span></span><br><span class=\"line\">    <span class=\"meta\">@Pattern(regexp = &quot;^[a-zA-z]$&quot;, message = &quot;检索首字母必须是一个字母&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String firstLetter;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 排序</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@NotNull</span></span><br><span class=\"line\">    <span class=\"meta\">@Min(value = 0, message = &quot;排序必须大于等于0&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer sort;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@TableField(exist = false)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> <span class=\"number\">1L</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ApiOperation(&quot;保存新的品牌&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/save&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ResultResponse <span class=\"title function_\">saveBrand</span><span class=\"params\">(<span class=\"meta\">@Validated(&#123;AddGroup.class&#125;)</span> <span class=\"meta\">@RequestBody</span> PmsBrand brand)</span>&#123;</span><br><span class=\"line\">        brandService.save(brand);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ResultResponse.ok();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"自定义校验\"><a class=\"markdownIt-Anchor\" href=\"#自定义校验\">#</a> 自定义校验</h2>\n<ol>\n<li>编写自定义校验注解</li>\n<li>编写一个自定义的校验注解</li>\n<li>关联自定义的检验器和自定义的检验注解</li>\n</ol>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.wenhe9.common.valid;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.validation.Constraint;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.validation.Payload;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.validation.constraints.NotNull;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Documented;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Repeatable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Retention;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Target;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> java.lang.annotation.ElementType.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> java.lang.annotation.ElementType.TYPE_USE;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> java.lang.annotation.RetentionPolicy.RUNTIME;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> DuJinliang</span></span><br><span class=\"line\"><span class=\"comment\"> * 2022/4/14</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Target(&#123; METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER, TYPE_USE &#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Constraint(validatedBy = &#123; ListValueConstraintValidator.class &#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> ListValue &#123;</span><br><span class=\"line\">    String <span class=\"title function_\">message</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"string\">&quot;&#123;cn.wenhe9.common.valid.ListValue.message&#125;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Class&lt;?&gt;[] groups() <span class=\"keyword\">default</span> &#123; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    Class&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">Payload</span>&gt;[] payload() <span class=\"keyword\">default</span> &#123; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span>[] vals() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.wenhe9.common.valid;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.validation.ConstraintValidator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.validation.ConstraintValidatorContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> DuJinliang</span></span><br><span class=\"line\"><span class=\"comment\"> * 2022/4/14</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ListValueConstraintValidator</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ConstraintValidator</span>&lt;ListValue, Integer&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Set&lt;Integer&gt; set = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//初始化方法</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">initialize</span><span class=\"params\">(ListValue constraintAnnotation)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] vals = constraintAnnotation.vals();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> val : vals) &#123;</span><br><span class=\"line\">            set.add(val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//判断是否校验成功</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value 需要校验的值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> context</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isValid</span><span class=\"params\">(Integer value, ConstraintValidatorContext context)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> set.contains(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<p>ValidationMessages.properties</p>\n<div class=\"highlight-container\" data-rel=\"Properties\"><figure class=\"iseeu highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">cn.wenhe9.common.valid.ListValue.message</span>=<span class=\"string\">必须提交指定的值</span></span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220414151211700.png\"\n                      alt=\"image-20220414151211700\"\n                ></p>\n",
            "tags": [
                "Java"
            ]
        },
        {
            "id": "https://wait-you.github.io/2023/06/06/Java%E9%A1%B9%E7%9B%AE%E9%80%9A%E7%94%A8%E9%85%8D%E7%BD%AE%E5%8F%8A%E5%B7%A5%E5%85%B7%E7%B1%BB/",
            "url": "https://wait-you.github.io/2023/06/06/Java%E9%A1%B9%E7%9B%AE%E9%80%9A%E7%94%A8%E9%85%8D%E7%BD%AE%E5%8F%8A%E5%B7%A5%E5%85%B7%E7%B1%BB/",
            "title": "Java项目通用配置及工具类",
            "date_published": "2023-06-06T00:43:29.000Z",
            "content_html": "<h1 id=\"java项目通用配置及工具类\"><a class=\"markdownIt-Anchor\" href=\"#java项目通用配置及工具类\">#</a> Java 项目通用配置及工具类</h1>\n<h2 id=\"统一的返回结果\"><a class=\"markdownIt-Anchor\" href=\"#统一的返回结果\">#</a> 统一的返回结果</h2>\n<h3 id=\"返回结果类\"><a class=\"markdownIt-Anchor\" href=\"#返回结果类\">#</a> 返回结果类</h3>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Setter</span></span><br><span class=\"line\"><span class=\"meta\">@Getter</span></span><br><span class=\"line\"><span class=\"meta\">@ApiModel(&quot;全局统一返回结果类&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ResultResponse</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 状态码</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Api</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer code;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回状态信息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String message;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回数据</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> T data;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ResultResponse</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> &lt;T&gt; ResultResponse&lt;T&gt; <span class=\"title function_\">build</span><span class=\"params\">(T data)</span> &#123;</span><br><span class=\"line\">        ResultResponse&lt;T&gt; resultResponse = <span class=\"keyword\">new</span> <span class=\"title class_\">ResultResponse</span>&lt;&gt;();</span><br><span class=\"line\">        resultResponse.setData(data);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> resultResponse;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; ResultResponse&lt;T&gt; <span class=\"title function_\">build</span><span class=\"params\">(T data, ResultResponseEnum responseEnum)</span> &#123;</span><br><span class=\"line\">        ResultResponse&lt;T&gt; resultResponse = build(data);</span><br><span class=\"line\">        resultResponse.setCode(responseEnum.getCode());</span><br><span class=\"line\">        resultResponse.setMessage(responseEnum.getMessage());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> resultResponse;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; ResultResponse&lt;T&gt; <span class=\"title function_\">success</span><span class=\"params\">(T data)</span> &#123;</span><br><span class=\"line\">        ResultResponse&lt;T&gt; resultResponse = build(data, ResultResponseEnum.SUCCESS);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> resultResponse;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; ResultResponse&lt;T&gt; <span class=\"title function_\">success</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        ResultResponse&lt;T&gt; resultResponse = build(<span class=\"literal\">null</span>, ResultResponseEnum.SUCCESS);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> resultResponse;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; ResultResponse&lt;T&gt; <span class=\"title function_\">fail</span><span class=\"params\">(T data)</span>&#123;</span><br><span class=\"line\">        ResultResponse&lt;T&gt; resultResponse = build(data, ResultResponseEnum.FAIL);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> resultResponse;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; ResultResponse&lt;T&gt; <span class=\"title function_\">fail</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        ResultResponse&lt;T&gt; resultResponse = build(<span class=\"literal\">null</span>, ResultResponseEnum.FAIL);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> resultResponse;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ResultResponse&lt;T&gt; <span class=\"title function_\">code</span><span class=\"params\">(Integer code)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.code = code;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ResultResponse&lt;T&gt; <span class=\"title function_\">message</span><span class=\"params\">(String message)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.message = message;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"统一的返回状态码和错误信息枚举类根据实际需要补充\"><a class=\"markdownIt-Anchor\" href=\"#统一的返回状态码和错误信息枚举类根据实际需要补充\">#</a> 统一的返回状态码和错误信息枚举类（根据实际需要补充）</h3>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Getter</span></span><br><span class=\"line\"><span class=\"meta\">@ApiModel(&quot;全局统一返回结果类&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">ResultResponseEnum</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    SUCCESS(<span class=\"number\">20000</span>,<span class=\"string\">&quot;成功&quot;</span>),</span><br><span class=\"line\">    </span><br><span class=\"line\">    FAIL(<span class=\"number\">20001</span>, <span class=\"string\">&quot;失败&quot;</span>),</span><br><span class=\"line\"></span><br><span class=\"line\">    SERVICE_ERROR(<span class=\"number\">2012</span>, <span class=\"string\">&quot;服务异常&quot;</span>),</span><br><span class=\"line\"></span><br><span class=\"line\">    DATA_ERROR(<span class=\"number\">204</span>, <span class=\"string\">&quot;数据异常&quot;</span>),</span><br><span class=\"line\"></span><br><span class=\"line\">    ILLEGAL_REQUEST(<span class=\"number\">205</span>, <span class=\"string\">&quot;非法请求&quot;</span>),</span><br><span class=\"line\"></span><br><span class=\"line\">    REPEAT_SUBMIT(<span class=\"number\">206</span>, <span class=\"string\">&quot;重复提交&quot;</span>),</span><br><span class=\"line\"></span><br><span class=\"line\">    LOGIN_AUTH(<span class=\"number\">208</span>, <span class=\"string\">&quot;未登陆&quot;</span>),</span><br><span class=\"line\"></span><br><span class=\"line\">    PERMISSION(<span class=\"number\">209</span>, <span class=\"string\">&quot;没有权限&quot;</span>),</span><br><span class=\"line\"></span><br><span class=\"line\">    PHONE_CODE_ERROR(<span class=\"number\">211</span>, <span class=\"string\">&quot;手机验证码错误&quot;</span>),</span><br><span class=\"line\"></span><br><span class=\"line\">    EXPORT_DATA_ERROR(<span class=\"number\">21002</span>, <span class=\"string\">&quot;导出失败&quot;</span>),</span><br><span class=\"line\">    </span><br><span class=\"line\">    IMPORT_DATA_ERROR(<span class=\"number\">21003</span>, <span class=\"string\">&quot;导入失败&quot;</span>),</span><br><span class=\"line\"></span><br><span class=\"line\">    FILE_UPLOAD_ERROR( <span class=\"number\">21004</span>, <span class=\"string\">&quot;文件上传错误&quot;</span>),</span><br><span class=\"line\">    </span><br><span class=\"line\">    FILE_DELETE_ERROR( <span class=\"number\">21005</span>, <span class=\"string\">&quot;文件刪除错误&quot;</span>),</span><br><span class=\"line\">    </span><br><span class=\"line\">    SIGN_GET_ERROR(<span class=\"number\">21007</span>, <span class=\"string\">&quot;获取签名失败&quot;</span>),</span><br><span class=\"line\">    </span><br><span class=\"line\">    GET_ACCESS_TOKEN_ERROR(<span class=\"number\">21008</span>, <span class=\"string\">&quot;获取accessToken失败&quot;</span>),</span><br><span class=\"line\"></span><br><span class=\"line\">    VIDEO_NOT_FOUND(<span class=\"number\">21011</span>, <span class=\"string\">&quot;获取小节失败&quot;</span>),</span><br><span class=\"line\"></span><br><span class=\"line\">    USER_NOT_EXIST(<span class=\"number\">21012</span>, <span class=\"string\">&quot;用户不存在&quot;</span>),</span><br><span class=\"line\"></span><br><span class=\"line\">    PAY_ERROR(<span class=\"number\">21015</span>, <span class=\"string\">&quot;支付失败&quot;</span>),</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 状态码</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer code;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回状态信息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String message;</span><br><span class=\"line\"></span><br><span class=\"line\">    ResultResponseEnum(Integer code, String message) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.code = code;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.message = message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"全局异常处理\"><a class=\"markdownIt-Anchor\" href=\"#全局异常处理\">#</a> 全局异常处理</h2>\n<h3 id=\"自定义异常类\"><a class=\"markdownIt-Anchor\" href=\"#自定义异常类\">#</a> 自定义异常类</h3>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Getter</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WenheException</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">RuntimeException</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ResultResponse&lt;Void&gt; resultResponse;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">WenheException</span><span class=\"params\">(ResultResponse&lt;Void&gt; resultResponse)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.resultResponse = resultResponse;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">WenheException</span><span class=\"params\">(ResultResponseEnum responseEnum)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.resultResponse = ResultResponse.build(<span class=\"literal\">null</span>, responseEnum);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"统一异常处理类根据实际需要补充其他的异常处理方法\"><a class=\"markdownIt-Anchor\" href=\"#统一异常处理类根据实际需要补充其他的异常处理方法\">#</a> 统一异常处理类（根据实际需要，补充其他的异常处理方法）</h3>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestControllerAdvice</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GlobalExceptionHandler</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 处理自定义异常 WenheException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler(value = &#123;WenheException.class&#125;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ResultResponse&lt;Void&gt; <span class=\"title function_\">handlerMemException</span><span class=\"params\">(WenheException e)</span>&#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">        <span class=\"type\">StackTraceElement</span> <span class=\"variable\">stackTraceElement</span> <span class=\"operator\">=</span> e.getStackTrace()[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"comment\">//打印异常信息</span></span><br><span class=\"line\">        log.error(</span><br><span class=\"line\">                <span class=\"string\">&quot;在&#123;&#125;类的&#123;&#125;方法的第&#123;&#125;行，出现&#123;&#125;异常&quot;</span>,</span><br><span class=\"line\">                stackTraceElement.getClassName(),</span><br><span class=\"line\">                stackTraceElement.getMethodName(),</span><br><span class=\"line\">                stackTraceElement.getLineNumber(),</span><br><span class=\"line\">                e.getResultResponse().getMessage()</span><br><span class=\"line\">        );</span><br><span class=\"line\">        <span class=\"keyword\">return</span> e.getResultResponse();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 处理 throwable 异常</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler(value = &#123;Throwable.class&#125;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ResultResponse <span class=\"title function_\">handlerException</span><span class=\"params\">(Throwable e)</span> &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">        <span class=\"type\">StackTraceElement</span> <span class=\"variable\">stackTraceElement</span> <span class=\"operator\">=</span> e.getStackTrace()[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"comment\">//打印异常信息</span></span><br><span class=\"line\">        log.error(</span><br><span class=\"line\">                <span class=\"string\">&quot;在&#123;&#125;类的&#123;&#125;方法的第&#123;&#125;行，出现&#123;&#125;异常&quot;</span>,</span><br><span class=\"line\">                stackTraceElement.getClassName(),</span><br><span class=\"line\">                stackTraceElement.getMethodName(),</span><br><span class=\"line\">                stackTraceElement.getLineNumber(),</span><br><span class=\"line\">                e.getMessage()</span><br><span class=\"line\">        );</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ResultResponse.fail().message(ResultResponseEnum.SERVICE_ERROR.getMessage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"swagger-接口文档配置\"><a class=\"markdownIt-Anchor\" href=\"#swagger-接口文档配置\">#</a> Swagger 接口文档配置</h2>\n<h3 id=\"swagger配置类通过更改路径过滤规则可以显式不同的接口\"><a class=\"markdownIt-Anchor\" href=\"#swagger配置类通过更改路径过滤规则可以显式不同的接口\">#</a> swagger 配置类（通过更改路径过滤规则可以显式不同的接口）</h3>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableSwagger2</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SwaggerConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Docket <span class=\"title function_\">webApiConfig</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class=\"line\">                .groupName(<span class=\"string\">&quot;wenhe9&quot;</span>)</span><br><span class=\"line\">                .apiInfo(webApiInfo())</span><br><span class=\"line\">                .select()</span><br><span class=\"line\">                <span class=\"comment\">//只显示api路径下的页面</span></span><br><span class=\"line\">                <span class=\"comment\">//.paths(Predicates.and(PathSelectors.regex(&quot;/api/.*&quot;)))</span></span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ApiInfo <span class=\"title function_\">webApiInfo</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ApiInfoBuilder</span>()</span><br><span class=\"line\">                .title(<span class=\"string\">&quot;网站-API文档&quot;</span>)</span><br><span class=\"line\">                .description(<span class=\"string\">&quot;本文档描述了网站微服务接口定义&quot;</span>)</span><br><span class=\"line\">                .version(<span class=\"string\">&quot;1.0&quot;</span>)</span><br><span class=\"line\">                .contact(<span class=\"keyword\">new</span> <span class=\"title class_\">Contact</span>(<span class=\"string\">&quot;wenhe9&quot;</span>, <span class=\"string\">&quot;http://www.wenhe9.cn&quot;</span>, <span class=\"string\">&quot;dujinliang9@163.com&quot;</span>))</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"线程池配置\"><a class=\"markdownIt-Anchor\" href=\"#线程池配置\">#</a> 线程池配置</h2>\n<h3 id=\"线程池所需的属性类通过configurationproperties注解将参数由配置文件注入到属性中\"><a class=\"markdownIt-Anchor\" href=\"#线程池所需的属性类通过configurationproperties注解将参数由配置文件注入到属性中\">#</a> 线程池所需的属性类，通过 <code>ConfigurationProperties</code>  注解将参数由配置文件注入到属性中</h3>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Getter</span></span><br><span class=\"line\"><span class=\"meta\">@Setter</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;wenhe9.thread&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThreadPoolConfigProperties</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 核心线程数量</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer coreSize;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 救急线程数量 = 最大线程数量 - 核心线程数量</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer maxSize;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 救急线程没有任务的存活时间</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer keepAliveTime;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"线程池配置类此处应根据实际业务需要定义多个线程池避免线程饥饿的发生\"><a class=\"markdownIt-Anchor\" href=\"#线程池配置类此处应根据实际业务需要定义多个线程池避免线程饥饿的发生\">#</a> 线程池配置类 (此处应根据实际业务需要，定义多个线程池，避免线程饥饿的发生)</h3>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThreadConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ThreadPoolExecutor <span class=\"title function_\">threadPoolExecutor</span><span class=\"params\">(ThreadPoolConfigProperties configProperties)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>(</span><br><span class=\"line\">                configProperties.getCoreSize(),</span><br><span class=\"line\">                configProperties.getMaxSize(),</span><br><span class=\"line\">                configProperties.getKeepAliveTime(),</span><br><span class=\"line\">                TimeUnit.SECONDS,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedBlockingQueue</span>&lt;&gt;(<span class=\"number\">100000</span>),</span><br><span class=\"line\">                Executors.defaultThreadFactory(),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>.AbortPolicy()</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"mybatisplus配置\"><a class=\"markdownIt-Anchor\" href=\"#mybatisplus配置\">#</a> MybatisPlus 配置</h2>\n<h3 id=\"配置类\"><a class=\"markdownIt-Anchor\" href=\"#配置类\">#</a> 配置类</h3>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@MapperScan(&quot;cn.wenhe9.ggkt.*.mapper&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MybatisPlusConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 新的分页插件,一缓和二缓遵循mybatis的规则,需要设置 MybatisConfiguration#useDeprecatedExecutor = false 避免缓存出现问题(该属性会在旧插件移除后一同移除)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> MybatisPlusInterceptor <span class=\"title function_\">mybatisPlusInterceptor</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MybatisPlusInterceptor</span> <span class=\"variable\">interceptor</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MybatisPlusInterceptor</span>();</span><br><span class=\"line\">        interceptor.addInnerInterceptor(<span class=\"keyword\">new</span> <span class=\"title class_\">PaginationInnerInterceptor</span>(DbType.H2));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> interceptor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ConfigurationCustomizer <span class=\"title function_\">configurationCustomizer</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> configuration -&gt; configuration.setUseDeprecatedExecutor(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"配置文件\"><a class=\"markdownIt-Anchor\" href=\"#配置文件\">#</a> 配置文件</h3>\n<div class=\"highlight-container\" data-rel=\"Yml\"><figure class=\"iseeu highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mybatis-plus:</span></span><br><span class=\"line\">  <span class=\"attr\">configuration:</span></span><br><span class=\"line\">  \t<span class=\"comment\"># mybatis日志</span></span><br><span class=\"line\">    <span class=\"attr\">log-impl:</span> <span class=\"string\">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class=\"line\">    <span class=\"comment\"># 数据库映射实体类下划线变小驼峰</span></span><br><span class=\"line\">    <span class=\"attr\">map-underscore-to-camel-case:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># 指定实体类对应的包名，以首字母小写为别名</span></span><br><span class=\"line\">  <span class=\"attr\">type-aliases-package:</span> <span class=\"string\">cn.wenhe9.ggkt.*.entity</span></span><br><span class=\"line\">  <span class=\"comment\"># mapper文件路径</span></span><br><span class=\"line\">  <span class=\"attr\">mapper-locations:</span> <span class=\"string\">classpath:mapper/*.xml</span></span><br><span class=\"line\">  <span class=\"attr\">global-config:</span></span><br><span class=\"line\">    <span class=\"attr\">db-config:</span></span><br><span class=\"line\">      <span class=\"comment\"># 逻辑删除字段名称</span></span><br><span class=\"line\">      <span class=\"attr\">logic-delete-field:</span> <span class=\"string\">isDelete</span></span><br><span class=\"line\">      <span class=\"comment\"># 逻辑删除 未删除值</span></span><br><span class=\"line\">      <span class=\"attr\">logic-not-delete-value:</span> <span class=\"number\">0</span></span><br><span class=\"line\">      <span class=\"comment\"># 逻辑删除 删除值</span></span><br><span class=\"line\">      <span class=\"attr\">logic-delete-value:</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure></div>\n<h2 id=\"跨域配置\"><a class=\"markdownIt-Anchor\" href=\"#跨域配置\">#</a> 跨域配置</h2>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CorsConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> CorsWebFilter <span class=\"title function_\">corsWebFilter</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">CorsConfiguration</span> <span class=\"variable\">config</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CorsConfiguration</span>();</span><br><span class=\"line\">        config.addAllowedMethod(<span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">        config.addAllowedOrigin(<span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">        config.addAllowedHeader(<span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">UrlBasedCorsConfigurationSource</span> <span class=\"variable\">source</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UrlBasedCorsConfigurationSource</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">PathPatternParser</span>());</span><br><span class=\"line\">        source.registerCorsConfiguration(<span class=\"string\">&quot;/**&quot;</span>, config);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CorsWebFilter</span>(source);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"使用threadlocal存储用户信息\"><a class=\"markdownIt-Anchor\" href=\"#使用threadlocal存储用户信息\">#</a> 使用 ThreadLocal 存储用户信息</h2>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AuthContextHolder</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 后台管理用户id</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ThreadLocal&lt;Long&gt; adminIdTL = <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadLocal</span>&lt;Long&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 会员用户id</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ThreadLocal&lt;Long&gt; userIdTL = <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadLocal</span>&lt;Long&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Long <span class=\"title function_\">getAdminId</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> adminIdTL.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAdminId</span><span class=\"params\">(Long adminId)</span> &#123;</span><br><span class=\"line\">        adminIdTL.set(adminId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Long <span class=\"title function_\">getUserId</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userIdTL.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setUserId</span><span class=\"params\">(Long userId)</span>&#123;</span><br><span class=\"line\">        userIdTL.set(userId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"策略模式-实现对用户的认证\"><a class=\"markdownIt-Anchor\" href=\"#策略模式-实现对用户的认证\">#</a> 策略模式 实现对用户的认证</h2>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">AuthStrategy</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 用户请求验证</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">auth</span><span class=\"params\">(String token)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 默认验证方法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">default</span> Long <span class=\"title function_\">authSSO</span><span class=\"params\">(String token)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!StringUtils.hasText(token)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// token 为空</span></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WenheException</span>(ResultResponseEnum.LOGIN_AUTH);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">Long</span> <span class=\"variable\">userId</span> <span class=\"operator\">=</span> JwtHelper.getUserId(token);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Objects.isNull(userId)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// token 解析失败</span></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WenheException</span>(ResultResponseEnum.LOGIN_AUTH);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 设置 userId 到当前线程</span></span><br><span class=\"line\">        AuthContextHolder.setUserId(userId);</span><br><span class=\"line\">        <span class=\"comment\">// 返回 userId</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> userId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">================================================================</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AdminAuthStrategy</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AuthStrategy</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">auth</span><span class=\"params\">(String token)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!StringUtils.hasText(token)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">GgktException</span>(ResultResponseEnum.LOGIN_AUTH);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!SystemConfigConstant.ADMIN_TOKEN.equals(token)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">GgktException</span>(ResultResponseEnum.LOGIN_AUTH);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        AuthContextHolder.setAdminId(<span class=\"number\">1L</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">================================================================</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ApiAuthStrategy</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AuthStrategy</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">auth</span><span class=\"params\">(String token)</span> &#123;</span><br><span class=\"line\">        authSSO(token);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"spring-cloud-gateway-全局认证过滤器\"><a class=\"markdownIt-Anchor\" href=\"#spring-cloud-gateway-全局认证过滤器\">#</a> Spring Cloud Gateway 全局认证过滤器</h2>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GlobalAuthFilter</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">GlobalFilter</span>, Ordered &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ObjectMapper objectMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, AuthStrategy&gt; authStrategy;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">AntPathMatcher</span> <span class=\"variable\">antPathMatcher</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AntPathMatcher</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Mono&lt;Void&gt; <span class=\"title function_\">filter</span><span class=\"params\">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ServerHttpRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> exchange.getRequest();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (HttpMethod.OPTIONS.equals(request.getMethod())) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> chain.filter(exchange);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">token</span> <span class=\"operator\">=</span> request.getHeaders().getFirst(SystemConfigConstant.HTTP_AUTH_HEADER_NAME);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">path</span> <span class=\"operator\">=</span> request.getURI().getPath();</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;path=&#123;&#125;&quot;</span>, path);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (</span><br><span class=\"line\">                antPathMatcher.match(SystemConfigConstant.LOGIN_URL, path)</span><br><span class=\"line\">                        ||</span><br><span class=\"line\">                antPathMatcher.match(SystemConfigConstant.WECHAT_MESSAGE_URL, path)</span><br><span class=\"line\">        ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> chain.filter(exchange);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">authStrategyName</span> <span class=\"operator\">=</span> path.substring(<span class=\"number\">1</span>, path.indexOf(<span class=\"string\">&quot;/&quot;</span>, <span class=\"number\">2</span>));</span><br><span class=\"line\">        authStrategyName = String.format(<span class=\"string\">&quot;%sAuthStrategy&quot;</span>, authStrategyName);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            authStrategy.get(authStrategyName).auth(token);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> chain.filter(exchange);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (WenheException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> loginAuth(exchange);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Mono&lt;Void&gt; <span class=\"title function_\">out</span><span class=\"params\">(ServerHttpResponse response, ResultResponseEnum resultCodeEnum)</span> <span class=\"keyword\">throws</span> JsonProcessingException &#123;</span><br><span class=\"line\">        ResultResponse&lt;Object&gt; result = ResultResponse.build(<span class=\"literal\">null</span>, resultCodeEnum);</span><br><span class=\"line\">        <span class=\"type\">byte</span>[] bytes = objectMapper.writeValueAsString(result).getBytes(StandardCharsets.UTF_8);</span><br><span class=\"line\">        <span class=\"type\">DataBuffer</span> <span class=\"variable\">buffer</span> <span class=\"operator\">=</span> response.bufferFactory().wrap(bytes);</span><br><span class=\"line\">        <span class=\"comment\">//指定编码，否则在浏览器中会中文乱码</span></span><br><span class=\"line\">        response.getHeaders().add(<span class=\"string\">&quot;Content-Type&quot;</span>, <span class=\"string\">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> response.writeWith(Mono.just(buffer));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Mono&lt;Void&gt; <span class=\"title function_\">loginAuth</span><span class=\"params\">(ServerWebExchange exchange)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">ServerHttpResponse</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> exchange.getResponse();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> out(response, ResultResponseEnum.LOGIN_AUTH);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (JsonProcessingException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WenheException</span>(ResultResponseEnum.FAIL);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;\t</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getOrder</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"mysql-通用基类\"><a class=\"markdownIt-Anchor\" href=\"#mysql-通用基类\">#</a> MySQL 通用基类</h2>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BaseEntity</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(value = &quot;id&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@TableId(type = IdType.AUTO)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(value = &quot;创建时间&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@TableField(&quot;create_time&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date createTime;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(value = &quot;更新时间&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@TableField(&quot;update_time&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date updateTime;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(value = &quot;逻辑删除(1:已删除，0:未删除)&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@JsonIgnore</span></span><br><span class=\"line\">    <span class=\"meta\">@TableLogic</span></span><br><span class=\"line\">    <span class=\"meta\">@TableField(&quot;is_deleted&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer isDeleted;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(value = &quot;其他参数&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@TableField(exist = false)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String,Object&gt; param = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"mongodb-通用基类\"><a class=\"markdownIt-Anchor\" href=\"#mongodb-通用基类\">#</a> MongoDB 通用基类</h2>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BaseMongoEntity</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(value = &quot;id&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(value = &quot;创建时间&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@CreatedDate</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date createTime;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(value = &quot;更新时间&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@LastModifiedDate</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date updateTime;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(value = &quot;其他参数&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Transient</span> <span class=\"comment\">//被该注解标注的，将不会被录入到数据库中。只作为普通的javaBean属性</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String,Object&gt; param = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"httpclient-工具类\"><a class=\"markdownIt-Anchor\" href=\"#httpclient-工具类\">#</a> HttpClient 工具类</h2>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HttpClientUtils</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> String url;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> Map&lt;String, String&gt; param;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"type\">int</span> statusCode;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> String content;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> String xmlParam;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> isHttps;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isHttps</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> isHttps;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setHttps</span><span class=\"params\">(<span class=\"type\">boolean</span> isHttps)</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.isHttps = isHttps;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">public</span> String <span class=\"title function_\">getXmlParam</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> xmlParam;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setXmlParam</span><span class=\"params\">(String xmlParam)</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.xmlParam = xmlParam;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"title function_\">HttpClientUtils</span><span class=\"params\">(String url, Map&lt;String, String&gt; param)</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.url = url;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.param = param;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"title function_\">HttpClientUtils</span><span class=\"params\">(String url)</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.url = url;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setParameter</span><span class=\"params\">(Map&lt;String, String&gt; map)</span> &#123;</span><br><span class=\"line\">      param = map;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addParameter</span><span class=\"params\">(String key, String value)</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (param == <span class=\"literal\">null</span>)</span><br><span class=\"line\">         param = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;String, String&gt;();</span><br><span class=\"line\">      param.put(key, value);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">post</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ClientProtocolException, IOException &#123;</span><br><span class=\"line\">      <span class=\"type\">HttpPost</span> <span class=\"variable\">http</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HttpPost</span>(url);</span><br><span class=\"line\">      setEntity(http);</span><br><span class=\"line\">      execute(http);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">put</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ClientProtocolException, IOException &#123;</span><br><span class=\"line\">      <span class=\"type\">HttpPut</span> <span class=\"variable\">http</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HttpPut</span>(url);</span><br><span class=\"line\">      setEntity(http);</span><br><span class=\"line\">      execute(http);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">get</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ClientProtocolException, IOException &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (param != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">         <span class=\"type\">StringBuilder</span> <span class=\"variable\">url</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>(<span class=\"built_in\">this</span>.url);</span><br><span class=\"line\">         <span class=\"type\">boolean</span> <span class=\"variable\">isFirst</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">         <span class=\"keyword\">for</span> (String key : param.keySet()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isFirst) &#123;</span><br><span class=\"line\">               url.append(<span class=\"string\">&quot;?&quot;</span>);</span><br><span class=\"line\">               isFirst = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">               url.append(<span class=\"string\">&quot;&amp;&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            url.append(key).append(<span class=\"string\">&quot;=&quot;</span>).append(param.get(key));</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"built_in\">this</span>.url = url.toString();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"type\">HttpGet</span> <span class=\"variable\">http</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HttpGet</span>(url);</span><br><span class=\"line\">      execute(http);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * set http post,put param</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setEntity</span><span class=\"params\">(HttpEntityEnclosingRequestBase http)</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (param != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">         List&lt;NameValuePair&gt; nvps = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;NameValuePair&gt;();</span><br><span class=\"line\">         <span class=\"keyword\">for</span> (String key : param.keySet())</span><br><span class=\"line\">            nvps.add(<span class=\"keyword\">new</span> <span class=\"title class_\">BasicNameValuePair</span>(key, param.get(key))); <span class=\"comment\">// 参数</span></span><br><span class=\"line\">         http.setEntity(<span class=\"keyword\">new</span> <span class=\"title class_\">UrlEncodedFormEntity</span>(nvps, Consts.UTF_8)); <span class=\"comment\">// 设置参数</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (xmlParam != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">         http.setEntity(<span class=\"keyword\">new</span> <span class=\"title class_\">StringEntity</span>(xmlParam, Consts.UTF_8));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(HttpUriRequest http)</span> <span class=\"keyword\">throws</span> ClientProtocolException,</span><br><span class=\"line\">         IOException &#123;</span><br><span class=\"line\">      <span class=\"type\">CloseableHttpClient</span> <span class=\"variable\">httpClient</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (isHttps) &#123;</span><br><span class=\"line\">            <span class=\"type\">SSLContext</span> <span class=\"variable\">sslContext</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SSLContextBuilder</span>()</span><br><span class=\"line\">                  .loadTrustMaterial(<span class=\"literal\">null</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">TrustStrategy</span>() &#123;</span><br><span class=\"line\">                     <span class=\"comment\">// 信任所有</span></span><br><span class=\"line\">                     <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isTrusted</span><span class=\"params\">(X509Certificate[] chain,</span></span><br><span class=\"line\"><span class=\"params\">                           String authType)</span></span><br><span class=\"line\">                           <span class=\"keyword\">throws</span> CertificateException &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                     &#125;</span><br><span class=\"line\">                  &#125;).build();</span><br><span class=\"line\">            <span class=\"type\">SSLConnectionSocketFactory</span> <span class=\"variable\">sslsf</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SSLConnectionSocketFactory</span>(</span><br><span class=\"line\">                  sslContext);</span><br><span class=\"line\">            httpClient = HttpClients.custom().setSSLSocketFactory(sslsf)</span><br><span class=\"line\">                  .build();</span><br><span class=\"line\">         &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            httpClient = HttpClients.createDefault();</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"type\">CloseableHttpResponse</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> httpClient.execute(http);</span><br><span class=\"line\">         <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (response != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (response.getStatusLine() != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                  statusCode = response.getStatusLine().getStatusCode();</span><br><span class=\"line\">               <span class=\"type\">HttpEntity</span> <span class=\"variable\">entity</span> <span class=\"operator\">=</span> response.getEntity();</span><br><span class=\"line\">               <span class=\"comment\">// 响应内容</span></span><br><span class=\"line\">               content = EntityUtils.toString(entity, Consts.UTF_8);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">         &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            response.close();</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">         e.printStackTrace();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">         httpClient.close();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getStatusCode</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> statusCode;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">public</span> String <span class=\"title function_\">getContent</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ParseException, IOException &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> content;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"jwttoken-工具类\"><a class=\"markdownIt-Anchor\" href=\"#jwttoken-工具类\">#</a> JwtToken 工具类</h2>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JwtTokenUtil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">CLAIM_KEY_USERNAME</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;sub&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">CLAIM_KEY_CREATED</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;created&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;jwt.secret&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String secret;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;jwt.expiration&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long expiration;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据用户信息生成token</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> userDetails</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">generateToken</span><span class=\"params\">(UserDetails userDetails)</span> &#123;</span><br><span class=\"line\">        Map&lt;String, Object&gt; claims = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        claims.put(CLAIM_KEY_USERNAME, userDetails.getUsername());</span><br><span class=\"line\">        claims.put(CLAIM_KEY_CREATED, <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> generateToken(claims);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 从token中获取用户名</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> token</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getUsernameFromToken</span><span class=\"params\">(String token)</span> &#123;</span><br><span class=\"line\">        String username;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Claims</span> <span class=\"variable\">claims</span> <span class=\"operator\">=</span> getClaimsFromToken(token);</span><br><span class=\"line\">            username = claims.getSubject();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            username = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> username;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 验证token是否有效</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> token</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> userDetails</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">validateToken</span><span class=\"params\">(String token, UserDetails userDetails)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">username</span> <span class=\"operator\">=</span> getUsernameFromToken(token);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userDetails.equals(username) &amp;&amp; !isTokenExpired(token);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 判断token是否可以刷新</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> token</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">canRefresh</span><span class=\"params\">(String token)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> !isTokenExpired(token);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">refreshToken</span><span class=\"params\">(String token)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Claims</span> <span class=\"variable\">claims</span> <span class=\"operator\">=</span> getClaimsFromToken(token);</span><br><span class=\"line\">        claims.put(CLAIM_KEY_CREATED, <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> generateToken(claims);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 判断token是否失效</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> token</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isTokenExpired</span><span class=\"params\">(String token)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Date</span> <span class=\"variable\">expireDate</span> <span class=\"operator\">=</span> getExpiredDateFromToken(token);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> expireDate.before(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 从token中获取过期时间</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> token</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date <span class=\"title function_\">getExpiredDateFromToken</span><span class=\"params\">(String token)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Claims</span> <span class=\"variable\">claims</span> <span class=\"operator\">=</span> getClaimsFromToken(token);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> claims.getExpiration();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 从token中获取荷载</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> token</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Claims <span class=\"title function_\">getClaimsFromToken</span><span class=\"params\">(String token)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Claims</span> <span class=\"variable\">claims</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            claims = Jwts.parser()</span><br><span class=\"line\">                .setSigningKey(secret)</span><br><span class=\"line\">                .parseClaimsJws(token)</span><br><span class=\"line\">                .getBody();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> claims;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据荷载生成JWT TOKEN</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> claims</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">generateToken</span><span class=\"params\">(Map&lt;String, Object&gt; claims)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Jwts.builder()</span><br><span class=\"line\">                .setClaims(claims)</span><br><span class=\"line\">                .setExpiration(generateExpirationDate())</span><br><span class=\"line\">                .signWith(SignatureAlgorithm.ES512, secret)</span><br><span class=\"line\">                .compact();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 生成token失效时间</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date <span class=\"title function_\">generateExpirationDate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(System.currentTimeMillis() + expiration * <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"resttemplate-实现https网络请求\"><a class=\"markdownIt-Anchor\" href=\"#resttemplate-实现https网络请求\">#</a> RestTemplate 实现 https 网络请求</h2>\n<h3 id=\"定义httpclientrequestfactory\"><a class=\"markdownIt-Anchor\" href=\"#定义httpclientrequestfactory\">#</a> 定义 <code>httpClientRequestFactory</code></h3>\n<p>之后要使用 <code>restTimplate</code>  时，只需要将这个类，以构造函数的参数传入即可，需要注意的是， <code>restTimplate</code>  需要手动创建，不能交由 <code>spring</code>  容器管理</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">RestTemplate</span> <span class=\"variable\">restTemplate</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RestTemplate</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">HttpsClientRequestFactory</span>());</span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HttpsClientRequestFactory</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">SimpleClientHttpRequestFactory</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">prepareConnection</span><span class=\"params\">(HttpURLConnection connection, String httpMethod)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!(connection <span class=\"keyword\">instanceof</span> HttpsURLConnection)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;An instance of HttpsURLConnection is expected&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">HttpsURLConnection</span> <span class=\"variable\">httpsConnection</span> <span class=\"operator\">=</span> (HttpsURLConnection) connection;</span><br><span class=\"line\"></span><br><span class=\"line\">            TrustManager[] trustAllCerts = <span class=\"keyword\">new</span> <span class=\"title class_\">TrustManager</span>[]&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">new</span> <span class=\"title class_\">X509TrustManager</span>() &#123;</span><br><span class=\"line\">                        <span class=\"meta\">@Override</span></span><br><span class=\"line\">                        <span class=\"keyword\">public</span> java.security.cert.X509Certificate[] getAcceptedIssuers() &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"meta\">@Override</span></span><br><span class=\"line\">                        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">checkClientTrusted</span><span class=\"params\">(X509Certificate[] certs, String authType)</span> &#123;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"meta\">@Override</span></span><br><span class=\"line\">                        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">checkServerTrusted</span><span class=\"params\">(X509Certificate[] certs, String authType)</span> &#123;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            <span class=\"type\">SSLContext</span> <span class=\"variable\">sslContext</span> <span class=\"operator\">=</span> SSLContext.getInstance(<span class=\"string\">&quot;TLS&quot;</span>);</span><br><span class=\"line\">            sslContext.init(<span class=\"literal\">null</span>, trustAllCerts, <span class=\"keyword\">new</span> <span class=\"title class_\">java</span>.security.SecureRandom());</span><br><span class=\"line\">            httpsConnection.setSSLSocketFactory(<span class=\"keyword\">new</span> <span class=\"title class_\">MyCustomSSLSocketFactory</span>(sslContext.getSocketFactory()));</span><br><span class=\"line\"></span><br><span class=\"line\">            httpsConnection.setHostnameVerifier(<span class=\"keyword\">new</span> <span class=\"title class_\">HostnameVerifier</span>() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">verify</span><span class=\"params\">(String s, SSLSession sslSession)</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">super</span>.prepareConnection(httpsConnection, httpMethod);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * SSLSocketFactory用于创建 SSLSockets</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyCustomSSLSocketFactory</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">SSLSocketFactory</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> SSLSocketFactory delegate;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">MyCustomSSLSocketFactory</span><span class=\"params\">(SSLSocketFactory delegate)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.delegate = delegate;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 返回默认启用的密码套件。除非一个列表启用，对SSL连接的握手会使用这些密码套件。</span></span><br><span class=\"line\">        <span class=\"comment\">// 这些默认的服务的最低质量要求保密保护和服务器身份验证</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> String[] getDefaultCipherSuites() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> delegate.getDefaultCipherSuites();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 返回的密码套件可用于SSL连接启用的名字</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> String[] getSupportedCipherSuites() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> delegate.getSupportedCipherSuites();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Socket <span class=\"title function_\">createSocket</span><span class=\"params\">(<span class=\"keyword\">final</span> Socket socket, <span class=\"keyword\">final</span> String host, <span class=\"keyword\">final</span> <span class=\"type\">int</span> port,</span></span><br><span class=\"line\"><span class=\"params\">                                   <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> autoClose)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">Socket</span> <span class=\"variable\">underlyingSocket</span> <span class=\"operator\">=</span> delegate.createSocket(socket, host, port, autoClose);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> overrideProtocol(underlyingSocket);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Socket <span class=\"title function_\">createSocket</span><span class=\"params\">(<span class=\"keyword\">final</span> String host, <span class=\"keyword\">final</span> <span class=\"type\">int</span> port)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">Socket</span> <span class=\"variable\">underlyingSocket</span> <span class=\"operator\">=</span> delegate.createSocket(host, port);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> overrideProtocol(underlyingSocket);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Socket <span class=\"title function_\">createSocket</span><span class=\"params\">(<span class=\"keyword\">final</span> String host, <span class=\"keyword\">final</span> <span class=\"type\">int</span> port, <span class=\"keyword\">final</span> InetAddress localAddress,</span></span><br><span class=\"line\"><span class=\"params\">                                   <span class=\"keyword\">final</span> <span class=\"type\">int</span> localPort)</span> <span class=\"keyword\">throws</span></span><br><span class=\"line\">                IOException &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">Socket</span> <span class=\"variable\">underlyingSocket</span> <span class=\"operator\">=</span> delegate.createSocket(host, port, localAddress, localPort);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> overrideProtocol(underlyingSocket);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Socket <span class=\"title function_\">createSocket</span><span class=\"params\">(<span class=\"keyword\">final</span> InetAddress host, <span class=\"keyword\">final</span> <span class=\"type\">int</span> port)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">Socket</span> <span class=\"variable\">underlyingSocket</span> <span class=\"operator\">=</span> delegate.createSocket(host, port);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> overrideProtocol(underlyingSocket);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Socket <span class=\"title function_\">createSocket</span><span class=\"params\">(<span class=\"keyword\">final</span> InetAddress host, <span class=\"keyword\">final</span> <span class=\"type\">int</span> port, <span class=\"keyword\">final</span> InetAddress localAddress,</span></span><br><span class=\"line\"><span class=\"params\">                                   <span class=\"keyword\">final</span> <span class=\"type\">int</span> localPort)</span> <span class=\"keyword\">throws</span></span><br><span class=\"line\">                IOException &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">Socket</span> <span class=\"variable\">underlyingSocket</span> <span class=\"operator\">=</span> delegate.createSocket(host, port, localAddress, localPort);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> overrideProtocol(underlyingSocket);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> Socket <span class=\"title function_\">overrideProtocol</span><span class=\"params\">(<span class=\"keyword\">final</span> Socket socket)</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!(socket <span class=\"keyword\">instanceof</span> SSLSocket)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;An instance of SSLSocket is expected&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ((SSLSocket) socket).setEnabledProtocols(<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;<span class=\"string\">&quot;TLSv1&quot;</span>&#125;);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> socket;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"git-提交规范\"><a class=\"markdownIt-Anchor\" href=\"#git-提交规范\">#</a> Git 提交规范</h2>\n<p>摘自 <a class=\"link\"   href=\"https://docs.xxyopen.com/course/novel/12.html#git-%E6%8F%90%E4%BA%A4%E8%A7%84%E7%BA%A6\" >https://docs.xxyopen.com/course/novel/12.html#git - 提交规约 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<h3 id=\"格式\"><a class=\"markdownIt-Anchor\" href=\"#格式\">#</a> 格式</h3>\n<div class=\"highlight-container\" data-rel=\"Text\"><figure class=\"iseeu highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;type&gt;[scope]: &lt;subject&gt;</span><br><span class=\"line\">// 空一行</span><br><span class=\"line\">[body]</span><br><span class=\"line\">// 空一行</span><br><span class=\"line\">[footer]</span><br></pre></td></tr></table></figure></div>\n<p><strong>注：[] 代表可选，&lt;&gt; 代表必选。</strong></p>\n<h3 id=\"type\"><a class=\"markdownIt-Anchor\" href=\"#type\">#</a> type</h3>\n<p>必填，用于指定 commit 的类型。</p>\n<div class=\"highlight-container\" data-rel=\"Text\"><figure class=\"iseeu highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feat：增加新功能</span><br><span class=\"line\">fix：修复 bug</span><br><span class=\"line\">docs：只改动了文档相关的内容</span><br><span class=\"line\">style：格式修改，没有修改代码逻辑，比如格式化、换行等</span><br><span class=\"line\">refactor：重构代码，既没有新增功能，也没有修复 bug，比如提取某段代码为一个方法、重构某个功能等</span><br><span class=\"line\">perf：性能、体验优化等</span><br><span class=\"line\">test：新增 test 用例或修改现有测试用例</span><br><span class=\"line\">build：构造工具的或者外部依赖的改动，比如 maven</span><br><span class=\"line\">ci：与 CI（持续集成服务）有关的改动</span><br><span class=\"line\">chore：不修改 src 或者 test 的其余修改，例如构建过程或辅助工具的变动</span><br><span class=\"line\">revert：执行 git revert 打印的 message</span><br></pre></td></tr></table></figure></div>\n<p><strong>当同时有 feat、fix 和其他类型时，类型取 feat、fix。</strong></p>\n<h3 id=\"scope\"><a class=\"markdownIt-Anchor\" href=\"#scope\">#</a> scope</h3>\n<p>非必填，用于描述改动的范围，格式一般为项目名 / 模块名，如果一次 commit 修改多个模块，建议拆分成多次 commit，以便更好追踪和维护。</p>\n<h3 id=\"subject\"><a class=\"markdownIt-Anchor\" href=\"#subject\">#</a> subject</h3>\n<p>必填，此次提交的简短描述，动词开头，第一人称现在时，比如 add，而不用 added、adds，第一个字母小写，句尾不加句号（.）</p>\n<h3 id=\"body\"><a class=\"markdownIt-Anchor\" href=\"#body\">#</a> body</h3>\n<p>非必填，此次提交的详细描述，主要描述改动之前的情况及修改动机，对于小的修改不作要求，但是重大需求、更新等必须添加 body 来作说明。</p>\n<h3 id=\"footer\"><a class=\"markdownIt-Anchor\" href=\"#footer\">#</a> footer</h3>\n<p>footer 只用于以下两种情况</p>\n<ul>\n<li>break changes</li>\n</ul>\n<p>break changes 指明是否产生了破坏性修改，涉及 break changes 的改动必须指明该项，类似版本升级、接口参数减少、接口删除、迁移等，以 <code>BREAKING CHANGE：</code> 开头，后面是变动的描述、变动的理由以及迁移的方法。</p>\n<ul>\n<li>关闭 issue</li>\n</ul>\n<p>当前提交修改了某个 issue</p>\n",
            "tags": [
                "Java"
            ]
        },
        {
            "id": "https://wait-you.github.io/2023/06/06/JAVA%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/",
            "url": "https://wait-you.github.io/2023/06/06/JAVA%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/",
            "title": "JAVA并发编程",
            "date_published": "2023-06-06T00:42:26.000Z",
            "content_html": "<h1 id=\"java并发编程\"><a class=\"markdownIt-Anchor\" href=\"#java并发编程\">#</a> JAVA 并发编程</h1>\n<h2 id=\"进程与线程\"><a class=\"markdownIt-Anchor\" href=\"#进程与线程\">#</a> 进程与线程</h2>\n<h3 id=\"进程\"><a class=\"markdownIt-Anchor\" href=\"#进程\">#</a> 进程</h3>\n<ul>\n<li>程序由指令和数据组成，但这些指令要运行，数据要读写，就必须将指令加载至 CPU，数据加载至内存。在指令运行过程中还需要用到磁盘、网络等设备。进程就是用来加载指令、管理内存、管理 IO 的</li>\n<li>当一个程序被运行，从磁盘加载这个程序的代码至内存，这时就开启了一个进程。</li>\n<li>进程就可以视为程序的一个实例。大部分程序可以同时运行多个实例进程（例如记事本、画图、浏览器等），也有的程序只能启动一个实例进程（例如网易云音乐、360 安全卫士等）</li>\n</ul>\n<h3 id=\"线程\"><a class=\"markdownIt-Anchor\" href=\"#线程\">#</a> 线程</h3>\n<ul>\n<li>一个进程内可以分为一到多个线程</li>\n<li>一个进程就是一个指令流，将指令流中的一条条指令以一定的顺序交给 CPU 执行</li>\n<li>Java 中，线程作为最小的调度单位，进程作为资源分配的最小单位。在 windows 中进程是不活动的，只是作为线程的容器</li>\n</ul>\n<h3 id=\"二者对比\"><a class=\"markdownIt-Anchor\" href=\"#二者对比\">#</a> 二者对比</h3>\n<ul>\n<li>进程基本上是相互独立的，而线程存在于进程内，是进程的一个子集</li>\n<li>进程拥有共享的资源，如内存空间等，供其内部的线程共享</li>\n<li>进程间通信较为复杂\n<ul>\n<li>同一台计算机的进程通信称为 IPC（Inter-process commucation）</li>\n<li>不同计算机之间的进程通信，需要通过网络，并遵守共同的协议，例如 HTTP</li>\n</ul>\n</li>\n<li>线程通信相对简单，因为他们共享进程内的内存，一个例子是多个线程可以访问同一个共享变量</li>\n<li>线程更轻量，线程上下文切换成本一般要比进程上下文切换低</li>\n</ul>\n<h3 id=\"并行与并发\"><a class=\"markdownIt-Anchor\" href=\"#并行与并发\">#</a> 并行与并发</h3>\n<p>单核 cpu 下，线程实际还是串行执行的。操作系统有一个组件叫做任务调度器，将 cpu 的时间片（windows 下时间片最小约为 15 毫秒）分给不同的线程使用，只是由于 cpu 在线程间（时间片很短）的切换非常快，人类感觉是同时运行的。总结一句话就是： <code>微观串行，宏观并行</code></p>\n<p>一般会将这种线程轮流使用 cpu 的做法称为并发，concurrent</p>\n<p>多核 cpu 下，每个核（core）都可以调度运行线程，这时候线程是可以并行的</p>\n<ul>\n<li>并发（concurrent）是同一时间应对（dealing with）多件事情的能力</li>\n<li>并行（parallel）是同一时间动手做（doing）多件事情的能力</li>\n</ul>\n<h3 id=\"应用\"><a class=\"markdownIt-Anchor\" href=\"#应用\">#</a> 应用</h3>\n<h4 id=\"应用之异步调用案例1\"><a class=\"markdownIt-Anchor\" href=\"#应用之异步调用案例1\">#</a> 应用之异步调用（案例 1）</h4>\n<p>从方法调用的角度来讲，如果</p>\n<ul>\n<li>需要等待结果返回，才能继续运行就是同步</li>\n<li>不需要等待结果返回，就能继续运行的就是异步</li>\n</ul>\n<p>注意：同步在多线程中还有另外一层意思，是让多个线程步调一致</p>\n<h5 id=\"1设计\"><a class=\"markdownIt-Anchor\" href=\"#1设计\">#</a> 1) 设计</h5>\n<p>多线程可以让方法执行变为异步的（即不要干巴巴的等着）比如说读取磁盘文件时，假设读取操作花费了 5 秒钟，如果没有线程调度机制，这 5 秒调用者什么都做不了，其他代码都得暂停…</p>\n<h5 id=\"2结论\"><a class=\"markdownIt-Anchor\" href=\"#2结论\">#</a> 2) 结论</h5>\n<ul>\n<li>比如在项目中，视频文件需要转换格式等操作比较费时，这时开一个新线程处理视频转换，避免阻塞主线程</li>\n<li>tocmat 的异步 servlet 也是类似的目的，让用户线程处理耗时教程的操作，避免阻塞 tomcat 的工作线程</li>\n<li>ui 程序中，开线程进行其他操作，避免阻塞 ui 线程</li>\n</ul>\n<h4 id=\"应用之提高效率案例2\"><a class=\"markdownIt-Anchor\" href=\"#应用之提高效率案例2\">#</a> 应用之提高效率（案例 2）</h4>\n<p>充分利用多核 cpu 的优势，提高运行效率。想想下面的场景，执行三个运算，最后将计算结果汇总</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">计算1 花费 10ms</span><br><span class=\"line\"></span><br><span class=\"line\">计算2 花费 11ms</span><br><span class=\"line\"></span><br><span class=\"line\">计算3 花费 9ms</span><br><span class=\"line\"></span><br><span class=\"line\">汇总需要 1ms</span><br></pre></td></tr></table></figure></div>\n<ul>\n<li>如果是串行执行，那么总共花费的时间是 10 + 11 + 9 + 1 = 31ms</li>\n<li>但如果是四核 cpu，各个核心分别使用线程 1 执行计算 1，线程 2 执行计算 2，线程 3 执行计算 3，那么三个线程是并行的，花费时间只取决于最长的那个线程运行的时间，即 11ms 最后汇总时间只会花费 12ms</li>\n</ul>\n<blockquote>\n<p><strong>注意</strong></p>\n<p>需要在多核 cpu 才能提高效率，单核仍然是轮流运行</p>\n</blockquote>\n<h5 id=\"1设计-2\"><a class=\"markdownIt-Anchor\" href=\"#1设计-2\">#</a> 1) 设计</h5>\n<h5 id=\"2结论-2\"><a class=\"markdownIt-Anchor\" href=\"#2结论-2\">#</a> 2) 结论</h5>\n<ol>\n<li>单核 cpu 下，多线程不能实际提高程序运行效率，只是为了能够在不同的任务之间切换，不同线程轮流使用 cpu，不至于一个线程总占用 cpu，别的线程没法干活</li>\n<li>多核 cpu 可以并行跑多个线程，但能否提高程序运行效率还是要分情况的\n<ul>\n<li>有些任务，经过精心设计，将任务拆分，并行执行，当然可以提高程序的运行效率。但不是所有计算任务都能拆分（参考后文的【阿姆达尔定律】）</li>\n<li>也不是所有任务都需要拆分，任务的目的如果不同，谈拆分和效率没啥意义</li>\n</ul>\n</li>\n<li>IO 操作不占用 cpu，只是我们一般拷贝文件使用的是【阻塞 IO】，这时相当于线程虽然不使用 cpu，但需要一直等待 IO 结束，没能充分利用线程，所有才有后面的【非阻塞 IO】和【异步 IO】优化</li>\n</ol>\n<h2 id=\"java线程\"><a class=\"markdownIt-Anchor\" href=\"#java线程\">#</a> Java 线程</h2>\n<h3 id=\"创建和运行线程\"><a class=\"markdownIt-Anchor\" href=\"#创建和运行线程\">#</a> 创建和运行线程</h3>\n<h4 id=\"方法一直接使用thread\"><a class=\"markdownIt-Anchor\" href=\"#方法一直接使用thread\">#</a> 方法一，直接使用 Thread</h4>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Thread</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>()&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//要执行的任务</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//启动线程</span></span><br><span class=\"line\">t.start();</span><br></pre></td></tr></table></figure></div>\n<p>例如：</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//构造方法的参数是给线程指定的名字，推荐</span></span><br><span class=\"line\"><span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>()&#123;</span><br><span class=\"line\"> \t<span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//要执行的任务</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//启动线程</span></span><br><span class=\"line\">t1.start();</span><br></pre></td></tr></table></figure></div>\n<h4 id=\"方法二使用runnable配合thread\"><a class=\"markdownIt-Anchor\" href=\"#方法二使用runnable配合thread\">#</a> 方法二，使用 Runnable 配合 Thread</h4>\n<p>把【线程】和【任务】（要执行的代码）分开</p>\n<ul>\n<li>Thread 代表线程</li>\n<li>Runnable 可运行的任务（线程要执行的代码）</li>\n</ul>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Runnable</span> <span class=\"variable\">runnable</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>()&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//要执行的任务</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建线程对象</span></span><br><span class=\"line\"><span class=\"comment\">//参数1 是 任务对象 ； 参数2 是 线程名字 </span></span><br><span class=\"line\"><span class=\"type\">Thread</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(runnable, <span class=\"string\">&quot;t2&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//启动线程</span></span><br><span class=\"line\">t.start();</span><br></pre></td></tr></table></figure></div>\n<h4 id=\"原理之thread和runnable的关系\"><a class=\"markdownIt-Anchor\" href=\"#原理之thread和runnable的关系\">#</a> 原理之 Thread 和 Runnable 的关系</h4>\n<p><strong>小结</strong></p>\n<ul>\n<li>方法 1 是把线程和任务合并在了一起，方法 2 是把线程和任务分开了</li>\n<li>用 Runnable 更容易与线程池等高级 API 配合</li>\n<li>用 Runnable 让任务脱离了 Thread 继承体系，更灵活</li>\n</ul>\n<h4 id=\"方法三futuretask配合thread\"><a class=\"markdownIt-Anchor\" href=\"#方法三futuretask配合thread\">#</a> 方法三，FutureTask 配合 Thread</h4>\n<p>FutureTask 能够接收 Callable 类型的参数，用来处理有返回结果的情况</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建任务对象</span></span><br><span class=\"line\">FutureTask&lt;Integer&gt; task3 = <span class=\"keyword\">new</span> <span class=\"title class_\">FutureTask</span>&lt;&gt;(<span class=\"keyword\">new</span> <span class=\"title class_\">Callable</span>&lt;Integer&gt;() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Integer <span class=\"title function_\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">100</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">task3 = <span class=\"keyword\">new</span> <span class=\"title class_\">FutureTask</span>&lt;Integer&gt;(() -&gt; &#123;</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">100</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//参数1 是 任务对象； 参数2 是 线程名字</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(task3, <span class=\"string\">&quot;t3&quot;</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//主线程阻塞，同步等待task执行完毕的结果</span></span><br><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> task3.get();</span><br><span class=\"line\">log.info(<span class=\"string\">&quot;结果是:&#123;&#125;&quot;</span>, result);</span><br></pre></td></tr></table></figure></div>\n<p>​</p>\n<h3 id=\"查看进程的方法\"><a class=\"markdownIt-Anchor\" href=\"#查看进程的方法\">#</a> 查看进程的方法</h3>\n<h4 id=\"windows\"><a class=\"markdownIt-Anchor\" href=\"#windows\">#</a> windows</h4>\n<ul>\n<li>任务管理器可以查看进程数和线程数，也可以用来杀死进程</li>\n<li>tasklist 查看进程</li>\n<li>taskkill 杀死进程</li>\n</ul>\n<h4 id=\"linux\"><a class=\"markdownIt-Anchor\" href=\"#linux\">#</a> linux</h4>\n<ul>\n<li>ps -ef 查看所有进程</li>\n<li>ps -fT -p <pid>查看某个进程（PID）的所有线程</li>\n<li>kill 杀死进程</li>\n<li>top 按大写 H 切换是否显示进程</li>\n<li>top -H -p <PID> 查看某个进程 （PID）的所有线程</li>\n</ul>\n<h4 id=\"java\"><a class=\"markdownIt-Anchor\" href=\"#java\">#</a> Java</h4>\n<ul>\n<li>jps 查看所有的 Java 进程</li>\n<li>jstack <PID> 查看某个 Java 进程（PID）的所有线程状态</li>\n<li>jconsole 来查看某个 Java 进程中线程的运行情况（图形界面）</li>\n</ul>\n<p>jconsole 远程监控配置</p>\n<ul>\n<li>\n<p>需要以如下方式运行你的 Java 类</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">java</span> <span class=\"token parameter variable\">-Djava.rmi.server.hostname</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span>ip地址<span class=\"token variable\">`</span></span> <span class=\"token parameter variable\">-Dcom.sun.management.jmxremote</span> <span class=\"token parameter variable\">-Dcom.sun.management.jmxremote.port</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span>连接端口<span class=\"token variable\">`</span></span> <span class=\"token parameter variable\">-Dcom.sun.management.jmxremote.sll</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span>是否安全连接<span class=\"token variable\">`</span></span> <span class=\"token parameter variable\">-Dcom.sun.management.jmxremote.authenticate</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span>是否认证<span class=\"token variable\">`</span></span> java类</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>--code￼5--<span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>可以用 wait 或条件变量达到类似的效果</p>\n</li>\n<li>\n<p>不同的是，后两种条件都需要加锁，并且需要相应的唤醒操作，一般适用于要进行同步的场景</p>\n</li>\n<li>\n<p>sleep 适用于无锁 的同步的场景</p>\n</li>\n</ul>\n<h4 id=\"两阶段终止模式\"><a class=\"markdownIt-Anchor\" href=\"#两阶段终止模式\">#</a> 两阶段终止模式</h4>\n<p>Two Phase Termination</p>\n<p>在一个线程 T1 中如何 “优雅” 终止线程 T2？这里的【优雅】指的是给 T2 一个料理后事得到机会</p>\n<h6 id=\"1错误思路\"><a class=\"markdownIt-Anchor\" href=\"#1错误思路\">#</a> 1. 错误思路</h6>\n<ul>\n<li>使用线程对象的 stop () 方法终止线程\n<ul>\n<li>stop 方法会真正杀死线程，如果这时对线程锁住了共享资源，那么当他被杀死后就再也没有机会释放锁，其他线程将永远无法获取锁</li>\n</ul>\n</li>\n<li>使用 System.exit (int) 方法停止线程\n<ul>\n<li>目的仅是停止一个线程，但这种做法会让整个程序都停止</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"2两阶段终止模式\"><a class=\"markdownIt-Anchor\" href=\"#2两阶段终止模式\">#</a> 2. 两阶段终止模式</h6>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220310201758451.png\"\n                      alt=\"image-20220310201758451\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TwoPhaseTermination</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Thread monitor;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">Logger</span> <span class=\"variable\">logger</span> <span class=\"operator\">=</span> Logger.getLogger(<span class=\"string\">&quot;c.TwoPhaseTermination&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 启动监控线程</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">start</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        monitor = <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">                <span class=\"type\">Thread</span> <span class=\"variable\">current</span> <span class=\"operator\">=</span> Thread.currentThread();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (current.isInterrupted())&#123;</span><br><span class=\"line\">                    logger.log(Level.INFO, <span class=\"string\">&quot;料理后事&quot;</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">1000</span>); <span class=\"comment\">//情况1</span></span><br><span class=\"line\">                    logger.log(Level.INFO, <span class=\"string\">&quot;执行监控记录&quot;</span>); <span class=\"comment\">//情况2</span></span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                    <span class=\"comment\">//重新设置打断标记</span></span><br><span class=\"line\">                    current.interrupt();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        monitor.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 停止监控线程</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">stop</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        monitor.interrupt();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"主线程与守护线程\"><a class=\"markdownIt-Anchor\" href=\"#主线程与守护线程\">#</a> 主线程与守护线程</h3>\n<p>默认情况下，Java 进程需要等待所有线程都运行结束，才会结束，有一种特殊的线程叫做守护线程（通过 setDdaemon (true) 设置），只要其他非守护线程运行结束了，即使守护线程的代码没有执行完，也会强制结束</p>\n<blockquote>\n<p>注意：</p>\n<ul>\n<li>垃圾回收器就是一种守护线程</li>\n<li>Tomcat 中的 Acceptor 和 Poller 线程都是守护线程，所以 Tomcat 接收到 shutdown 命令后，不会等待他们处理完当前请求</li>\n</ul>\n</blockquote>\n<h3 id=\"五种状态\"><a class=\"markdownIt-Anchor\" href=\"#五种状态\">#</a> 五种状态</h3>\n<p>这是从操作系统的层面来描述的</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220310220616173.png\"\n                      alt=\"image-20220310220616173\"\n                ></p>\n<ul>\n<li>【初始状态】仅是语言层面创建了线程对象，还未与操作系统线程关联</li>\n<li>【可运行状态】（就绪状态）指该线程已经被创建（与操作系统线程关联），可以由 CPU 调度执行</li>\n<li>【运行状态】指获取了 CPU 时间片运行中的状态\n<ul>\n<li>当 CPU 时间片用完，会从【运行状态】转换至【可运行状态】，会导致线程上下文切换</li>\n</ul>\n</li>\n<li>【阻塞状态】\n<ul>\n<li>如果调用了阻塞 API，如 BIO 读写文件，这时线程实际不会用到 CPU，会导致线程上下文切换，进入【阻塞状态】</li>\n<li>带 BIO 操作完毕，会由操作系统唤醒阻塞的线程，转换至【可运行状态】</li>\n<li>与【可运行状态】的区别是，对【阻塞状态】的线程来说只要他们一直不唤醒，调度器就一直不会考虑调度他们</li>\n</ul>\n</li>\n<li>【终止状态】\n<ul>\n<li>表示线程已经执行完毕，生命周期已经结束，不会再转换为其他状态</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"六种状态\"><a class=\"markdownIt-Anchor\" href=\"#六种状态\">#</a> 六种状态</h3>\n<p>这是从 Java API 层面来描述的</p>\n<p>根据 Thread.State 枚举，分为六种状态</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20220310221423039.png\"\n                      alt=\"image-20220310221423039\"\n                ></p>\n<ul>\n<li>NEW 线程刚刚被创建，但是还没有调用 start () 方法</li>\n<li>RUNNABLE 当调用了 start () 方法之后，注意，Java API 层面的 RUNNABLE 状态涵盖了操作系统层面的【可运行状态】、【运行状态】、【阻塞状态】（由于 BIO 导致的线程阻塞，在 Java 里面无法区分，仍然认为是可运行的）</li>\n<li>BLOCKED、WAITING (join)、TIMED_WAITING (sleep) 都是 JAVA API 对【阻塞状态】的细分</li>\n<li>TERMINATED 当线程代码运行结束</li>\n</ul>\n<h3 id=\"共享模型之管程\"><a class=\"markdownIt-Anchor\" href=\"#共享模型之管程\">#</a> 共享模型之管程</h3>\n<ul>\n<li>共享问题</li>\n<li>sychronized</li>\n<li>线程安全分析</li>\n<li>Monitor</li>\n<li>wait/notify</li>\n<li>线程状态转换</li>\n<li>活跃性</li>\n<li>Lock</li>\n</ul>\n<h4 id=\"临界区-critical-section\"><a class=\"markdownIt-Anchor\" href=\"#临界区-critical-section\">#</a> 临界区 Critical Section</h4>\n<ul>\n<li>一个程序运行多个线程本身是没有问题的</li>\n<li>问题出现在多个线程访问<strong>共享资源</strong>\n<ul>\n<li>多个线程读<strong>共享资源</strong>其实也没有问题</li>\n<li>在多个线程对共享资源读写操作时发生指令交错，就会出现问题</li>\n</ul>\n</li>\n<li>一段代码内如果存在对<strong>共享资源</strong>的多个线程读写操作，就称这段代码为临界区</li>\n</ul>\n<h4 id=\"synchronized-解决方案\"><a class=\"markdownIt-Anchor\" href=\"#synchronized-解决方案\">#</a> synchronized 解决方案</h4>\n<h5 id=\"应用之互斥\"><a class=\"markdownIt-Anchor\" href=\"#应用之互斥\">#</a> <strong>应用之互斥</strong></h5>\n<p>为了避免临界区的竞态条件发生，有多种手段可以达到目的</p>\n<ul>\n<li>阻塞式的解决方案：synchronized、Lock</li>\n<li>非阻塞式的解决方案：原子变量</li>\n</ul>\n<p>本次使用阻塞式的方案：synchronized，来解决上述方案，即俗称的【对象锁】，它采用互斥的方式让同一时刻至多有一个线程能持有【对象锁】</p>\n<p>synchronized</p>\n<p>语法</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">synchronized</span>(对象)&#123; <span class=\"comment\">//线程1， 线程2（blocked）</span></span><br><span class=\"line\">    临界区</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">counter</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"type\">Object</span> <span class=\"variable\">lock</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Objcect</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span>(lock)&#123;</span><br><span class=\"line\">                counter++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;, <span class=\"string\">&quot;t1&quot;</span>).start();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">Thread</span> <span class=\"variable\">t2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span>(lock)&#123;</span><br><span class=\"line\">                counter--</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;, <span class=\"string\">&quot;t2&quot;</span>).start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h4 id=\"方法上的synchronized\"><a class=\"markdownIt-Anchor\" href=\"#方法上的synchronized\">#</a> 方法上的 synchronized</h4>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//等价于</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span>(<span class=\"built_in\">this</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//等价于</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span>(Test.class)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h4 id=\"变量的线程安全分析\"><a class=\"markdownIt-Anchor\" href=\"#变量的线程安全分析\">#</a> 变量的线程安全分析</h4>\n<p>成员变量和静态变量是否是线程安全的？</p>\n<ul>\n<li>如果他们没有共享，则线程安全</li>\n<li>如果他们被共享了，根据他们的状态是否能够改变，又分两种情况\n<ul>\n<li>如果只有读操作，则线程安全</li>\n<li>如果有读写操作，则这段代码是临界区，则需要考虑线程安全</li>\n</ul>\n</li>\n</ul>\n<p>局部变量是否是线程安全？</p>\n<ul>\n<li>局部变量是线程安全的</li>\n<li>但局部变量引用的对象则未必\n<ul>\n<li>如果该对象没有逃离方法的作用范围，他是线程安全的\n<ul>\n<li>如果该对象逃离方法的作用范围，则需要考虑线程安全</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"常见线程安全类\"><a class=\"markdownIt-Anchor\" href=\"#常见线程安全类\">#</a> 常见线程安全类</h3>\n<ul>\n<li>String</li>\n<li>Integer</li>\n<li>StringBuffer</li>\n<li>Random</li>\n<li>Vector</li>\n<li>HashTable</li>\n<li>java.util.concurrent 的类</li>\n</ul>\n<p>他们每个类的方法是原子性的</p>\n<p>但是多个方法的组合不是原子性的</p>\n",
            "tags": [
                "java"
            ]
        },
        {
            "id": "https://wait-you.github.io/2023/06/06/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/",
            "url": "https://wait-you.github.io/2023/06/06/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/",
            "title": "Git常用命令",
            "date_published": "2023-06-06T00:41:10.000Z",
            "content_html": "<h1 id=\"git常用命令\"><a class=\"markdownIt-Anchor\" href=\"#git常用命令\">#</a> Git 常用命令</h1>\n<h2 id=\"查看版本号\"><a class=\"markdownIt-Anchor\" href=\"#查看版本号\">#</a> 查看版本号</h2>\n<ul>\n<li>git --version</li>\n</ul>\n<h2 id=\"清屏\"><a class=\"markdownIt-Anchor\" href=\"#清屏\">#</a> 清屏</h2>\n<ul>\n<li>clear</li>\n</ul>\n<h2 id=\"设置签名\"><a class=\"markdownIt-Anchor\" href=\"#设置签名\">#</a> 设置签名</h2>\n<ul>\n<li>git config --global <a class=\"link\"   href=\"http://user.name\" >user.name <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a> “dujinliang”</li>\n</ul>\n<h2 id=\"设置邮箱\"><a class=\"markdownIt-Anchor\" href=\"#设置邮箱\">#</a> 设置邮箱</h2>\n<ul>\n<li>git config --global user.email “<a class=\"link\"   href=\"mailto:1162378922@qq.com\" >1162378922@qq.com <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>”</li>\n</ul>\n<h2 id=\"查看设置\"><a class=\"markdownIt-Anchor\" href=\"#查看设置\">#</a> 查看设置</h2>\n<ul>\n<li>git config --global --list</li>\n</ul>\n<h2 id=\"切换目录\"><a class=\"markdownIt-Anchor\" href=\"#切换目录\">#</a> 切换目录</h2>\n<ul>\n<li>cd E:</li>\n</ul>\n<h2 id=\"本地仓库的初始化\"><a class=\"markdownIt-Anchor\" href=\"#本地仓库的初始化\">#</a> 本地仓库的初始化</h2>\n<ul>\n<li>git init</li>\n</ul>\n<h2 id=\"显示文件夹下的文件\"><a class=\"markdownIt-Anchor\" href=\"#显示文件夹下的文件\">#</a> 显示文件夹下的文件</h2>\n<ul>\n<li>ll</li>\n<li>ll -la\n<ul>\n<li>显示隐藏文件</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"将文件提交到暂存区\"><a class=\"markdownIt-Anchor\" href=\"#将文件提交到暂存区\">#</a> 将文件提交到暂存区</h2>\n<ul>\n<li>git add Demo.txt</li>\n</ul>\n<h2 id=\"将暂存区中的内容提交到本地库\"><a class=\"markdownIt-Anchor\" href=\"#将暂存区中的内容提交到本地库\">#</a> 将暂存区中的内容提交到本地库</h2>\n<ul>\n<li>git commit -m “这是我提交的第一个文件” Demo.txt</li>\n</ul>\n<h2 id=\"查看工作区和暂存区的状态\"><a class=\"markdownIt-Anchor\" href=\"#查看工作区和暂存区的状态\">#</a> 查看工作区和暂存区的状态</h2>\n<ul>\n<li>git status</li>\n</ul>\n<h2 id=\"查看提交的历史记录从近到远\"><a class=\"markdownIt-Anchor\" href=\"#查看提交的历史记录从近到远\">#</a> 查看提交的历史记录（从近到远）</h2>\n<ul>\n<li>git log\n<ul>\n<li>到日志过多，会出现分页的效果</li>\n<li>下一页 ： 空格</li>\n<li>上一页 ：b</li>\n<li>到页尾，显示 END</li>\n<li>退出 ：q</li>\n</ul>\n</li>\n<li>git log --pretty=oneline\n<ul>\n<li>在一行中进行展示</li>\n</ul>\n</li>\n<li>git log --oneline\n<ul>\n<li>在一行进行展示，关键字是简写的</li>\n</ul>\n</li>\n<li>git reflog\n<ul>\n<li>在一行进行展示，关键字是简写的，有一个回退步数的显示，HEAD@{数字}，即回到当前这个历史版本需要走多少步</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"版本回退\"><a class=\"markdownIt-Anchor\" href=\"#版本回退\">#</a> 版本回退</h2>\n<ul>\n<li>git reset --hard 索引号\n<ul>\n<li>本地库指针移动的同时，重置暂存区，重置工作区</li>\n</ul>\n</li>\n<li>git reset --mixed 索引号\n<ul>\n<li>本地库的指针移动的同时，重置暂存区，但是工作区不动</li>\n</ul>\n</li>\n<li>git reset --soft\n<ul>\n<li>本地库指针移动的时候，暂存区和工作区都不动</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"删除文件\"><a class=\"markdownIt-Anchor\" href=\"#删除文件\">#</a> 删除文件</h2>\n<ul>\n<li>删除工作区中的文件\n<ul>\n<li>tm  Test.txt</li>\n</ul>\n</li>\n<li>将删除操作同步到暂存区\n<ul>\n<li>git add Test.txt</li>\n</ul>\n</li>\n<li>将删除操作同步到本地库\n<ul>\n<li>git commit -m “删除 Text.txt 文件” Test.txt</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"找回本地库中删除的文件\"><a class=\"markdownIt-Anchor\" href=\"#找回本地库中删除的文件\">#</a> 找回本地库中删除的文件</h2>\n<ul>\n<li>实际上就是将历史版本切换到刚才添加文件的那个版本即可\n<ul>\n<li>git reset --hard 索引号</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"找回暂存区中删除的文件\"><a class=\"markdownIt-Anchor\" href=\"#找回暂存区中删除的文件\">#</a> 找回暂存区中删除的文件</h2>\n<ul>\n<li>删除工作区数据\n<ul>\n<li>rm Test.txt</li>\n</ul>\n</li>\n<li>同步到缓存区\n<ul>\n<li>git add Test.txt</li>\n</ul>\n</li>\n<li>恢复暂存区中的数据\n<ul>\n<li>git reset --hard 索引号</li>\n<li>git reset --hard HEAD</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"比较文件\"><a class=\"markdownIt-Anchor\" href=\"#比较文件\">#</a> 比较文件</h2>\n<ul>\n<li>\n<p>git 是按照行为单位管理数据，所以删除一行，添加一行</p>\n</li>\n<li>\n<p>将工作区中的文件和暂存区中的文件进行比较</p>\n<ul>\n<li>git diff [文件名]</li>\n</ul>\n</li>\n<li>\n<p>多个文件的比对，比较工作区和暂存区中所有的差异</p>\n<ul>\n<li>git diff</li>\n</ul>\n</li>\n<li>\n<p>比较暂存区和工作区中的差别、</p>\n<ul>\n<li>git diff [历史版本] [文件名]</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"分支\"><a class=\"markdownIt-Anchor\" href=\"#分支\">#</a> 分支</h2>\n<ul>\n<li>同时多个分支可以并发开发，互相不耽误，互相不影响，提高开发效率</li>\n<li>如果有一个分支功能开发失败，直接删除这个分支就可以了，不会对其他分支产生任何影响</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210407154218643.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<h2 id=\"查看分支\"><a class=\"markdownIt-Anchor\" href=\"#查看分支\">#</a> 查看分支</h2>\n<ul>\n<li>git branch -v</li>\n</ul>\n<h2 id=\"创建分支\"><a class=\"markdownIt-Anchor\" href=\"#创建分支\">#</a> 创建分支</h2>\n<ul>\n<li>git branch branch01</li>\n<li>你在哪个分支上，是通过 * 来显示的</li>\n<li><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210407154444325.png\"\n                      alt=\"在这里插入图片描述\"\n                ></li>\n</ul>\n<h2 id=\"切换分支\"><a class=\"markdownIt-Anchor\" href=\"#切换分支\">#</a> 切换分支</h2>\n<ul>\n<li>git checkout branch01</li>\n<li><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210407154509695.png\"\n                      alt=\"在这里插入图片描述\"\n                ></li>\n</ul>\n<h2 id=\"合并分支\"><a class=\"markdownIt-Anchor\" href=\"#合并分支\">#</a> 合并分支</h2>\n<ul>\n<li>先切换到主方法中</li>\n<li>git merge branch01\n<ul>\n<li><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210407154531941.png\"\n                      alt=\"在这里插入图片描述\"\n                ></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"查看文件内容\"><a class=\"markdownIt-Anchor\" href=\"#查看文件内容\">#</a> 查看文件内容</h2>\n<ul>\n<li>cat Test5.txt</li>\n<li>出现冲突\n<ul>\n<li>\n<p>在用同一个文件的同一个位置修改</p>\n</li>\n<li>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210407154603510.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n</li>\n<li>\n<p>经过商议，留下想要的</p>\n</li>\n<li>\n<p>将工作区中内容添加到暂存区</p>\n</li>\n<li>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210407154648468.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n</li>\n<li>\n<p>然后进行 commit 操作</p>\n</li>\n<li>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210407154708513.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"查看别名\"><a class=\"markdownIt-Anchor\" href=\"#查看别名\">#</a> 查看别名</h2>\n<ul>\n<li>git remote -v</li>\n</ul>\n<h2 id=\"创建别名\"><a class=\"markdownIt-Anchor\" href=\"#创建别名\">#</a> 创建别名</h2>\n<ul>\n<li>\n<p>git remote add 别名 地址</p>\n<ul>\n<li>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210407154739663.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n</li>\n<li>\n<p>fetch</p>\n<ul>\n<li>获取</li>\n</ul>\n</li>\n<li>\n<p>push</p>\n<ul>\n<li>推送</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"向远程库推送数据\"><a class=\"markdownIt-Anchor\" href=\"#向远程库推送数据\">#</a> 向远程库推送数据</h2>\n<ul>\n<li>git push 远程库别名 要推送的分支\n<ul>\n<li><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210407160838761.png\"\n                      alt=\"在这里插入图片描述\"\n                ></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"从远程库克隆数据\"><a class=\"markdownIt-Anchor\" href=\"#从远程库克隆数据\">#</a> 从远程库克隆数据</h2>\n<ul>\n<li>\n<p>git clone 远程库的地址</p>\n</li>\n<li>\n<p>克隆操作可以帮我们完成</p>\n<ul>\n<li>初始化本地库</li>\n<li>将远程库内容完整的克隆到本地</li>\n<li>替我们创建远程库别名</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"加入团队\"><a class=\"markdownIt-Anchor\" href=\"#加入团队\">#</a> 加入团队</h2>\n<ul>\n<li>可以从 GitHub 中 clone 对方的数据，但无法提交，可由对方向自己发送邀请，复制邀请链接，由被邀请者在浏览器中打开同意即可</li>\n</ul>\n<h2 id=\"拉取操作\"><a class=\"markdownIt-Anchor\" href=\"#拉取操作\">#</a> 拉取操作</h2>\n<ul>\n<li>pull 操作，相当于 fetch + merge</li>\n</ul>\n<h2 id=\"抓取操作\"><a class=\"markdownIt-Anchor\" href=\"#抓取操作\">#</a> 抓取操作</h2>\n<ul>\n<li>\n<p>git fetch origin master</p>\n</li>\n<li>\n<p>在抓取操作执行后，只是将远程库的内容下载到本地，但是工作区中的文件并没有更新，工作区中还是原先的内容</p>\n</li>\n<li>\n<p>抓取后可以去远程库看看内容是否正确</p>\n</li>\n<li>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210407160902432.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n</li>\n<li>\n<p>发现内容都正确，就可以进行合并操作了</p>\n<ul>\n<li>\n<p>合并之前应该将分支切换回来</p>\n</li>\n<li>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210407160924479.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n</li>\n<li>\n<p>进行合并：merge</p>\n</li>\n<li>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210407160942142.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n</li>\n</ul>\n</li>\n<li>\n<p>远程库的拉取可以直接利用 pull 命令来完成</p>\n<ul>\n<li>git pull origin master</li>\n</ul>\n</li>\n</ul>\n<p><strong>区别</strong></p>\n<ul>\n<li>\n<p>fetch  + merge 操作</p>\n<ul>\n<li>为了保险，慎重</li>\n</ul>\n</li>\n<li>\n<p>pull</p>\n<ul>\n<li>代码简单，省事</li>\n</ul>\n</li>\n<li>\n<p>多人共同提交数据时，会出现冲突问题，当一个人提交完成后，另一个人提交时会报错，需要先抓取该数据，对冲突进行处理，再提交，再提交时，git commit “注释信息”, 此处不写文件名</p>\n</li>\n</ul>\n<h2 id=\"跨团队合作\"><a class=\"markdownIt-Anchor\" href=\"#跨团队合作\">#</a> 跨团队合作</h2>\n<ul>\n<li>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://img-blog.csdnimg.cn/2021040716101181.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BlbmFudXQ=,size_16,color_FFFFFF,t_70#pic_center\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n</li>\n<li>\n<p>获取远程库地址</p>\n</li>\n<li>\n<p>进行 fork 操作</p>\n<ul>\n<li>进入账号后，复制地址</li>\n<li>点击 fork 操作</li>\n<li><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210407161030420.png\"\n                      alt=\"在这里插入图片描述\"\n                ></li>\n</ul>\n</li>\n<li>\n<p>克隆操作</p>\n</li>\n<li>\n<p>然后更改数据，添加到暂存区，然后提交到本地库，然后 push 到远程库</p>\n</li>\n<li>\n<p>进行 pull request，等待审核</p>\n</li>\n<li>\n<p>进行审核</p>\n</li>\n<li>\n<p>可以互相留言</p>\n</li>\n<li>\n<p>确定通过后，merge 合并</p>\n</li>\n</ul>\n<h2 id=\"免密操作\"><a class=\"markdownIt-Anchor\" href=\"#免密操作\">#</a> 免密操作</h2>\n<ul>\n<li>\n<p>进入用户主目录中，</p>\n<ul>\n<li>cd ~</li>\n</ul>\n</li>\n<li>\n<p>执行命令，生成一个.ssh 目录</p>\n<ul>\n<li>ssh-keygen -t rsa -C GitHub 邮箱</li>\n<li>C 要大写，邮箱是 GitHub 注册的账号的时候对应的邮箱</li>\n<li>三次回车确认默认值即可</li>\n</ul>\n</li>\n<li>\n<p>发现在.ssh 目录下有两个文件</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210407161051391.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n</li>\n<li>\n<p>打开 id_rad.pub 文件，将里面的内容进行复制操作</p>\n</li>\n<li>\n<p>打开 GitHub 账号，找到 settings，ssh and gpg keys，new ssh keys</p>\n<ul>\n<li>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/20210407161122503.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n</li>\n<li>\n<p>生成密钥以后，就可以正常进行 push 操作了</p>\n<ul>\n<li>对 ssh 远程地址起别名</li>\n<li>展示别名</li>\n<li>添加到暂存区，提交到本地库，然后 push 到远程库（地址用的是 ssh 方式的地址）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"允许不相关历史的合并\"><a class=\"markdownIt-Anchor\" href=\"#允许不相关历史的合并\">#</a> 允许不相关历史的合并</h2>\n<ul>\n<li>\n<p>用于两个仓库有不同的开始点</p>\n</li>\n<li>\n<p>–allow -unrelated-histories</p>\n</li>\n<li>\n<p>git pull 地址 master --allow -unrelated-histories</p>\n<ul>\n<li>i 进入编辑</li>\n<li>ese 退出编辑，：wq 退出</li>\n</ul>\n</li>\n<li>\n<p>push 推送</p>\n<ul>\n<li>git push -u origin master -f</li>\n</ul>\n</li>\n<li>\n<p>这样远程库和本地库就可以交互了</p>\n</li>\n<li>\n<p>一般在开发中，先 pull 操作，再 push 操作，不会直接进行 push 操作</p>\n</li>\n</ul>\n",
            "tags": [
                "git"
            ]
        },
        {
            "id": "https://wait-you.github.io/2023/06/06/ECMAScript6/",
            "url": "https://wait-you.github.io/2023/06/06/ECMAScript6/",
            "title": "ECMAScript6",
            "date_published": "2023-06-06T00:39:51.000Z",
            "content_html": "<h1 id=\"ecmascript6\"><a class=\"markdownIt-Anchor\" href=\"#ecmascript6\">#</a> ECMAScript6</h1>\n<h2 id=\"let和const\"><a class=\"markdownIt-Anchor\" href=\"#let和const\">#</a> let 和 const</h2>\n<ul>\n<li>\n<p>ES6 新增了 <code>let</code>  和 <code>const</code>  来声明变量，主要是解决 <code>var</code>  声明变量所造成的困扰和问题</p>\n<ul>\n<li>\n<p><code>var</code>  不能用于定义常量</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token constant\">PI</span> <span class=\"token operator\">=</span> <span class=\"token number\">3.14</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PI</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token constant\">PI</span> <span class=\"token operator\">=</span> <span class=\"token number\">6.14</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p><code>var</code>  存在变量提升</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> age <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">1</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong> <code>let</code> </strong></p>\n<ul>\n<li>\n<p>不能重复声明变量</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> str1 <span class=\"token operator\">=</span> <span class=\"token string\">'李四'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> str2 <span class=\"token operator\">=</span> <span class=\"token string\">'王五'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">,</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">===</span><span class=\"token operator\">=></span> 报错<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Uncaught SyntaxError<span class=\"token operator\">:</span> Identifier <span class=\"token string\">'str'</span> has already been declared</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">2</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>支持块级作用域</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'张三'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">3</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>注意</p>\n<ul>\n<li>\n<p>let 和 const 声明的变量不会放在 window 上</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"你好\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">loog</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 你好</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">let</span> str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"你好\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//undefined</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">4</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"解构赋值\"><a class=\"markdownIt-Anchor\" href=\"#解构赋值\">#</a> 解构赋值</h2>\n<h3 id=\"用于数组的解构\"><a class=\"markdownIt-Anchor\" href=\"#用于数组的解构\">#</a> 用于数组的解构</h3>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nameArr = [<span class=\"string\">&#x27;嘟嘟&#x27;</span>, <span class=\"string\">&#x27;嘿嘿&#x27;</span>, <span class=\"string\">&#x27;咕咕&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// let name1 = nameArr[0]</span></span><br><span class=\"line\">    <span class=\"comment\">// let name2 = nameArr[1]</span></span><br><span class=\"line\">    <span class=\"comment\">// let name3 = nameArr[2]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> [name1, name2, name3] = nameArr</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name1, name2, name3)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"用于对象的解构\"><a class=\"markdownIt-Anchor\" href=\"#用于对象的解构\">#</a> 用于对象的解构</h3>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123;name, age, gender&#125; = &#123;</span><br><span class=\"line\">        name : <span class=\"string\">&#x27;张三&#x27;</span>,</span><br><span class=\"line\">        age : <span class=\"number\">1</span>,</span><br><span class=\"line\">        gender : <span class=\"string\">&#x27;男&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name, age, gender);</span><br><span class=\"line\">&lt;/script&gt;                   </span><br></pre></td></tr></table></figure></div>\n<h3 id=\"解构重命名\"><a class=\"markdownIt-Anchor\" href=\"#解构重命名\">#</a> 解构重命名</h3>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> age = <span class=\"number\">20</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123;name, <span class=\"attr\">age</span>:lkAge, gender&#125; = &#123;</span><br><span class=\"line\">        name : <span class=\"string\">&#x27;张三&#x27;</span>,</span><br><span class=\"line\">        age : <span class=\"number\">21</span>,</span><br><span class=\"line\">        gender : <span class=\"string\">&#x27;男&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(age);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name, lkAge, gender);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"设置默认值\"><a class=\"markdownIt-Anchor\" href=\"#设置默认值\">#</a> 设置默认值</h3>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123;name, age, sex = <span class=\"string\">&#x27;男&#x27;</span>&#125; = &#123;</span><br><span class=\"line\">        name : <span class=\"string\">&#x27;张三&#x27;</span>,</span><br><span class=\"line\">        age : <span class=\"number\">21</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(sex); <span class=\"comment\">//男</span></span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"省略解构\"><a class=\"markdownIt-Anchor\" href=\"#省略解构\">#</a> 省略解构</h3>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> [, , age] = [<span class=\"string\">&#x27;张三&#x27;</span>, <span class=\"number\">1</span>, <span class=\"string\">&#x27;男&#x27;</span>]</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(age)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"延展操作符\"><a class=\"markdownIt-Anchor\" href=\"#延展操作符\">#</a> 延展操作符</h2>\n<h3 id=\"延展数组\"><a class=\"markdownIt-Anchor\" href=\"#延展数组\">#</a> 延展数组</h3>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr1 = [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>]</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr2 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>([...arr1, ...arr2])</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"延展对象\"><a class=\"markdownIt-Anchor\" href=\"#延展对象\">#</a> 延展对象</h3>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> smallDog = &#123;</span><br><span class=\"line\">        name1 : <span class=\"string\">&#x27;嘟嘟&#x27;</span>,</span><br><span class=\"line\">        age1 : <span class=\"number\">17</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> bigDog = &#123;</span><br><span class=\"line\">        name2 : <span class=\"string\">&#x27;啦啦&#x27;</span>,</span><br><span class=\"line\">        age2 : <span class=\"number\">20</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(&#123;...smallDog, ...bigDog&#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"应用\"><a class=\"markdownIt-Anchor\" href=\"#应用\">#</a> 应用</h3>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">getMinValue</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">min</span>(...<span class=\"variable language_\">arguments</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">getMinValue</span>(<span class=\"number\">3</span>, -<span class=\"number\">10</span>, <span class=\"number\">66</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"字符串操作\"><a class=\"markdownIt-Anchor\" href=\"#字符串操作\">#</a> 字符串操作</h2>\n<h3 id=\"新增字符串方法\"><a class=\"markdownIt-Anchor\" href=\"#新增字符串方法\">#</a> 新增字符串方法</h3>\n<h4 id=\"1startswith\"><a class=\"markdownIt-Anchor\" href=\"#1startswith\">#</a> 1)startsWith()</h4>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> url = <span class=\"string\">&#x27;http://www.baidu.com&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(url.<span class=\"title function_\">startsWith</span>(<span class=\"string\">&#x27;http&#x27;</span>)) <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure></div>\n<h4 id=\"2endswith\"><a class=\"markdownIt-Anchor\" href=\"#2endswith\">#</a> 2)endsWith()</h4>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> url = <span class=\"string\">&#x27;http://www.baidu.com&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(url.<span class=\"title function_\">startsWith</span>(<span class=\"string\">&#x27;com&#x27;</span>)) <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure></div>\n<h4 id=\"3includes\"><a class=\"markdownIt-Anchor\" href=\"#3includes\">#</a> 3)includes()</h4>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> url = <span class=\"string\">&#x27;http://www.baidu.com&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(url.<span class=\"title function_\">startsWith</span>(<span class=\"string\">&#x27;ai&#x27;</span>)) <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure></div>\n<h4 id=\"4repeat\"><a class=\"markdownIt-Anchor\" href=\"#4repeat\">#</a> 4)repeat()</h4>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&#x27;hello world&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">repeat</span>(<span class=\"number\">100</span>))</span><br></pre></td></tr></table></figure></div>\n<h4 id=\"5padstart\"><a class=\"markdownIt-Anchor\" href=\"#5padstart\">#</a> 5)padStart()</h4>\n<p>头部补全</p>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&#x27;11-02&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">padStart</span>(<span class=\"string\">&#x27;10&#x27;</span>, <span class=\"string\">&#x27;2021-MM-DD&#x27;</span>))</span><br></pre></td></tr></table></figure></div>\n<h4 id=\"6padend\"><a class=\"markdownIt-Anchor\" href=\"#6padend\">#</a> 6)padEnd()</h4>\n<p>尾部补全</p>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&#x27;22&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">padEnd</span>(<span class=\"string\">&#x27;10&#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span>)); <span class=\"comment\">//22111111111</span></span><br></pre></td></tr></table></figure></div>\n<h3 id=\"模板字符串\"><a class=\"markdownIt-Anchor\" href=\"#模板字符串\">#</a> 模板字符串</h3>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">&#x27;张三&#x27;</span>, gender = <span class=\"string\">&#x27;男&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">//传统的写法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> result = <span class=\"string\">&#x27;我叫:&#x27;</span> + name + <span class=\"string\">&#x27;,性别:&#x27;</span> + gender;</span><br><span class=\"line\"><span class=\"comment\">//模板字符串的做法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> result2 = <span class=\"string\">&#x27;我叫 $&#123;name&#125;, 性别 : $&#123;gender&#125;&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result2);</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"函数操作\"><a class=\"markdownIt-Anchor\" href=\"#函数操作\">#</a> 函数操作</h2>\n<h3 id=\"设置默认参数\"><a class=\"markdownIt-Anchor\" href=\"#设置默认参数\">#</a> 设置默认参数</h3>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">logPerson</span>(<span class=\"params\">name, sex=<span class=\"string\">&#x27;男&#x27;</span>, age = <span class=\"number\">20</span></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(sex);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(age);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">logPerson</span>();  <span class=\"comment\">// undefined 男 20</span></span><br></pre></td></tr></table></figure></div>\n<h3 id=\"延展参数转化\"><a class=\"markdownIt-Anchor\" href=\"#延展参数转化\">#</a> 延展参数转化</h3>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">logName</span>(<span class=\"params\">arg1, ...arg2</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arg1, arg2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">logName</span>(<span class=\"string\">&#x27;张三&#x27;</span>, <span class=\"string\">&#x27;李四&#x27;</span>, <span class=\"string\">&#x27;王五&#x27;</span>, <span class=\"string\">&#x27;赵六&#x27;</span>);</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"箭头函数\"><a class=\"markdownIt-Anchor\" href=\"#箭头函数\">#</a> 箭头函数</h3>\n<ul>\n<li>\n<p>箭头函数简化了函数的定义方式</p>\n</li>\n<li>\n<p>一般以  <code>=&gt;</code>  操作符左边为输入的参数，而右边则是进行的操作以及返回的值 inputs =&gt; ouput</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token parameter\">val</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">22</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p><code>findIndex</code></p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 找到满足条件的第一个元素并返回他的索引</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> number <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span> <span class=\"token operator\">=></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  value <span class=\"token operator\">===</span> <span class=\"token string\">'李四'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">23</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p><code>map</code></p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 返回匹配结果的数组</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> userArr <span class=\"token operator\">=</span> users<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span>  value<span class=\"token punctuation\">.</span>age <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>userArr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">24</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p><code>filter</code></p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 返回过滤的数组</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> numArrFil <span class=\"token operator\">=</span>  numArr<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> value <span class=\"token operator\">></span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>numArrFil<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">25</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p><code>some</code></p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 判断任意元素是否满足指定条件，返回 true /false</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> numArrSom <span class=\"token operator\">=</span> numArr<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> value <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>numArrSom<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">26</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p><code>Array.of()</code></p>\n<ul>\n<li>\n<p>创建一个具有可变数量参数的新数组实例，而不考虑参数的数量或类型</p>\n</li>\n<li>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//[8]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//[1,2,3]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//[,,,,,,,,,]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//[1,2,3]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">27</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"对象操作\"><a class=\"markdownIt-Anchor\" href=\"#对象操作\">#</a> 对象操作</h2>\n<h3 id=\"属性简写\"><a class=\"markdownIt-Anchor\" href=\"#属性简写\">#</a> 属性简写</h3>\n<ul>\n<li>\n<p>如果对象中属性值和变量名一样，并且属性的值就是变量的值，则简写:</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'小胡'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">let</span> age <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">let</span> dog <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      age</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>dog<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">28</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"对象拷贝\"><a class=\"markdownIt-Anchor\" href=\"#对象拷贝\">#</a> 对象拷贝</h3>\n<h4 id=\"浅拷贝\"><a class=\"markdownIt-Anchor\" href=\"#浅拷贝\">#</a> 浅拷贝</h4>\n<ul>\n<li>\n<p><code>Object.assign()</code></p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token literal-property property\">person</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token literal-property property\">name</span> <span class=\"token operator\">:</span> <span class=\"token string\">'杜金亮'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">let</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token literal-property property\">name</span> <span class=\"token operator\">:</span> <span class=\"token string\">'杨浔'</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> obj1<span class=\"token punctuation\">,</span> obj2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token operator\">...</span>obj1<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>obj2<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">29</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"深拷贝\"><a class=\"markdownIt-Anchor\" href=\"#深拷贝\">#</a> 深拷贝</h4>\n<ul>\n<li>\n<p>使用 <code>JSON.stringify()</code>  转换为字符串，再由 <code>JSON.parse()</code>  转换为对象</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token literal-property property\">person</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token literal-property property\">name</span> <span class=\"token operator\">:</span> <span class=\"token string\">'杜金亮'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">let</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token literal-property property\">name</span> <span class=\"token operator\">:</span> <span class=\"token string\">'杨浔'</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">let</span> obj3 <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token operator\">...</span>obj1<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>obj2<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj3<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">30</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"es6\"><a class=\"markdownIt-Anchor\" href=\"#es6\">#</a> ES6</h4>\n<ul>\n<li>\n<p>class</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">我的名字是 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">, 今年 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">let</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'李四'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    p1<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">31</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"map\"><a class=\"markdownIt-Anchor\" href=\"#map\">#</a> Map</h3>\n<ul>\n<li>\n<p>Map 结构提供了 “值 - 值” 的对应，是一种完善的 hash 结构实现，如果你需要键值对的数据结构，Map 比 Object 更合适，他类似与对象，也是键值对的集合，但是 “键” 的范围不止于字符串，各种类型的值（包括对象）都可以当做键</p>\n</li>\n<li>\n<p>实例属性和方法 size, set, get , has, delete ,clear</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">//1. 创建一个 Map</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">let</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">a</span> <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">b</span> <span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">let</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'zhangsna'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'dsadas'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">[</span>obj1<span class=\"token punctuation\">,</span> <span class=\"token string\">'你好'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">[</span>obj2<span class=\"token punctuation\">,</span> <span class=\"token string\">'我不好'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'23'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">[</span>obj1<span class=\"token punctuation\">,</span> obj2<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">//2.set get</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    map<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sex'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'男'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    map<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "es6"
            ]
        },
        {
            "id": "https://wait-you.github.io/2023/06/06/Docker/",
            "url": "https://wait-you.github.io/2023/06/06/Docker/",
            "title": "Docker",
            "date_published": "2023-06-06T00:37:06.000Z",
            "content_html": "<h1 id=\"docker\"><a class=\"markdownIt-Anchor\" href=\"#docker\">#</a> Docker</h1>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200606203315597.png\"\n                      alt=\"image-20200606203315597\"\n                ></p>\n<h2 id=\"docker概述\"><a class=\"markdownIt-Anchor\" href=\"#docker概述\">#</a> Docker 概述</h2>\n<h3 id=\"docker为什么会出现\"><a class=\"markdownIt-Anchor\" href=\"#docker为什么会出现\">#</a> Docker 为什么会出现</h3>\n<p>一款产品，开发和上线两套环境，应用环境配置费时费力，而且容易出问题</p>\n<p>尤其对于机器学习和深度学习的库更是如此，很可能存在版本问题、底层依赖冲突问题</p>\n<p>所以发布项目时，不只是一套代码过去，而是代码 + 环境整体打包过去</p>\n<p>所谓开发即运维，保证系统稳定性，提高部署效率</p>\n<p>使用 Docker 后的流程：</p>\n<p>开发：建立模型–环境–打包带上环境，即镜像–放到 Docker 仓库</p>\n<p>部署：下载 Docker 中的镜像，直接运行即可</p>\n<p>Docker 的思想来自于集装箱，集装箱，对环境进行隔离</p>\n<p>Docker 通过隔离机制，可以将服务器利用到极致。</p>\n<h3 id=\"docker的历史\"><a class=\"markdownIt-Anchor\" href=\"#docker的历史\">#</a> Docker 的历史</h3>\n<p>2010 年，几个搞 IT 的人，在美国成立一家公司 <code>dotCloud</code></p>\n<p>做一些 pass 的云计算服务</p>\n<p>他们将自己的容器化技术命名为 Docker</p>\n<p>Docker 基于 Go 语言开发</p>\n<p>Docker 刚刚诞生的时候，没有引起行业的注意，dotCloud 活不下去</p>\n<p>然后他们决定开源</p>\n<p>2013 年，创始人将 Docker 开源，不开则以，一开惊人，刚开源的时候，每个月都会更新一个版本</p>\n<p>2014 年 4 月 9 日，Docker 1.0 发布</p>\n<h3 id=\"容器vs虚拟机\"><a class=\"markdownIt-Anchor\" href=\"#容器vs虚拟机\">#</a> 容器 vs 虚拟机</h3>\n<p>在容器技术出来之前，用的是虚拟机技术</p>\n<h4 id=\"虚拟机原理示意图\"><a class=\"markdownIt-Anchor\" href=\"#虚拟机原理示意图\">#</a> 虚拟机原理示意图</h4>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200606205436434.png\"\n                      alt=\"image-20200606205436434\"\n                ></p>\n<p>缺点：</p>\n<ol>\n<li>资源占用多</li>\n<li>冗余步骤多</li>\n<li>启动很慢</li>\n</ol>\n<h4 id=\"容器化技术示意图\"><a class=\"markdownIt-Anchor\" href=\"#容器化技术示意图\">#</a> 容器化技术示意图</h4>\n<p>不是模拟的完整的操作系统</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200606205739655.png\"\n                      alt=\"image-20200606205739655\"\n                ></p>\n<h4 id=\"二者对比\"><a class=\"markdownIt-Anchor\" href=\"#二者对比\">#</a> 二者对比</h4>\n<p>比较虚拟机和 Docker 的不同</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>传统虚拟机</th>\n<th>Docker</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>虚拟内容</td>\n<td>硬件 + 完整的操作系统 + 软件</td>\n<td>APP+LIB</td>\n</tr>\n<tr>\n<td>大小</td>\n<td>笨重，通常几个 G</td>\n<td>轻便几个 M 或 KB</td>\n</tr>\n<tr>\n<td>启动速度</td>\n<td>慢，分钟级</td>\n<td>快，秒级</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"docker安装\"><a class=\"markdownIt-Anchor\" href=\"#docker安装\">#</a> Docker 安装</h2>\n<h3 id=\"docker的基本组成\"><a class=\"markdownIt-Anchor\" href=\"#docker的基本组成\">#</a> Docker 的基本组成</h3>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200606212250845.png\"\n                      alt=\"image-20200606212250845\"\n                ></p>\n<p>明确几个概念：</p>\n<ol>\n<li>\n<p>镜像 (image)：docker 镜像好比一个模板，可以通过这个模板来创建容器 (container)，一个镜像可以创建多个容器，类似 Python 中的 Class</p>\n</li>\n<li>\n<p>容器 (container)：类似 Python 中通过 Class 创建的实例，Object；容器可以理解为一个简易的系统</p>\n</li>\n<li>\n<p>仓库 (repository)：存放镜像的地方，</p>\n<p>分为共有仓库和私有仓库</p>\n<ul>\n<li>\n<p>Docker Hub：国外的</p>\n</li>\n<li>\n<p>阿里云：配置镜像加速</p>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"环境准备\"><a class=\"markdownIt-Anchor\" href=\"#环境准备\">#</a> 环境准备</h3>\n<p>我们要有一台服务器，并且可以操作它</p>\n<ol>\n<li>Linux 命令基础，购买 linux 阿里云的服务器</li>\n<li>CentOS 7</li>\n<li>使用 Xshell 链接远程服务器</li>\n</ol>\n<h3 id=\"安装xshell\"><a class=\"markdownIt-Anchor\" href=\"#安装xshell\">#</a> 安装 xshell</h3>\n<p>下载 CentOS7 <a class=\"link\"   href=\"https://www.jianshu.com/p/a63f47e096e8\" >https://www.jianshu.com/p/a63f47e096e8 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p>下载 VMware 360 软件管家下载</p>\n<p>VMware 配置虚拟机 <a class=\"link\"   href=\"https://blog.csdn.net/babyxue/article/details/80970526\" >https://blog.csdn.net/babyxue/article/details/80970526 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p>xshell 链接服务器 <a class=\"link\"   href=\"https://blog.csdn.net/zzy1078689276/article/details/77280814\" >https://blog.csdn.net/zzy1078689276/article/details/77280814 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@192 ~]# cd /</span><br><span class=\"line\">[root@192 /]# pwd</span><br><span class=\"line\">/</span><br><span class=\"line\">[root@192 /]# ls</span><br><span class=\"line\">bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class=\"line\">[root@192 /]# uname -r</span><br><span class=\"line\">3.10.0-1127.el7.x86_64</span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200608091950655.png\"\n                      alt=\"image-20200608091950655\"\n                ></p>\n<p>用户名</p>\n<p>密码</p>\n<p>查看 ip：vmware 里面输入，ip addIPr</p>\n<p><a class=\"link\"   href=\"https://www.bilibili.com/video/BV1og4y1q7M4?p=6\" >https://www.bilibili.com/video/BV1og4y1q7M4?p=6 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<h3 id=\"centos安装\"><a class=\"markdownIt-Anchor\" href=\"#centos安装\">#</a> Centos 安装</h3>\n<p><a class=\"link\"   href=\"https://docs.docker.com/engine/install/centos/\" >https://docs.docker.com/engine/install/centos/ <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<h3 id=\"卸载旧的版本\"><a class=\"markdownIt-Anchor\" href=\"#卸载旧的版本\">#</a> 卸载旧的版本</h3>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 卸载旧的版本</span><br><span class=\"line\">$ sudo yum remove docker \\</span><br><span class=\"line\">                  docker-client \\</span><br><span class=\"line\">                  docker-client-latest \\</span><br><span class=\"line\">                  docker-common \\</span><br><span class=\"line\">                  docker-latest \\</span><br><span class=\"line\">                  docker-latest-logrotate \\</span><br><span class=\"line\">                  docker-logrotate \\</span><br><span class=\"line\">                  docker-engine</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200608092628498.png\"\n                      alt=\"image-20200608092628498\"\n                ></p>\n<h3 id=\"安装基本环境\"><a class=\"markdownIt-Anchor\" href=\"#安装基本环境\">#</a> 安装基本环境</h3>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装基本的安装包</span><br><span class=\"line\">$ sudo yum install -y yum-utils</span><br></pre></td></tr></table></figure></div>\n<p>!</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200608093114774.png\"\n                      alt=\"image-20200608093114774\"\n                ></p>\n<h3 id=\"设置镜像的仓库\"><a class=\"markdownIt-Anchor\" href=\"#设置镜像的仓库\">#</a> 设置镜像的仓库</h3>\n<p>注意！！下载默认用国外的，太慢不要用！</p>\n<p>用国内镜像，百度搜索，docker 的阿里云镜像地址</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 不要用官网默认这个！</span><br><span class=\"line\">$ sudo yum-config-manager \\</span><br><span class=\"line\">    --add-repo \\</span><br><span class=\"line\">    https://download.docker.com/linux/centos/docker-ce.repo # 默认是国外的</span><br><span class=\"line\"></span><br><span class=\"line\"># 换成下面的</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo yum-config-manager \\</span><br><span class=\"line\">    --add-repo \\</span><br><span class=\"line\">    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo # 阿里云镜像</span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200616145430166.png\"\n                      alt=\"image-20200616145430166\"\n                ></p>\n<p>直接复制粘贴就 OK 了</p>\n<p>更像软件包索引</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum makecache fast</span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200616150014082.png\"\n                      alt=\"image-20200616150014082\"\n                ></p>\n<p>没有问题的话就是可以用的</p>\n<h3 id=\"安装docker引擎\"><a class=\"markdownIt-Anchor\" href=\"#安装docker引擎\">#</a> 安装 docker 引擎</h3>\n<div class=\"highlight-container\" data-rel=\"Python\"><figure class=\"iseeu highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install docker-ce docker-ce-cli containerd.io <span class=\"comment\"># docker-ce 社区版 ee 企业版</span></span><br></pre></td></tr></table></figure></div>\n<p>注意这里会有几个个 y/n 的判断</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200616150818860.png\"\n                      alt=\"image-20200616150818860\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200616150922549.png\"\n                      alt=\"image-20200616150922549\"\n                ></p>\n<p>要看到 Complet 再收手！</p>\n<h3 id=\"启动docker\"><a class=\"markdownIt-Anchor\" href=\"#启动docker\">#</a> 启动 Docker</h3>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start docker # 代表启动成功</span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker version</span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Client: Docker Engine - Community</span><br><span class=\"line\"> Version:           19.03.11</span><br><span class=\"line\"> API version:       1.40</span><br><span class=\"line\"> Go version:        go1.13.10</span><br><span class=\"line\"> Git commit:        42e35e61f3</span><br><span class=\"line\"> Built:             Mon Jun  1 09:13:48 2020</span><br><span class=\"line\"> OS/Arch:           linux/amd64</span><br><span class=\"line\"> Experimental:      false</span><br><span class=\"line\"></span><br><span class=\"line\">Server: Docker Engine - Community</span><br><span class=\"line\"> Engine:</span><br><span class=\"line\">  Version:          19.03.11</span><br><span class=\"line\">  API version:      1.40 (minimum version 1.12)</span><br><span class=\"line\">  Go version:       go1.13.10</span><br><span class=\"line\">  Git commit:       42e35e61f3</span><br><span class=\"line\">  Built:            Mon Jun  1 09:12:26 2020</span><br><span class=\"line\">  OS/Arch:          linux/amd64</span><br><span class=\"line\">  Experimental:     false</span><br><span class=\"line\"> containerd:</span><br><span class=\"line\">  Version:          1.2.13</span><br><span class=\"line\">  GitCommit:        7ad184331fa3e55e52b890ea95e65ba581ae3429</span><br><span class=\"line\"> runc:</span><br><span class=\"line\">  Version:          1.0.0-rc10</span><br><span class=\"line\">  GitCommit:        dc9208a3303feef5b3839f4323d9beb36df0a9dd</span><br><span class=\"line\"> docker-init:</span><br><span class=\"line\">  Version:          0.18.0</span><br><span class=\"line\">  GitCommit:        fec3683</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run hello-world</span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200616151641013.png\"\n                      alt=\"image-20200616151641013\"\n                ></p>\n<p>中间一堆是签名信息</p>\n<p>run 的运行流程图</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200616161441669.png\"\n                      alt=\"image-20200616161441669\"\n                ></p>\n<p>查看下载的镜像</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200616151913277.png\"\n                      alt=\"image-20200616151913277\"\n                ></p>\n<h3 id=\"卸载docker\"><a class=\"markdownIt-Anchor\" href=\"#卸载docker\">#</a> 卸载 Docker</h3>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 卸载依赖</span><br><span class=\"line\">yum remove docker-ce docker-ce-cli containerd.io</span><br><span class=\"line\"></span><br><span class=\"line\"># 删除资源</span><br><span class=\"line\">rm -rf /var/lib/docker # docker 的默认工作路径</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<h3 id=\"阿里云镜像加速\"><a class=\"markdownIt-Anchor\" href=\"#阿里云镜像加速\">#</a> 阿里云镜像加速</h3>\n<p>支付宝扫码登录，短信验证，确认授权</p>\n<p>我有两个问题</p>\n<ol>\n<li>\n<p>阿里云镜像加速必须配置嘛？</p>\n<blockquote>\n<p>哎呦我去：加速快</p>\n<p>哎呦我去：要是翻墙就无所谓了</p>\n</blockquote>\n</li>\n<li>\n<p>这个阿里云必须要买嘛，买哪个，我看阿里云好多产品</p>\n<blockquote>\n<p>哎呦我去：不需要买</p>\n<p>哎呦我去：免费的</p>\n<p>哎呦我去：阿里云搜索容器服务</p>\n<p>哎呦我去：有一个镜像加速</p>\n</blockquote>\n</li>\n<li>\n<p>这个地址是哪来的呀</p>\n</li>\n</ol>\n<p>操作</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200616154429105.png\"\n                      alt=\"image-20200616154429105\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200616154455964.png\"\n                      alt=\"image-20200616154455964\"\n                ></p>\n<p>控制台搜索 容器镜像服务</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200616155201285.png\"\n                      alt=\"image-20200616155201285\"\n                ></p>\n<p>找到加速地址</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200616155649476.png\"\n                      alt=\"image-20200616155649476\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p /etc/docker # 创建一个陌路</span><br><span class=\"line\">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;registry-mirrors&quot;: [&quot;https://uyfgafsw.mirror.aliyuncs.com&quot;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF # 编写配置文件</span><br><span class=\"line\"></span><br><span class=\"line\">sudo systemctl daemon-reload # 重启服务</span><br><span class=\"line\">sudo systemctl restart docker # 重启docker</span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200616160315298.png\"\n                      alt=\"image-20200616160315298\"\n                ></p>\n<p><a class=\"link\"   href=\"https://www.processon.com/\" >在线画图软件 ProcessOn <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p><a class=\"link\"   href=\"https://www.bilibili.com/video/BV177411K7bH\" >服务器及购买相关介绍 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<h2 id=\"底层原理\"><a class=\"markdownIt-Anchor\" href=\"#底层原理\">#</a> 底层原理</h2>\n<p>Docker 是真么工作的？</p>\n<p>Docker 是一个 Client-Server 结构的系统，Docker 的守护进程在主机上。通过 Socket 从客户端访问！</p>\n<p>DockerServer 接受到 Docker-Client 的指令，</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200616162107363.png\"\n                      alt=\"image-20200616162107363\"\n                ></p>\n<p>Docker 为什么比 VM 快？</p>\n<ol>\n<li>Docker 有着比虚拟机更少的抽象层</li>\n<li>docker 主要用的是宿主机的内核，vm 需要 Guest OS</li>\n</ol>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200616162302653.png\"\n                      alt=\"image-20200616162302653\"\n                ></p>\n<p>所以说新建一个容器的时候，docker 不需要像虚拟机一样重新加载一个操作系统内核，避免引导</p>\n<h2 id=\"docker命令\"><a class=\"markdownIt-Anchor\" href=\"#docker命令\">#</a> Docker 命令</h2>\n<h3 id=\"帮助命令\"><a class=\"markdownIt-Anchor\" href=\"#帮助命令\">#</a> 帮助命令</h3>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker version # 显示docker的基本信息</span><br><span class=\"line\">docker info # 系统信息，镜像和容器的数量</span><br><span class=\"line\">docker 命令 --help # 全部信息</span><br></pre></td></tr></table></figure></div>\n<p><a class=\"link\"   href=\"https://docs.docker.com/reference/\" >官网文档 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200616163338187.png\"\n                      alt=\"image-20200616163338187\"\n                ></p>\n<h3 id=\"镜像命令\"><a class=\"markdownIt-Anchor\" href=\"#镜像命令\">#</a> 镜像命令</h3>\n<h4 id=\"docker-images\"><a class=\"markdownIt-Anchor\" href=\"#docker-images\">#</a> docker images</h4>\n<p>查看所有本地主机上的镜像</p>\n<div class=\"highlight-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@192 ~]<span class=\"comment\"># docker images</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200616172056530.png\"\n                      alt=\"image-20200616172056530\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 解释</span><br><span class=\"line\">REPOSITORY  # 镜像仓库源</span><br><span class=\"line\">TAG                 # 镜像的标签</span><br><span class=\"line\">IMAGE ID           # 镜像的ID</span><br><span class=\"line\">CREATED           # 镜像的创建时间</span><br><span class=\"line\">SIZE # 镜像的大小</span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--all , -a\t\tShow all images (default hides intermediate images) <span class=\"comment\"># 显示所有</span></span><br><span class=\"line\">--digests\t\tShow digests</span><br><span class=\"line\">--filter , -f\t\tFilter output based on conditions provided</span><br><span class=\"line\">--format\t\tPretty-<span class=\"built_in\">print</span> images using a Go template</span><br><span class=\"line\">--no-trunc\t\tDon’t <span class=\"built_in\">truncate</span> output</span><br><span class=\"line\">--quiet , -q\t\tOnly show numeric IDs <span class=\"comment\"># 只显示id</span></span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200616172651835.png\"\n                      alt=\"image-20200616172651835\"\n                ></p>\n<h4 id=\"docker-search\"><a class=\"markdownIt-Anchor\" href=\"#docker-search\">#</a> docker search</h4>\n<p>搜索仓库中的镜像，相当于网页搜索</p>\n<p><a class=\"link\"   href=\"http://hub.docker.com\" >网页搜索 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200616173009473.png\"\n                      alt=\"image-20200616173009473\"\n                ></p>\n<p>mysql</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200616173050756.png\"\n                      alt=\"image-20200616173050756\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search mysql</span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200616173308194.png\"\n                      alt=\"image-20200616173308194\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search --help</span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200616173740981.png\"\n                      alt=\"image-20200616173740981\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 解释</span></span><br><span class=\"line\">Options:</span><br><span class=\"line\">  -f, --filter filter   Filter output based on conditions provided</span><br><span class=\"line\">      --format string   Pretty-<span class=\"built_in\">print</span> search using a Go template</span><br><span class=\"line\">      --<span class=\"built_in\">limit</span> int       Max number of search results (default 25)</span><br><span class=\"line\">      --no-trunc        Don<span class=\"string\">&#x27;t truncate output</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search mysql --filter=STARS=3000 # 搜索出Stars大于3000的</span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200616174440284.png\"\n                      alt=\"image-20200616174440284\"\n                ></p>\n<h4 id=\"docker-pull\"><a class=\"markdownIt-Anchor\" href=\"#docker-pull\">#</a> docker pull</h4>\n<p>下载镜像</p>\n<div class=\"highlight-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mysql <span class=\"comment\"># 下载mysql镜像，default tag，默认最新版latest</span></span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@192 ~]<span class=\"comment\"># sudo systemctl daemon-reload</span></span><br><span class=\"line\">[root@192 ~]<span class=\"comment\"># sudo systemctl restart docker</span></span><br><span class=\"line\">[root@192 ~]<span class=\"comment\"># docker pull mysql</span></span><br><span class=\"line\">Using default tag: latest <span class=\"comment\"># 不写tag默认最新版</span></span><br><span class=\"line\">latest: Pulling from library/mysql</span><br><span class=\"line\">8559a31e96f4: Pull complete  <span class=\"comment\"># layer 分层下载，docker image的核心 联合文件系统</span></span><br><span class=\"line\">d51ce1c2e575: Pull complete </span><br><span class=\"line\">c2344adc4858: Pull complete </span><br><span class=\"line\">fcf3ceff18fc: Pull complete </span><br><span class=\"line\">16da0c38dc5b: Pull complete </span><br><span class=\"line\">b905d1797e97: Pull complete </span><br><span class=\"line\">4b50d1c6b05c: Pull complete </span><br><span class=\"line\">c75914a65ca2: Pull complete </span><br><span class=\"line\">1ae8042bdd09: Pull complete </span><br><span class=\"line\">453ac13c00a3: Pull complete </span><br><span class=\"line\">9e680cd72f08: Pull complete </span><br><span class=\"line\">a6b5dc864b6c: Pull complete </span><br><span class=\"line\">Digest: sha256:8b7b328a7ff6de46ef96bcf83af048cb00a1c86282bfca0cb119c84568b4caf6<span class=\"comment\">#签名</span></span><br><span class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> mysql:latest</span><br><span class=\"line\">docker.io/library/mysql:latest <span class=\"comment\"># 真实地址</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 即</span></span><br><span class=\"line\">docker pull mysql</span><br><span class=\"line\"><span class=\"comment\"># 等价于</span></span><br><span class=\"line\">docker pull docker.io/library/mysql:latest</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 指定版本下载 </span></span><br><span class=\"line\">docker pull mysql:5.7</span><br></pre></td></tr></table></figure></div>\n<p>版本来自于官网，版本库<a class=\"link\"   href=\"https://hub.docker.com/_/mysql\" > https://hub.docker.com/_/mysql <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200617094339687.png\"\n                      alt=\"image-20200617094339687\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200617100948088.png\"\n                      alt=\"image-20200617100948088\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure></div>\n<p>此时查看镜像，可以看到新下载的两个</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200617101105899.png\"\n                      alt=\"image-20200617101105899\"\n                ></p>\n<h4 id=\"docker-rmi\"><a class=\"markdownIt-Anchor\" href=\"#docker-rmi\">#</a> docker rmi</h4>\n<p>remove images</p>\n<div class=\"highlight-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 删除一个 可以通过名称 也可以指定id -f表示删除所有</span></span><br><span class=\"line\">docker rmi -f 9cfcce23593a</span><br><span class=\"line\"><span class=\"comment\"># 删除多个 用空格分隔id</span></span><br><span class=\"line\">docker rmi -f <span class=\"built_in\">id</span> <span class=\"built_in\">id</span> <span class=\"built_in\">id</span></span><br><span class=\"line\"><span class=\"comment\"># 删除所有 </span></span><br><span class=\"line\">docker rmi -f $(docker images -aq) <span class=\"comment\"># images -aq就是查所有镜像id，从而递归删除</span></span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200617102049613.png\"\n                      alt=\"image-20200617102049613\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200617102126526.png\"\n                      alt=\"image-20200617102126526\"\n                ></p>\n<h3 id=\"容器命令\"><a class=\"markdownIt-Anchor\" href=\"#容器命令\">#</a> 容器命令</h3>\n<p>说明：有了镜像才能创建容器，linux，下载一个 centos 镜像来测试学习</p>\n<div class=\"highlight-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull centos</span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200617103406974.png\"\n                      alt=\"image-20200617103406974\"\n                ></p>\n<h4 id=\"新建容器并启动\"><a class=\"markdownIt-Anchor\" href=\"#新建容器并启动\">#</a> 新建容器并启动</h4>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run [可选参数] image</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">参数说明</span></span><br><span class=\"line\">--name=“Name” # 容器名字，用于区分容器</span><br><span class=\"line\">-d 后台方式运行</span><br><span class=\"line\">-it 使用交互方式运行，进入容器查看内容</span><br><span class=\"line\">-p 指定容器的端口 如-p 8080::8080</span><br><span class=\"line\">\t-p ip:主机端口：容器端口</span><br><span class=\"line\">\t-p 主机端口:容器端口</span><br><span class=\"line\">\t-p 容器端口</span><br><span class=\"line\">\t</span><br><span class=\"line\">-p 随机指定端口</span><br></pre></td></tr></table></figure></div>\n<h4 id=\"进入退出容器\"><a class=\"markdownIt-Anchor\" href=\"#进入退出容器\">#</a> 进入退出容器</h4>\n<div class=\"highlight-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入</span></span><br><span class=\"line\">docker run -it centos /bin/bash </span><br><span class=\"line\"><span class=\"comment\"># 查看目录</span></span><br><span class=\"line\"><span class=\"built_in\">ls</span></span><br><span class=\"line\"><span class=\"comment\"># 退出</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span></span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200617104004004.png\"\n                      alt=\"image-20200617104004004\"\n                ></p>\n<p>注意这里面主机名，编程了 centos 的 id</p>\n<p>这里面就是一个容器，套娃啊</p>\n<h4 id=\"查看运行的容器\"><a class=\"markdownIt-Anchor\" href=\"#查看运行的容器\">#</a> 查看运行的容器</h4>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看正在运行的容器</span><br><span class=\"line\">docker ps</span><br><span class=\"line\"># 查看曾经运行的容器</span><br><span class=\"line\">docker ps -a</span><br><span class=\"line\"># 显示最近创建的容器，设置显示个数</span><br><span class=\"line\">docker ps -a - n=? </span><br><span class=\"line\"># 只显示容器的编号</span><br><span class=\"line\">docker ps -aq</span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@192 ~]# docker ps</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class=\"line\">[root@192 ~]# docker ps -a</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES</span><br><span class=\"line\">9939864fa2e6        centos              &quot;bin/bash&quot;          4 minutes ago       Exited (0) 4 minutes ago                       unruffled_knuth</span><br><span class=\"line\">5f42e9930435        centos              &quot;/bin/bash&quot;         8 minutes ago       Exited (0) 4 minutes ago                       lucid_cannon</span><br><span class=\"line\">a89ddb393d3d        bf756fb1ae65        &quot;/hello&quot;            19 hours ago        Exited (0) 19 hours ago                        gracious_bhabha</span><br><span class=\"line\">[root@192 ~]# docker ps -a -n=2</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES</span><br><span class=\"line\">9939864fa2e6        centos              &quot;bin/bash&quot;          6 minutes ago       Exited (0) 6 minutes ago                       unruffled_knuth</span><br><span class=\"line\">5f42e9930435        centos              &quot;/bin/bash&quot;         10 minutes ago      Exited (0) 7 minutes ago </span><br><span class=\"line\">[root@192 ~]# docker ps -aq</span><br><span class=\"line\">9939864fa2e6</span><br><span class=\"line\">5f42e9930435</span><br><span class=\"line\">a89ddb393d3d</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<h4 id=\"退出容器\"><a class=\"markdownIt-Anchor\" href=\"#退出容器\">#</a> 退出容器</h4>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">容器停止退出</span></span><br><span class=\"line\">exit</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">容器不停止退出 注意必须在英文输入法下，中文输入法不行</span></span><br><span class=\"line\">Ctrl + P + Q</span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@192 ~]# docker run -it centos /bin/bash</span><br><span class=\"line\">[root@bfcea13c40cd /]# [root@192 ~]# docker ps ##注意这里会自动给个命令，删掉</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED              STATUS              PORTS               NAMES</span><br><span class=\"line\">bfcea13c40cd        centos              &quot;/bin/bash&quot;         About a minute ago   Up About a minute                       stoic_wilson</span><br><span class=\"line\">edbd9366d959        centos              &quot;/bin/bash&quot;         7 minutes ago        Up 7 minutes                            affectionate_bartik</span><br><span class=\"line\">[root@192 ~]# docker exec -it edbd9366d959 /bin/bash ## 再次进入</span><br><span class=\"line\">[root@edbd9366d959 /]# exit ##停止并推出</span><br><span class=\"line\">exit</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<h4 id=\"删除容器\"><a class=\"markdownIt-Anchor\" href=\"#删除容器\">#</a> 删除容器</h4>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除指定容器 不能删除正在运行的容器，如果强制删除 <span class=\"built_in\">rm</span> -f</span></span><br><span class=\"line\">docker rm 容器id</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除所有容器</span></span><br><span class=\"line\">docker rm -f $(docker ps -aq)</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除所有容器</span></span><br><span class=\"line\">docker ps -a -q|xargs docker rm</span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@192 ~]# docker ps -a</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES</span><br><span class=\"line\">bfcea13c40cd        centos              &quot;/bin/bash&quot;         29 minutes ago      Up 29 minutes                                   stoic_wilson</span><br><span class=\"line\">edbd9366d959        centos              &quot;/bin/bash&quot;         35 minutes ago      Up 35 minutes                                   affectionate_bartik</span><br><span class=\"line\">9939864fa2e6        centos              &quot;bin/bash&quot;          48 minutes ago      Exited (0) 48 minutes ago                       unruffled_knuth</span><br><span class=\"line\">5f42e9930435        centos              &quot;/bin/bash&quot;         52 minutes ago      Exited (0) 49 minutes ago                       lucid_cannon</span><br><span class=\"line\">a89ddb393d3d        bf756fb1ae65        &quot;/hello&quot;            20 hours ago        Exited (0) 20 hours ago                         gracious_bhabha</span><br><span class=\"line\">[root@192 ~]# docker rm 5f42e9930435</span><br><span class=\"line\">5f42e9930435</span><br><span class=\"line\">[root@192 ~]# docker rm edbd9366d959      # 注意正在运行的容器不能删除</span><br><span class=\"line\">Error response from daemon: You cannot remove a running container edbd9366d9596c744dd449119269b04de2f2a494e7fc471f6396bcefd94c33fe. Stop the container before attempting removal or force remove</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@192 ~]# docker ps -aq # 所有容器id</span><br><span class=\"line\">bfcea13c40cd</span><br><span class=\"line\">edbd9366d959</span><br><span class=\"line\">9939864fa2e6</span><br><span class=\"line\">a89ddb393d3d</span><br><span class=\"line\">[root@192 ~]# docker rm -f $(docker ps -aq) # 全部删除</span><br><span class=\"line\">bfcea13c40cd</span><br><span class=\"line\">edbd9366d959</span><br><span class=\"line\">9939864fa2e6</span><br><span class=\"line\">a89ddb393d3d</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<h4 id=\"启动和停止容器的操作\"><a class=\"markdownIt-Anchor\" href=\"#启动和停止容器的操作\">#</a> 启动和停止容器的操作</h4>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start</span><br><span class=\"line\">docker restart</span><br><span class=\"line\">docker stop</span><br><span class=\"line\">docker kill</span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@192 ~]# docker run -it centos /bin/bash</span><br><span class=\"line\">[root@7b1a7dd10ea4 /]# exit</span><br><span class=\"line\">exit</span><br><span class=\"line\">[root@192 ~]# docker ps #查看正在运行的</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class=\"line\">[root@192 ~]# docker ps -a # 查看历史运行过的</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES</span><br><span class=\"line\">7b1a7dd10ea4        centos              &quot;/bin/bash&quot;         54 seconds ago      Exited (0) 42 seconds ago                       fervent_mirzakhani</span><br><span class=\"line\">[root@192 ~]# docker start 7b1a7dd10ea4 # 启动当前这个容器 container id 粘过 来</span><br><span class=\"line\">7b1a7dd10ea4</span><br><span class=\"line\">[root@192 ~]# docker ps # 查看当前运行容器 发现启动成功</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class=\"line\">7b1a7dd10ea4        centos              &quot;/bin/bash&quot;         2 minutes ago       Up 28 seconds                           fervent_mirzakhani</span><br><span class=\"line\">[root@192 ~]# docker stop 7b1a7dd10ea4 # 停止运行</span><br><span class=\"line\">7b1a7dd10ea4</span><br><span class=\"line\">[root@192 ~]# docker ps # 再次查看 没有这个容器了</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<h3 id=\"常用其他命令\"><a class=\"markdownIt-Anchor\" href=\"#常用其他命令\">#</a> 常用其他命令</h3>\n<h4 id=\"后台启动docker\"><a class=\"markdownIt-Anchor\" href=\"#后台启动docker\">#</a> 后台启动 docker</h4>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d 镜像名</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">用docker ps 查看的时候 发现停止了</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">后台运行，docker发现前台没有，容器启动后，发现自己没有提供服务，会立刻停止</span></span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Last login: Wed Jun 17 19:47:35 2020</span><br><span class=\"line\">[root@192 ~]# systemctl start docker # 关机后重启了，需要启动docker</span><br><span class=\"line\">[root@192 ~]# docker run -d centos # 运行</span><br><span class=\"line\">8ce188e5fee31c2fac93c0a405ee1a95c38dbc50cb47c35b19c0039c27558ded</span><br><span class=\"line\">[root@192 ~]# docker ps -a # 查看正在运行的</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES</span><br><span class=\"line\">8ce188e5fee3        centos              &quot;/bin/bash&quot;         19 seconds ago      Exited (0) 18 seconds ago                       tender_dirac</span><br><span class=\"line\">7b1a7dd10ea4        centos              &quot;/bin/bash&quot;         8 hours ago         Exited (0) 8 hours ago                          fervent_mirzakhani</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<h4 id=\"查看日志\"><a class=\"markdownIt-Anchor\" href=\"#查看日志\">#</a> 查看日志</h4>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker logs</span><br><span class=\"line\">docker logs -f -t --tail n 【id】</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200617161744298.png\"\n                      alt=\"image-20200617161744298\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@192 ~]# docker logs --help</span><br><span class=\"line\"></span><br><span class=\"line\">Usage:\tdocker logs [OPTIONS] CONTAINER</span><br><span class=\"line\"></span><br><span class=\"line\">Fetch the logs of a container</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">      --details        Show extra details provided to logs</span><br><span class=\"line\">  -f, --follow         Follow log output</span><br><span class=\"line\">      --since string   Show logs since timestamp (e.g.</span><br><span class=\"line\">                       2013-01-02T13:23:37) or relative</span><br><span class=\"line\">                       (e.g. 42m for 42 minutes)</span><br><span class=\"line\">      --tail string    Number of lines to show from the</span><br><span class=\"line\">                       end of the logs (default &quot;all&quot;)</span><br><span class=\"line\">  -t, --timestamps     Show timestamps # 时间戳</span><br><span class=\"line\">      --until string   Show logs before a timestamp (e.g.</span><br><span class=\"line\">                       2013-01-02T13:23:37) or relative</span><br><span class=\"line\">                       (e.g. 42m for 42 minutes)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">whiel true;do echo shenzai;sleep </span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">运行一个</span></span><br><span class=\"line\">[root@192 ~]# docker run -it centos /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">[root@c2887d35c71d /]# [root@192 ~]# docker ps</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class=\"line\">c2887d35c71d        centos              &quot;/bin/bash&quot;         57 seconds ago      Up 56 seconds                           vigorous_kare</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看日志，由于没有运行脚本，所以啥也没显示</span></span><br><span class=\"line\">[root@192 ~]# docker logs -f -t --tail 10 c2887d35c71d</span><br><span class=\"line\">^C # ctrl+c退出</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">运行centos里面加个脚本</span></span><br><span class=\"line\">[root@192 ~]# docker run -d centos /bin/sh -c &quot;while true;do echo shenzai;sleep 1;done&quot;</span><br><span class=\"line\">cb6d7fbc3f27a064137d58282de97b97365dea2705211ebfbad642079cc1b388</span><br><span class=\"line\"></span><br><span class=\"line\">[root@192 ~]# docker ps</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</span><br><span class=\"line\">cb6d7fbc3f27        centos              &quot;/bin/sh -c &#x27;while t…&quot;   7 seconds ago       Up 6 seconds                            dreamy_almeida</span><br><span class=\"line\">c2887d35c71d        centos              &quot;/bin/bash&quot;              3 minutes ago       Up 3 minutes                            vigorous_kare</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看日志 发现隔一秒打印一条</span></span><br><span class=\"line\">[root@192 ~]# docker logs -f -t --tail 10 cb6d7fbc3f27</span><br><span class=\"line\">2020-06-17T12:02:11.293765084Z shenzai</span><br><span class=\"line\">2020-06-17T12:02:12.297675608Z shenzai</span><br><span class=\"line\">2020-06-17T12:02:13.301845582Z shenzai</span><br><span class=\"line\">2020-06-17T12:02:14.304800996Z shenzai</span><br><span class=\"line\">2020-06-17T12:02:15.307130238Z shenzai</span><br><span class=\"line\">2020-06-17T12:02:16.310574235Z shenzai</span><br><span class=\"line\">2020-06-17T12:02:17.312946923Z shenzai</span><br><span class=\"line\">2020-06-17T12:02:18.314841295Z shenzai</span><br><span class=\"line\">2020-06-17T12:02:19.317021705Z shenzai</span><br><span class=\"line\">2020-06-17T12:02:20.319670013Z shenzai</span><br><span class=\"line\">2020-06-17T12:02:21.322651649Z shenzai</span><br><span class=\"line\">2020-06-17T12:02:22.325466918Z shenzai</span><br><span class=\"line\">2020-06-17T12:02:23.327984704Z shenzai</span><br><span class=\"line\">2020-06-17T12:02:24.329656919Z shenzai</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<h4 id=\"查看正在运行的容器信息\"><a class=\"markdownIt-Anchor\" href=\"#查看正在运行的容器信息\">#</a> 查看正在运行的容器信息</h4>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@192 ~]# docker inspect cb6d7fbc3f27</span><br><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        # 容器的完整id</span><br><span class=\"line\">        &quot;Id&quot;: &quot;cb6d7fbc3f27a064137d58282de97b97365dea2705211ebfbad642079cc1b388&quot;,</span><br><span class=\"line\">        </span><br><span class=\"line\">        # 创建时间</span><br><span class=\"line\">        &quot;Created&quot;: &quot;2020-06-17T12:00:50.706906186Z&quot;,</span><br><span class=\"line\">        </span><br><span class=\"line\">        # 脚本位置</span><br><span class=\"line\">        &quot;Path&quot;: &quot;/bin/sh&quot;,</span><br><span class=\"line\">        </span><br><span class=\"line\">        # 运行的脚本</span><br><span class=\"line\">        &quot;Args&quot;: [</span><br><span class=\"line\">            &quot;-c&quot;,</span><br><span class=\"line\">            &quot;while true;do echo shenzai;sleep 1;done&quot;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        &quot;State&quot;: &#123;</span><br><span class=\"line\">            &quot;Status&quot;: &quot;running&quot;, # 状态，正在运行</span><br><span class=\"line\">            &quot;Running&quot;: true,</span><br><span class=\"line\">            &quot;Paused&quot;: false,</span><br><span class=\"line\">            &quot;Restarting&quot;: false,</span><br><span class=\"line\">            &quot;OOMKilled&quot;: false,</span><br><span class=\"line\">            &quot;Dead&quot;: false,</span><br><span class=\"line\">            &quot;Pid&quot;: 1909, # 父进程id</span><br><span class=\"line\">            &quot;ExitCode&quot;: 0,</span><br><span class=\"line\">            &quot;Error&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;StartedAt&quot;: &quot;2020-06-17T12:00:51.093617477Z&quot;,</span><br><span class=\"line\">            &quot;FinishedAt&quot;: &quot;0001-01-01T00:00:00Z&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        </span><br><span class=\"line\">        # 来源镜像</span><br><span class=\"line\">        &quot;Image&quot;: &quot;sha256:831691599b88ad6cc2a4abbd0e89661a121aff14cfa289ad840fd3946f274f1f&quot;,</span><br><span class=\"line\">        &quot;ResolvConfPath&quot;: &quot;/var/lib/docker/containers/cb6d7fbc3f27a064137d58282de97b97365dea2705211ebfbad642079cc1b388/resolv.conf&quot;,</span><br><span class=\"line\">        &quot;HostnamePath&quot;: &quot;/var/lib/docker/containers/cb6d7fbc3f27a064137d58282de97b97365dea2705211ebfbad642079cc1b388/hostname&quot;,</span><br><span class=\"line\">        &quot;HostsPath&quot;: &quot;/var/lib/docker/containers/cb6d7fbc3f27a064137d58282de97b97365dea2705211ebfbad642079cc1b388/hosts&quot;,</span><br><span class=\"line\">        &quot;LogPath&quot;: &quot;/var/lib/docker/containers/cb6d7fbc3f27a064137d58282de97b97365dea2705211ebfbad642079cc1b388/cb6d7fbc3f27a064137d58282de97b97365dea2705211ebfbad642079cc1b388-json.log&quot;,</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        &quot;Name&quot;: &quot;/dreamy_almeida&quot;,</span><br><span class=\"line\">        &quot;RestartCount&quot;: 0,</span><br><span class=\"line\">        &quot;Driver&quot;: &quot;overlay2&quot;,</span><br><span class=\"line\">        &quot;Platform&quot;: &quot;linux&quot;,</span><br><span class=\"line\">        &quot;MountLabel&quot;: &quot;&quot;,</span><br><span class=\"line\">        &quot;ProcessLabel&quot;: &quot;&quot;,</span><br><span class=\"line\">        &quot;AppArmorProfile&quot;: &quot;&quot;,</span><br><span class=\"line\">        &quot;ExecIDs&quot;: null,</span><br><span class=\"line\">        </span><br><span class=\"line\">        # 主机配置</span><br><span class=\"line\">        &quot;HostConfig&quot;: &#123;</span><br><span class=\"line\">            &quot;Binds&quot;: null,</span><br><span class=\"line\">            &quot;ContainerIDFile&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;LogConfig&quot;: &#123;</span><br><span class=\"line\">                &quot;Type&quot;: &quot;json-file&quot;,</span><br><span class=\"line\">                &quot;Config&quot;: &#123;&#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;NetworkMode&quot;: &quot;default&quot;,</span><br><span class=\"line\">            &quot;PortBindings&quot;: &#123;&#125;,</span><br><span class=\"line\">            &quot;RestartPolicy&quot;: &#123;</span><br><span class=\"line\">                &quot;Name&quot;: &quot;no&quot;,</span><br><span class=\"line\">                &quot;MaximumRetryCount&quot;: 0</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;AutoRemove&quot;: false,</span><br><span class=\"line\">            &quot;VolumeDriver&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;VolumesFrom&quot;: null,</span><br><span class=\"line\">            &quot;CapAdd&quot;: null,</span><br><span class=\"line\">            &quot;CapDrop&quot;: null,</span><br><span class=\"line\">            &quot;Capabilities&quot;: null,</span><br><span class=\"line\">            &quot;Dns&quot;: [],</span><br><span class=\"line\">            &quot;DnsOptions&quot;: [],</span><br><span class=\"line\">            &quot;DnsSearch&quot;: [],</span><br><span class=\"line\">            &quot;ExtraHosts&quot;: null,</span><br><span class=\"line\">            &quot;GroupAdd&quot;: null,</span><br><span class=\"line\">            &quot;IpcMode&quot;: &quot;private&quot;,</span><br><span class=\"line\">            &quot;Cgroup&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;Links&quot;: null,</span><br><span class=\"line\">            &quot;OomScoreAdj&quot;: 0,</span><br><span class=\"line\">            &quot;PidMode&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;Privileged&quot;: false,</span><br><span class=\"line\">            &quot;PublishAllPorts&quot;: false,</span><br><span class=\"line\">            &quot;ReadonlyRootfs&quot;: false,</span><br><span class=\"line\">            &quot;SecurityOpt&quot;: null,</span><br><span class=\"line\">            &quot;UTSMode&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;UsernsMode&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;ShmSize&quot;: 67108864,</span><br><span class=\"line\">            &quot;Runtime&quot;: &quot;runc&quot;,</span><br><span class=\"line\">            &quot;ConsoleSize&quot;: [</span><br><span class=\"line\">                0,</span><br><span class=\"line\">                0</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            &quot;Isolation&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;CpuShares&quot;: 0,</span><br><span class=\"line\">            &quot;Memory&quot;: 0,</span><br><span class=\"line\">            &quot;NanoCpus&quot;: 0,</span><br><span class=\"line\">            &quot;CgroupParent&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;BlkioWeight&quot;: 0,</span><br><span class=\"line\">            &quot;BlkioWeightDevice&quot;: [],</span><br><span class=\"line\">            &quot;BlkioDeviceReadBps&quot;: null,</span><br><span class=\"line\">            &quot;BlkioDeviceWriteBps&quot;: null,</span><br><span class=\"line\">            &quot;BlkioDeviceReadIOps&quot;: null,</span><br><span class=\"line\">            &quot;BlkioDeviceWriteIOps&quot;: null,</span><br><span class=\"line\">            &quot;CpuPeriod&quot;: 0,</span><br><span class=\"line\">            &quot;CpuQuota&quot;: 0,</span><br><span class=\"line\">            &quot;CpuRealtimePeriod&quot;: 0,</span><br><span class=\"line\">            &quot;CpuRealtimeRuntime&quot;: 0,</span><br><span class=\"line\">            &quot;CpusetCpus&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;CpusetMems&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;Devices&quot;: [],</span><br><span class=\"line\">            &quot;DeviceCgroupRules&quot;: null,</span><br><span class=\"line\">            &quot;DeviceRequests&quot;: null,</span><br><span class=\"line\">            &quot;KernelMemory&quot;: 0,</span><br><span class=\"line\">            &quot;KernelMemoryTCP&quot;: 0,</span><br><span class=\"line\">            &quot;MemoryReservation&quot;: 0,</span><br><span class=\"line\">            &quot;MemorySwap&quot;: 0,</span><br><span class=\"line\">            &quot;MemorySwappiness&quot;: null,</span><br><span class=\"line\">            &quot;OomKillDisable&quot;: false,</span><br><span class=\"line\">            &quot;PidsLimit&quot;: null,</span><br><span class=\"line\">            &quot;Ulimits&quot;: null,</span><br><span class=\"line\">            &quot;CpuCount&quot;: 0,</span><br><span class=\"line\">            &quot;CpuPercent&quot;: 0,</span><br><span class=\"line\">            &quot;IOMaximumIOps&quot;: 0,</span><br><span class=\"line\">            &quot;IOMaximumBandwidth&quot;: 0,</span><br><span class=\"line\">            &quot;MaskedPaths&quot;: [</span><br><span class=\"line\">                &quot;/proc/asound&quot;,</span><br><span class=\"line\">                &quot;/proc/acpi&quot;,</span><br><span class=\"line\">                &quot;/proc/kcore&quot;,</span><br><span class=\"line\">                &quot;/proc/keys&quot;,</span><br><span class=\"line\">                &quot;/proc/latency_stats&quot;,</span><br><span class=\"line\">                &quot;/proc/timer_list&quot;,</span><br><span class=\"line\">                &quot;/proc/timer_stats&quot;,</span><br><span class=\"line\">                &quot;/proc/sched_debug&quot;,</span><br><span class=\"line\">                &quot;/proc/scsi&quot;,</span><br><span class=\"line\">                &quot;/sys/firmware&quot;</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            &quot;ReadonlyPaths&quot;: [</span><br><span class=\"line\">                &quot;/proc/bus&quot;,</span><br><span class=\"line\">                &quot;/proc/fs&quot;,</span><br><span class=\"line\">                &quot;/proc/irq&quot;,</span><br><span class=\"line\">                &quot;/proc/sys&quot;,</span><br><span class=\"line\">                &quot;/proc/sysrq-trigger&quot;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        </span><br><span class=\"line\">        # 其他配置</span><br><span class=\"line\">        &quot;GraphDriver&quot;: &#123;</span><br><span class=\"line\">            &quot;Data&quot;: &#123;</span><br><span class=\"line\">                &quot;LowerDir&quot;: &quot;/var/lib/docker/overlay2/3675586ebbd79cd72d2562a90c9380627a331c563724c0dac091f92600af4907-init/diff:/var/lib/docker/overlay2/7f79322e0f58d651a84a555dadd83d92537788172525945d3f538dd95dce336c/diff&quot;,</span><br><span class=\"line\">                &quot;MergedDir&quot;: &quot;/var/lib/docker/overlay2/3675586ebbd79cd72d2562a90c9380627a331c563724c0dac091f92600af4907/merged&quot;,</span><br><span class=\"line\">                &quot;UpperDir&quot;: &quot;/var/lib/docker/overlay2/3675586ebbd79cd72d2562a90c9380627a331c563724c0dac091f92600af4907/diff&quot;,</span><br><span class=\"line\">                &quot;WorkDir&quot;: &quot;/var/lib/docker/overlay2/3675586ebbd79cd72d2562a90c9380627a331c563724c0dac091f92600af4907/work&quot;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;Name&quot;: &quot;overlay2&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        </span><br><span class=\"line\">        &quot;Mounts&quot;: [], # 挂载</span><br><span class=\"line\">        </span><br><span class=\"line\">        # 基本配置</span><br><span class=\"line\">        &quot;Config&quot;: &#123;</span><br><span class=\"line\">            &quot;Hostname&quot;: &quot;cb6d7fbc3f27&quot;,</span><br><span class=\"line\">            &quot;Domainname&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;User&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;AttachStdin&quot;: false,</span><br><span class=\"line\">            &quot;AttachStdout&quot;: false,</span><br><span class=\"line\">            &quot;AttachStderr&quot;: false,</span><br><span class=\"line\">            &quot;Tty&quot;: false,</span><br><span class=\"line\">            &quot;OpenStdin&quot;: false,</span><br><span class=\"line\">            &quot;StdinOnce&quot;: false,</span><br><span class=\"line\">            &quot;Env&quot;: [</span><br><span class=\"line\">                &quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span><br><span class=\"line\">            ], # 基本环境变量，这里没有Java</span><br><span class=\"line\">            </span><br><span class=\"line\">            # 基本命令</span><br><span class=\"line\">            &quot;Cmd&quot;: [</span><br><span class=\"line\">                &quot;/bin/sh&quot;,</span><br><span class=\"line\">                &quot;-c&quot;,</span><br><span class=\"line\">                &quot;while true;do echo shenzai;sleep 1;done&quot;</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            &quot;Image&quot;: &quot;centos&quot;,</span><br><span class=\"line\">            &quot;Volumes&quot;: null,</span><br><span class=\"line\">            &quot;WorkingDir&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;Entrypoint&quot;: null,</span><br><span class=\"line\">            &quot;OnBuild&quot;: null,</span><br><span class=\"line\">            &quot;Labels&quot;: &#123;</span><br><span class=\"line\">                &quot;org.label-schema.build-date&quot;: &quot;20200611&quot;,</span><br><span class=\"line\">                &quot;org.label-schema.license&quot;: &quot;GPLv2&quot;,</span><br><span class=\"line\">                &quot;org.label-schema.name&quot;: &quot;CentOS Base Image&quot;,</span><br><span class=\"line\">                &quot;org.label-schema.schema-version&quot;: &quot;1.0&quot;,</span><br><span class=\"line\">                &quot;org.label-schema.vendor&quot;: &quot;CentOS&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        </span><br><span class=\"line\">        # 网卡，比如现在用的是桥接的网卡</span><br><span class=\"line\">        &quot;NetworkSettings&quot;: &#123;</span><br><span class=\"line\">            &quot;Bridge&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;SandboxID&quot;: &quot;4d701985d7e77aa153790b697b2f38a61e20555c224b7675e4bf650b82799882&quot;,</span><br><span class=\"line\">            &quot;HairpinMode&quot;: false,</span><br><span class=\"line\">            &quot;LinkLocalIPv6Address&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;LinkLocalIPv6PrefixLen&quot;: 0,</span><br><span class=\"line\">            &quot;Ports&quot;: &#123;&#125;,</span><br><span class=\"line\">            &quot;SandboxKey&quot;: &quot;/var/run/docker/netns/4d701985d7e7&quot;,</span><br><span class=\"line\">            &quot;SecondaryIPAddresses&quot;: null,</span><br><span class=\"line\">            &quot;SecondaryIPv6Addresses&quot;: null,</span><br><span class=\"line\">            &quot;EndpointID&quot;: &quot;8a6c71e2bafb19ca7dfd85445ccc4bef6d17467360a243d624089e676a24a018&quot;,</span><br><span class=\"line\">            &quot;Gateway&quot;: &quot;172.17.0.1&quot;,</span><br><span class=\"line\">            &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class=\"line\">            &quot;IPAddress&quot;: &quot;172.17.0.3&quot;,</span><br><span class=\"line\">            &quot;IPPrefixLen&quot;: 16,</span><br><span class=\"line\">            &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;MacAddress&quot;: &quot;02:42:ac:11:00:03&quot;,</span><br><span class=\"line\">            &quot;Networks&quot;: &#123;</span><br><span class=\"line\">                &quot;bridge&quot;: &#123;</span><br><span class=\"line\">                    &quot;IPAMConfig&quot;: null,</span><br><span class=\"line\">                    &quot;Links&quot;: null,</span><br><span class=\"line\">                    &quot;Aliases&quot;: null,</span><br><span class=\"line\">                    &quot;NetworkID&quot;: &quot;22b0fd2290ccbc4e066a75d3f01bd8bf32ee4352c5bbcfc9f911287219219571&quot;,</span><br><span class=\"line\">                    &quot;EndpointID&quot;: &quot;8a6c71e2bafb19ca7dfd85445ccc4bef6d17467360a243d624089e676a24a018&quot;,</span><br><span class=\"line\">                    &quot;Gateway&quot;: &quot;172.17.0.1&quot;,</span><br><span class=\"line\">                    &quot;IPAddress&quot;: &quot;172.17.0.3&quot;,</span><br><span class=\"line\">                    &quot;IPPrefixLen&quot;: 16,</span><br><span class=\"line\">                    &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class=\"line\">                    &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class=\"line\">                    &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class=\"line\">                    &quot;MacAddress&quot;: &quot;02:42:ac:11:00:03&quot;,</span><br><span class=\"line\">                    &quot;DriverOpts&quot;: null</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">停止正在疯狂输出的那个容器</span></span><br><span class=\"line\">[root@192 ~]# docker stop cb6d7fbc3f27</span><br><span class=\"line\">cb6d7fbc3f27</span><br></pre></td></tr></table></figure></div>\n<h4 id=\"进入当前正在运行的容器\"><a class=\"markdownIt-Anchor\" href=\"#进入当前正在运行的容器\">#</a> 进入当前正在运行的容器</h4>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">我们通常容器都是使用后台方式运行的e</span></span><br><span class=\"line\"></span><br><span class=\"line\">docker exec -it 容器id bashSHELL</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">测试</span></span><br><span class=\"line\">[root@192 ~]# docker ps</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class=\"line\">c2887d35c71d        centos              &quot;/bin/bash&quot;         35 minutes ago      Up 35 minutes                           vigorous_kare</span><br><span class=\"line\">[root@192 ~]# docker exec -it c2887d35c71d /bin/bash</span><br><span class=\"line\">[root@c2887d35c71d /]# ls</span><br><span class=\"line\">bin  etc   lib\t  lost+found  mnt  proc  run   srv  tmp  var</span><br><span class=\"line\">dev  home  lib64  media       opt  root  sbin  sys  usr</span><br><span class=\"line\">[root@c2887d35c71d /]# ps -ef</span><br><span class=\"line\">UID         PID   PPID  C STIME TTY          TIME CMD</span><br><span class=\"line\">root          1      0  0 11:57 pts/0    00:00:00 /bin/bash</span><br><span class=\"line\">root         14      0  0 12:32 pts/1    00:00:00 /bin/bash</span><br><span class=\"line\">root         28     14  0 12:32 pts/1    00:00:00 ps -ef</span><br><span class=\"line\">[root@c2887d35c71d /]# c2887d35c71d</span><br><span class=\"line\">[root@c2887d35c71d /]# exit</span><br><span class=\"line\">exit</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">方式二</span></span><br><span class=\"line\">[root@192 ~]# docker attach c2887d35c71d</span><br><span class=\"line\">[root@c2887d35c71d /]# </span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">区别</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">docker <span class=\"built_in\">exec</span> <span class=\"comment\"># 进入容器后开启一个新的终端，可以在里面操作(常用)</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">docker attach 进入容器正在执行的终端，不会启动新的进程</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<h4 id=\"从容器内拷贝文件到主机上\"><a class=\"markdownIt-Anchor\" href=\"#从容器内拷贝文件到主机上\">#</a> 从容器内拷贝文件到主机上</h4>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">运行</span></span><br><span class=\"line\">[root@192 ~]# docker run -it centos</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ctrl P Q 不关闭退出，查看</span></span><br><span class=\"line\">[root@0569081aa89c /]# [root@192 ~]# docker ps</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class=\"line\">0569081aa89c        centos              &quot;/bin/bash&quot;         19 seconds ago      Up 19 seconds    </span><br><span class=\"line\">hopeful_chebyshev</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看主机home下无文件</span></span><br><span class=\"line\">[root@192 ~]# cd /home</span><br><span class=\"line\">[root@192 home]# ls</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入正在运行的容器</span></span><br><span class=\"line\">[root@192 home]# docker attach 0569081aa89c</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入容器home目录</span></span><br><span class=\"line\">[root@0569081aa89c /]# cd /home</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在目录中创建java文件</span></span><br><span class=\"line\">[root@0569081aa89c home]# touch test.java</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">退出并停止容器</span></span><br><span class=\"line\">[root@0569081aa89c home]# exit</span><br><span class=\"line\">exit</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看现在运行的容器</span></span><br><span class=\"line\">[root@192 home]# docker ps</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">容器虽然被停止，但是数据都会保留</span></span><br><span class=\"line\">[root@192 home]# docker ps -a</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                         PORTS               NAMES</span><br><span class=\"line\">0569081aa89c        centos              &quot;/bin/bash&quot;              3 minutes ago       Exited (0) 8 seconds ago                           hopeful_chebyshev</span><br><span class=\"line\">f589e5684a01        centos              &quot;/bin/bash&quot;              44 minutes ago      Exited (0) 44 minutes ago                          cranky_easley</span><br><span class=\"line\">cb6d7fbc3f27        centos              &quot;/bin/sh -c &#x27;while t…&quot;   54 minutes ago      Exited (137) 42 minutes ago                        dreamy_almeida</span><br><span class=\"line\">c2887d35c71d        centos              &quot;/bin/bash&quot;              58 minutes ago      Exited (127) 16 minutes ago                        vigorous_kare</span><br><span class=\"line\">8ce188e5fee3        centos              &quot;/bin/bash&quot;              About an hour ago   Exited (0) About an hour ago                       tender_dirac</span><br><span class=\"line\">7b1a7dd10ea4        centos              &quot;/bin/bash&quot;              9 hours ago         Exited (0) 9 hours ago                             fervent_mirzakhani</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">容器数据拷贝到主机</span></span><br><span class=\"line\">[root@192 home]# docker cp 0569081aa89c:/home/test.java /home</span><br><span class=\"line\">[root@192 home]# ls</span><br><span class=\"line\">test.java</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">拷贝是一个手动过程，未来我们使用 -v 卷的技术，可以实现自动同步 /home /home</span></span><br></pre></td></tr></table></figure></div>\n<h4 id=\"查看内容占用\"><a class=\"markdownIt-Anchor\" href=\"#查看内容占用\">#</a> 查看内容占用</h4>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stats</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<h4 id=\"小结\"><a class=\"markdownIt-Anchor\" href=\"#小结\">#</a> 小结</h4>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200617210554147.png\"\n                      alt=\"image-20200617210554147\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@192 home]# docker --help</span><br><span class=\"line\"></span><br><span class=\"line\">Usage:\tdocker [OPTIONS] COMMAND</span><br><span class=\"line\"></span><br><span class=\"line\">A self-sufficient runtime for containers</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">      --config string      Location of client config</span><br><span class=\"line\">                           files (default &quot;/root/.docker&quot;)</span><br><span class=\"line\">  -c, --context string     Name of the context to use to</span><br><span class=\"line\">                           connect to the daemon</span><br><span class=\"line\">                           (overrides DOCKER_HOST env var</span><br><span class=\"line\">                           and default context set with</span><br><span class=\"line\">                           &quot;docker context use&quot;)</span><br><span class=\"line\">  -D, --debug              Enable debug mode</span><br><span class=\"line\">  -H, --host list          Daemon socket(s) to connect to</span><br><span class=\"line\">  -l, --log-level string   Set the logging level</span><br><span class=\"line\">                           (&quot;debug&quot;|&quot;info&quot;|&quot;warn&quot;|&quot;error&quot;|&quot;fatal&quot;) (default &quot;info&quot;)</span><br><span class=\"line\">      --tls                Use TLS; implied by --tlsverify</span><br><span class=\"line\">      --tlscacert string   Trust certs signed only by</span><br><span class=\"line\">                           this CA (default</span><br><span class=\"line\">                           &quot;/root/.docker/ca.pem&quot;)</span><br><span class=\"line\">      --tlscert string     Path to TLS certificate file</span><br><span class=\"line\">                           (default &quot;/root/.docker/cert.pem&quot;)</span><br><span class=\"line\">      --tlskey string      Path to TLS key file (default</span><br><span class=\"line\">                           &quot;/root/.docker/key.pem&quot;)</span><br><span class=\"line\">      --tlsverify          Use TLS and verify the remote</span><br><span class=\"line\">  -v, --version            Print version information and quit</span><br><span class=\"line\"></span><br><span class=\"line\">Management Commands:</span><br><span class=\"line\">  builder     Manage builds</span><br><span class=\"line\">  config      Manage Docker configs</span><br><span class=\"line\">  container   Manage containers</span><br><span class=\"line\">  context     Manage contexts</span><br><span class=\"line\">  engine      Manage the docker engine</span><br><span class=\"line\">  image       Manage images</span><br><span class=\"line\">  network     Manage networks</span><br><span class=\"line\">  node        Manage Swarm nodes</span><br><span class=\"line\">  plugin      Manage plugins</span><br><span class=\"line\">  secret      Manage Docker secrets</span><br><span class=\"line\">  service     Manage services</span><br><span class=\"line\">  stack       Manage Docker stacks</span><br><span class=\"line\">  swarm       Manage Swarm</span><br><span class=\"line\">  system      Manage Docker</span><br><span class=\"line\">  trust       Manage trust on Docker images</span><br><span class=\"line\">  volume      Manage volumes</span><br><span class=\"line\"></span><br><span class=\"line\">Commands:</span><br><span class=\"line\">  attach      Attach local standard input, output, and error streams to a running container</span><br><span class=\"line\">  build       Build an image from a Dockerfile</span><br><span class=\"line\">  commit      Create a new image from a container&#x27;s changes</span><br><span class=\"line\">  cp          Copy files/folders between a container and the local filesystem</span><br><span class=\"line\">  create      Create a new container</span><br><span class=\"line\">  diff        Inspect changes to files or directories on a container&#x27;s filesystem</span><br><span class=\"line\">  events      Get real time events from the server</span><br><span class=\"line\">  exec        Run a command in a running container</span><br><span class=\"line\">  export      Export a container&#x27;s filesystem as a tar archive</span><br><span class=\"line\">  history     Show the history of an image</span><br><span class=\"line\">  images      List images</span><br><span class=\"line\">  import      Import the contents from a tarball to create a filesystem image</span><br><span class=\"line\">  info        Display system-wide information</span><br><span class=\"line\">  inspect     Return low-level information on Docker objects</span><br><span class=\"line\">  kill        Kill one or more running containers</span><br><span class=\"line\">  load        Load an image from a tar archive or STDIN</span><br><span class=\"line\">  login       Log in to a Docker registry</span><br><span class=\"line\">  logout      Log out from a Docker registry</span><br><span class=\"line\">  logs        Fetch the logs of a container</span><br><span class=\"line\">  pause       Pause all processes within one or more containers</span><br><span class=\"line\">  port        List port mappings or a specific mapping for the container</span><br><span class=\"line\">  ps          List containers</span><br><span class=\"line\">  pull        Pull an image or a repository from a registry</span><br><span class=\"line\">  push        Push an image or a repository to a registry</span><br><span class=\"line\">  rename      Rename a container</span><br><span class=\"line\">  restart     Restart one or more containers</span><br><span class=\"line\">  rm          Remove one or more containers</span><br><span class=\"line\">  rmi         Remove one or more images</span><br><span class=\"line\">  run         Run a command in a new container</span><br><span class=\"line\">  save        Save one or more images to a tar archive (streamed to STDOUT by default)</span><br><span class=\"line\">  search      Search the Docker Hub for images</span><br><span class=\"line\">  start       Start one or more stopped containers</span><br><span class=\"line\">  stats       Display a live stream of container(s) resource usage statistics</span><br><span class=\"line\">  stop        Stop one or more running containers</span><br><span class=\"line\">  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE</span><br><span class=\"line\">  top         Display the running processes of a container</span><br><span class=\"line\">  unpause     Unpause all processes within one or more containers</span><br><span class=\"line\">  update      Update configuration of one or more containers</span><br><span class=\"line\">  version     Show the Docker version information</span><br><span class=\"line\">  wait        Block until one or more containers stop, then print their exit codes</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202306051637646.png\"\n                      alt=\"image-20200617210932306\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202306051637636.png\"\n                      alt=\"image-20200617211021003\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202306051637671.png\"\n                      alt=\"image-20200617211039508\"\n                ></p>\n<h4 id=\"作业练习\"><a class=\"markdownIt-Anchor\" href=\"#作业练习\">#</a> 作业练习</h4>\n<h5 id=\"部署nginx\"><a class=\"markdownIt-Anchor\" href=\"#部署nginx\">#</a> 部署 Nginx</h5>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200618100621199.png\"\n                      alt=\"image-20200618100621199\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">官网搜索nginx，可以看到帮助文档</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载镜像</span></span><br><span class=\"line\">[root@192 home]# docker pull nginx</span><br><span class=\"line\">Using default tag: latest</span><br><span class=\"line\">latest: Pulling from library/nginx</span><br><span class=\"line\">8559a31e96f4: Pull complete </span><br><span class=\"line\">8d69e59170f7: Pull complete </span><br><span class=\"line\">3f9f1ec1d262: Pull complete </span><br><span class=\"line\">d1f5ff4f210d: Pull complete </span><br><span class=\"line\">1e22bfa8652e: Pull complete </span><br><span class=\"line\">Digest: sha256:21f32f6c08406306d822a0e6e8b7dc81f53f336570e852e25fbe1e3e3d0d0133</span><br><span class=\"line\">Status: Downloaded newer image for nginx:latest</span><br><span class=\"line\">docker.io/library/nginx:latest</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看镜像</span></span><br><span class=\"line\">[root@192 home]# docker images</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">centos              latest              831691599b88        13 hours ago        215MB</span><br><span class=\"line\">nginx               latest              2622e6cca7eb        7 days ago          132MB</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">运行测试</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-d 后台运行，--name 命名，-p 暴露端口，3344服务器、宿主机的端口，容器内部端口</span></span><br><span class=\"line\">[root@192 home]# docker run -d --name nginx01 -p:3344:80 nginx</span><br><span class=\"line\">38dbf7bdcaef232d269b7184d91e44e06087181b5ee929494e177ad526810fa8</span><br><span class=\"line\">[root@192 home]# docker ps</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES</span><br><span class=\"line\">38dbf7bdcaef        nginx               &quot;/docker-entrypoint.…&quot;   7 seconds ago       Up 6 seconds        0.0.0.0:3344-&gt;80/tcp   nginx01</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用3344可以访问成功</span></span><br><span class=\"line\">[root@192 home]# curl localhost:3344</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">    body &#123;</span><br><span class=\"line\">        width: 35em;</span><br><span class=\"line\">        margin: 0 auto;</span><br><span class=\"line\">        font-family: Tahoma, Verdana, Arial, sans-serif;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class=\"line\">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class=\"line\">working. Further configuration is required.&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;p&gt;For online documentation and support please refer to</span><br><span class=\"line\">&lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class=\"line\">Commercial support is available at</span><br><span class=\"line\">&lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<p>端口暴露</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202306051637674.png\"\n                      alt=\"image-20200617212310709\"\n                ></p>\n<p>可以公网访问</p>\n<p>找到服务器地址</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200617213213721.png\"\n                      alt=\"image-20200617213213721\"\n                ></p>\n<p>浏览器输入 192.168.147.132:3344/</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200617213142079.png\"\n                      alt=\"image-20200617213142079\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@192 home]# docker ps</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES</span><br><span class=\"line\">38dbf7bdcaef        nginx               &quot;/docker-entrypoint.…&quot;   21 minutes ago      Up 21 minutes       0.0.0.0:3344-&gt;80/tcp   nginx01</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入容器</span></span><br><span class=\"line\">[root@192 home]# docker exec -it nginx01 /bin/bash</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查一下nginx在哪</span></span><br><span class=\"line\">root@38dbf7bdcaef:/# whereis nginx</span><br><span class=\"line\">nginx: /usr/sbin/nginx /usr/lib/nginx /etc/nginx /usr/share/nginx</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">到这个目录</span></span><br><span class=\"line\">root@38dbf7bdcaef:/# cd /etc/nginx</span><br><span class=\"line\">root@38dbf7bdcaef:/etc/nginx# ls</span><br><span class=\"line\">conf.d\t\tkoi-utf  mime.types  nginx.conf   uwsgi_params</span><br><span class=\"line\">fastcgi_params\tkoi-win  modules     scgi_params  win-utf</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">退出</span></span><br><span class=\"line\">root@38dbf7bdcaef:/etc/nginx# exit</span><br><span class=\"line\">exit</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">停止</span></span><br><span class=\"line\">[root@192 home]# docker stop 38dbf7bdcaef</span><br><span class=\"line\">38dbf7bdcaef</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<p>再次刷新网页，服务关闭</p>\n<p>思考问题：每次改动 nginx 配置文件，都需要进入容器内部，十分麻烦，要是可以在容器外部提供一个映射路径，达到在容器修改文件名，容器内部就可以自动修改？-v 数据卷技术！</p>\n<h5 id=\"部署tomcat\"><a class=\"markdownIt-Anchor\" href=\"#部署tomcat\">#</a> 部署 tomcat</h5>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200618100551587.png\"\n                      alt=\"image-20200618100551587\"\n                ></p>\n<p>在 docker hub 上查看版本号和使用方法</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200618100319796.png\"\n                      alt=\"image-20200618100319796\"\n                ></p>\n<p>官方文档一定要翻烂，超多版本，我的天呐～</p>\n<h6 id=\"官方方法\"><a class=\"markdownIt-Anchor\" href=\"#官方方法\">#</a> 官方方法</h6>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --rm tomcat:9.0</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">docker run 可以不用pull，能自动下载</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-it 直接进去运行</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">--<span class=\"built_in\">rm</span> 是什么意思？入门的意思？</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">我们之前的启动都是后台，停止了容器之后，容器还是可以查到</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">写了--<span class=\"built_in\">rm</span>，类似阅后即焚模式，用完即删除，这种通常用来测试</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">最后冒号查好的版本号</span></span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200618101811914.png\"\n                      alt=\"image-20200618101811914\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200618101849917.png\"\n                      alt=\"image-20200618101849917\"\n                ></p>\n<p>ctrl+c 退出</p>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -a</span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200618102022167.png\"\n                      alt=\"image-20200618102022167\"\n                ></p>\n<p>可以看到并没有 tomcat，印证阅后即焚模式，容器会删除，镜像不会删除</p>\n<p>平时不建议这样搞</p>\n<h6 id=\"正常方法\"><a class=\"markdownIt-Anchor\" href=\"#正常方法\">#</a> 正常方法</h6>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull tomcat:9.0 # 之前下过了，应该不用下了，这里老师讲错了</span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200618102544564.png\"\n                      alt=\"image-20200618102544564\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动运行，应该加上版本号</span></span><br><span class=\"line\">docker run -d -p 3355:8080 --name tomcat01 tomcat</span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200618102837397.png\"\n                      alt=\"image-20200618102837397\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入容器</span></span><br><span class=\"line\">docker exec -it tomcat01 /bin/bash</span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200618103109004.png\"\n                      alt=\"image-20200618103109004\"\n                ></p>\n<p>发现问题</p>\n<ol>\n<li>linux 命令少了</li>\n<li>没有 webapps</li>\n</ol>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200618103407205.png\"\n                      alt=\"image-20200618103407205\"\n                ></p>\n<p>这是阿里云镜像的原因：默认使用最小镜像，所有不必要的都剔除了，保证最小可运行环境</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200618103848104.png\"\n                      alt=\"image-20200618103848104\"\n                ></p>\n<p>再次找到结构</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200618104052242.png\"\n                      alt=\"image-20200618104052242\"\n                ></p>\n<p>在浏览器中输入：<a class=\"link\"   href=\"http://192.168.147.132:3355/\" >http://192.168.147.132:3355/ <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200618103958168.png\"\n                      alt=\"image-20200618103958168\"\n                ></p>\n<p>思考问题：我们以后部署项目，如果每次都要进入容器是不是身份麻烦？我要是可以在容器外部提供一个映射路径，webapps，我们在外部放置项目，就自动同步到内部就好了！</p>\n<p>docker 容器 tomcat + 网站</p>\n<p>docker mysql</p>\n<h5 id=\"部署eskibana\"><a class=\"markdownIt-Anchor\" href=\"#部署eskibana\">#</a> 部署 es+kibana</h5>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200618104950722.png\"\n                      alt=\"image-20200618104950722\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">es 暴露的端口很多</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">es 十分耗内存</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">es 的数据一般需要放置到安全目录！挂载</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动 elasticsearch</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">docker run -d --name elasticsearch01 -p 9200:9200 -p 9300:9300 -e <span class=\"string\">&quot;discovery.type=single-node&quot;</span> elasticsearch:7.6.2</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看内存占用情况</span></span><br><span class=\"line\">docker stats</span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200618111713885.png\"\n                      alt=\"image-20200618111713885\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">先感觉stop一下</span></span><br><span class=\"line\">docker stop ba18713ca536</span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200618105057785.png\"\n                      alt=\"image-20200618105057785\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">通过 -e 限制内存</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">docker run -d --name elasticsearch02 -p 9200:9200 -p 9300:9300 -e <span class=\"string\">&quot;discovery.type=single-node&quot;</span> -e ES_JAVA_OPTS=“-Xms64m -Xmx512m” elasticsearch:7.6.2</span></span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200618113018622.png\"\n                      alt=\"image-20200618113018622\"\n                ></p>\n<p>没成功啊，SEI 能告诉我为啥！！</p>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name elasticsearch02 -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; -e ES_JAVA_OPTS=&quot;-Xms64m -Xmx512m&quot; elasticsearch:7.6.2</span><br></pre></td></tr></table></figure></div>\n<blockquote>\n<p>py0003null 大佬:<br>\n“ES_JAVA_OPTS=-Xms64m -Xmx512m”</p>\n<p>py0003null 大佬:<br>\n 引号提前试试</p>\n</blockquote>\n<p>原因是引号！！你没觉得怪怪的嘛</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200618115302656.png\"\n                      alt=\"image-20200618115302656\"\n                ></p>\n<p>此时查看 stats，发现内存占用在控制范围内</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200618115149971.png\"\n                      alt=\"image-20200618115149971\"\n                ></p>\n<p>ctrl + C 退出，记得 stop</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200618115921069.png\"\n                      alt=\"image-20200618115921069\"\n                ></p>\n<h5 id=\"思考用kibana链接elasticsearch\"><a class=\"markdownIt-Anchor\" href=\"#思考用kibana链接elasticsearch\">#</a> 思考：用 kibana 链接 elasticsearch</h5>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200618113556445.png\"\n                      alt=\"image-20200618113556445\"\n                ></p>\n<h3 id=\"可视化\"><a class=\"markdownIt-Anchor\" href=\"#可视化\">#</a> 可视化</h3>\n<ul>\n<li>portainer (先用这个)</li>\n<li>Rancher (CI/CD 时用)</li>\n</ul>\n<h4 id=\"portainer\"><a class=\"markdownIt-Anchor\" href=\"#portainer\">#</a> portainer</h4>\n<p>Docker 图像化界面管理工具，提供一个后台面板供我们操作！</p>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 8088:9000 --restart=always -v /var/run/docker.sock:/var/run/docker --privileged=true portainer/portainer</span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200618114542622.png\"\n                      alt=\"image-20200618114542622\"\n                ></p>\n<p>访问外网 8088</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200618114902169.png\"\n                      alt=\"image-20200618114902169\"\n                ></p>\n<p>用户名</p>\n<p>密码</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200618134706491.png\"\n                      alt=\"image-20200618134706491\"\n                ></p>\n<p>【中午吃饭重连了一下，失败，不知道发生了啥】</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200618135424706.png\"\n                      alt=\"image-20200618135424706\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200618135450037.png\"\n                      alt=\"image-20200618135450037\"\n                ></p>\n<p>【平时不会用这个，好吧，先往下】</p>\n<h3 id=\"\"><a class=\"markdownIt-Anchor\" href=\"#\">#</a> </h3>\n<h2 id=\"docker镜像\"><a class=\"markdownIt-Anchor\" href=\"#docker镜像\">#</a> Docker 镜像</h2>\n<h3 id=\"原理\"><a class=\"markdownIt-Anchor\" href=\"#原理\">#</a> 原理</h3>\n<p>UnionFS 联合文件系统</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200618140242423.png\"\n                      alt=\"image-20200618140242423\"\n                ></p>\n<p>bootfs：boot file system</p>\n<p>rootfs：root file system</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200618140907894.png\"\n                      alt=\"image-20200618140907894\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200618140932621.png\"\n                      alt=\"image-20200618140932621\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200618141014511.png\"\n                      alt=\"image-20200618141014511\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200618153329894.png\"\n                      alt=\"image-20200618153329894\"\n                ></p>\n<p>Docker 镜像都是只读的，当容器启动时，一个新的可写层被加到镜像的顶部，这一层就是我们通常说的容器层，容器层之下的都叫镜像层</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200618153855605.png\"\n                      alt=\"image-20200618153855605\"\n                ></p>\n<h3 id=\"commit提交镜像\"><a class=\"markdownIt-Anchor\" href=\"#commit提交镜像\">#</a> commit 提交镜像</h3>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker commit # 提交容器成为一个新的副本</span><br><span class=\"line\">docker commit -m=&quot;提交的描述信息&quot; -a=&quot;作者&quot; 容器id 目标镜像名：[TAG]</span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br><span class=\"line\">docker run -it -p 8080:8080 tomcat</span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200618154457286.png\"\n                      alt=\"image-20200618154457286\"\n                ></p>\n<p>这是一个前台程序</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200618154736475.png\"\n                      alt=\"image-20200618154736475\"\n                ></p>\n<p>将 webapps.dist 里面所有的文件拷贝到 webapps 里面，其中 - r 必须有，表示目录递归拷贝</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200618154943194.png\"\n                      alt=\"image-20200618154943194\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200618155750591.png\"\n                      alt=\"image-20200618155750591\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker commit -a=&quot;paidaxing&quot; -m=&quot;add webapps app&quot; 当前容器的id tomcat02:1.0</span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200618160425265.png\"\n                      alt=\"image-20200618160425265\"\n                ></p>\n<p>发现新的版本，比之前的大了一些，因为里面记录了我们的改动</p>\n<blockquote>\n<p>如果想保存当前容器的状态，可以通过 commit 提交，获得一个镜像</p>\n<p>好比我们以前学习 VM 的时候的快照</p>\n<p>到这里算是入门了</p>\n<p>接下来三个部分是 docker 的精髓</p>\n</blockquote>\n<h2 id=\"容器数据卷\"><a class=\"markdownIt-Anchor\" href=\"#容器数据卷\">#</a> 容器数据卷</h2>\n<h3 id=\"什么是容器卷\"><a class=\"markdownIt-Anchor\" href=\"#什么是容器卷\">#</a> 什么是容器卷</h3>\n<p>docker 是要将应用和环境打包成一个镜像</p>\n<p>这样，数据就不应该在容器中，否则容器删除，数据就会丢失，这就是删库跑路</p>\n<p>故容器之间要有一个数据共享技术</p>\n<p>在 Docker 容器中产生的数据，同步到本地，这就是卷技术</p>\n<p>本质上是一个目录挂载，将容器内的目录挂载到虚拟机上</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200618162917672.png\"\n                      alt=\"image-20200618162917672\"\n                ></p>\n<p>目的：容器的持久化和同步操作</p>\n<p>容器间可以数据共享</p>\n<h3 id=\"使用数据卷\"><a class=\"markdownIt-Anchor\" href=\"#使用数据卷\">#</a> 使用数据卷</h3>\n<p>方式一：直接使用命令来挂载</p>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it -v -p</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-it 交互式进入</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-v volume卷技术</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-p 主机端口</span></span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200618163659503.png\"\n                      alt=\"image-20200618163659503\"\n                ></p>\n<p>新开一个窗口</p>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker inspect 容器id</span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200618163938466.png\"\n                      alt=\"image-20200618163938466\"\n                ></p>\n<p>找到挂载信息 Mounts</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200618164148642.png\"\n                      alt=\"image-20200618164148642\"\n                ></p>\n<p>测试</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200618164818624.png\"\n                      alt=\"image-20200618164818624\"\n                ></p>\n<p>容器停止后，修改主机文件，再启动容器的时候，数据同样改变</p>\n<p>双向同步</p>\n<h3 id=\"实战安装mysql\"><a class=\"markdownIt-Anchor\" href=\"#实战安装mysql\">#</a> 实战安装 mysql</h3>\n<p>MySQL 的数据持久化命令</p>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search mysql</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">拉取</span></span><br><span class=\"line\">docker pull mysql:5.7</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">挂载</span></span><br><span class=\"line\">docker run -d -p 3310:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql5.7</span><br><span class=\"line\"></span><br><span class=\"line\">-d 后台运行</span><br><span class=\"line\">-p 端口映射</span><br><span class=\"line\">-v 卷挂载</span><br><span class=\"line\">-e 环境配置 安装启动mysql需要配置密码</span><br><span class=\"line\">--name 容器名字</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200618171353336.png\"\n                      alt=\"image-20200618171353336\"\n                ></p>\n<p>链接测试：打开 SQLyog</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200618173234347.png\"\n                      alt=\"image-20200618173234347\"\n                ></p>\n<p>点 测试链接</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200618173300551.png\"\n                      alt=\"image-20200618173300551\"\n                ></p>\n<p>点 链接</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200618173729692.png\"\n                      alt=\"image-20200618173729692\"\n                ></p>\n<h3 id=\"具名和匿名挂载\"><a class=\"markdownIt-Anchor\" href=\"#具名和匿名挂载\">#</a> 具名和匿名挂载</h3>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200618203452205.png\"\n                      alt=\"image-20200618203452205\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202306051637679.png\"\n                      alt=\"image-20200618203744983\"\n                ></p>\n<h3 id=\"-2\"><a class=\"markdownIt-Anchor\" href=\"#-2\">#</a> </h3>\n<p>DockerFile 使用来构建 docker 镜像的文件</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200618211547398.png\"\n                      alt=\"image-20200618211547398\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install vim # 编辑文件的，没有装一下</span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200618211516566.png\"\n                      alt=\"image-20200618211516566\"\n                ></p>\n<p>安装完之后就可以运行这个命令了</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200618211803012.png\"\n                      alt=\"image-20200618211803012\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">镜像是一层一层的，脚本是一行一行的</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">指令都是大写的</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">这里的每个命令可以理解为镜像的一层</span></span><br><span class=\"line\"></span><br><span class=\"line\">FROM centos</span><br><span class=\"line\"></span><br><span class=\"line\">VOLUME [&quot;volume01&quot;,&quot;volume02&quot;] # 再创建镜像的时候就挂载出来</span><br><span class=\"line\"></span><br><span class=\"line\">CMD echo &quot;---end---&quot;</span><br><span class=\"line\">CMD /bin/bash</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200618211023834.png\"\n                      alt=\"image-20200618211023834\"\n                ></p>\n<p>想保存并退出</p>\n<blockquote>\n<p>Wesley.:<br>\nshift  加  冒号</p>\n</blockquote>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200618211318410.png\"\n                      alt=\"image-20200618211318410\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat dockerfile1</span><br><span class=\"line\"></span><br><span class=\"line\">docker build -f dockerfile1 -t padaxing/centos:1.0 .  # 最后的点很重要 镜像名不能有/</span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200618212936481.png\"\n                      alt=\"image-20200618212936481\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200618213310752.png\"\n                      alt=\"image-20200618213310752\"\n                ></p>\n<p>启动生成的镜像</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200618220658979.png\"\n                      alt=\"image-20200618220658979\"\n                ></p>\n<p>在容器内部创建一个文件</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200618221801103.png\"\n                      alt=\"image-20200618221801103\"\n                ></p>\n<p>查看 Mounts，Source 对应容器外目录，匿名挂载卷</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200618221837895.png\"\n                      alt=\"image-20200618221837895\"\n                ></p>\n<p>测试一下，在 container volume01 下生成文件</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200618222224352.png\"\n                      alt=\"image-20200618222224352\"\n                ></p>\n<p>在主机挂载路径下，也同样生成</p>\n<h3 id=\"多个容器数据共享\"><a class=\"markdownIt-Anchor\" href=\"#多个容器数据共享\">#</a> 多个容器数据共享</h3>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200621165403842.png\"\n                      alt=\"image-20200621165403842\"\n                ></p>\n<p>看一下有啥 images</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200621165733780.png\"\n                      alt=\"image-20200621165733780\"\n                ></p>\n<p>启动 docker01，用之前建的 padaxing/centos 1.0  镜像</p>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --name docker01 padaxing/centos:1.0 # 1.0必须写</span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200621170429658.png\"\n                      alt=\"image-20200621170429658\"\n                ></p>\n<p>当前这个 ctrl+p+q 不停止退出</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200621170540593.png\"\n                      alt=\"image-20200621170540593\"\n                ></p>\n<p>依次启动 docker02、docker03</p>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --name docker02 --volumes-from docker01 padaxing/centos:1.0</span><br></pre></td></tr></table></figure></div>\n<p>docker02 继承 docker01 的 volumes</p>\n<p>可以验证，在 docker01 下加一个数据，在 docker02 下也会出现</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200621171513650.png\"\n                      alt=\"image-20200621171513650\"\n                ></p>\n<p>创建 docker03，同样继承 docker01</p>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --name docker03 --volumes-from docker01 padaxing/centos:1.0</span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200621172333639.png\"\n                      alt=\"image-20200621172333639\"\n                ></p>\n<p>在 docker03 的 volume01 下建立文件，在 docker01 的 volume01 下同样也有</p>\n<p>即通过–volumes-from 可以实现不同容器间的数据共享</p>\n<p>删除 docker01，数据还在</p>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm -f </span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200621172830779.png\"\n                      alt=\"image-20200621172830779\"\n                ></p>\n<p>可以看到，删除 docker01，进入 docker02，数据依然在</p>\n<p>结论：</p>\n<p>容器之间配置信息的传递，数据卷容器的生命周期一直持续到没有容器使用位置</p>\n<p>但是如果持久化到了本地，即使所有容器删除了，本地数据是不会删除的</p>\n<hr>\n<h2 id=\"dockerfile\"><a class=\"markdownIt-Anchor\" href=\"#dockerfile\">#</a> DockerFile</h2>\n<p>是用来构建 docker 镜像的文件，可以理解为命令参数脚本</p>\n<p>构建步骤：</p>\n<ol>\n<li>编写一个 dockerfile 文件</li>\n<li>docker build 构建成为一个镜像</li>\n<li>docker run 运行镜像</li>\n<li>docker push 发布镜像（DockerHub、阿里云镜像仓库 私有 / 共有）</li>\n</ol>\n<p>这个写一个项目时一样的</p>\n<h3 id=\"官方dockerfile示例\"><a class=\"markdownIt-Anchor\" href=\"#官方dockerfile示例\">#</a> 官方 DockerFile 示例</h3>\n<p>看一下官方的 DockerFile</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200621174204807.png\"\n                      alt=\"image-20200621174204807\"\n                ></p>\n<p>可以看到官方镜像都是基础包，很多功能没有，我们通常会自己搭建自己的镜像</p>\n<p>官方既然可以制作镜像，我们亦可以</p>\n<hr>\n<h3 id=\"dockerfile基础知识\"><a class=\"markdownIt-Anchor\" href=\"#dockerfile基础知识\">#</a> DockerFile 基础知识</h3>\n<ol>\n<li>每个指令都必须是大写字母</li>\n<li>按照从上到下顺序执行</li>\n<li>*#* 表示注释</li>\n<li>每一个指令都会创建体检一个新的镜像层，并提交</li>\n</ol>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200621174948310.png\"\n                      alt=\"image-20200621174948310\"\n                ></p>\n<p>docker 是面向开发的，我们以后要发布项目，做镜像，就要编写 dockerfile 文件，这个文件十分简单！</p>\n<p>Docker 镜像逐渐成为企业的交付标准，必须掌握！</p>\n<hr>\n<h3 id=\"dockerfile命令\"><a class=\"markdownIt-Anchor\" href=\"#dockerfile命令\">#</a> DockerFile 命令</h3>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/171.jpg\"\n                      alt=\"æ¥çæºå¾å\"\n                ></p>\n<h3 id=\"-3\"><a class=\"markdownIt-Anchor\" href=\"#-3\">#</a> </h3>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM # 基础镜像 比如centos</span><br><span class=\"line\">MAINTAINER # 镜像是谁写的 姓名+邮箱</span><br><span class=\"line\">RUN # 镜像构建时需要运行的命令</span><br><span class=\"line\">ADD # 添加，比如添加一个tomcat压缩包</span><br><span class=\"line\">WORKDIR # 镜像的工作目录</span><br><span class=\"line\">VOLUME # 挂载的目录</span><br><span class=\"line\">EXPOSE # 指定暴露端口，跟-p一个道理</span><br><span class=\"line\">RUN # 最终要运行的</span><br><span class=\"line\">CMD # 指定这个容器启动的时候要运行的命令，只有最后一个会生效，而且可被替代</span><br><span class=\"line\">ENTRYPOINT # 指定这个容器启动的时候要运行的命令，可以追加命令</span><br><span class=\"line\">ONBUILD # 当构建一个被继承Dockerfile 这个时候运行ONBUILD指定，触发指令</span><br><span class=\"line\">COPY # 将文件拷贝到镜像中</span><br><span class=\"line\">ENV # 构建的时候设置环境变量</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"实战构建自己的centos\"><a class=\"markdownIt-Anchor\" href=\"#实战构建自己的centos\">#</a> 实战构建自己的 centos</h3>\n<p>Docker Hub 中 99% 的镜像都是从 FROM scratch 开始的</p>\n<p>添加 centos7 的压缩包</p>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建一个自己的centos</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入home目录</span></span><br><span class=\"line\">cd /home</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建一个目录，之后的东西都保存到这里</span></span><br><span class=\"line\">mkdir dockerfile</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入这个目录</span></span><br><span class=\"line\">cd dockerfile/</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建一个dockerfile，名字叫mydockerfile</span></span><br><span class=\"line\">vim mydockerfile-centos</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<p>xshell 新开一个界面</p>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">官方默认centos</span></span><br><span class=\"line\">docker run -it centos</span><br><span class=\"line\">pwd # 官方默认有pwd命令</span><br><span class=\"line\">vim # 官方默认没有vim命令</span><br><span class=\"line\">ifconfig # 官方默认没有ifconfig命令</span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200621184333206.png\"\n                      alt=\"image-20200621184333206\"\n                ></p>\n<p>回到 mydockerfile</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200621184847524.png\"\n                      alt=\"image-20200621184847524\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下面给官方centos加上自定义的内容</span></span><br><span class=\"line\">FROM centos</span><br><span class=\"line\">MAINTAINER padaxing&lt;010301200@hai.com&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">ENV MYPATH /usr/local</span><br><span class=\"line\">WORKDIR $MYPATH</span><br><span class=\"line\"></span><br><span class=\"line\">RUN yum -y install vim</span><br><span class=\"line\">RUN yum -y install net-tools</span><br><span class=\"line\"></span><br><span class=\"line\">EXPOSE 80</span><br><span class=\"line\"></span><br><span class=\"line\">CMD echo $MYPATH</span><br><span class=\"line\">CMD echo &quot;---end---&quot;</span><br><span class=\"line\">CMD /bin/bash</span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200621185539523.png\"\n                      alt=\"image-20200621185539523\"\n                ></p>\n<p>ESC, shif + : 输入 wq 保存并退出</p>\n<p>如果写错了需要修改、</p>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim mydockerfile-centos</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入之后按i或者INSERT键即可修改</span></span><br></pre></td></tr></table></figure></div>\n<p>下面通过这个这个文件创建镜像</p>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -f dockerfile-centos -t mycentos:0.1 .</span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200621190219978.png\"\n                      alt=\"image-20200621190219978\"\n                ></p>\n<p>依次执行命令</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200621190439448.png\"\n                      alt=\"image-20200621190439448\"\n                ></p>\n<p>最终返回 Successfully 表示成功</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200621190524848.png\"\n                      alt=\"image-20200621190524848\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it mycentos:0.1 # 版本号必须写，不然他会去找最新的</span><br><span class=\"line\">pwd</span><br><span class=\"line\">vim</span><br><span class=\"line\">ifconfig</span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200621190812481.png\"\n                      alt=\"image-20200621190812481\"\n                ></p>\n<p>这时可以看到这些功能都有了</p>\n<p>可以通过查看 docker 构建历史</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200621192103460.png\"\n                      alt=\"image-20200621192103460\"\n                ></p>\n<p>可以看到当前这个镜像是怎么一步一步构建起来的</p>\n<p>我们平时拿到一个镜像也可以通过这个方法研究一下他是怎么做的</p>\n<h3 id=\"cmd与entrypoint\"><a class=\"markdownIt-Anchor\" href=\"#cmd与entrypoint\">#</a> CMD 与 ENTRYPOINT</h3>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM centos</span><br><span class=\"line\">CMD [&quot;ls&quot;,&quot;-a&quot;] # 启动centos展示目录</span><br></pre></td></tr></table></figure></div>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202306051637698.png\"\n                      alt=\"image-20200622075427103\"\n                ></p>\n<p>测试 ENTRYPOINT</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"../../../../%E7%AC%94%E8%AE%B0/Docker.assets/image-20200622075653789.png\"\n                      alt=\"image-20200622075653789\"\n                ></p>\n<p>run 的时候可以直接加命令</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20200622075802180.png\"\n                      alt=\"image-20200622075802180\"\n                ></p>\n<p>Docker 中许多命令都十分相似，我们需要了解他们的区别，最好的方式就是这样对比测试</p>\n",
            "tags": [
                "Docker"
            ]
        },
        {
            "id": "https://wait-you.github.io/2023/06/02/RabbitMQ/",
            "url": "https://wait-you.github.io/2023/06/02/RabbitMQ/",
            "title": "RabbitMQ",
            "date_published": "2023-06-01T20:37:34.000Z",
            "content_html": "<h1 id=\"1-消息中间件概述\"><a class=\"markdownIt-Anchor\" href=\"#1-消息中间件概述\">#</a> 1. 消息中间件概述</h1>\n<h2 id=\"11-什么是消息中间件\"><a class=\"markdownIt-Anchor\" href=\"#11-什么是消息中间件\">#</a> 1.1. 什么是消息中间件</h2>\n<p>MQ 全称为 Message Queue，消息队列是应用程序和应用程序之间的通信方法。</p>\n<ul>\n<li>\n<p>为什么使用 MQ</p>\n<p>在项目中，可将一些无需即时返回且耗时的操作提取出来，进行<strong>异步处理</strong>，而这种异步处理的方式大大的节省了服务器的请求响应时间，从而<strong>提高</strong>了<strong>系统</strong>的<strong>吞吐量</strong>。</p>\n</li>\n<li>\n<p>开发中消息队列通常有如下应用场景：</p>\n<p>1、任务<strong>异步</strong>处理</p>\n<p>将不需要同步处理的并且耗时长的操作由消息队列通知消息接收方进行异步处理。提高了应用程序的响应时间。</p>\n<p>2、应用程序<strong>解耦合</strong></p>\n<p>MQ 相当于一个中介，生产方通过 MQ 与消费方交互，它将应用程序进行解耦合。</p>\n<p>3、<strong>削峰填谷</strong></p>\n<p>如订单系统，在下单的时候就会往数据库写数据。但是数据库只能支撑每秒 1000 左右的并发写入，并发量再高就容易宕机。低峰期的时候并发也就 100 多个，但是在高峰期时候，并发量会突然激增到 5000 以上，这个时候数据库肯定卡死了。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/01.jpg\"\n                      alt=\"\"\n                ></p>\n<p>消息被 MQ 保存起来了，然后系统就可以按照自己的消费能力来消费，比如每秒 1000 个数据，这样慢慢写入数据库，这样就不会卡死数据库了。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/02.jpg\"\n                      alt=\"\"\n                ></p>\n<p>但是使用了 MQ 之后，限制消费消息的速度为 1000，但是这样一来，高峰期产生的数据势必会被积压在 MQ 中，高峰就被 “削” 掉了。但是因为消息积压，在高峰期过后的一段时间内，消费消息的速度还是会维持在 1000QPS，直到消费完积压的消息，这就叫做 “填谷”</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/03.jpg\"\n                      alt=\"\"\n                ></p>\n</li>\n</ul>\n<h2 id=\"12-amqp-和-jms\"><a class=\"markdownIt-Anchor\" href=\"#12-amqp-和-jms\">#</a> 1.2. AMQP 和 JMS</h2>\n<p>MQ 是消息通信的模型；实现 MQ 的大致有两种主流方式：AMQP、JMS。</p>\n<h3 id=\"121-amqp\"><a class=\"markdownIt-Anchor\" href=\"#121-amqp\">#</a> 1.2.1. AMQP</h3>\n<p>AMQP 是一种协议，更准确的说是一种 binary wire-level protocol（链接协议）。这是其和 JMS 的本质差别，AMQP 不从 API 层进行限定，而是直接定义网络交换的数据格式。</p>\n<h3 id=\"122-jms\"><a class=\"markdownIt-Anchor\" href=\"#122-jms\">#</a> 1.2.2. JMS</h3>\n<p>JMS 即 Java 消息服务（JavaMessage Service）应用程序接口，是一个 Java 平台中关于面向消息中间件（MOM）的 API，用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。</p>\n<h3 id=\"123-amqp-与-jms-区别\"><a class=\"markdownIt-Anchor\" href=\"#123-amqp-与-jms-区别\">#</a> 1.2.3. AMQP 与 JMS 区别</h3>\n<ul>\n<li>JMS 是定义了统一的接口，来对消息操作进行统一；AMQP 是通过规定协议来统一数据交互的格式</li>\n<li>JMS 限定了必须使用 Java 语言；AMQP 只是协议，不规定实现方式，因此是跨语言的。</li>\n<li>JMS 规定了两种消息模式；而 AMQP 的消息模式更加丰富</li>\n</ul>\n<h2 id=\"13-消息队列产品\"><a class=\"markdownIt-Anchor\" href=\"#13-消息队列产品\">#</a> 1.3. 消息队列产品</h2>\n<p>市场上常见的消息队列有如下：</p>\n<ul>\n<li>ActiveMQ：基于 JMS</li>\n<li>ZeroMQ：基于 C 语言开发</li>\n<li>RabbitMQ：基于 AMQP 协议，erlang 语言开发，稳定性好</li>\n<li>RocketMQ：基于 JMS，阿里巴巴产品</li>\n<li>Kafka：类似 MQ 的产品；分布式消息系统，高吞吐量</li>\n</ul>\n<h2 id=\"14-rabbitmq\"><a class=\"markdownIt-Anchor\" href=\"#14-rabbitmq\">#</a> 1.4. RabbitMQ</h2>\n<p>RabbitMQ 是由 erlang 语言开发，基于 AMQP（Advanced Message Queue 高级消息队列协议）协议实现的消息队列，它是一种应用程序之间的通信方法，消息队列在分布式系统开发中应用非常广泛。</p>\n<p>RabbitMQ 官方地址：<a class=\"link\"   href=\"http://www.rabbitmq.com/\" >http://www.rabbitmq.com/ <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p>RabbitMQ 提供了 6 种模式：简单模式，work 模式，Publish/Subscribe 发布与订阅模式，Routing 路由模式，Topics 主题模式，RPC 远程调用模式（远程调用，不太算 MQ；暂不作介绍）；</p>\n<p>官网对应模式介绍：<a class=\"link\"   href=\"https://www.rabbitmq.com/getstarted.html\" >https://www.rabbitmq.com/getstarted.html <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/1555988678324.png\"\n                      alt=\"1555988678324\"\n                ></p>\n<h1 id=\"2-安装及配置rabbitmq\"><a class=\"markdownIt-Anchor\" href=\"#2-安装及配置rabbitmq\">#</a> 2. 安装及配置 RabbitMQ</h1>\n<p>详细查看  <code>资料/软件/安装RabbitMQ.md</code>  文档。</p>\n<h1 id=\"3-rabbitmq入门\"><a class=\"markdownIt-Anchor\" href=\"#3-rabbitmq入门\">#</a> 3. RabbitMQ 入门</h1>\n<h2 id=\"31-搭建示例工程\"><a class=\"markdownIt-Anchor\" href=\"#31-搭建示例工程\">#</a> 3.1. 搭建示例工程</h2>\n<h3 id=\"311-创建工程\"><a class=\"markdownIt-Anchor\" href=\"#311-创建工程\">#</a> 3.1.1. 创建工程</h3>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/1558319510387.png\"\n                      alt=\"1555991321159\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/1558319546688.png\"\n                      alt=\"1555991353704\"\n                ></p>\n<h3 id=\"312-添加依赖\"><a class=\"markdownIt-Anchor\" href=\"#312-添加依赖\">#</a> 3.1.2. 添加依赖</h3>\n<p>往 heima-rabbitmq 的 pom.xml 文件中添加如下依赖：</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.rabbitmq<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>amqp-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.6.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n<h2 id=\"32-编写生产者\"><a class=\"markdownIt-Anchor\" href=\"#32-编写生产者\">#</a> 3.2. 编写生产者</h2>\n<p>编写消息生产者 com.itheima.rabbitmq.simple.Producer</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.rabbitmq.simple;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.Channel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.Connection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Producer</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">QUEUE_NAME</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;simple_queue&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建连接工厂</span></span><br><span class=\"line\">        <span class=\"type\">ConnectionFactory</span> <span class=\"variable\">connectionFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ConnectionFactory</span>();</span><br><span class=\"line\">        <span class=\"comment\">//主机地址;默认为 localhost</span></span><br><span class=\"line\">        connectionFactory.setHost(<span class=\"string\">&quot;localhost&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//连接端口;默认为 5672</span></span><br><span class=\"line\">        connectionFactory.setPort(<span class=\"number\">5672</span>);</span><br><span class=\"line\">        <span class=\"comment\">//虚拟主机名称;默认为 /</span></span><br><span class=\"line\">        connectionFactory.setVirtualHost(<span class=\"string\">&quot;/itcast&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//连接用户名；默认为guest</span></span><br><span class=\"line\">        connectionFactory.setUsername(<span class=\"string\">&quot;heima&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//连接密码；默认为guest</span></span><br><span class=\"line\">        connectionFactory.setPassword(<span class=\"string\">&quot;heima&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建连接</span></span><br><span class=\"line\">        <span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> connectionFactory.newConnection();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建频道</span></span><br><span class=\"line\">        <span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 声明（创建）队列</span></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数1：队列名称</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数2：是否定义持久化队列</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数3：是否独占本次连接</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数4：是否在不使用的时候自动删除队列</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数5：队列其它参数</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        channel.queueDeclare(QUEUE_NAME, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 要发送的信息</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;你好；小兔子！&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数1：交换机名称，如果没有指定则使用默认Default Exchage</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数2：路由key,简单模式可以传递队列名称</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数3：消息其它属性</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数4：消息内容</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        channel.basicPublish(<span class=\"string\">&quot;&quot;</span>, QUEUE_NAME, <span class=\"literal\">null</span>, message.getBytes());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;已发送消息：&quot;</span> + message);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 关闭资源</span></span><br><span class=\"line\">        channel.close();</span><br><span class=\"line\">        connection.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<p>在执行上述的消息发送之后；可以登录 rabbitMQ 的管理控制台，可以发现队列和其消息：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/1556006638979.png\"\n                      alt=\"1556006638979\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/1556006647177.png\"\n                      alt=\"1556006647177\"\n                ></p>\n<h2 id=\"33-编写消费者\"><a class=\"markdownIt-Anchor\" href=\"#33-编写消费者\">#</a> 3.3. 编写消费者</h2>\n<p>抽取创建 connection 的工具类 com.itheima.rabbitmq.util.ConnectionUtil；</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.rabbitmq.util;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.Connection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConnectionUtil</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Connection <span class=\"title function_\">getConnection</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建连接工厂</span></span><br><span class=\"line\">        <span class=\"type\">ConnectionFactory</span> <span class=\"variable\">connectionFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ConnectionFactory</span>();</span><br><span class=\"line\">        <span class=\"comment\">//主机地址;默认为 localhost</span></span><br><span class=\"line\">        connectionFactory.setHost(<span class=\"string\">&quot;localhost&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//连接端口;默认为 5672</span></span><br><span class=\"line\">        connectionFactory.setPort(<span class=\"number\">5672</span>);</span><br><span class=\"line\">        <span class=\"comment\">//虚拟主机名称;默认为 /</span></span><br><span class=\"line\">        connectionFactory.setVirtualHost(<span class=\"string\">&quot;/itcast&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//连接用户名；默认为guest</span></span><br><span class=\"line\">        connectionFactory.setUsername(<span class=\"string\">&quot;heima&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//连接密码；默认为guest</span></span><br><span class=\"line\">        connectionFactory.setPassword(<span class=\"string\">&quot;heima&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建连接</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> connectionFactory.newConnection();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<p>编写消息的消费者 com.itheima.rabbitmq.simple.Consumer</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.rabbitmq.simple;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.itheima.rabbitmq.util.ConnectionUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Consumer</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> ConnectionUtil.getConnection();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建频道</span></span><br><span class=\"line\">        <span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 声明（创建）队列</span></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数1：队列名称</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数2：是否定义持久化队列</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数3：是否独占本次连接</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数4：是否在不使用的时候自动删除队列</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数5：队列其它参数</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        channel.queueDeclare(Producer.QUEUE_NAME, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建消费者；并设置消息处理</span></span><br><span class=\"line\">        <span class=\"type\">DefaultConsumer</span> <span class=\"variable\">consumer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultConsumer</span>(channel)&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * consumerTag 消息者标签，在channel.basicConsume时候可以指定</span></span><br><span class=\"line\"><span class=\"comment\">             * envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志(收到消息失败后是否需要重新发送)</span></span><br><span class=\"line\"><span class=\"comment\">             * properties 属性信息</span></span><br><span class=\"line\"><span class=\"comment\">             * body 消息</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleDelivery</span><span class=\"params\">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class=\"type\">byte</span>[] body)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">                <span class=\"comment\">//路由key</span></span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;路由key为：&quot;</span> + envelope.getRoutingKey());</span><br><span class=\"line\">                <span class=\"comment\">//交换机</span></span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;交换机为：&quot;</span> + envelope.getExchange());</span><br><span class=\"line\">                <span class=\"comment\">//消息id</span></span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;消息id为：&quot;</span> + envelope.getDeliveryTag());</span><br><span class=\"line\">                <span class=\"comment\">//收到的消息</span></span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;接收到的消息为：&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(body, <span class=\"string\">&quot;utf-8&quot;</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"comment\">//监听消息</span></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数1：队列名称</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数2：是否自动确认，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动确认</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数3：消息接收到后回调</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        channel.basicConsume(Producer.QUEUE_NAME, <span class=\"literal\">true</span>, consumer);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//不关闭资源，应该一直监听消息</span></span><br><span class=\"line\">        <span class=\"comment\">//channel.close();</span></span><br><span class=\"line\">        <span class=\"comment\">//connection.close();</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"34-小结\"><a class=\"markdownIt-Anchor\" href=\"#34-小结\">#</a> 3.4. 小结</h2>\n<p>上述的入门案例中中其实使用的是如下的简单模式：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/1555991074575.png\"\n                      alt=\"1555991074575\"\n                ></p>\n<p>在上图的模型中，有以下概念：</p>\n<ul>\n<li>P：生产者，也就是要发送消息的程序</li>\n<li>C：消费者：消息的接受者，会一直等待消息到来。</li>\n<li>queue：消息队列，图中红色部分。类似一个邮箱，可以缓存消息；生产者向其中投递消息，消费者从其中取出消息。</li>\n</ul>\n<h1 id=\"4-amqp\"><a class=\"markdownIt-Anchor\" href=\"#4-amqp\">#</a> 4. AMQP</h1>\n<h2 id=\"41-相关概念介绍\"><a class=\"markdownIt-Anchor\" href=\"#41-相关概念介绍\">#</a> 4.1. 相关概念介绍</h2>\n<p>AMQP  一个提供统一消息服务的应用层标准高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。</p>\n<p>AMQP 是一个二进制协议，拥有一些现代化特点：多信道、协商式，异步，安全，扩平台，中立，高效。</p>\n<p>RabbitMQ 是 AMQP 协议的 Erlang 的实现。</p>\n<table>\n<thead>\n<tr>\n<th>概念</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>连接 Connection</td>\n<td>一个网络连接，比如 TCP/IP 套接字连接。</td>\n</tr>\n<tr>\n<td>会话 Session</td>\n<td>端点之间的命名对话。在一个会话上下文中，保证 “恰好传递一次”。</td>\n</tr>\n<tr>\n<td>信道 Channel</td>\n<td>多路复用连接中的一条独立的双向数据流通道。为会话提供物理传输介质。</td>\n</tr>\n<tr>\n<td>客户端 Client</td>\n<td>AMQP 连接或者会话的发起者。AMQP 是非对称的，客户端生产和消费消息，服务器存储和路由这些消息。</td>\n</tr>\n<tr>\n<td>服务节点 Broker</td>\n<td>消息中间件的服务节点；一般情况下可以将一个 RabbitMQ Broker 看作一台 RabbitMQ 服务器。</td>\n</tr>\n<tr>\n<td>端点</td>\n<td>AMQP 对话的任意一方。一个 AMQP 连接包括两个端点（一个是客户端，一个是服务器）。</td>\n</tr>\n<tr>\n<td>消费者 Consumer</td>\n<td>一个从消息队列里请求消息的客户端程序。</td>\n</tr>\n<tr>\n<td>生产者 Producer</td>\n<td>一个向交换机发布消息的客户端应用程序。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"42-rabbitmq运转流程\"><a class=\"markdownIt-Anchor\" href=\"#42-rabbitmq运转流程\">#</a> 4.2. RabbitMQ 运转流程</h2>\n<p>在入门案例中：</p>\n<ul>\n<li>生产者发送消息\n<ol>\n<li>生产者创建连接（Connection），开启一个信道（Channel），连接到 RabbitMQ Broker；</li>\n<li>声明队列并设置属性；如是否排它，是否持久化，是否自动删除；</li>\n<li>将路由键（空字符串）与队列绑定起来；</li>\n<li>发送消息至 RabbitMQ Broker；</li>\n<li>关闭信道；</li>\n<li>关闭连接；</li>\n</ol>\n</li>\n<li>消费者接收消息\n<ol>\n<li>消费者创建连接（Connection），开启一个信道（Channel），连接到 RabbitMQ Broker</li>\n<li>向 Broker 请求消费相应队列中的消息，设置相应的回调函数；</li>\n<li>等待 Broker 回应闭关投递响应队列中的消息，消费者接收消息；</li>\n<li>确认（ack，自动确认）接收到的消息；</li>\n<li>RabbitMQ 从队列中删除相应已经被确认的消息；</li>\n<li>关闭信道；</li>\n<li>关闭连接；</li>\n</ol>\n</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/1565105223969.png\"\n                      alt=\"1565105223969\"\n                ></p>\n<h2 id=\"43-生产者流转过程说明\"><a class=\"markdownIt-Anchor\" href=\"#43-生产者流转过程说明\">#</a> 4.3. 生产者流转过程说明</h2>\n<ol>\n<li>客户端与代理服务器 Broker 建立连接。会调用 newConnection () 方法，这个方法会进一步封装 Protocol Header 0-9-1 的报文头发送给 Broker ，以此通知 Broker 本次交互采用的是 AMQPO-9-1 协议，紧接着 Broker 返回 Connection.Start 来建立连接，在连接的过程中涉及 Connection.Start/.Start-OK 、Connection.Tune/.Tune-Ok ，Connection.Open/.Open-Ok 这 6 个命令的交互。</li>\n<li>客户端调用 connection.createChannel 方法。此方法开启信道，其包装的 channel.open 命令发送给 Broker, 等待 channel.basicPublish 方法，对应的 AMQP 命令为 Basic.Publish, 这个命令包含了 content Header 和 content Body ()。content Header 包含了消息体的属性，例如：投递模式，优先级等，content Body 包含了消息体本身。</li>\n<li>客户端发送完消息需要关闭资源时，涉及到 Channel.Close 和 Channl.Close-Ok 与 Connetion.Close 和 Connection.Close-Ok 的命令交互。</li>\n</ol>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/%E7%94%9F%E4%BA%A7%E8%80%85%E6%B5%81%E8%BD%AC%E8%BF%87%E7%A8%8B%E5%9B%BE.bmp\"\n                      alt=\"生产者流转过程图\"\n                ></p>\n<h2 id=\"44-消费者流转过程说明\"><a class=\"markdownIt-Anchor\" href=\"#44-消费者流转过程说明\">#</a> 4.4. 消费者流转过程说明</h2>\n<ol>\n<li>消费者客户端与代理服务器 Broker 建立连接。会调用 newConnection () 方法，这个方法会进一步封装 Protocol Header 0-9-1 的报文头发送给 Broker ，以此通知 Broker 本次交互采用的是 AMQPO-9-1 协议，紧接着 Broker 返回 Connection.Start 来建立连接，在连接的过程中涉及 Connection.Start/.Start-OK 、Connection.Tune/.Tune-Ok ，Connection.Open/.Open-Ok 这 6 个命令的交互。</li>\n<li>消费者客户端调用 connection.createChannel 方法。和生产者客户端一样，协议涉及 Channel . Open/Open-Ok 命令。</li>\n<li>在真正消费之前，消费者客户端需要向 Broker 发送 Basic.Consume 命令 (即调用 channel.basicConsume 方法〉将 Channel 置为接收模式，之后 Broker 回执 Basic . Consume - Ok 以告诉消费者客户端准备好消费消息。</li>\n<li>Broker 向消费者客户端推送 (Push) 消息，即 Basic.Deliver 命令，这个命令和 Basic.Publish 命令一样会携带 Content Header 和 Content Body。</li>\n<li>消费者接收到消息并正确消费之后，向 Broker 发送确认，即 Basic.Ack 命令。</li>\n<li>客户端发送完消息需要关闭资源时，涉及到 Channel.Close 和 Channl.Close-Ok 与 Connetion.Close 和 Connection.Close-Ok 的命令交互。</li>\n</ol>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/%E6%B6%88%E8%B4%B9%E8%80%85%E6%B5%81%E8%BD%AC%E8%BF%87%E7%A8%8B%E5%9B%BE.bmp\"\n                      alt=\"消费者流转过程图\"\n                ></p>\n<h1 id=\"5-rabbitmq工作模式\"><a class=\"markdownIt-Anchor\" href=\"#5-rabbitmq工作模式\">#</a> 5. RabbitMQ 工作模式</h1>\n<h2 id=\"41-work-queues工作队列模式\"><a class=\"markdownIt-Anchor\" href=\"#41-work-queues工作队列模式\">#</a> 4.1. Work queues 工作队列模式</h2>\n<h3 id=\"411-模式说明\"><a class=\"markdownIt-Anchor\" href=\"#411-模式说明\">#</a> 4.1.1. 模式说明</h3>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/1556009144848.png\"\n                      alt=\"1556009144848\"\n                ></p>\n<p><code>Work Queues</code>  与入门程序的 <code>简单模式</code> 相比，多了一个或一些消费端，多个消费端共同消费同一个队列中的消息。</p>\n<p><strong>应用场景</strong>：对于 任务过重或任务较多情况使用工作队列可以提高任务处理的速度。</p>\n<h3 id=\"412-代码\"><a class=\"markdownIt-Anchor\" href=\"#412-代码\">#</a> 4.1.2. 代码</h3>\n<p><code>Work Queues</code>  与入门程序的 <code>简单模式</code> 的代码是几乎一样的；可以完全复制，并复制多一个消费者进行多个消费者同时消费消息的测试。</p>\n<h4 id=\"1生产者\"><a class=\"markdownIt-Anchor\" href=\"#1生产者\">#</a> 1）生产者</h4>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.rabbitmq.work;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.itheima.rabbitmq.util.ConnectionUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.Channel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.Connection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Producer</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">QUEUE_NAME</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;work_queue&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建连接</span></span><br><span class=\"line\">        <span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> ConnectionUtil.getConnection();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建频道</span></span><br><span class=\"line\">        <span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 声明（创建）队列</span></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数1：队列名称</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数2：是否定义持久化队列</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数3：是否独占本次连接</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数4：是否在不使用的时候自动删除队列</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数5：队列其它参数</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        channel.queueDeclare(QUEUE_NAME, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt;= <span class=\"number\">30</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 发送信息</span></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;你好；小兔子！work模式--&quot;</span> + i;</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * 参数1：交换机名称，如果没有指定则使用默认Default Exchage</span></span><br><span class=\"line\"><span class=\"comment\">             * 参数2：路由key,简单模式可以传递队列名称</span></span><br><span class=\"line\"><span class=\"comment\">             * 参数3：消息其它属性</span></span><br><span class=\"line\"><span class=\"comment\">             * 参数4：消息内容</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            channel.basicPublish(<span class=\"string\">&quot;&quot;</span>, QUEUE_NAME, <span class=\"literal\">null</span>, message.getBytes());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;已发送消息：&quot;</span> + message);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 关闭资源</span></span><br><span class=\"line\">        channel.close();</span><br><span class=\"line\">        connection.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<h4 id=\"2消费者1\"><a class=\"markdownIt-Anchor\" href=\"#2消费者1\">#</a> 2）消费者 1</h4>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.rabbitmq.work;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.itheima.rabbitmq.util.ConnectionUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Consumer1</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> ConnectionUtil.getConnection();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建频道</span></span><br><span class=\"line\">        <span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 声明（创建）队列</span></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数1：队列名称</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数2：是否定义持久化队列</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数3：是否独占本次连接</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数4：是否在不使用的时候自动删除队列</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数5：队列其它参数</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        channel.queueDeclare(Producer.QUEUE_NAME, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//一次只能接收并处理一个消息</span></span><br><span class=\"line\">        channel.basicQos(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建消费者；并设置消息处理</span></span><br><span class=\"line\">        <span class=\"type\">DefaultConsumer</span> <span class=\"variable\">consumer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultConsumer</span>(channel)&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * consumerTag 消息者标签，在channel.basicConsume时候可以指定</span></span><br><span class=\"line\"><span class=\"comment\">             * envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志(收到消息失败后是否需要重新发送)</span></span><br><span class=\"line\"><span class=\"comment\">             * properties 属性信息</span></span><br><span class=\"line\"><span class=\"comment\">             * body 消息</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleDelivery</span><span class=\"params\">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class=\"type\">byte</span>[] body)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//路由key</span></span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;路由key为：&quot;</span> + envelope.getRoutingKey());</span><br><span class=\"line\">                    <span class=\"comment\">//交换机</span></span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;交换机为：&quot;</span> + envelope.getExchange());</span><br><span class=\"line\">                    <span class=\"comment\">//消息id</span></span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;消息id为：&quot;</span> + envelope.getDeliveryTag());</span><br><span class=\"line\">                    <span class=\"comment\">//收到的消息</span></span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;消费者1-接收到的消息为：&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(body, <span class=\"string\">&quot;utf-8&quot;</span>));</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">//确认消息</span></span><br><span class=\"line\">                    channel.basicAck(envelope.getDeliveryTag(), <span class=\"literal\">false</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"comment\">//监听消息</span></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数1：队列名称</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数2：是否自动确认，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动确认</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数3：消息接收到后回调</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        channel.basicConsume(Producer.QUEUE_NAME, <span class=\"literal\">false</span>, consumer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h4 id=\"3消费者2\"><a class=\"markdownIt-Anchor\" href=\"#3消费者2\">#</a> 3）消费者 2</h4>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.rabbitmq.work;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.itheima.rabbitmq.util.ConnectionUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Consumer2</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> ConnectionUtil.getConnection();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建频道</span></span><br><span class=\"line\">        <span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 声明（创建）队列</span></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数1：队列名称</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数2：是否定义持久化队列</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数3：是否独占本次连接</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数4：是否在不使用的时候自动删除队列</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数5：队列其它参数</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        channel.queueDeclare(Producer.QUEUE_NAME, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//一次只能接收并处理一个消息</span></span><br><span class=\"line\">        channel.basicQos(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建消费者；并设置消息处理</span></span><br><span class=\"line\">        <span class=\"type\">DefaultConsumer</span> <span class=\"variable\">consumer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultConsumer</span>(channel)&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * consumerTag 消息者标签，在channel.basicConsume时候可以指定</span></span><br><span class=\"line\"><span class=\"comment\">             * envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志(收到消息失败后是否需要重新发送)</span></span><br><span class=\"line\"><span class=\"comment\">             * properties 属性信息</span></span><br><span class=\"line\"><span class=\"comment\">             * body 消息</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleDelivery</span><span class=\"params\">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class=\"type\">byte</span>[] body)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//路由key</span></span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;路由key为：&quot;</span> + envelope.getRoutingKey());</span><br><span class=\"line\">                    <span class=\"comment\">//交换机</span></span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;交换机为：&quot;</span> + envelope.getExchange());</span><br><span class=\"line\">                    <span class=\"comment\">//消息id</span></span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;消息id为：&quot;</span> + envelope.getDeliveryTag());</span><br><span class=\"line\">                    <span class=\"comment\">//收到的消息</span></span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;消费者2-接收到的消息为：&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(body, <span class=\"string\">&quot;utf-8&quot;</span>));</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">//确认消息</span></span><br><span class=\"line\">                    channel.basicAck(envelope.getDeliveryTag(), <span class=\"literal\">false</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"comment\">//监听消息</span></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数1：队列名称</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数2：是否自动确认，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动确认</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数3：消息接收到后回调</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        channel.basicConsume(Producer.QUEUE_NAME, <span class=\"literal\">false</span>, consumer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<h3 id=\"413-测试\"><a class=\"markdownIt-Anchor\" href=\"#413-测试\">#</a> 4.1.3. 测试</h3>\n<p>启动两个消费者，然后再启动生产者发送消息；到 IDEA 的两个消费者对应的控制台查看是否竞争性的接收到消息。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/1556014310859.png\"\n                      alt=\"1556014310859\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/1556014318106.png\"\n                      alt=\"1556014318106\"\n                ></p>\n<h3 id=\"414-小结\"><a class=\"markdownIt-Anchor\" href=\"#414-小结\">#</a> 4.1.4. 小结</h3>\n<p>在一个队列中如果有多个消费者，那么消费者之间对于同一个消息的关系是<strong>竞争</strong>的关系。</p>\n<h2 id=\"42-订阅模式类型\"><a class=\"markdownIt-Anchor\" href=\"#42-订阅模式类型\">#</a> 4.2. 订阅模式类型</h2>\n<p>订阅模式示例图：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/1556014499573.png\"\n                      alt=\"1556014499573\"\n                ></p>\n<p>前面 2 个案例中，只有 3 个角色：</p>\n<ul>\n<li>P：生产者，也就是要发送消息的程序</li>\n<li>C：消费者：消息的接受者，会一直等待消息到来。</li>\n<li>queue：消息队列，图中红色部分</li>\n</ul>\n<p>而在订阅模型中，多了一个 exchange 角色，而且过程略有变化：</p>\n<ul>\n<li>P：生产者，也就是要发送消息的程序，但是不再发送到队列中，而是发给 X（交换机）</li>\n<li>C：消费者，消息的接受者，会一直等待消息到来。</li>\n<li>Queue：消息队列，接收消息、缓存消息。</li>\n<li>Exchange：交换机，图中的 X。一方面，接收生产者发送的消息。另一方面，知道如何处理消息，例如递交给某个特别队列、递交给所有队列、或是将消息丢弃。到底如何操作，取决于 Exchange 的类型。Exchange 有常见以下 3 种类型：\n<ul>\n<li>Fanout：广播，将消息交给所有绑定到交换机的队列</li>\n<li>Direct：定向，把消息交给符合指定 routing key 的队列</li>\n<li>Topic：通配符，把消息交给符合 routing pattern（路由模式） 的队列</li>\n</ul>\n</li>\n</ul>\n<p><strong>Exchange（交换机）只负责转发消息，不具备存储消息的能力</strong>，因此如果没有任何队列与 Exchange 绑定，或者没有符合路由规则的队列，那么消息会丢失！</p>\n<h2 id=\"43-publishsubscribe发布与订阅模式\"><a class=\"markdownIt-Anchor\" href=\"#43-publishsubscribe发布与订阅模式\">#</a> 4.3. Publish/Subscribe 发布与订阅模式</h2>\n<h3 id=\"431-模式说明\"><a class=\"markdownIt-Anchor\" href=\"#431-模式说明\">#</a> 4.3.1. 模式说明</h3>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/1556010329032.png\"\n                      alt=\"1556010329032\"\n                ></p>\n<p>发布订阅模式：<br>\n1、每个消费者监听自己的队列。<br>\n2、生产者将消息发给 broker，由交换机将消息转发到绑定此交换机的每个队列，每个绑定交换机的队列都将接收<br>\n到消息</p>\n<h3 id=\"432-代码\"><a class=\"markdownIt-Anchor\" href=\"#432-代码\">#</a> 4.3.2. 代码</h3>\n<h4 id=\"1生产者-2\"><a class=\"markdownIt-Anchor\" href=\"#1生产者-2\">#</a> 1）生产者</h4>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.rabbitmq.ps;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.itheima.rabbitmq.util.ConnectionUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.BuiltinExchangeType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.Channel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.Connection;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 发布与订阅使用的交换机类型为：fanout</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Producer</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//交换机名称</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">FANOUT_EXCHAGE</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;fanout_exchange&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">//队列名称</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">FANOUT_QUEUE_1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;fanout_queue_1&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">//队列名称</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">FANOUT_QUEUE_2</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;fanout_queue_2&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建连接</span></span><br><span class=\"line\">        <span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> ConnectionUtil.getConnection();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建频道</span></span><br><span class=\"line\">        <span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 声明交换机</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数1：交换机名称</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数2：交换机类型，fanout、topic、direct、headers</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        channel.exchangeDeclare(FANOUT_EXCHAGE, BuiltinExchangeType.FANOUT);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 声明（创建）队列</span></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数1：队列名称</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数2：是否定义持久化队列</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数3：是否独占本次连接</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数4：是否在不使用的时候自动删除队列</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数5：队列其它参数</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        channel.queueDeclare(FANOUT_QUEUE_1, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">        channel.queueDeclare(FANOUT_QUEUE_2, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//队列绑定交换机</span></span><br><span class=\"line\">        channel.queueBind(FANOUT_QUEUE_1, FANOUT_EXCHAGE, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        channel.queueBind(FANOUT_QUEUE_2, FANOUT_EXCHAGE, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt;= <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 发送信息</span></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;你好；小兔子！发布订阅模式--&quot;</span> + i;</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * 参数1：交换机名称，如果没有指定则使用默认Default Exchage</span></span><br><span class=\"line\"><span class=\"comment\">             * 参数2：路由key,简单模式可以传递队列名称</span></span><br><span class=\"line\"><span class=\"comment\">             * 参数3：消息其它属性</span></span><br><span class=\"line\"><span class=\"comment\">             * 参数4：消息内容</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            channel.basicPublish(FANOUT_EXCHAGE, <span class=\"string\">&quot;&quot;</span>, <span class=\"literal\">null</span>, message.getBytes());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;已发送消息：&quot;</span> + message);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 关闭资源</span></span><br><span class=\"line\">        channel.close();</span><br><span class=\"line\">        connection.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h4 id=\"2消费者1-2\"><a class=\"markdownIt-Anchor\" href=\"#2消费者1-2\">#</a> 2）消费者 1</h4>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.rabbitmq.ps;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.itheima.rabbitmq.util.ConnectionUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Consumer1</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> ConnectionUtil.getConnection();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建频道</span></span><br><span class=\"line\">        <span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//声明交换机</span></span><br><span class=\"line\">        channel.exchangeDeclare(Producer.FANOUT_EXCHAGE, BuiltinExchangeType.FANOUT);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 声明（创建）队列</span></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数1：队列名称</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数2：是否定义持久化队列</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数3：是否独占本次连接</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数4：是否在不使用的时候自动删除队列</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数5：队列其它参数</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        channel.queueDeclare(Producer.FANOUT_QUEUE_1, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//队列绑定交换机</span></span><br><span class=\"line\">        channel.queueBind(Producer.FANOUT_QUEUE_1, Producer.FANOUT_EXCHAGE, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建消费者；并设置消息处理</span></span><br><span class=\"line\">        <span class=\"type\">DefaultConsumer</span> <span class=\"variable\">consumer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultConsumer</span>(channel)&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * consumerTag 消息者标签，在channel.basicConsume时候可以指定</span></span><br><span class=\"line\"><span class=\"comment\">             * envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志(收到消息失败后是否需要重新发送)</span></span><br><span class=\"line\"><span class=\"comment\">             * properties 属性信息</span></span><br><span class=\"line\"><span class=\"comment\">             * body 消息</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleDelivery</span><span class=\"params\">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class=\"type\">byte</span>[] body)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">                <span class=\"comment\">//路由key</span></span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;路由key为：&quot;</span> + envelope.getRoutingKey());</span><br><span class=\"line\">                <span class=\"comment\">//交换机</span></span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;交换机为：&quot;</span> + envelope.getExchange());</span><br><span class=\"line\">                <span class=\"comment\">//消息id</span></span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;消息id为：&quot;</span> + envelope.getDeliveryTag());</span><br><span class=\"line\">                <span class=\"comment\">//收到的消息</span></span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;消费者1-接收到的消息为：&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(body, <span class=\"string\">&quot;utf-8&quot;</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"comment\">//监听消息</span></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数1：队列名称</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数2：是否自动确认，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动确认</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数3：消息接收到后回调</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        channel.basicConsume(Producer.FANOUT_QUEUE_1, <span class=\"literal\">true</span>, consumer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<h4 id=\"3消费者2-2\"><a class=\"markdownIt-Anchor\" href=\"#3消费者2-2\">#</a> 3）消费者 2</h4>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.rabbitmq.ps;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.itheima.rabbitmq.util.ConnectionUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Consumer2</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> ConnectionUtil.getConnection();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建频道</span></span><br><span class=\"line\">        <span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//声明交换机</span></span><br><span class=\"line\">        channel.exchangeDeclare(Producer.FANOUT_EXCHAGE, BuiltinExchangeType.FANOUT);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 声明（创建）队列</span></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数1：队列名称</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数2：是否定义持久化队列</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数3：是否独占本次连接</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数4：是否在不使用的时候自动删除队列</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数5：队列其它参数</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        channel.queueDeclare(Producer.FANOUT_QUEUE_2, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//队列绑定交换机</span></span><br><span class=\"line\">        channel.queueBind(Producer.FANOUT_QUEUE_2, Producer.FANOUT_EXCHAGE, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建消费者；并设置消息处理</span></span><br><span class=\"line\">        <span class=\"type\">DefaultConsumer</span> <span class=\"variable\">consumer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultConsumer</span>(channel)&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * consumerTag 消息者标签，在channel.basicConsume时候可以指定</span></span><br><span class=\"line\"><span class=\"comment\">             * envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志(收到消息失败后是否需要重新发送)</span></span><br><span class=\"line\"><span class=\"comment\">             * properties 属性信息</span></span><br><span class=\"line\"><span class=\"comment\">             * body 消息</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleDelivery</span><span class=\"params\">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class=\"type\">byte</span>[] body)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">                <span class=\"comment\">//路由key</span></span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;路由key为：&quot;</span> + envelope.getRoutingKey());</span><br><span class=\"line\">                <span class=\"comment\">//交换机</span></span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;交换机为：&quot;</span> + envelope.getExchange());</span><br><span class=\"line\">                <span class=\"comment\">//消息id</span></span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;消息id为：&quot;</span> + envelope.getDeliveryTag());</span><br><span class=\"line\">                <span class=\"comment\">//收到的消息</span></span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;消费者2-接收到的消息为：&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(body, <span class=\"string\">&quot;utf-8&quot;</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"comment\">//监听消息</span></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数1：队列名称</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数2：是否自动确认，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动确认</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数3：消息接收到后回调</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        channel.basicConsume(Producer.FANOUT_QUEUE_2, <span class=\"literal\">true</span>, consumer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"433-测试\"><a class=\"markdownIt-Anchor\" href=\"#433-测试\">#</a> 4.3.3. 测试</h3>\n<p>启动所有消费者，然后使用生产者发送消息；在每个消费者对应的控制台可以查看到生产者发送的所有消息；到达<strong>广播</strong>的效果。</p>\n<p>在执行完测试代码后，其实到 RabbitMQ 的管理后台找到 <code>Exchanges</code>  选项卡，点击  <code>fanout_exchange</code>  的交换机，可以查看到如下的绑定：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/1556015006220.png\"\n                      alt=\"1556015006220\"\n                ></p>\n<h3 id=\"434-小结\"><a class=\"markdownIt-Anchor\" href=\"#434-小结\">#</a> 4.3.4. 小结</h3>\n<p>交换机需要与队列进行绑定，绑定之后；一个消息可以被多个消费者都收到。</p>\n<p><strong>发布订阅模式与工作队列模式的区别</strong></p>\n<p>1、工作队列模式不用定义交换机，而发布 / 订阅模式需要定义交换机。</p>\n<p>2、发布 / 订阅模式的生产方是面向交换机发送消息，工作队列模式的生产方是面向队列发送消息 (底层使用默认交换机)。</p>\n<p>3、发布 / 订阅模式需要设置队列和交换机的绑定，工作队列模式不需要设置，实际上工作队列模式会将队列绑 定到默认的交换机 。</p>\n<h2 id=\"44-routing路由模式\"><a class=\"markdownIt-Anchor\" href=\"#44-routing路由模式\">#</a> 4.4. Routing 路由模式</h2>\n<h3 id=\"441-模式说明\"><a class=\"markdownIt-Anchor\" href=\"#441-模式说明\">#</a> 4.4.1. 模式说明</h3>\n<p>路由模式特点：</p>\n<ul>\n<li>队列与交换机的绑定，不能是任意绑定了，而是要指定一个 <code>RoutingKey</code> （路由 key）</li>\n<li>消息的发送方在 向 Exchange 发送消息时，也必须指定消息的  <code>RoutingKey</code> 。</li>\n<li>Exchange 不再把消息交给每一个绑定的队列，而是根据消息的 <code>Routing Key</code>  进行判断，只有队列的 <code>Routingkey</code>  与消息的  <code>Routing key</code>  完全一致，才会接收到消息</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/1556029284397.png\"\n                      alt=\"1556029284397\"\n                ></p>\n<p>图解：</p>\n<ul>\n<li>P：生产者，向 Exchange 发送消息，发送消息时，会指定一个 routing key。</li>\n<li>X：Exchange（交换机），接收生产者的消息，然后把消息递交给 与 routing key 完全匹配的队列</li>\n<li>C1：消费者，其所在队列指定了需要 routing key 为 error 的消息</li>\n<li>C2：消费者，其所在队列指定了需要 routing key 为 info、error、warning 的消息</li>\n</ul>\n<h3 id=\"442-代码\"><a class=\"markdownIt-Anchor\" href=\"#442-代码\">#</a> 4.4.2. 代码</h3>\n<p>在编码上与  <code>Publish/Subscribe发布与订阅模式</code>  的区别是交换机的类型为：Direct，还有队列绑定交换机的时候需要指定 routing key。</p>\n<h4 id=\"1生产者-3\"><a class=\"markdownIt-Anchor\" href=\"#1生产者-3\">#</a> 1）生产者</h4>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.rabbitmq.routing;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.itheima.rabbitmq.util.ConnectionUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.BuiltinExchangeType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.Channel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.Connection;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 路由模式的交换机类型为：direct</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Producer</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//交换机名称</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">DIRECT_EXCHAGE</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;direct_exchange&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">//队列名称</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">DIRECT_QUEUE_INSERT</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;direct_queue_insert&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">//队列名称</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">DIRECT_QUEUE_UPDATE</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;direct_queue_update&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建连接</span></span><br><span class=\"line\">        <span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> ConnectionUtil.getConnection();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建频道</span></span><br><span class=\"line\">        <span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 声明交换机</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数1：交换机名称</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数2：交换机类型，fanout、topic、direct、headers</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        channel.exchangeDeclare(DIRECT_EXCHAGE, BuiltinExchangeType.DIRECT);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 声明（创建）队列</span></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数1：队列名称</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数2：是否定义持久化队列</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数3：是否独占本次连接</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数4：是否在不使用的时候自动删除队列</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数5：队列其它参数</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        channel.queueDeclare(DIRECT_QUEUE_INSERT, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">        channel.queueDeclare(DIRECT_QUEUE_UPDATE, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//队列绑定交换机</span></span><br><span class=\"line\">        channel.queueBind(DIRECT_QUEUE_INSERT, DIRECT_EXCHAGE, <span class=\"string\">&quot;insert&quot;</span>);</span><br><span class=\"line\">        channel.queueBind(DIRECT_QUEUE_UPDATE, DIRECT_EXCHAGE, <span class=\"string\">&quot;update&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 发送信息</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;新增了商品。路由模式；routing key 为 insert &quot;</span> ;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数1：交换机名称，如果没有指定则使用默认Default Exchage</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数2：路由key,简单模式可以传递队列名称</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数3：消息其它属性</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数4：消息内容</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        channel.basicPublish(DIRECT_EXCHAGE, <span class=\"string\">&quot;insert&quot;</span>, <span class=\"literal\">null</span>, message.getBytes());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;已发送消息：&quot;</span> + message);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 发送信息</span></span><br><span class=\"line\">        message = <span class=\"string\">&quot;修改了商品。路由模式；routing key 为 update&quot;</span> ;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数1：交换机名称，如果没有指定则使用默认Default Exchage</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数2：路由key,简单模式可以传递队列名称</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数3：消息其它属性</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数4：消息内容</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        channel.basicPublish(DIRECT_EXCHAGE, <span class=\"string\">&quot;update&quot;</span>, <span class=\"literal\">null</span>, message.getBytes());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;已发送消息：&quot;</span> + message);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 关闭资源</span></span><br><span class=\"line\">        channel.close();</span><br><span class=\"line\">        connection.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<h4 id=\"2消费者1-3\"><a class=\"markdownIt-Anchor\" href=\"#2消费者1-3\">#</a> 2）消费者 1</h4>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.rabbitmq.routing;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.itheima.rabbitmq.util.ConnectionUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Consumer1</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> ConnectionUtil.getConnection();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建频道</span></span><br><span class=\"line\">        <span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//声明交换机</span></span><br><span class=\"line\">        channel.exchangeDeclare(Producer.DIRECT_EXCHAGE, BuiltinExchangeType.DIRECT);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 声明（创建）队列</span></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数1：队列名称</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数2：是否定义持久化队列</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数3：是否独占本次连接</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数4：是否在不使用的时候自动删除队列</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数5：队列其它参数</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        channel.queueDeclare(Producer.DIRECT_QUEUE_INSERT, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//队列绑定交换机</span></span><br><span class=\"line\">        channel.queueBind(Producer.DIRECT_QUEUE_INSERT, Producer.DIRECT_EXCHAGE, <span class=\"string\">&quot;insert&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建消费者；并设置消息处理</span></span><br><span class=\"line\">        <span class=\"type\">DefaultConsumer</span> <span class=\"variable\">consumer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultConsumer</span>(channel)&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * consumerTag 消息者标签，在channel.basicConsume时候可以指定</span></span><br><span class=\"line\"><span class=\"comment\">             * envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志(收到消息失败后是否需要重新发送)</span></span><br><span class=\"line\"><span class=\"comment\">             * properties 属性信息</span></span><br><span class=\"line\"><span class=\"comment\">             * body 消息</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleDelivery</span><span class=\"params\">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class=\"type\">byte</span>[] body)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">                <span class=\"comment\">//路由key</span></span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;路由key为：&quot;</span> + envelope.getRoutingKey());</span><br><span class=\"line\">                <span class=\"comment\">//交换机</span></span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;交换机为：&quot;</span> + envelope.getExchange());</span><br><span class=\"line\">                <span class=\"comment\">//消息id</span></span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;消息id为：&quot;</span> + envelope.getDeliveryTag());</span><br><span class=\"line\">                <span class=\"comment\">//收到的消息</span></span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;消费者1-接收到的消息为：&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(body, <span class=\"string\">&quot;utf-8&quot;</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"comment\">//监听消息</span></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数1：队列名称</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数2：是否自动确认，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动确认</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数3：消息接收到后回调</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        channel.basicConsume(Producer.DIRECT_QUEUE_INSERT, <span class=\"literal\">true</span>, consumer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<h4 id=\"3消费者2-3\"><a class=\"markdownIt-Anchor\" href=\"#3消费者2-3\">#</a> 3）消费者 2</h4>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.rabbitmq.routing;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.itheima.rabbitmq.util.ConnectionUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Consumer2</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> ConnectionUtil.getConnection();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建频道</span></span><br><span class=\"line\">        <span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//声明交换机</span></span><br><span class=\"line\">        channel.exchangeDeclare(Producer.DIRECT_EXCHAGE, BuiltinExchangeType.DIRECT);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 声明（创建）队列</span></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数1：队列名称</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数2：是否定义持久化队列</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数3：是否独占本次连接</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数4：是否在不使用的时候自动删除队列</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数5：队列其它参数</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        channel.queueDeclare(Producer.DIRECT_QUEUE_UPDATE, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//队列绑定交换机</span></span><br><span class=\"line\">        channel.queueBind(Producer.DIRECT_QUEUE_UPDATE, Producer.DIRECT_EXCHAGE, <span class=\"string\">&quot;update&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建消费者；并设置消息处理</span></span><br><span class=\"line\">        <span class=\"type\">DefaultConsumer</span> <span class=\"variable\">consumer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultConsumer</span>(channel)&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * consumerTag 消息者标签，在channel.basicConsume时候可以指定</span></span><br><span class=\"line\"><span class=\"comment\">             * envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志(收到消息失败后是否需要重新发送)</span></span><br><span class=\"line\"><span class=\"comment\">             * properties 属性信息</span></span><br><span class=\"line\"><span class=\"comment\">             * body 消息</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleDelivery</span><span class=\"params\">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class=\"type\">byte</span>[] body)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">                <span class=\"comment\">//路由key</span></span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;路由key为：&quot;</span> + envelope.getRoutingKey());</span><br><span class=\"line\">                <span class=\"comment\">//交换机</span></span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;交换机为：&quot;</span> + envelope.getExchange());</span><br><span class=\"line\">                <span class=\"comment\">//消息id</span></span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;消息id为：&quot;</span> + envelope.getDeliveryTag());</span><br><span class=\"line\">                <span class=\"comment\">//收到的消息</span></span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;消费者2-接收到的消息为：&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(body, <span class=\"string\">&quot;utf-8&quot;</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"comment\">//监听消息</span></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数1：队列名称</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数2：是否自动确认，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动确认</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数3：消息接收到后回调</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        channel.basicConsume(Producer.DIRECT_QUEUE_UPDATE, <span class=\"literal\">true</span>, consumer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<h3 id=\"443-测试\"><a class=\"markdownIt-Anchor\" href=\"#443-测试\">#</a> 4.4.3. 测试</h3>\n<p>启动所有消费者，然后使用生产者发送消息；在消费者对应的控制台可以查看到生产者发送对应 routing key 对应队列的消息；到达<strong>按照需要接收</strong>的效果。</p>\n<p>在执行完测试代码后，其实到 RabbitMQ 的管理后台找到 <code>Exchanges</code>  选项卡，点击  <code>direct_exchange</code>  的交换机，可以查看到如下的绑定：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/1556031175744.png\"\n                      alt=\"1556031175744\"\n                ></p>\n<h3 id=\"444-小结\"><a class=\"markdownIt-Anchor\" href=\"#444-小结\">#</a> 4.4.4. 小结</h3>\n<p>Routing 模式要求队列在绑定交换机时要指定 routing key，消息会转发到符合 routing key 的队列。</p>\n<h2 id=\"45-topics通配符模式\"><a class=\"markdownIt-Anchor\" href=\"#45-topics通配符模式\">#</a> 4.5. Topics 通配符模式</h2>\n<h3 id=\"451-模式说明\"><a class=\"markdownIt-Anchor\" href=\"#451-模式说明\">#</a> 4.5.1. 模式说明</h3>\n<p><code>Topic</code>  类型与 <code>Direct</code>  相比，都是可以根据 <code>RoutingKey</code>  把消息路由到不同的队列。只不过 <code>Topic</code>  类型 <code>Exchange</code>  可以让队列在绑定 <code>Routing key</code>  的时候<strong>使用通配符</strong>！</p>\n<p><code>Routingkey</code>  一般都是有一个或多个单词组成，多个单词之间以”.” 分割，例如：  <code>item.insert</code></p>\n<p>通配符规则：</p>\n<p><code>#</code> ：匹配一个或多个词</p>\n<p><code>*</code> ：匹配不多不少恰好 1 个词</p>\n<p>举例：</p>\n<p><code>item.#</code> ：能够匹配 <code>item.insert.abc</code>  或者  <code>item.insert</code></p>\n<p><code>item.*</code> ：只能匹配 <code>item.insert</code></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/1556031362048.png\"\n                      alt=\"1556031362048\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/1556031519931.png\"\n                      alt=\"1556031519931\"\n                ></p>\n<p>图解：</p>\n<ul>\n<li>红色 Queue：绑定的是 <code>usa.#</code>  ，因此凡是以  <code>usa.</code>  开头的 <code>routing key</code>  都会被匹配到</li>\n<li>黄色 Queue：绑定的是 <code>#.news</code>  ，因此凡是以  <code>.news</code>  结尾的  <code>routing key</code>  都会被匹配</li>\n</ul>\n<h3 id=\"452-代码\"><a class=\"markdownIt-Anchor\" href=\"#452-代码\">#</a> 4.5.2. 代码</h3>\n<h4 id=\"1生产者-4\"><a class=\"markdownIt-Anchor\" href=\"#1生产者-4\">#</a> 1）生产者</h4>\n<p>使用 topic 类型的 Exchange，发送消息的 routing key 有 3 种：  <code>item.insert</code> 、 <code>item.update</code> 、 <code>item.delete</code> ：</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.rabbitmq.topic;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.itheima.rabbitmq.util.ConnectionUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.BuiltinExchangeType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.Channel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.Connection;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 通配符Topic的交换机类型为：topic</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Producer</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//交换机名称</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">TOPIC_EXCHAGE</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;topic_exchange&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">//队列名称</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">TOPIC_QUEUE_1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;topic_queue_1&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">//队列名称</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">TOPIC_QUEUE_2</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;topic_queue_2&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建连接</span></span><br><span class=\"line\">        <span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> ConnectionUtil.getConnection();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建频道</span></span><br><span class=\"line\">        <span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 声明交换机</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数1：交换机名称</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数2：交换机类型，fanout、topic、topic、headers</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        channel.exchangeDeclare(TOPIC_EXCHAGE, BuiltinExchangeType.TOPIC);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 发送信息</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;新增了商品。Topic模式；routing key 为 item.insert &quot;</span> ;</span><br><span class=\"line\">        channel.basicPublish(TOPIC_EXCHAGE, <span class=\"string\">&quot;item.insert&quot;</span>, <span class=\"literal\">null</span>, message.getBytes());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;已发送消息：&quot;</span> + message);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 发送信息</span></span><br><span class=\"line\">        message = <span class=\"string\">&quot;修改了商品。Topic模式；routing key 为 item.update&quot;</span> ;</span><br><span class=\"line\">        channel.basicPublish(TOPIC_EXCHAGE, <span class=\"string\">&quot;item.update&quot;</span>, <span class=\"literal\">null</span>, message.getBytes());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;已发送消息：&quot;</span> + message);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 发送信息</span></span><br><span class=\"line\">        message = <span class=\"string\">&quot;删除了商品。Topic模式；routing key 为 item.delete&quot;</span> ;</span><br><span class=\"line\">        channel.basicPublish(TOPIC_EXCHAGE, <span class=\"string\">&quot;item.delete&quot;</span>, <span class=\"literal\">null</span>, message.getBytes());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;已发送消息：&quot;</span> + message);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 关闭资源</span></span><br><span class=\"line\">        channel.close();</span><br><span class=\"line\">        connection.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<h4 id=\"2消费者1-4\"><a class=\"markdownIt-Anchor\" href=\"#2消费者1-4\">#</a> 2）消费者 1</h4>\n<p>接收两种类型的消息：更新商品和删除商品</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.rabbitmq.topic;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.itheima.rabbitmq.util.ConnectionUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Consumer1</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> ConnectionUtil.getConnection();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建频道</span></span><br><span class=\"line\">        <span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//声明交换机</span></span><br><span class=\"line\">        channel.exchangeDeclare(Producer.TOPIC_EXCHAGE, BuiltinExchangeType.TOPIC);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 声明（创建）队列</span></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数1：队列名称</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数2：是否定义持久化队列</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数3：是否独占本次连接</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数4：是否在不使用的时候自动删除队列</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数5：队列其它参数</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        channel.queueDeclare(Producer.TOPIC_QUEUE_1, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//队列绑定交换机</span></span><br><span class=\"line\">        channel.queueBind(Producer.TOPIC_QUEUE_1, Producer.TOPIC_EXCHAGE, <span class=\"string\">&quot;item.update&quot;</span>);</span><br><span class=\"line\">        channel.queueBind(Producer.TOPIC_QUEUE_1, Producer.TOPIC_EXCHAGE, <span class=\"string\">&quot;item.delete&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建消费者；并设置消息处理</span></span><br><span class=\"line\">        <span class=\"type\">DefaultConsumer</span> <span class=\"variable\">consumer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultConsumer</span>(channel)&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * consumerTag 消息者标签，在channel.basicConsume时候可以指定</span></span><br><span class=\"line\"><span class=\"comment\">             * envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志(收到消息失败后是否需要重新发送)</span></span><br><span class=\"line\"><span class=\"comment\">             * properties 属性信息</span></span><br><span class=\"line\"><span class=\"comment\">             * body 消息</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleDelivery</span><span class=\"params\">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class=\"type\">byte</span>[] body)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">                <span class=\"comment\">//路由key</span></span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;路由key为：&quot;</span> + envelope.getRoutingKey());</span><br><span class=\"line\">                <span class=\"comment\">//交换机</span></span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;交换机为：&quot;</span> + envelope.getExchange());</span><br><span class=\"line\">                <span class=\"comment\">//消息id</span></span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;消息id为：&quot;</span> + envelope.getDeliveryTag());</span><br><span class=\"line\">                <span class=\"comment\">//收到的消息</span></span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;消费者1-接收到的消息为：&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(body, <span class=\"string\">&quot;utf-8&quot;</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"comment\">//监听消息</span></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数1：队列名称</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数2：是否自动确认，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动确认</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数3：消息接收到后回调</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        channel.basicConsume(Producer.TOPIC_QUEUE_1, <span class=\"literal\">true</span>, consumer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<h4 id=\"3消费者2-4\"><a class=\"markdownIt-Anchor\" href=\"#3消费者2-4\">#</a> 3）消费者 2</h4>\n<p>接收所有类型的消息：新增商品，更新商品和删除商品。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.rabbitmq.topic;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.itheima.rabbitmq.util.ConnectionUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Consumer2</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> ConnectionUtil.getConnection();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建频道</span></span><br><span class=\"line\">        <span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//声明交换机</span></span><br><span class=\"line\">        channel.exchangeDeclare(Producer.TOPIC_EXCHAGE, BuiltinExchangeType.TOPIC);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 声明（创建）队列</span></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数1：队列名称</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数2：是否定义持久化队列</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数3：是否独占本次连接</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数4：是否在不使用的时候自动删除队列</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数5：队列其它参数</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        channel.queueDeclare(Producer.TOPIC_QUEUE_2, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//队列绑定交换机</span></span><br><span class=\"line\">        channel.queueBind(Producer.TOPIC_QUEUE_2, Producer.TOPIC_EXCHAGE, <span class=\"string\">&quot;item.*&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建消费者；并设置消息处理</span></span><br><span class=\"line\">        <span class=\"type\">DefaultConsumer</span> <span class=\"variable\">consumer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultConsumer</span>(channel)&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * consumerTag 消息者标签，在channel.basicConsume时候可以指定</span></span><br><span class=\"line\"><span class=\"comment\">             * envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志(收到消息失败后是否需要重新发送)</span></span><br><span class=\"line\"><span class=\"comment\">             * properties 属性信息</span></span><br><span class=\"line\"><span class=\"comment\">             * body 消息</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleDelivery</span><span class=\"params\">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class=\"type\">byte</span>[] body)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">                <span class=\"comment\">//路由key</span></span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;路由key为：&quot;</span> + envelope.getRoutingKey());</span><br><span class=\"line\">                <span class=\"comment\">//交换机</span></span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;交换机为：&quot;</span> + envelope.getExchange());</span><br><span class=\"line\">                <span class=\"comment\">//消息id</span></span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;消息id为：&quot;</span> + envelope.getDeliveryTag());</span><br><span class=\"line\">                <span class=\"comment\">//收到的消息</span></span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;消费者2-接收到的消息为：&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(body, <span class=\"string\">&quot;utf-8&quot;</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"comment\">//监听消息</span></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数1：队列名称</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数2：是否自动确认，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动确认</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数3：消息接收到后回调</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        channel.basicConsume(Producer.TOPIC_QUEUE_2, <span class=\"literal\">true</span>, consumer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<h3 id=\"453-测试\"><a class=\"markdownIt-Anchor\" href=\"#453-测试\">#</a> 4.5.3. 测试</h3>\n<p>启动所有消费者，然后使用生产者发送消息；在消费者对应的控制台可以查看到生产者发送对应 routing key 对应队列的消息；到达<strong>按照需要接收</strong>的效果；并且这些 routing key 可以使用通配符。</p>\n<p>在执行完测试代码后，其实到 RabbitMQ 的管理后台找到 <code>Exchanges</code>  选项卡，点击  <code>topic_exchange</code>  的交换机，可以查看到如下的绑定：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/1556032433333.png\"\n                      alt=\"1556032433333\"\n                ></p>\n<h3 id=\"454-小结\"><a class=\"markdownIt-Anchor\" href=\"#454-小结\">#</a> 4.5.4. 小结</h3>\n<p>Topic 主题模式可以实现  <code>Publish/Subscribe发布与订阅模式</code>  和  <code> Routing路由模式</code>  的功能；只是 Topic 在配置 routing key 的时候可以使用通配符，显得更加灵活。</p>\n<h2 id=\"46-模式总结\"><a class=\"markdownIt-Anchor\" href=\"#46-模式总结\">#</a> 4.6. 模式总结</h2>\n<p>RabbitMQ 工作模式：<br>\n<strong>1、简单模式 HelloWorld</strong><br>\n 一个生产者、一个消费者，不需要设置交换机（使用默认的交换机）</p>\n<p><strong>2、工作队列模式 Work Queue</strong><br>\n 一个生产者、多个消费者（竞争关系），不需要设置交换机（使用默认的交换机）</p>\n<p><strong>3、发布订阅模式 Publish/subscribe</strong><br>\n 需要设置类型为 fanout 的交换机，并且交换机和队列进行绑定，当发送消息到交换机后，交换机会将消息发送到绑定的队列</p>\n<p><strong>4、路由模式 Routing</strong><br>\n 需要设置类型为 direct 的交换机，交换机和队列进行绑定，并且指定 routing key，当发送消息到交换机后，交换机会根据 routing key 将消息发送到对应的队列</p>\n<p><strong>5、通配符模式 Topic</strong><br>\n 需要设置类型为 topic 的交换机，交换机和队列进行绑定，并且指定通配符方式的 routing key，当发送消息到交换机后，交换机会根据 routing key 将消息发送到对应的队列</p>\n<h1 id=\"5-spring-整合rabbitmq\"><a class=\"markdownIt-Anchor\" href=\"#5-spring-整合rabbitmq\">#</a> 5. Spring 整合 RabbitMQ</h1>\n<h2 id=\"51-搭建生产者工程\"><a class=\"markdownIt-Anchor\" href=\"#51-搭建生产者工程\">#</a> 5.1. 搭建生产者工程</h2>\n<h3 id=\"511-创建工程\"><a class=\"markdownIt-Anchor\" href=\"#511-创建工程\">#</a> 5.1.1. 创建工程</h3>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/1565149342994.png\"\n                      alt=\"1565149342994\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/1565144326498.png\"\n                      alt=\"1565144326498\"\n                ></p>\n<h3 id=\"512-添加依赖\"><a class=\"markdownIt-Anchor\" href=\"#512-添加依赖\">#</a> 5.1.2. 添加依赖</h3>\n<p>修改 pom.xml 文件内容为如下：</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.itheima<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-rabbitmq-producer<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.7.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.amqp<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-rabbit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.1.8.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.7.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n<h3 id=\"513-配置整合\"><a class=\"markdownIt-Anchor\" href=\"#513-配置整合\">#</a> 5.1.3. 配置整合</h3>\n<ol>\n<li>创建 <code>spring-rabbitmq-producer\\src\\main\\resources\\properties\\rabbitmq.properties</code>  连接参数等配置文件；</li>\n</ol>\n<div class=\"highlight-container\" data-rel=\"Properties\"><figure class=\"iseeu highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">rabbitmq.host</span>=<span class=\"string\">192.168.12.135</span></span><br><span class=\"line\"><span class=\"attr\">rabbitmq.port</span>=<span class=\"string\">5672</span></span><br><span class=\"line\"><span class=\"attr\">rabbitmq.username</span>=<span class=\"string\">heima</span></span><br><span class=\"line\"><span class=\"attr\">rabbitmq.password</span>=<span class=\"string\">heima</span></span><br><span class=\"line\"><span class=\"attr\">rabbitmq.virtual-host</span>=<span class=\"string\">/itcast</span></span><br></pre></td></tr></table></figure></div>\n<ol start=\"2\">\n<li>创建  <code>spring-rabbitmq-producer\\src\\main\\resources\\spring\\spring-rabbitmq.xml</code>  整合配置文件；</li>\n</ol>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:rabbit</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/rabbit&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">       http://www.springframework.org/schema/context</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">       http://www.springframework.org/schema/rabbit</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">       http://www.springframework.org/schema/rabbit/spring-rabbit.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--加载配置文件--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:property-placeholder</span> <span class=\"attr\">location</span>=<span class=\"string\">&quot;classpath:properties/rabbitmq.properties&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 定义rabbitmq connectionFactory --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">rabbit:connection-factory</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;connectionFactory&quot;</span> <span class=\"attr\">host</span>=<span class=\"string\">&quot;$&#123;rabbitmq.host&#125;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                               <span class=\"attr\">port</span>=<span class=\"string\">&quot;$&#123;rabbitmq.port&#125;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                               <span class=\"attr\">username</span>=<span class=\"string\">&quot;$&#123;rabbitmq.username&#125;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                               <span class=\"attr\">password</span>=<span class=\"string\">&quot;$&#123;rabbitmq.password&#125;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                               <span class=\"attr\">virtual-host</span>=<span class=\"string\">&quot;$&#123;rabbitmq.virtual-host&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--定义管理交换机、队列--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">rabbit:admin</span> <span class=\"attr\">connection-factory</span>=<span class=\"string\">&quot;connectionFactory&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--定义持久化队列，不存在则自动创建；不绑定到交换机则绑定到默认交换机</span></span><br><span class=\"line\"><span class=\"comment\">    默认交换机类型为direct，名字为：&quot;&quot;，路由键为队列的名称</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">rabbit:queue</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;spring_queue&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;spring_queue&quot;</span> <span class=\"attr\">auto-declare</span>=<span class=\"string\">&quot;true&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~广播；所有队列都能收到消息~~~~~~~~~~~~~~~~~~~~~~~~~~~~ --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--定义广播交换机中的持久化队列，不存在则自动创建--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">rabbit:queue</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;spring_fanout_queue_1&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;spring_fanout_queue_1&quot;</span> <span class=\"attr\">auto-declare</span>=<span class=\"string\">&quot;true&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--定义广播交换机中的持久化队列，不存在则自动创建--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">rabbit:queue</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;spring_fanout_queue_2&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;spring_fanout_queue_2&quot;</span> <span class=\"attr\">auto-declare</span>=<span class=\"string\">&quot;true&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--定义广播类型交换机；并绑定上述两个队列--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">rabbit:fanout-exchange</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;spring_fanout_exchange&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;spring_fanout_exchange&quot;</span> <span class=\"attr\">auto-declare</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">rabbit:bindings</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">rabbit:binding</span> <span class=\"attr\">queue</span>=<span class=\"string\">&quot;spring_fanout_queue_1&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">rabbit:binding</span> <span class=\"attr\">queue</span>=<span class=\"string\">&quot;spring_fanout_queue_2&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">rabbit:bindings</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">rabbit:fanout-exchange</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~通配符；*匹配一个单词，#匹配多个单词 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--定义广播交换机中的持久化队列，不存在则自动创建--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">rabbit:queue</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;spring_topic_queue_star&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;spring_topic_queue_star&quot;</span> <span class=\"attr\">auto-declare</span>=<span class=\"string\">&quot;true&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--定义广播交换机中的持久化队列，不存在则自动创建--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">rabbit:queue</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;spring_topic_queue_well&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;spring_topic_queue_well&quot;</span> <span class=\"attr\">auto-declare</span>=<span class=\"string\">&quot;true&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--定义广播交换机中的持久化队列，不存在则自动创建--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">rabbit:queue</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;spring_topic_queue_well2&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;spring_topic_queue_well2&quot;</span> <span class=\"attr\">auto-declare</span>=<span class=\"string\">&quot;true&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">rabbit:topic-exchange</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;spring_topic_exchange&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;spring_topic_exchange&quot;</span> <span class=\"attr\">auto-declare</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">rabbit:bindings</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">rabbit:binding</span> <span class=\"attr\">pattern</span>=<span class=\"string\">&quot;heima.*&quot;</span> <span class=\"attr\">queue</span>=<span class=\"string\">&quot;spring_topic_queue_star&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">rabbit:binding</span> <span class=\"attr\">pattern</span>=<span class=\"string\">&quot;heima.#&quot;</span> <span class=\"attr\">queue</span>=<span class=\"string\">&quot;spring_topic_queue_well&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">rabbit:binding</span> <span class=\"attr\">pattern</span>=<span class=\"string\">&quot;itcast.#&quot;</span> <span class=\"attr\">queue</span>=<span class=\"string\">&quot;spring_topic_queue_well2&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">rabbit:bindings</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">rabbit:topic-exchange</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--定义rabbitTemplate对象操作可以在代码中方便发送消息--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">rabbit:template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;rabbitTemplate&quot;</span> <span class=\"attr\">connection-factory</span>=<span class=\"string\">&quot;connectionFactory&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n<h3 id=\"514-发送消息\"><a class=\"markdownIt-Anchor\" href=\"#514-发送消息\">#</a> 5.1.4. 发送消息</h3>\n<p>创建测试文件  <code>spring-rabbitmq-producer\\src\\test\\java\\com\\itheima\\rabbitmq\\ProducerTest.java</code></p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class=\"line\"><span class=\"meta\">@ContextConfiguration(locations = &quot;classpath:spring/spring-rabbitmq.xml&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProducerTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RabbitTemplate rabbitTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 只发队列消息</span></span><br><span class=\"line\"><span class=\"comment\">     * 默认交换机类型为 direct</span></span><br><span class=\"line\"><span class=\"comment\">     * 交换机的名称为空，路由键为队列的名称</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">queueTest</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//路由键与队列同名</span></span><br><span class=\"line\">        rabbitTemplate.convertAndSend(<span class=\"string\">&quot;spring_queue&quot;</span>, <span class=\"string\">&quot;只发队列spring_queue的消息。&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 发送广播</span></span><br><span class=\"line\"><span class=\"comment\">     * 交换机类型为 fanout</span></span><br><span class=\"line\"><span class=\"comment\">     * 绑定到该交换机的所有队列都能够收到消息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fanoutTest</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数1：交换机名称</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数2：路由键名（广播设置为空）</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数3：发送的消息内容</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        rabbitTemplate.convertAndSend(<span class=\"string\">&quot;spring_fanout_exchange&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;发送到spring_fanout_exchange交换机的广播消息&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 通配符</span></span><br><span class=\"line\"><span class=\"comment\">     * 交换机类型为 topic</span></span><br><span class=\"line\"><span class=\"comment\">     * 匹配路由键的通配符，*表示一个单词，#表示多个单词</span></span><br><span class=\"line\"><span class=\"comment\">     * 绑定到该交换机的匹配队列能够收到对应消息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">topicTest</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数1：交换机名称</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数2：路由键名</span></span><br><span class=\"line\"><span class=\"comment\">         * 参数3：发送的消息内容</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        rabbitTemplate.convertAndSend(<span class=\"string\">&quot;spring_topic_exchange&quot;</span>, <span class=\"string\">&quot;heima.bj&quot;</span>, <span class=\"string\">&quot;发送到spring_topic_exchange交换机heima.bj的消息&quot;</span>);</span><br><span class=\"line\">        rabbitTemplate.convertAndSend(<span class=\"string\">&quot;spring_topic_exchange&quot;</span>, <span class=\"string\">&quot;heima.bj.1&quot;</span>, <span class=\"string\">&quot;发送到spring_topic_exchange交换机heima.bj.1的消息&quot;</span>);</span><br><span class=\"line\">        rabbitTemplate.convertAndSend(<span class=\"string\">&quot;spring_topic_exchange&quot;</span>, <span class=\"string\">&quot;heima.bj.2&quot;</span>, <span class=\"string\">&quot;发送到spring_topic_exchange交换机heima.bj.2的消息&quot;</span>);</span><br><span class=\"line\">        rabbitTemplate.convertAndSend(<span class=\"string\">&quot;spring_topic_exchange&quot;</span>, <span class=\"string\">&quot;itcast.cn&quot;</span>, <span class=\"string\">&quot;发送到spring_topic_exchange交换机itcast.cn的消息&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<h2 id=\"52-搭建消费者工程\"><a class=\"markdownIt-Anchor\" href=\"#52-搭建消费者工程\">#</a> 5.2. 搭建消费者工程</h2>\n<h3 id=\"521-创建工程\"><a class=\"markdownIt-Anchor\" href=\"#521-创建工程\">#</a> 5.2.1. 创建工程</h3>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/1565149374831.png\"\n                      alt=\"1565149374831\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/1565144775216.png\"\n                      alt=\"1565144775216\"\n                ></p>\n<h3 id=\"522-添加依赖\"><a class=\"markdownIt-Anchor\" href=\"#522-添加依赖\">#</a> 5.2.2. 添加依赖</h3>\n<p>修改 pom.xml 文件内容为如下：</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.itheima<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-rabbitmq-consumer<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.7.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.amqp<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-rabbit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.1.8.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n<h3 id=\"523-配置整合\"><a class=\"markdownIt-Anchor\" href=\"#523-配置整合\">#</a> 5.2.3. 配置整合</h3>\n<ol>\n<li>创建 <code>spring-rabbitmq-consumer\\src\\main\\resources\\properties\\rabbitmq.properties</code>  连接参数等配置文件；</li>\n</ol>\n<div class=\"highlight-container\" data-rel=\"Properties\"><figure class=\"iseeu highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">rabbitmq.host</span>=<span class=\"string\">192.168.12.135</span></span><br><span class=\"line\"><span class=\"attr\">rabbitmq.port</span>=<span class=\"string\">5672</span></span><br><span class=\"line\"><span class=\"attr\">rabbitmq.username</span>=<span class=\"string\">heima</span></span><br><span class=\"line\"><span class=\"attr\">rabbitmq.password</span>=<span class=\"string\">heima</span></span><br><span class=\"line\"><span class=\"attr\">rabbitmq.virtual-host</span>=<span class=\"string\">/itcast</span></span><br></pre></td></tr></table></figure></div>\n<ol start=\"2\">\n<li>创建  <code>spring-rabbitmq-consumer\\src\\main\\resources\\spring\\spring-rabbitmq.xml</code>  整合配置文件；</li>\n</ol>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:rabbit</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/rabbit&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">       http://www.springframework.org/schema/context</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">       http://www.springframework.org/schema/rabbit</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">       http://www.springframework.org/schema/rabbit/spring-rabbit.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--加载配置文件--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:property-placeholder</span> <span class=\"attr\">location</span>=<span class=\"string\">&quot;classpath:properties/rabbitmq.properties&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 定义rabbitmq connectionFactory --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">rabbit:connection-factory</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;connectionFactory&quot;</span> <span class=\"attr\">host</span>=<span class=\"string\">&quot;$&#123;rabbitmq.host&#125;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                               <span class=\"attr\">port</span>=<span class=\"string\">&quot;$&#123;rabbitmq.port&#125;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                               <span class=\"attr\">username</span>=<span class=\"string\">&quot;$&#123;rabbitmq.username&#125;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                               <span class=\"attr\">password</span>=<span class=\"string\">&quot;$&#123;rabbitmq.password&#125;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                               <span class=\"attr\">virtual-host</span>=<span class=\"string\">&quot;$&#123;rabbitmq.virtual-host&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;springQueueListener&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.itheima.rabbitmq.listener.SpringQueueListener&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;fanoutListener1&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.itheima.rabbitmq.listener.FanoutListener1&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;fanoutListener2&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.itheima.rabbitmq.listener.FanoutListener2&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;topicListenerStar&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.itheima.rabbitmq.listener.TopicListenerStar&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;topicListenerWell&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.itheima.rabbitmq.listener.TopicListenerWell&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;topicListenerWell2&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.itheima.rabbitmq.listener.TopicListenerWell2&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">rabbit:listener-container</span> <span class=\"attr\">connection-factory</span>=<span class=\"string\">&quot;connectionFactory&quot;</span> <span class=\"attr\">auto-declare</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">rabbit:listener</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;springQueueListener&quot;</span> <span class=\"attr\">queue-names</span>=<span class=\"string\">&quot;spring_queue&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">rabbit:listener</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;fanoutListener1&quot;</span> <span class=\"attr\">queue-names</span>=<span class=\"string\">&quot;spring_fanout_queue_1&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">rabbit:listener</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;fanoutListener2&quot;</span> <span class=\"attr\">queue-names</span>=<span class=\"string\">&quot;spring_fanout_queue_2&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">rabbit:listener</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;topicListenerStar&quot;</span> <span class=\"attr\">queue-names</span>=<span class=\"string\">&quot;spring_topic_queue_star&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">rabbit:listener</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;topicListenerWell&quot;</span> <span class=\"attr\">queue-names</span>=<span class=\"string\">&quot;spring_topic_queue_well&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">rabbit:listener</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;topicListenerWell2&quot;</span> <span class=\"attr\">queue-names</span>=<span class=\"string\">&quot;spring_topic_queue_well2&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">rabbit:listener-container</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n<h3 id=\"524-消息监听器\"><a class=\"markdownIt-Anchor\" href=\"#524-消息监听器\">#</a> 5.2.4. 消息监听器</h3>\n<h4 id=\"1队列监听器\"><a class=\"markdownIt-Anchor\" href=\"#1队列监听器\">#</a> 1）队列监听器</h4>\n<p>创建  <code>spring-rabbitmq-consumer\\src\\main\\java\\com\\itheima\\rabbitmq\\listener\\SpringQueueListener.java</code></p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringQueueListener</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">MessageListener</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onMessage</span><span class=\"params\">(Message message)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">msg</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(message.getBody(), <span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.printf(<span class=\"string\">&quot;接收路由名称为：%s，路由键为：%s，队列名为：%s的消息：%s \\n&quot;</span>,</span><br><span class=\"line\">                    message.getMessageProperties().getReceivedExchange(),</span><br><span class=\"line\">                    message.getMessageProperties().getReceivedRoutingKey(),</span><br><span class=\"line\">                    message.getMessageProperties().getConsumerQueue(),</span><br><span class=\"line\">                    msg);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h4 id=\"2广播监听器1\"><a class=\"markdownIt-Anchor\" href=\"#2广播监听器1\">#</a> 2）广播监听器 1</h4>\n<p>创建  <code>spring-rabbitmq-consumer\\src\\main\\java\\com\\itheima\\rabbitmq\\listener\\FanoutListener1.java</code></p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FanoutListener1</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">MessageListener</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onMessage</span><span class=\"params\">(Message message)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">msg</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(message.getBody(), <span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.printf(<span class=\"string\">&quot;广播监听器1：接收路由名称为：%s，路由键为：%s，队列名为：%s的消息：%s \\n&quot;</span>,</span><br><span class=\"line\">                    message.getMessageProperties().getReceivedExchange(),</span><br><span class=\"line\">                    message.getMessageProperties().getReceivedRoutingKey(),</span><br><span class=\"line\">                    message.getMessageProperties().getConsumerQueue(),</span><br><span class=\"line\">                    msg);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<h4 id=\"3广播监听器2\"><a class=\"markdownIt-Anchor\" href=\"#3广播监听器2\">#</a> 3）广播监听器 2</h4>\n<p>创建  <code>spring-rabbitmq-consumer\\src\\main\\java\\com\\itheima\\rabbitmq\\listener\\FanoutListener2.java</code></p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FanoutListener2</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">MessageListener</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onMessage</span><span class=\"params\">(Message message)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">msg</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(message.getBody(), <span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.printf(<span class=\"string\">&quot;广播监听器2：接收路由名称为：%s，路由键为：%s，队列名为：%s的消息：%s \\n&quot;</span>,</span><br><span class=\"line\">                    message.getMessageProperties().getReceivedExchange(),</span><br><span class=\"line\">                    message.getMessageProperties().getReceivedRoutingKey(),</span><br><span class=\"line\">                    message.getMessageProperties().getConsumerQueue(),</span><br><span class=\"line\">                    msg);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h4 id=\"4星号通配符监听器\"><a class=\"markdownIt-Anchor\" href=\"#4星号通配符监听器\">#</a> 4）星号通配符监听器</h4>\n<p>创建  <code>spring-rabbitmq-consumer\\src\\main\\java\\com\\itheima\\rabbitmq\\listener\\TopicListenerStar.java</code></p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TopicListenerStar</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">MessageListener</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onMessage</span><span class=\"params\">(Message message)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">msg</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(message.getBody(), <span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.printf(<span class=\"string\">&quot;通配符*监听器：接收路由名称为：%s，路由键为：%s，队列名为：%s的消息：%s \\n&quot;</span>,</span><br><span class=\"line\">                    message.getMessageProperties().getReceivedExchange(),</span><br><span class=\"line\">                    message.getMessageProperties().getReceivedRoutingKey(),</span><br><span class=\"line\">                    message.getMessageProperties().getConsumerQueue(),</span><br><span class=\"line\">                    msg);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<h4 id=\"5井号通配符监听器\"><a class=\"markdownIt-Anchor\" href=\"#5井号通配符监听器\">#</a> 5）井号通配符监听器</h4>\n<p>创建  <code>spring-rabbitmq-consumer\\src\\main\\java\\com\\itheima\\rabbitmq\\listener\\TopicListenerWell.java</code></p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TopicListenerWell</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">MessageListener</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onMessage</span><span class=\"params\">(Message message)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">msg</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(message.getBody(), <span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.printf(<span class=\"string\">&quot;通配符#监听器：接收路由名称为：%s，路由键为：%s，队列名为：%s的消息：%s \\n&quot;</span>,</span><br><span class=\"line\">                    message.getMessageProperties().getReceivedExchange(),</span><br><span class=\"line\">                    message.getMessageProperties().getReceivedRoutingKey(),</span><br><span class=\"line\">                    message.getMessageProperties().getConsumerQueue(),</span><br><span class=\"line\">                    msg);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<h4 id=\"6井号通配符监听器2\"><a class=\"markdownIt-Anchor\" href=\"#6井号通配符监听器2\">#</a> 6）井号通配符监听器 2</h4>\n<p>创建  <code>spring-rabbitmq-consumer\\src\\main\\java\\com\\itheima\\rabbitmq\\listener\\TopicListenerWell2.java</code></p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TopicListenerWell2</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">MessageListener</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onMessage</span><span class=\"params\">(Message message)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">msg</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(message.getBody(), <span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.printf(<span class=\"string\">&quot;通配符#监听器2：接收路由名称为：%s，路由键为：%s，队列名为：%s的消息：%s \\n&quot;</span>,</span><br><span class=\"line\">                    message.getMessageProperties().getReceivedExchange(),</span><br><span class=\"line\">                    message.getMessageProperties().getReceivedRoutingKey(),</span><br><span class=\"line\">                    message.getMessageProperties().getConsumerQueue(),</span><br><span class=\"line\">                    msg);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<h1 id=\"6-spring-boot整合rabbitmq\"><a class=\"markdownIt-Anchor\" href=\"#6-spring-boot整合rabbitmq\">#</a> 6. Spring Boot 整合 RabbitMQ</h1>\n<h2 id=\"61-简介\"><a class=\"markdownIt-Anchor\" href=\"#61-简介\">#</a> 6.1. 简介</h2>\n<p>在 Spring 项目中，可以使用 Spring-Rabbit 去操作 RabbitMQ<br>\n<a class=\"link\"   href=\"https://github.com/spring-projects/spring-amqp\" >https://github.com/spring-projects/spring-amqp <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p>尤其是在 spring boot 项目中只需要引入对应的 amqp 启动器依赖即可，方便的使用 RabbitTemplate 发送消息，使用注解接收消息。</p>\n<p><em>一般在开发过程中</em>：</p>\n<p><strong>生产者工程：</strong></p>\n<ol>\n<li>\n<p>application.yml 文件配置 RabbitMQ 相关信息；</p>\n</li>\n<li>\n<p>在生产者工程中编写配置类，用于创建交换机和队列，并进行绑定</p>\n</li>\n<li>\n<p>注入 RabbitTemplate 对象，通过 RabbitTemplate 对象发送消息到交换机</p>\n</li>\n</ol>\n<p><strong>消费者工程：</strong></p>\n<ol>\n<li>\n<p>application.yml 文件配置 RabbitMQ 相关信息</p>\n</li>\n<li>\n<p>创建消息处理类，用于接收队列中的消息并进行处理</p>\n</li>\n</ol>\n<h2 id=\"52-搭建生产者工程\"><a class=\"markdownIt-Anchor\" href=\"#52-搭建生产者工程\">#</a> 5.2. 搭建生产者工程</h2>\n<h3 id=\"521-创建工程-2\"><a class=\"markdownIt-Anchor\" href=\"#521-创建工程-2\">#</a> 5.2.1. 创建工程</h3>\n<p>创建生产者工程 springboot-rabbitmq-producer</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/1558321303612.png\"\n                      alt=\"1556072078816\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/1558321417385.png\"\n                      alt=\"1556072084653\"\n                ></p>\n<h3 id=\"522-添加依赖-2\"><a class=\"markdownIt-Anchor\" href=\"#522-添加依赖-2\">#</a> 5.2.2. 添加依赖</h3>\n<p>修改 pom.xml 文件内容为如下：</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.1.4.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.itheima<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>springboot-rabbitmq-producer<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n<h3 id=\"523-启动类\"><a class=\"markdownIt-Anchor\" href=\"#523-启动类\">#</a> 5.2.3. 启动类</h3>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.rabbitmq;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProducerApplication</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(ProducerApplication.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<h3 id=\"524-配置rabbitmq\"><a class=\"markdownIt-Anchor\" href=\"#524-配置rabbitmq\">#</a> 5.2.4. 配置 RabbitMQ</h3>\n<h4 id=\"1配置文件\"><a class=\"markdownIt-Anchor\" href=\"#1配置文件\">#</a> 1）配置文件</h4>\n<p>创建 application.yml，内容如下：</p>\n<div class=\"highlight-container\" data-rel=\"Yml\"><figure class=\"iseeu highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">rabbitmq:</span></span><br><span class=\"line\">    <span class=\"attr\">host:</span> <span class=\"string\">localhost</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">5672</span></span><br><span class=\"line\">    <span class=\"attr\">virtual-host:</span> <span class=\"string\">/itcast</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">heima</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">heima</span></span><br></pre></td></tr></table></figure></div>\n<h4 id=\"2绑定交换机和队列\"><a class=\"markdownIt-Anchor\" href=\"#2绑定交换机和队列\">#</a> 2）绑定交换机和队列</h4>\n<p>创建 RabbitMQ 队列与交换机绑定的配置类 com.itheima.rabbitmq.config.RabbitMQConfig</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.rabbitmq.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RabbitMQConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//交换机名称</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">ITEM_TOPIC_EXCHANGE</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;item_topic_exchange&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">//队列名称</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">ITEM_QUEUE</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;item_queue&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//声明交换机</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean(&quot;itemTopicExchange&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Exchange <span class=\"title function_\">topicExchange</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ExchangeBuilder.topicExchange(ITEM_TOPIC_EXCHANGE).durable(<span class=\"literal\">true</span>).build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//声明队列</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean(&quot;itemQueue&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Queue <span class=\"title function_\">itemQueue</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> QueueBuilder.durable(ITEM_QUEUE).build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//绑定队列和交换机</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Binding <span class=\"title function_\">itemQueueExchange</span><span class=\"params\">(<span class=\"meta\">@Qualifier(&quot;itemQueue&quot;)</span> Queue queue,</span></span><br><span class=\"line\"><span class=\"params\">                                     <span class=\"meta\">@Qualifier(&quot;itemTopicExchange&quot;)</span> Exchange exchange)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(queue).to(exchange).with(<span class=\"string\">&quot;item.#&quot;</span>).noargs();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"53-搭建消费者工程\"><a class=\"markdownIt-Anchor\" href=\"#53-搭建消费者工程\">#</a> 5.3. 搭建消费者工程</h2>\n<h3 id=\"531-创建工程\"><a class=\"markdownIt-Anchor\" href=\"#531-创建工程\">#</a> 5.3.1. 创建工程</h3>\n<p>创建消费者工程 springboot-rabbitmq-consumer</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/1558322109359.png\"\n                      alt=\"1556073553841\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/1558322192435.png\"\n                      alt=\"1556073567786\"\n                ></p>\n<h3 id=\"532-添加依赖\"><a class=\"markdownIt-Anchor\" href=\"#532-添加依赖\">#</a> 5.3.2. 添加依赖</h3>\n<p>修改 pom.xml 文件内容为如下：</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.1.4.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.itheima<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>springboot-rabbitmq-consumer<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n<h3 id=\"533-启动类\"><a class=\"markdownIt-Anchor\" href=\"#533-启动类\">#</a> 5.3.3. 启动类</h3>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.rabbitmq;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConsumerApplication</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(ConsumerApplication.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"534-配置rabbitmq\"><a class=\"markdownIt-Anchor\" href=\"#534-配置rabbitmq\">#</a> 5.3.4. 配置 RabbitMQ</h3>\n<p>创建 application.yml，内容如下：</p>\n<div class=\"highlight-container\" data-rel=\"Yml\"><figure class=\"iseeu highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">rabbitmq:</span></span><br><span class=\"line\">    <span class=\"attr\">host:</span> <span class=\"string\">localhost</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">5672</span></span><br><span class=\"line\">    <span class=\"attr\">virtual-host:</span> <span class=\"string\">/itcast</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">heima</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">heima</span></span><br></pre></td></tr></table></figure></div>\n<h3 id=\"535-消息监听处理类\"><a class=\"markdownIt-Anchor\" href=\"#535-消息监听处理类\">#</a> 5.3.5. 消息监听处理类</h3>\n<p>编写消息监听器 com.itheima.rabbitmq.listener.MyListener</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.rabbitmq.listener;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyListener</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 监听某个队列的消息</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> message 接收到的消息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener(queues = &quot;item_queue&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">myListener1</span><span class=\"params\">(String message)</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;消费者接收到的消息为：&quot;</span> + message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<h2 id=\"54-测试\"><a class=\"markdownIt-Anchor\" href=\"#54-测试\">#</a> 5.4. 测试</h2>\n<p>在生产者工程 springboot-rabbitmq-producer 中创建测试类，发送消息：</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itheima.rabbitmq;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.itheima.rabbitmq.config.RabbitMQConfig;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.runner.RunWith;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RunWith(SpringRunner.class)</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RabbitMQTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RabbitTemplate rabbitTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        rabbitTemplate.convertAndSend(RabbitMQConfig.ITEM_TOPIC_EXCHANGE, <span class=\"string\">&quot;item.insert&quot;</span>, <span class=\"string\">&quot;商品新增，routing key 为item.insert&quot;</span>);</span><br><span class=\"line\">        rabbitTemplate.convertAndSend(RabbitMQConfig.ITEM_TOPIC_EXCHANGE, <span class=\"string\">&quot;item.update&quot;</span>, <span class=\"string\">&quot;商品修改，routing key 为item.update&quot;</span>);</span><br><span class=\"line\">        rabbitTemplate.convertAndSend(RabbitMQConfig.ITEM_TOPIC_EXCHANGE, <span class=\"string\">&quot;item.delete&quot;</span>, <span class=\"string\">&quot;商品删除，routing key 为item.delete&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>先运行上述测试程序（交换机和队列才能先被声明和绑定），然后启动消费者；在消费者工程 springboot-rabbitmq-consumer 中控制台查看是否接收到对应消息。</p>\n<p>另外；也可以在 RabbitMQ 的管理控制台中查看到交换机与队列的绑定：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/1556074827222.png\"\n                      alt=\"1556074827222\"\n                ></p>\n",
            "tags": [
                "RabbitMQ"
            ]
        },
        {
            "id": "https://wait-you.github.io/2023/06/02/Android/",
            "url": "https://wait-you.github.io/2023/06/02/Android/",
            "title": "Android",
            "date_published": "2023-06-01T20:37:34.000Z",
            "content_html": "<h1 id=\"android\"><a class=\"markdownIt-Anchor\" href=\"#android\">#</a> Android</h1>\n<h2 id=\"系统架构\"><a class=\"markdownIt-Anchor\" href=\"#系统架构\">#</a> 系统架构</h2>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://s2.loli.net/2021/12/24/SHkyPuQ3Ja9XBeI.png\"\n                      alt=\"Android 软件堆栈\"\n                ></p>\n<h3 id=\"linux内核层\"><a class=\"markdownIt-Anchor\" href=\"#linux内核层\">#</a> Linux 内核层</h3>\n<ul>\n<li>Android 平台的基础是 Linux 内核。例如： <code>Android Runtime(ART)</code>  依靠 Linux 内核来执行底层功能，例如线程和底层内存管理。</li>\n<li>使用 Linux 内核可让 Android 利用主要安全功能，并且允许设备制造商为著名的内核开发硬件驱动程序\n<ul>\n<li>Linux 内核\n<ul>\n<li>Drivers ： 驱动 。 用于使某个设备能够正常操作和工作的程序，主要作用与硬件设备</li>\n<li>Power Management ： 电源管理</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"硬件抽象层hal\"><a class=\"markdownIt-Anchor\" href=\"#硬件抽象层hal\">#</a> 硬件抽象层（HAL）</h3>\n<ul>\n<li>硬件抽象层层（HAL）提供标准界面，向更高级别的 JAVA API 框架显示设备硬件功能。HAL 包含多个库模块。其中每个模块为特定类型的硬件组件实现一个界面，例如相机或蓝牙模块。当框架 API 要求访问设备硬件时，Android 将为该硬件组件加载库模块</li>\n<li>只负责定义规范，不负责实现</li>\n<li>Sensors 传感器。距离传感器</li>\n</ul>\n<h3 id=\"系统运行库层\"><a class=\"markdownIt-Anchor\" href=\"#系统运行库层\">#</a> 系统运行库层</h3>\n<ul>\n<li><strong>Android Runtime</strong>\n<ul>\n<li>对于运行 Android5.0（API 级别 21）或更高版本的设备，每个应用都在其自己的进程中运行，并且有其自己的 Android Runtime (ART) 实例。ART 编写为通过执行 DEX 文件在低内存设备上运行多个虚拟机，DEX 文件是一种专为 Android 设计的字节码格式，经过优化，使用的内存很少。编译工具链（例如 Jack）将 Java 源代码编译为 DEX 字节码，使其可在 Android 平台运行</li>\n<li>ART 的部分主要功能包括：\n<ul>\n<li>预先（AOT）和即时（JIT）编译</li>\n<li>优化的垃圾回收（GC）</li>\n<li>在 Android 9 （API 级别 28）及更高版本的系统中，支持将应用软件包中的 Dalvik Executable 格式 (DEX) 文件转换为更紧凑的机器代码。</li>\n<li>更好的调试支持，包括专用采用分析器、详细的诊断报告和崩溃报告，并且能够设置观察点以监控特定字段</li>\n</ul>\n</li>\n<li>在 Android 版本 5.0（API 级别 21）之前，Dalvik 是 Android Runtime。如果您的应用在 ART 上运行效果很好，那么它应该也可在 Dalvik 上运行，但反过来不一定</li>\n<li>Android 还包含一套核心运行时库，可提供 Java API 框架所使用的 Java 编程语言中的大部分功能， 包括一些 Java8 语言功能</li>\n</ul>\n</li>\n<li><strong>原生 C/C++ 库</strong>\n<ul>\n<li>许多核心 Android 系统组件和服务（例如 ART 和 HAL）构建自原生代码，需要以 C 和 C++ 编写的原生库。Android 平台提供 Java 框架 API 以向应用显示其中部分原生库的功能。例如，您可以通过 Android 框架的 Java OpenGL API 访问 OpenGL ES，以支持在应用中绘制和操作 2D 和 3D 图形。</li>\n<li>如果开发的是需要 C 或 C++ 代码的应用，可以使用 Android NDK 直接从原生代码访问某些原生平台库。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"java-api-框架\"><a class=\"markdownIt-Anchor\" href=\"#java-api-框架\">#</a> JAVA API 框架</h3>\n<ul>\n<li>\n<p>你可以通过 JAVA 语言编写的 Android OS 的整个功能集。这些 API 形成创建 Android 应用所需的构建块，他们可以简化核心模块化系统组件和服务的重复使用，包括以下组件和服务：</p>\n<ul>\n<li>丰富、可拓展的视图系统，可用以构建应用的 UI，包括列表、网格、文本框、按钮甚至可嵌入的网络浏览器</li>\n<li>资源管理器，用于访问非代码资源，例如本地化的字符串、图形和布局文件</li>\n<li>通知管理器，可让所有应用在状态栏中显示自定义提醒</li>\n<li>Activity 管理器，用于管理应用的生命周期，提供常见的导航返回栈</li>\n<li>内容提供程序，可让应用访问其他应用（例如 “联系人” 应用）中的数据或者共享其自己的数据</li>\n</ul>\n<p>开发者可以完全访问 Android 系统应用使用的框架 API</p>\n</li>\n</ul>\n<h3 id=\"系统应用\"><a class=\"markdownIt-Anchor\" href=\"#系统应用\">#</a> 系统应用</h3>\n<ul>\n<li>\n<p>Android 随附一套用于电子邮件、短信、日历、互联网浏览和联系人等的核心应用。平台随附的应用与用户可以选择安装的应用一样，没有特殊状态。因此第三方应用可成为用户的默认网络浏览器、短信 Messenger 甚至默认键盘（有一些例外，例如系统的 “设置” 应用）。</p>\n</li>\n<li>\n<p>系统应用可用作用户的应用，以及提供开发者可从其自己的应用访问的主要功能。例如，如果您的应用要发短信，您无需自己构建该功能，可以改为调用已安装的短信应用向您指定的接收者发送消息。</p>\n</li>\n</ul>\n<h2 id=\"应用开发特色\"><a class=\"markdownIt-Anchor\" href=\"#应用开发特色\">#</a> 应用开发特色</h2>\n<h3 id=\"四大组件\"><a class=\"markdownIt-Anchor\" href=\"#四大组件\">#</a> 四大组件</h3>\n<ul>\n<li>Activity\n<ul>\n<li>是所有 Android 应用程序的门面，凡是在应用你看到的东西，都是放在 activity 中的</li>\n</ul>\n</li>\n<li>Service\n<ul>\n<li>你无法看到他，但他会在后台默默的运行，即使用户退出了应用，service 仍然是可以运行的</li>\n</ul>\n</li>\n<li>BroadcastReceiver 允许你的应用接受来自各处的广播信息，比如电话、短信等，当然你的应用也可以向外发出广播信息</li>\n<li>ContentProvider\n<ul>\n<li>是为应用程序之间共享数据提供了可能，比如你想要好读取系统通讯录中的联系人，就需要通过 ContentProvider 来实现</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"丰富的系统控件\"><a class=\"markdownIt-Anchor\" href=\"#丰富的系统控件\">#</a> 丰富的系统控件</h3>\n<ul>\n<li>Android 系统为开发者提供了丰富的系统控件，使得我们可以很轻松的编写出漂亮的界面，当然如果你品味比较高，不满足系统自带的空间效果，完全可以定制属于自己的控件</li>\n</ul>\n<h3 id=\"sqlite数据库\"><a class=\"markdownIt-Anchor\" href=\"#sqlite数据库\">#</a> SQLite 数据库</h3>\n<ul>\n<li>Android 系统还自带了这种轻量级、运算速度极快的嵌入式关系型数据库，他不仅支持标准的 SQL 语法，还可以通过 Android 封装好的 API 记性操作，让存储和读取数据变得非常方便</li>\n</ul>\n<h3 id=\"强大的多媒体\"><a class=\"markdownIt-Anchor\" href=\"#强大的多媒体\">#</a> 强大的多媒体</h3>\n<ul>\n<li>Android 系统还提供了丰富的多媒体服务，如音乐、视频、录音、拍照等，这一切你都可以在程序中通过代码进行控制，让你的应用变得更加丰富多彩</li>\n</ul>\n<h2 id=\"项目结构\"><a class=\"markdownIt-Anchor\" href=\"#项目结构\">#</a> 项目结构</h2>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20210717184629920.png\"\n                      alt=\"image-20210717184629920\"\n                ></p>\n<ul>\n<li><strong>.gradle 和.idea</strong>\n<ul>\n<li>这两个目录下放置的是都是 Android Studio 自动生成的一些文件，我们无须关心他，也不要去手动编辑</li>\n</ul>\n</li>\n<li><strong>app</strong>\n<ul>\n<li>项目中的代码、资源等内容都是放置在这个目录下的，我们后面的开发工作也基本是在这个目录下进行的</li>\n</ul>\n</li>\n<li><strong>build</strong>\n<ul>\n<li>这个目录重要包含了一些在编译时自动生成的文件，你也不需要过多关心</li>\n</ul>\n</li>\n<li><strong>gradle</strong>\n<ul>\n<li>这个目录下包含了 gradle wrapper 的配置文件，使用 gradle wrapper 的方式不需要提前将 gradle 下载好，而是会自动根据本地的缓存情况决定是否需要联网下载 gradle。Android Studio 默认就是启动 gradle wrapper 方式的</li>\n</ul>\n</li>\n<li><strong>.gitignore</strong>\n<ul>\n<li>这个文件是用来将指定的文件活目录排除在版本控制之外的</li>\n</ul>\n</li>\n<li><strong>build.gradle</strong>\n<ul>\n<li>这是项目全聚德 gradle 构建脚本，通常这个文件中的内容是不需要修改的</li>\n</ul>\n</li>\n<li><strong>gradle.properties</strong>\n<ul>\n<li>这个文件是全局的 gradle 配置文件，在这里配置的属性将会影响到项目中的所有的 gradle 编译脚本</li>\n</ul>\n</li>\n<li><strong>gradlew 和 gradlew.bat</strong>\n<ul>\n<li>这两个文件是用来命令行界面中执行 gradle 命令的，其中 gradlew 是在 linux 活 mac 系统中使用的，gradlew.bat 是在 windows 中使用的</li>\n</ul>\n</li>\n<li>HelloWorld.iml\n<ul>\n<li>iml 文件是所有 IntelliJ IDEA 项目都会自动生成的一个文件（Android Studio 是基于 IDEA 开发的），用于表示这是一个 IntelliJ IDEA 项目，我们不需要修改这个文件中的任何内容</li>\n</ul>\n</li>\n<li><strong>local.properties</strong>\n<ul>\n<li>这个文件用于制定本机中的 Android SDK 路径，通常内容是自动生成的，我们并不需要修改，除非你本机中的 Android SDK 位置发生了变化，那么就将这个文件中的路径改成新的位置即可</li>\n</ul>\n</li>\n<li><strong>settings.gradle</strong>\n<ul>\n<li>这个文件用于指定项目中所用引入的模块，由于 HelloWorld 项目中只有一个 app 模块，因此该文件中也就之引入了 app 这个一个模块，通常情况下，模块的引入是自动完成的，需要我们手动修改这个文件得到场景可能比较少</li>\n</ul>\n</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20210717184704648.png\"\n                      alt=\"image-20210717184704648\"\n                ></p>\n<ul>\n<li><strong>build</strong>\n<ul>\n<li>这个目录和外层的 build 目录类似，也包含了一些在编译是自动生成的文件，不过它里面的内容会更加复杂，我们不需要过多关心</li>\n</ul>\n</li>\n<li><strong>libs</strong>\n<ul>\n<li>如果你的项目中使用到了第三方 jar 包，就需要把这些 jar 包都放在 libs 目录下，放在这个目录下的 jar 包会被自动添加到项目的构建路径里</li>\n</ul>\n</li>\n<li><strong>androidTest</strong>\n<ul>\n<li>此处是用来编写 Android Test 测试用例的，可以对项目进行一些自动化测试</li>\n</ul>\n</li>\n<li><strong>java</strong>\n<ul>\n<li>毫无疑问，java 目录是放置我们所有 Java 代码的地方（Kotlin 代码也放在这里），展开该目录，你将看到系统帮我们自动生成了一个 MainActivity 文件</li>\n</ul>\n</li>\n<li><strong>res</strong>\n<ul>\n<li>这个目录下的内容就有点多了，简单点数哦，就是你在项目中使用到的所有图片、布局、字符串等资源都要存放在这个目录下，当然这个目录下还有很多子目录\n<ul>\n<li>图片放在 drawable 目录下</li>\n<li>布局放在 layout 目录下</li>\n<li>字符串放在 values 目录下</li>\n</ul>\n</li>\n<li>所以你不用担心会把整个 res 目录弄得乱七八糟</li>\n</ul>\n</li>\n<li><strong>AndroidMainfest.xml</strong>\n<ul>\n<li>这是整个 Android 项目的配置文件，你在程序重定义的所有四大组件都需要在这个文件里面注册，另外还可以在这个文件给应用程序添加权限声明</li>\n</ul>\n</li>\n<li><strong>test</strong>\n<ul>\n<li>此处是用来编写 Unit Test 测试用例的，是对项目进行自动化测试的另一种方式</li>\n</ul>\n</li>\n<li><strong>.gitignore</strong>\n<ul>\n<li>这个文件用于将 app 模块内制定的目录或文件排除在版本控制之外，作用和外层的.gitignore 文件类似</li>\n</ul>\n</li>\n<li><strong>app.iml</strong>\n<ul>\n<li>IntelliJ IDEA 项目自动生成的文件，我们不需要关心或修改这个文件的内容</li>\n</ul>\n</li>\n<li><strong>build.gradle</strong>\n<ul>\n<li>这是 app 模块的 gradle 构建脚本，这个文件会指定很多项目构建将相关的配置</li>\n</ul>\n</li>\n<li><strong><a class=\"link\"   href=\"http://proguard-rules.pro\" >proguard-rules.pro <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></strong>\n<ul>\n<li>这个文件用于指定项目代码的混淆规则，当代码开发完成以后打包成安装包问价你，如果不希望代码被别人破解，荣昌会将代码进行混淆，从而让破解者难以阅读</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"项目中的资源\"><a class=\"markdownIt-Anchor\" href=\"#项目中的资源\">#</a> 项目中的资源</h2>\n<ul>\n<li>所有以 <code>drawable</code>  开头的目录都是用来放图片的</li>\n<li>所有以 <code>mipmap</code>  开头的目录都是用来放应用图标的</li>\n<li>所有以 <code>values</code>  开头的目录都是用来放字符串、样式、颜色等配置的</li>\n<li>所有以 <code>layout</code>  开头的目录都是用来放布局文件的</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20210717184731513.png\"\n                      alt=\"image-20210717184731513\"\n                ></p>\n<ul>\n<li>\n<p>之所以这么多的 <code>mipmap</code>  开头的目录，其实主要是为了让程序能够更好的兼容各种设备。 <code>drawable</code>  目录也是相同的道理，虽然 Android Studio 没有帮我们自动生成，但是我们也应该自己创建 drawable-hdpi, drawable-xhdpi, drawable-xxhdpi 等目录，在制作程序的时候，最好能够给同一张图片提供几个不同分辨率的版本，分别放在这些目录下，然后程序运行的时候，会自动根据当前运行设备分辨率的高低选择家在哪个目录下的图片。当然这只是理想情况，更多时候美工只会提供给我们一份图片，这是你把所有图片都放在 drawable-xxhdpi 目录下就行了，因为这是最主流的设别分辨率目录</p>\n</li>\n<li>\n<p>下面来看下如何使用这些资源</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>resources</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>string</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app_name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>hello world<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>string</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>resources</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"><div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">  - 可以看到这里定义了一个应用程序名的字符串，我么你有以下两种方式来引用它</span><br><span class=\"line\"></span><br><span class=\"line\">    - 在代码中通过``R.string.app_name``可以获得该字符串的引用</span><br><span class=\"line\">    - 在XMl中通过``@string/app_name``可以获得该字符串的引用</span><br><span class=\"line\"></span><br><span class=\"line\">  - 基本语法就是上面这两种方式，其中string部分是可以替换的，如果是引用的图片资源就可以替换成drawable，如果是引用的应用图标就可以替换成mipmap，如果是引用的布局文件，就可以替换策划给你layout，以此类推</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## Activity</span><br><span class=\"line\"></span><br><span class=\"line\">### Activity是什么</span><br><span class=\"line\"></span><br><span class=\"line\">- Activity是最吸引用户的地方，它是一种可以包含用户界面的组件，主要用于和用于进行交互，一个应用程序中可以包含零个或多个Activity，但不包含Activity的应用程序很少见</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">### 手动创建Activity</span><br><span class=\"line\"></span><br><span class=\"line\">![image-20210717185717443](http://tuchuang.wenhe9.cn/image-20210717185717443.png)</span><br><span class=\"line\"></span><br><span class=\"line\">- 勾选``Generate Layout File ``表示会自动为FirstActivity创建一个对应的布局文件</span><br><span class=\"line\"></span><br><span class=\"line\">- 勾选``Launcher Activity``表示会自动讲FristActivity设置为当前项目的主Activity</span><br><span class=\"line\"></span><br><span class=\"line\">- 此时不选择上述两者，得到文件代码如下：</span><br><span class=\"line\"></span><br><span class=\"line\">  - ```kotlin</span><br><span class=\"line\">    class FirstActivity : AppCompatActivity()&#123;</span><br><span class=\"line\">        override fun onCreate(savedInstanceState : Builde?)&#123;</span><br><span class=\"line\">            super.onCreate(SaceInstanceState)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div></div></span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>可以看到，onCreate () 方法非常简单，就是调用了弗雷德 onCreate () 方法，当然这只是默认的实现，后面我们还需要在里面加入很多自己的逻辑</p>\n</li>\n</ul>\n<h3 id=\"创建和加载布局\"><a class=\"markdownIt-Anchor\" href=\"#创建和加载布局\">#</a> 创建和加载布局</h3>\n<ul>\n<li>前面我们说过，Android 程序的设计讲究逻辑和视图分离，最好每一个 Activity 都能对应一个布局。布局是用来显示界面内容的，我们现在就来手动创建一个布局文件。</li>\n</ul>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">android:orientation</span>=<span class=\"string\">&quot;vertical&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;match_parent&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/button1&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:text</span>=<span class=\"string\">&quot;@string/content&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n<ul>\n<li>\n<p>其中 <code>android:id</code>  是给当前的元素定义了一个唯一的标识符，之后可以在代码中对这个元素进行操作。你可能会对 <code>@+id/button1</code>  这种语法感到陌生，但如果把加好去掉，变成 <code>@id/button1</code> ，你就会觉得熟悉了吧。这不就是 XML 中引用资源的语法吗？追不过是把 string 替换成了 id。是的，如果你需要在 XML 中引用一个 id，就是用 <code>@id/button</code>  这种语法，而如果你需要在 XML 中定义一个 id，则要使用 <code>@+id/button1</code>  这种语法。</p>\n</li>\n<li>\n<p>在 Activity 中加载布局</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> FirstActivity <span class=\"token operator\">:</span> <span class=\"token function\">AppCompatActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>saveInstanceState <span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>saceInstanceState<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>first_layout<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">2</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>在 <code>&lt;activity&gt;</code>  标签中，我们使用了 <code>andoird:name</code>  来指定具体注册哪一个 <code>Activity</code> ，那么这里填入的 <code>.FristActivity</code>  是什么意思呢，其实这不过是 <code>cn.wenhe9.helloworld.FristActivity</code>  的缩写而已，由于在最外层的 <code>&lt;manifest&gt;</code>  标签中已经通过 <code>package</code>  属性智定乐程序的包名是 <code>cn.wenhe9.helloworld</code> ，因此咋注册 Actitivy 时，这一部分可以省略，直接使用 <code>.FristActivity</code>  即可</p>\n</li>\n<li>\n<p>为程序配置主 <code>Activity</code> ，在 <code>&lt;activity&gt;</code>  标签的内容部加入 <code>&lt;intent-filter&gt;</code>  标签，并在这个标签里添加 <code>&lt;action android:name=&quot;android.intent.action.MAIN&quot;/&gt;</code>  和 <code>&lt;category android:name=&quot;android.intent.category.LAUNCHER&quot;/&gt;</code>  这两句声明即可</p>\n</li>\n<li>\n<p>除此之外，我们还可以使用 <code>android:label</code>  指定 Activity 中标题栏中的内容，标题栏是显示在 Activity 最顶部的，待会儿运行的时候，你就会看到，需要注意的是，给主 Activity 指定的 label 不仅会成为标题栏中的内容，还会成为启动器 (Launcher) 中应用程序显示的名称</p>\n</li>\n<li>\n<p>如果你的应用程序中没有声明任何一个人 Activity 作为主 Activity，这个程序仍然是可以正常安装的，只是你无法在启动器中看到或者打开这个程序，这种程序一般是作为第三方服务供其他应用在内部进行调用的、</p>\n</li>\n</ul>\n<h3 id=\"在activity中使用toast\"><a class=\"markdownIt-Anchor\" href=\"#在activity中使用toast\">#</a> 在 Activity 中使用 Toast</h3>\n<ul>\n<li>\n<p>Toast 是 ANdroid 系统提供的一种非常好的提醒方式，在程序中可以使用他将一些短小的信息通知给用户，这些信息会在一段时间后自动消失，并且不会占用任何屏幕空间没我们现在就尝试一下如果在 Activity 中使用 Toast</p>\n</li>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> FirstActivity <span class=\"token operator\">:</span> <span class=\"token function\">AppCompatActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>saveInstanceState <span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>saceInstanceState<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>first_layout<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">val</span> button1 ： Button <span class=\"token operator\">=</span> <span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>button1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        button1<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            Toast<span class=\"token punctuation\">.</span><span class=\"token function\">makeTest</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"你点击了一个按钮\"</span></span><span class=\"token punctuation\">,</span> Toast<span class=\"token punctuation\">.</span>LENGTH_SHORT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">3</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n<li>\n<p>这里我们创建了两个菜单项，其中 <code>&lt;item&gt;</code>  标签用来创建具体的某一个菜单项，然后通过 <code>androidLid</code>  给这个菜单项制定一个唯一的标识符，通过 <code>android:title</code>  给这个菜单项制定一个名称</p>\n</li>\n<li>\n<p>接着回到 <code>FirstActivity</code>  中重写 <code>onCreateOptionsMenu()</code>  方法</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreateOptionsMenu</span><span class=\"token punctuation\">(</span>menu<span class=\"token operator\">:</span> Menu<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Boolean <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        menuInflater<span class=\"token punctuation\">.</span><span class=\"token function\">inflate</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">.</span>menu<span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">,</span> menu<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">4</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"销毁一个activity\"><a class=\"markdownIt-Anchor\" href=\"#销毁一个activity\">#</a> 销毁一个 Activity</h3>\n<ul>\n<li>\n<p>按一下 back 键</p>\n</li>\n<li>\n<p>调用 <code>finish()</code></p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>button1<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">finish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">5</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>首先构建了一个 Intent 对象，第一个参数传入 this，也就是 FirstActivity 作为上下文，第二个参数传入 <code>SecondActivity::class.java</code>  作为目标 Activity，这样我们 “意图 “就非常明显了。注意，Kotlin 中 <code>SecondActivity::class.java</code>  法就相当于 Java 中的 <code>SecondActivity.class</code>  的写法</p>\n</li>\n</ul>\n<h4 id=\"使用隐式intent\"><a class=\"markdownIt-Anchor\" href=\"#使用隐式intent\">#</a> 使用隐式 Intent</h4>\n<ul>\n<li>\n<p>相对于显示 Intent，隐式 Intent 则含蓄了很多，他并不明确的指出想要启动哪一个 Activity，而是指定了一系列更为抽象的 action 和 category 等信息，然后交由系统去分析这个 Intent，并帮我们找出合适的 Activity 去启动</p>\n</li>\n<li>\n<p>什么叫做合适的 Activity？简单来说就是可以响应这个隐式 Intent 的 Activity</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>activity</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>.SecondActivity<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>intent-filter</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>action</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cn.wenhe9.testIntent<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>category</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>android.intent.category.DEFAULT<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>intent-filter</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>activity</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"><div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- ```kotlin</span><br><span class=\"line\">  val intent = Intent(&quot;cn.wenhe9.testIntent&quot;)</span><br><span class=\"line\">  startActivity(intent)</span><br></pre></td></tr></table></figure></div></div></span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>满足 action 和 category 即可， <code>DEFAULT</code>  是默认的分类，在 activity 可以不去指定，指定的话，代码为:</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> intent <span class=\"token operator\">=</span> <span class=\"token function\">Intent</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"cn.wenhe9.testIntent\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>intent<span class=\"token punctuation\">.</span><span class=\"token function\">addCategory</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"cn.wenhe9.category\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">startActivity</span><span class=\"token punctuation\">(</span>intent<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">7</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>可以在 <code>&lt;intent-filter&gt;</code>  标签中再配置一个 <code>&lt;data&gt;</code>  标签，用于更精确的指定当前 Activity 能够响应的数据， <code>&lt;data&gt;</code>  标签中主要可以配置以下内容:</p>\n<ul>\n<li><code>android:scheme</code>\n<ul>\n<li>用于指定数据的协议部分，如上例的 https 部分</li>\n</ul>\n</li>\n<li><code>andorid:host</code>\n<ul>\n<li>用于指定数据的主机名部分，如上例的 <code>www.baiduc.com</code>  部分</li>\n</ul>\n</li>\n<li><code>andorid:port</code>\n<ul>\n<li>用于指定数据的端口部分，一般紧随在主机名之后</li>\n</ul>\n</li>\n<li><code>andorid:path</code>\n<ul>\n<li>用于指定主机名和端口之后的部分，如一段网址中跟在域名之后的内容</li>\n</ul>\n</li>\n<li>``andorid:mimeType`\n<ul>\n<li>用于指定可以处理的数据类型，允许使用通配符的方式进行指定</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>只有当 <code>&lt;data&gt;</code>  标签中指定的内容和 Intent 中携带的 Data 完全一致时，当前的 Activity 才能够响应该 intent, 不过在 <code>&lt;data&gt;</code>  标签中一般不会指定过多的内容，例如在上面的浏览器示例中，其实只需要指定 <code>andorid:scheme</code>  为 <code>https</code> ，就可以响应所有 <code>https</code>  协议的 intent 了</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>activity</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>.ThirdActivity<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>intent-filter</span> <span class=\"token attr-name\"><span class=\"token namespace\">tool:</span>ignore</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>AppLinkUrlError<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>action</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>android.intent.action.VIEW<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>category</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>android.intent.category.DEFAULT<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>data</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>scheme</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>intent-filter</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>activity</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"><div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">  - ![image-20210923203520016](http://tuchuang.wenhe9.cn/image-20210923203520016.png)</span><br><span class=\"line\"></span><br><span class=\"line\">- 除了``https``协议外，我们还可以指定很多其他协议，比如geo表示地理位置，tel表示拨打电话</span><br><span class=\"line\"></span><br><span class=\"line\">  - ```kotlin</span><br><span class=\"line\">    button1.setOnClickListener&#123;</span><br><span class=\"line\">        val intent = Intent(Intent.ACTION_DIAL)</span><br><span class=\"line\">        intent.data = Uri.parse(&quot;tel:10086&quot;)</span><br><span class=\"line\">        startActivity(intent)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div></div></span></pre></td></tr></table></figure></li>\n<li>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20210923204305535.png\"\n                      alt=\"image-20210923204305535\"\n                ></p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"向下一个activity传递数据\"><a class=\"markdownIt-Anchor\" href=\"#向下一个activity传递数据\">#</a> 向下一个 Activity 传递数据</h4>\n<ul>\n<li>\n<p>Intent 中提供了一系列的 <code>putExtra()</code>  方法的重载，可以把我们想要传递的数据暂存在 Intent 中，在启动另一个 Activity 后，只需要把这些数据从 Intent 中取出就可以了。在这里，第一个参数是键，用于之后从 Intent 中取值，第二个参数才是真正要传递的数据</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>button1<span class=\"token punctuation\">.</span><span class=\"token function\">setOnclickListener</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">val</span> <span class=\"token keyword\">data</span> <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"hello world\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">val</span> intent <span class=\"token operator\">=</span> <span class=\"token function\">Intent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> SecondActivity<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    intent<span class=\"token punctuation\">.</span><span class=\"token function\">putExtra</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"extra_data\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">data</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">startActivity</span><span class=\"token punctuation\">(</span>intent<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">9</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"返回数据给上一个activity\"><a class=\"markdownIt-Anchor\" href=\"#返回数据给上一个activity\">#</a> 返回数据给上一个 Activity</h4>\n<ul>\n<li>\n<p>返回上一个 Activity 和返回数据给下一个 Activity 不同，返回上一个 Activity 只需要按一下 Back 键就可以了，并没有一个用于启动 Activity 的 intent 来传递数据，Activity 类中有一个用于启动 Activity 的 <code>startActivityForResult()</code>  方法，但他期望在 Activity 销毁的时候能够返回一个结果给上一个 Activity</p>\n</li>\n<li>\n<p><code>startActivityForResult</code>  方法接收两个参数，第一个参数还是 intent，第二个参数是请求吗，用于在之后的回调中判断数据的来源，请求码需要是一个唯一的</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>button1<span class=\"token punctuation\">.</span><span class=\"token function\">setOnclickListener</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">val</span> intent <span class=\"token operator\">=</span> <span class=\"token function\">Intent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> SencondActivity<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">startActivityForResult</span><span class=\"token punctuation\">(</span>intent<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">10</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>第二个代码中，Intent 只是用于传递数据，没有指定任何意图，把要传递的数据存放在 Intent 中，然后调用了 <code>SetResult()</code>  方法，这个方法用于向上一个 Activity 返回数据，这个方法接收两个参数，第一个参数用于向上一个 Activity 返回处理结果，一般只使用 <code>RESULT_OK</code>  或 <code>RESULT_CANCELED</code>  这两个值；第二个参数则把带有数据的 Intent 传递回去。最后调用 ```finish ()`` 方法来销毁当前 Activity</p>\n</li>\n<li>\n<p>因为最后使用 <code>startAcitivityForResult</code>  方法来启动 SecondACtivity 的，在 SecondActivity 被销毁之后，会回调上一个 Activity 的 <code>onAcitivityResult()</code>  方法</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onActivityResult</span><span class=\"token punctuation\">(</span>requestCode<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> resultCode<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> <span class=\"token keyword\">data</span><span class=\"token operator\">:</span> Intent<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onActivityResult</span><span class=\"token punctuation\">(</span>requestCode<span class=\"token punctuation\">,</span> resultCode<span class=\"token punctuation\">,</span> <span class=\"token keyword\">data</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">when</span><span class=\"token punctuation\">(</span>requestCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token number\">1</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>resultCode <span class=\"token operator\">==</span> Activity<span class=\"token punctuation\">.</span>RESULT_OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">val</span> returnData <span class=\"token operator\">=</span> <span class=\"token keyword\">data</span><span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">getStringArrayExtra</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"data_return\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            Log<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"FirstActivity\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"returned data is  </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">returnData</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">11</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"activity的生命周期\"><a class=\"markdownIt-Anchor\" href=\"#activity的生命周期\">#</a> Activity 的生命周期</h3>\n<h4 id=\"返回栈\"><a class=\"markdownIt-Anchor\" href=\"#返回栈\">#</a> 返回栈</h4>\n<ul>\n<li>Android 是使用任务（Task）来管理 Activity 的，一个任务就是一组存放在栈里的 Activity 的集合，这个栈也被称为 <code>返回栈（back stack）</code> 。栈是一种后进先出的数据结构，在默认情况下，每当我们启动了一个新的 Activity，他就会在返回栈中入栈，并处于栈顶的位置，而每当我们按下 Back 键或调用 <code>finish()</code>  方法去销毁一个 Activity 时，处于栈顶的 Activity 就会出栈，前一个入栈的 Activity 就会重新处于栈顶的位置，系统总是显示处于栈顶的 Activity 给用户</li>\n<li><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20210923212324220.png\"\n                      alt=\"image-20210923212324220\"\n                ></li>\n</ul>\n<h4 id=\"activity状态\"><a class=\"markdownIt-Anchor\" href=\"#activity状态\">#</a> Activity 状态</h4>\n<ul>\n<li>\n<p>每个 Activity 在其生命周期中最多可能会有四种状态</p>\n</li>\n<li>\n<p><strong>运行状态</strong></p>\n<ul>\n<li>当一个 Activity 位于返回栈的栈顶时，Activity 就处于运行状态。系统最不愿意回收的就是处于运行状态的 Activity</li>\n</ul>\n</li>\n<li>\n<p><strong>暂停状态</strong></p>\n<ul>\n<li>当一个 Activity 不再处于栈顶位置，但仍然可见时，Activity 就进入了暂停状态。</li>\n<li>为什么既然 Activity 已经不在栈顶了，怎么会可见呢？\n<ul>\n<li>这是因为并不是每一个 Activity 都会占满整个屏幕，比如对话框形式的 Activity 只会占用屏幕中间的部分区域</li>\n</ul>\n</li>\n<li>处于暂停状态的 Activity 仍然是完全存活着的，系统也不愿意回收这种 Activity（因为他还是可见的，回收可见的东西都会在用户体验方面有不好的影响），只有在内存极低的情况下，系统才会考虑回收这种 Activity</li>\n</ul>\n</li>\n<li>\n<p><strong>停止状态</strong></p>\n<ul>\n<li>当一个 Activity 不再处于栈顶位置，并且完全不可见的时候，就进入了停止状态， 系统仍然会为这种 Activity 保存相应的状态和成员变量，但是这并不是完全可靠的，当其他地方需要内存时，处于停止状态的 Activity 有可能会被系统回收</li>\n</ul>\n</li>\n<li>\n<p><strong>销毁状态</strong></p>\n<ul>\n<li>一个 Activity 从返回栈中移除后就变成了销毁状态。系统最倾向于回收这种状态的<br>\n Activity，以保证手机的内存充足</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"activity的生存期\"><a class=\"markdownIt-Anchor\" href=\"#activity的生存期\">#</a> Activity 的生存期</h4>\n<ul>\n<li>Activity 类中定义了 7 个回调方法，覆盖了 Activity 生命周期的每一个环节\n<ul>\n<li>onCreate()\n<ul>\n<li>他会在 Activity 第一次被创建的时候调用，在这个方法中完成 Activity 的初始化操作，比如加载布局，绑定事件等</li>\n</ul>\n</li>\n<li>onStart()\n<ul>\n<li>这个方法在 Activity 由不可见变为可见的时候调用</li>\n</ul>\n</li>\n<li>onResume()\n<ul>\n<li>这个方法在 Activity 准备好和用户进行交互的时候调用，此时的 Activity 一定位于返回栈的栈顶，并且处于运行状态</li>\n</ul>\n</li>\n<li>onPause()\n<ul>\n<li>这个方法在系统准备去启动或者恢复另一个 Activity 的时候调用，我们通常会在这个方法中将一些消耗 CPU 的资源释放掉，以及保存一些关键数据，但这 个方法的执行速度一定要快，不然会影响到新的栈顶 Activity 的使用</li>\n</ul>\n</li>\n<li>onStop()\n<ul>\n<li>这个方法在 Activity 完全不可见的时候调用，他和 <code>onPause()</code>  方法的区别在于，如果启动的新 Activity 是一个对话框式的 Activity，那么 <code>onPause</code>  方法会得到执行，而 <code>onStop()</code>  方法并不会执行</li>\n</ul>\n</li>\n<li>onDestroy()\n<ul>\n<li>这个方法在 Activity 被销毁之前调用，之后 Activity 的状态将变为销毁状态</li>\n</ul>\n</li>\n<li>onRestart()\n<ul>\n<li>这个方法在 Activity 由停止状态变为运行状态之前调用，也就是 Activity 被重新启动了</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>以上方法除了 <code>onRestart</code>  方法，其他都是两两相对的，从而又可以将 Activity 分为一下三种生存期</p>\n<ul>\n<li>完整生存期\n<ul>\n<li>Activity 在 onCreate () 方法和 onDestroy () 方法之间所经历的就是完整生存期。一般情况下，一个 Activity 会在 onCreate () 方法中完成各种初始化操作，而在 onDestroy () 方法中完成释放内存的操作。</li>\n</ul>\n</li>\n<li>可见生存期\n<ul>\n<li>Activity 在 onStart () 方法和 onStop () 方法之间所经历的就是可见生存期。在可见生存期内，Activity 对于用户总是可见的，即便有可能无法和用户进行交互。我们可以通过这两个方法合理地管理那些对用户可见的资源。比如在 onStart () 方法中对资源进行加载，而在 onStop () 方法中对资源进行释放，从而保证处于停止状态的 Activity 不会占用过多内存。</li>\n</ul>\n</li>\n<li>前台生存期\n<ul>\n<li>Activity 在 onResume () 方法和 onPause () 方法之间所经历的就是前台生存期。在前台生存期内，Activity 总是处于运行状态，此时的 Activity 是可以和用户进行交互的，我们平时看到和接触最多的就是这个状态下的 Activity。</li>\n</ul>\n</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/7MCnofxJWrHdXNK.png\"\n                      alt=\"image-20210923223847936\"\n                ></p>\n<h4 id=\"activity被回收的数据保存\"><a class=\"markdownIt-Anchor\" href=\"#activity被回收的数据保存\">#</a> Activity 被回收的数据保存</h4>\n<ul>\n<li>\n<p>使用 <code>onSaveInstanceState()</code>  方法，这个方法保证在 Activity 被回收之前一定会被调用， <code>onSaveInstanceState()</code>  方法会携带一个 Bundle 类型额参数，Bundle 提供了一系列用于保存数据的方法，和之前的 intent 语法一样</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onSaveInstanceState</span><span class=\"token punctuation\">(</span>outState<span class=\"token operator\">:</span> Bundle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onSaveInstanceState</span><span class=\"token punctuation\">(</span>outState<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">val</span> tempData <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"something you just typed\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    outState<span class=\"token punctuation\">.</span><span class=\"token function\">putString</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"data_key\"</span></span><span class=\"token punctuation\">,</span> tempData<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">12</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"activity的启动模式\"><a class=\"markdownIt-Anchor\" href=\"#activity的启动模式\">#</a> Activity 的启动模式</h3>\n<ul>\n<li>启动模式一共有四种，分别是 <code>standard</code> 、 <code>singleTop</code> ， <code>singleTask</code>  和 <code>singleInstance</code> ，可以在 <code>AndroidManifset.xml</code>  中通过给 <code>&lt;activity&gt;</code>  标签指定能够 <code>android:launchModel</code>  属性来选择启动模式</li>\n</ul>\n<h4 id=\"standard\"><a class=\"markdownIt-Anchor\" href=\"#standard\">#</a> <strong>standard</strong></h4>\n<ul>\n<li><code>standard</code>  是 Activity 默认的启动模式，在不进行显示指定的情况下，所有 Activity 都会自动使用这种模式</li>\n<li>在 <code>standard</code>  模式下，每当启动一个新的 Activity，他就会在返回栈中入栈，并处于栈顶的位置，对于使用 <code>standard</code>  模式的 Activity，系统不会在乎这个 Activity 是否已经在返回栈中存在，每次启动都会创建一个 Activity 的新实例</li>\n<li><code>standard</code>  模式的原理如图：\n<ul>\n<li><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20210924182629608.png\"\n                      alt=\"image-20210924182629608\"\n                ></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"singletop\"><a class=\"markdownIt-Anchor\" href=\"#singletop\">#</a> <strong>singleTop</strong></h4>\n<ul>\n<li>当 Activity 的启动模式指定为 <code>singleTop</code> ，在启动 Activity 时如果发现返回栈的栈顶已经是该 Activity，则认为可以直接使用它，不会创建新的 Activity 实例</li>\n<li><code>singleTop</code>  模式的原理如图：\n<ul>\n<li><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20210924182611955.png\"\n                      alt=\"image-20210924182611955\"\n                ></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"singletask\"><a class=\"markdownIt-Anchor\" href=\"#singletask\">#</a> singleTask</h4>\n<ul>\n<li>\n<p>当 Activity 的启动模式指定为 <code>singleTask</code> ，每次启动该 Activity 时，系统首先会在烦恼会展中检查是否存在该 Activity 的实例，如果发现已经存在则直接使用该实例，并把在这个 Activity 之上的所有其他 Activity 统统出栈，如果没有发现就会创建一个新的 Activity 的实例</p>\n</li>\n<li>\n<p><code>singleTask</code>  模式的原理如图：</p>\n<ul>\n<li><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20210924183131813.png\"\n                      alt=\"image-20210924183131813\"\n                ></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"singleinstance\"><a class=\"markdownIt-Anchor\" href=\"#singleinstance\">#</a> singleInstance</h4>\n<ul>\n<li>在 <code>singleInstance</code>  模式下，会有一个单独的返回栈来管理这个 Activity，不管是哪个应用程序来访问这个 Activity，都共用一个返回栈。</li>\n<li>在一个前三种模式的 Activity 调用一个 <code>singleInstance</code>  模式的 Activity，又在或者调用一个前者模式的 Activity，那么第一个和第三个 Activity 是在同一个返回栈里，第二个是在一个单独的返回栈中，当在第三个 Activity 点击了 Back 按钮后，会直接从第三个回到的第一个 Activity，这是因为在这个返回栈里只有一和三，三出栈后就是一了，当在一又点击了 Back 后，会进入二的 Activity，这是因为在一和三的返回栈里在一出栈后已经没有 Activity 了，于是就显示另一个返回栈的栈顶 Activity，最后再按下 back 键，这时所有的返回栈都为空了，也就自然的退出程序了</li>\n<li><code>singleInstance</code>  模式的原理如图:\n<ul>\n<li><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20210924184213574.png\"\n                      alt=\"image-20210924184213574\"\n                ></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"fragment\"><a class=\"markdownIt-Anchor\" href=\"#fragment\">#</a> Fragment</h2>\n<h3 id=\"静态添加fragment\"><a class=\"markdownIt-Anchor\" href=\"#静态添加fragment\">#</a> 静态添加 Fragment</h3>\n<ol>\n<li>\n<p>编写布局文件</p>\n</li>\n<li>\n<p>编写自定义 Fragment 类继承自 Fragment，在 onCreateView 中加载布局</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> TestFragment <span class=\"token operator\">:</span> <span class=\"token function\">Fragment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreateView</span><span class=\"token punctuation\">(</span>inflater<span class=\"token operator\">:</span> LayoutInflater<span class=\"token punctuation\">,</span> container<span class=\"token operator\">:</span> ViewGroup<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> savedInstanceState<span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> View<span class=\"token operator\">?</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> inflater<span class=\"token punctuation\">.</span><span class=\"token function\">inflate</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>activity_third<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">13</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"动态引入fragment\"><a class=\"markdownIt-Anchor\" href=\"#动态引入fragment\">#</a> 动态引入 Fragment</h3>\n<ul>\n<li>\n<p>创建待添加 Fragment 得到实例</p>\n</li>\n<li>\n<p>获取 FragmentManager，在 Activity 中可以直接调用 <code>getSupportFragmentManager()</code>  方法获取</p>\n</li>\n<li>\n<p>开启一个事务，通过调用 <code>beginTransaction()</code>  方法开启</p>\n</li>\n<li>\n<p>向容器内添加或替换 Fragment，一般使用 <code>replace()</code>  方法实现，需要传入容器的 id 和待添加的 Fragment 实例</p>\n</li>\n<li>\n<p>提交事务，调用 <code>commit()</code>  方法来完成</p>\n</li>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">fun</span> <span class=\"token function\">replaceFragment</span><span class=\"token punctuation\">(</span>fragment<span class=\"token operator\">:</span> TestFragment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">val</span> fragmentManager <span class=\"token operator\">=</span> supportFragmentManager</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">val</span> transaction <span class=\"token operator\">=</span> fragmentManager<span class=\"token punctuation\">.</span><span class=\"token function\">beginTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        transaction<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>testFragment<span class=\"token punctuation\">,</span> fragment<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        transaction<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">14</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n<h3 id=\"fragment和activity之间的交互\"><a class=\"markdownIt-Anchor\" href=\"#fragment和activity之间的交互\">#</a> Fragment 和 Activity 之间的交互</h3>\n<ul>\n<li>\n<p>Activity 调用 Fragment 方法，可以使用 <code>findViewById()</code>  或者视图绑定获取 Fragment 对象调用他的方法</p>\n</li>\n<li>\n<p>Fragment 中使用 <code>getActivity()</code>  方法获取 Activity 对象调用他的方法</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>activity <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">val</span> mainActivity <span class=\"token operator\">=</span> activity <span class=\"token keyword\">as</span> MainActivity</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">15</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>需要注意的是</p>\n<ul>\n<li>动态注册的 <code>BroadcastReceiver</code>  一定要取消注册才行，在 <code>onDestroy()</code>  方法中通过调用 <code>unregisterReceiver()</code>  方法来实现</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"静态注册实现开机启动\"><a class=\"markdownIt-Anchor\" href=\"#静态注册实现开机启动\">#</a> 静态注册实现开机启动</h4>\n<ul>\n<li>\n<p>动态注册的 <code>BroadcastReceiver</code>  可以自由的控制注册与注销，在灵活性有很多的有事，但是他存在着一个缺点，即必须在程序启动弄之后才能接收广播，因为注册的逻辑是写在 <code>onCreate()</code>  方法中的，而如果想要让程序在未启动的情况下也能接收到广播，就需要使用静态注册的方式</p>\n</li>\n<li>\n<p>在 Android 8.0 系统之后，所有隐式广播都不允许使用静态注册的方式接收了，隐式广播值得是那些没有具体制定发送给哪个应用程序的广播，大多数系统广播属于隐式广播，但是少数特殊的系统广播仍然允许使用静态注册的方式来接收</p>\n<ul>\n<li>可以从这个网址查看这些特殊的系统广播\n<ul>\n<li><a class=\"link\"   href=\"https://developer.android.google.cn/guide/components/broadcast-exceptions.html\" >https://developer.android.google.cn/guide/components/broadcast-exceptions.html <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>manifest</span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>android</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schemas.android.com/apk/res/android<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>          <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>tool</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schemas.android.com/tools<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>          <span class=\"token attr-name\">package</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cn.wenhe9.testmenu<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>uses-permission</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>android.permission.RECEIVE_BOOT_COMPLETED<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>application</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>allowBackup</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>icon</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@mipmap/ic_launcher<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@string/app_name<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>roundIcon</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@mipmap/ic_launcher_round<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>supportsRtl</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>theme</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@style/Theme.TestMenu<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>receiver</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>.BootCompleteReceiver<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>enabled</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>exported</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>intent-filter</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>action</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>android.intent.action.BOOT_COMPLETED<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>intent-filter</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>receiver</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>activity</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>.MainActivity<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>intent-filter</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>action</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>android.intent.action.MAIN<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>category</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>android.intent.category.LAUNCHER<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>intent-filter</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>activity</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>application</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>manifest</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\"><div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 需要注意的是，如果程序需要进行一些对用户比较敏感的操作，必须在``AndroidManifest.xml`中进行权限声明，否则程序会直接崩溃</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">### 发送自定义广播</span><br><span class=\"line\"></span><br><span class=\"line\">#### 发送标准广播</span><br><span class=\"line\"></span><br><span class=\"line\">- ```kotlin</span><br><span class=\"line\">  binding.testBroadcast.setOnClickListener &#123;</span><br><span class=\"line\">      val intent = Intent(&quot;cn.wenhe9.testmenu.MY_Broadcast&quot;)</span><br><span class=\"line\">      intent.setPackage(packageName)</span><br><span class=\"line\">      sendBroadcast(intent)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></div></div></span></pre></td></tr></table></figure></li>\n<li>\n<p>需要注意的是，静态注册的 <code>BroadcastReceiver</code>  是无法接收隐式广播的，而默认情况下，我们发出的自定义广播恰恰都是隐式广播，因此这里一定要调用 <code>setPackage()</code>  方法，指定这条广播是发送给哪个应用程序的，从而让他变成一条显示广播，否则静态注册的 <code>BroadcastReceiver</code>  将无法接收到这条广播</p>\n</li>\n<li>\n<p>当然，如果你的 <code>BroadcastReceiver</code>  是动态注册的，就不用了</p>\n</li>\n</ul>\n<h4 id=\"发送有序广播\"><a class=\"markdownIt-Anchor\" href=\"#发送有序广播\">#</a> 发送有序广播</h4>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>binding<span class=\"token punctuation\">.</span>testBroadcast<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">val</span> intent <span class=\"token operator\">=</span> <span class=\"token function\">Intent</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"cn.wenhe9.testmenu.MY_Broadcast\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    intent<span class=\"token punctuation\">.</span><span class=\"token function\">setPackage</span><span class=\"token punctuation\">(</span>packageName<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">sendOrderedBroadcast</span><span class=\"token punctuation\">(</span>intent<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">17</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">-</span> 动态注册</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token operator\">-</span> ```kotlin</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">val</span> intentFilter <span class=\"token operator\">=</span> <span class=\"token function\">IntentFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    intentFilter<span class=\"token punctuation\">.</span><span class=\"token function\">addAction</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"android.intent.action.TIME_TICK\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    intentFilter<span class=\"token punctuation\">.</span>priority <span class=\"token operator\">=</span> <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    timeChangeReceiver <span class=\"token operator\">=</span> <span class=\"token function\">TimeChangeReceiver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">registerReceiver</span><span class=\"token punctuation\">(</span>timeChangeReceiver<span class=\"token punctuation\">,</span> intentFilter<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">18</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n<h2 id=\"持久化技术\"><a class=\"markdownIt-Anchor\" href=\"#持久化技术\">#</a> 持久化技术</h2>\n<h3 id=\"文件存储\"><a class=\"markdownIt-Anchor\" href=\"#文件存储\">#</a> 文件存储</h3>\n<ul>\n<li>文件存储是 Android 中最近本的数据存储方式，他不对存储的内容进行任何格式化处理，所有数据都是原封不动的把偶才能到文件中，因而他比较适合存储一些简单的文本数据或二进制数据</li>\n</ul>\n<h4 id=\"将数据存储到文件中\"><a class=\"markdownIt-Anchor\" href=\"#将数据存储到文件中\">#</a> 将数据存储到文件中</h4>\n<ul>\n<li>\n<p>Context 类中提供了一个 <code>opneFileOutput()</code>  方法，可以用于将数据存储到指定的文件中，这个方法接收两个参数</p>\n<ul>\n<li>第一个参数是文件名，在文件创建的时候使用，注意这里指定的文件名不可以包含路径，因为所有的文件都默认存储在 <code>/data/data/&lt;package name&gt;/files</code>  目录下</li>\n<li>第二个参数是文件的操作模式，主要有\n<ul>\n<li><code>MODE_PRIVATE</code>\n<ul>\n<li>默认是 <code>MODE_PRIVATE</code> ，表示当指定相同文件名的时候，所写入的内容会覆盖原文件中的内容</li>\n</ul>\n</li>\n<li><code>MODE_APPEND</code>\n<ul>\n<li>表示如果该文件已存在，就往文件里面追加内容，不存在就创建新文件</li>\n</ul>\n</li>\n<li>其实文件的操作模式本来还有另外两种， <code>MODE_WORLD_READABLE</code>  和 <code>MODE_WORLD_WRITEABLE</code> ，这两种模式表示允许其他应用程序对我们程序的文件进行读写操作，不过由于这两种模式过于危险，很容易引起应用的安全漏洞，在 Android 4.2 版本中被废弃</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>openFileOutput()</code>  方法返回的是一个 <code>FileOutputSteram</code>  对象，得到这个对象之后就可以使用 JAVA 流的方式将数据写入文件中了</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">fun</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span>inputText <span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">val</span> output <span class=\"token operator\">=</span> <span class=\"token function\">openFileOutput</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"data\"</span></span><span class=\"token punctuation\">,</span> Context<span class=\"token punctuation\">.</span>MODE_PRIVATE<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">val</span> writer <span class=\"token operator\">=</span> <span class=\"token function\">BufferedWriter</span><span class=\"token punctuation\">(</span><span class=\"token function\">OutputStream</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        write<span class=\"token punctuation\">.</span><span class=\"token function\">use</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            it<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>inputText<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">:</span> IOException<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">19</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"sharedpreferences存储\"><a class=\"markdownIt-Anchor\" href=\"#sharedpreferences存储\">#</a> SharedPreferences 存储</h3>\n<ul>\n<li>不同于文件的存储方式，SharedPreferences 是使用键值对的方式来存储数据的。也就是说，当保存一条数据的时候，需要给这条数据提供一个对应的键，这样在读取数据的时候就可以通过这个键把相应的值取出来。而且 SharedPreferences 还支持多种不同的数据类型存储，如果存储的数据类型是整型，那么读取出来的数据也是整型的；如果存储的数据是一个字符串，那么读取出来的数据仍然是字符串。</li>\n</ul>\n<h4 id=\"获取sharedpreferences的两种方法\"><a class=\"markdownIt-Anchor\" href=\"#获取sharedpreferences的两种方法\">#</a> 获取 SharedPreferences 的两种方法</h4>\n<ul>\n<li>\n<p><strong>Context 类的 <code>getSharedPreferences()</code>  方法</strong></p>\n<ul>\n<li>此方法接收两个参数\n<ul>\n<li>第一个参数用于指定 SharedPreferences 文件的名称，如果指定的文件不存在则会创建一个，SharedPreferences 文件都是存放在 <code>/data/data/&lt;package name&gt;/shared_prefs/</code>  目录下的</li>\n<li>第二个参数用于指定操作模式，目前只有默认的 <code>MODE_PRIVATE</code>  一种模式可选，他和直接传入 0 的效果是相同的，表示只有当前的应用程序才可以对这个 SharedPreferences 文件进行读写，其他集中操作模式均已被废弃， <code>MODE_WORLD_READABLE</code>  和 <code>MODE_WORLD_WRITEABLE</code>  这两种模式是在 Android 4.2 版本中被废弃的，MODE_MULTI_PROCESS 模式是在 Android 6.0 版本中被废弃的。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Activity 类中的 <code>getPreferences()</code>  方法</strong></p>\n<ul>\n<li>这个方法和 Context 中的 <code>getSharedPreferences()</code>  方法很相似，不过它只接收一个操作模式参数，因为使用这个方法时会自动将当前 Activity 的类名作为 SharedPreferences 的文件名</li>\n<li>得到了 SharedPreferences 对象之后，就可以开始向 SharedPreferences 文件中存储数据了，主要可以分为三步实现\n<ol>\n<li>调用 SharedPreferences 对象的 <code>edit()</code>  方法获取一个 <code>SharedPreferences.Editor</code>  对象</li>\n<li>向 <code>SharedPreferences.Editor</code>  对象中添加数据，比如添加一个布尔型数据就是用 <code>putBoolean()</code>  方法，添加一个字符串则使用 <code>putString()</code>  方法，以此类推</li>\n<li>调用 <code>apply()</code>  方法将添加的数据提交，从而完成数据存储操作</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>binding<span class=\"token punctuation\">.</span>addNum<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">val</span> editor <span class=\"token operator\">=</span> <span class=\"token function\">getSharedPreferences</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"data\"</span></span><span class=\"token punctuation\">,</span> Context<span class=\"token punctuation\">.</span>MODE_PRIVATE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">edit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    editor<span class=\"token punctuation\">.</span><span class=\"token function\">putString</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"key\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"value\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    editor<span class=\"token punctuation\">.</span><span class=\"token function\">putBoolean</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"true\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    editor<span class=\"token punctuation\">.</span><span class=\"token function\">putInt</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"1\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    editor<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">20</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n<h3 id=\"sqlite数据库存储\"><a class=\"markdownIt-Anchor\" href=\"#sqlite数据库存储\">#</a> SQLite 数据库存储</h3>\n<h4 id=\"创建数据库\"><a class=\"markdownIt-Anchor\" href=\"#创建数据库\">#</a> 创建数据库</h4>\n<ul>\n<li>\n<p>android 为了让我们能够鞥家方便的管理数据库，专门提供了一个 <code>SQLiteOpenHelper</code>  帮助类，借助这个类可以非常简单的对数据库进行创建和升级</p>\n</li>\n<li>\n<p>首先 <code>SQLiteOpenHelper</code>  是一个抽象类，所有需要创建一个自己的类去继承他， <code>SQLiteOpenHelper</code>  中有两个抽象方法: <code>onCreate()</code>  和 <code>onUpgrade()</code> ，我们必须在自己的帮助类里重写这两个方法，然后分别在这两个方法中实现创建和升级数据库的逻辑</p>\n</li>\n<li>\n<p><code>SQLiteOpenHelper</code>  中还有两个非常重要的实例方法，这两个方法都可以创建或打开一个现有的数据库（如果数据库已存在则直接打开，否则要创建一个新的数据库）并返回一个可对数据库进行读写操作的对象</p>\n<ul>\n<li><code>gerReadableDatabase()</code></li>\n<li><code>getWritableDatabase()</code></li>\n<li>需要注意的是：\n<ul>\n<li>当数据库不可写入的时候（如磁盘空间已满）, <code>getReadableDatabase()</code>  方法返回的对象将以只读的方式打开数据库，而 <code>getWritableDatabase()</code>  方法则将出现异常</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>SQLiteOpebHelper</code>  中有两个构造方法可供重写，一般使用参数少点的那个构造方法即可，这个构造方法中接收 4 个参数</p>\n<ul>\n<li>第一个参数是 Context，这个没有好说的，必须有他才能对数据库进行操作</li>\n<li>第二个是数据库名，创建数据库时使用的就是这里指定的名称</li>\n<li>第三个参数允许我们在查询数据的时候返回一个自定的 Cursor，一般穿入 null 即可</li>\n<li>第四个参数表示当前数据库的版本号，可用于对数据库进行升级操作</li>\n</ul>\n</li>\n<li>\n<p>构造出 SQLiteOpenHelper 的实例之后，再调用他的 <code>getReadableDatabase()</code>  或 <code>getWritabledatabase()</code>  方法就能够创建数据库了，数据库文件会存放在 <code>/data/data/&lt;package name&gt;/databases/</code>  目录下，此时，重写的 onCreate () 方法也会得到执行，所以通常会在这里处理一些创建表的逻辑</p>\n</li>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token function\">MyDatabaseHelper</span><span class=\"token punctuation\">(</span>context <span class=\"token operator\">:</span> Context<span class=\"token punctuation\">,</span> name <span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> version <span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">SQLiteOpenHelper</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> version<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> createBook <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"create table Book(\\n\"</span></span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token string-literal singleline\"><span class=\"token string\">\"\\tid int primary key autoincrement,\\n\"</span></span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token string-literal singleline\"><span class=\"token string\">\"\\tusername varchar(20),\\n\"</span></span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token string-literal singleline\"><span class=\"token string\">\"\\tpassword varchar(20)\\n\"</span></span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token string-literal singleline\"><span class=\"token string\">\");\"</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>db<span class=\"token operator\">:</span> SQLiteDatabase<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        db<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">execSQL</span><span class=\"token punctuation\">(</span>createBook<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onUpgrade</span><span class=\"token punctuation\">(</span>db<span class=\"token operator\">:</span> SQLiteDatabase<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> oldVersion<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> newVersion<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldVersion <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            db<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">execSQL</span><span class=\"token punctuation\">(</span>createBook<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">21</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n<h4 id=\"升级数据库\"><a class=\"markdownIt-Anchor\" href=\"#升级数据库\">#</a> 升级数据库</h4>\n<ul>\n<li>在 <code>onUpgrade()</code>  写升级的逻辑，创建数据库时提供更高的版本号</li>\n</ul>\n<h4 id=\"添加数据\"><a class=\"markdownIt-Anchor\" href=\"#添加数据\">#</a> 添加数据</h4>\n<ul>\n<li>\n<p>调用 <code>SQLiteOpenHelper</code>  的 <code>getReadableDatabase()</code>  和 <code>getWriteableDatabase()</code>  方法除了可以用于创建和升级数据库，他们还都会返回一个 <code>SQLiteDatabase</code>  对象，借助这个对象可以对数据进行 CRUD 操作</p>\n</li>\n<li>\n<p><code>SQLiteDatabase</code>  中提供了一个 <code>insert()</code>  方法，专门用于添加数据，他接收三个参数</p>\n<ul>\n<li>第一个参数是表名，我们希望向哪张表添加数据，这里就传入该表的名字</li>\n<li>第二个参数用于在未指定添加数据的情况下个某系可为空的列自动赋值 NULL，一般我们用不到这个功能，直接传入 null 即可</li>\n<li>第三个参数是一个 <code>ContentValues</code>  对象，他提供了一些列的 <code>put()</code>  方法重载，用于向 <code>ContentValues</code>  中添加数据，只需要将表中的每个列名以及相应的待添加数据传入即可</li>\n</ul>\n</li>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>binding<span class=\"token punctuation\">.</span>addNum<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">val</span> db <span class=\"token operator\">=</span> dbHelper<span class=\"token punctuation\">.</span>writableDatabase</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">val</span> values <span class=\"token operator\">=</span> <span class=\"token function\">ContentValues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"username\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"沙扬娜拉\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"password\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"123456\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//val values = contentValuesOf (\"username\" to \"沙扬娜拉\", \"passsword\" to \"1234456\")</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    db<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"book\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> values<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">22</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n<h4 id=\"删除数据\"><a class=\"markdownIt-Anchor\" href=\"#删除数据\">#</a> 删除数据</h4>\n<ul>\n<li>\n<p><code>SQLiteDatabase</code>  中提供了一个 <code>delete()</code>  方法，专门用于删除数据，这个方法接收三个参数：</p>\n<ul>\n<li>第一个参数仍然是表名</li>\n<li>第二、三个参数用于约束删除某一行或某几行的数据，不指定的话默认删除所有行</li>\n</ul>\n</li>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>binding<span class=\"token punctuation\">.</span>addNum<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">val</span> db <span class=\"token operator\">=</span> dbHelper<span class=\"token punctuation\">.</span>writableDatabase</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    db<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"book\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"pages > ?\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token function\">arrayOf</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"500\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">23</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n<li>\n<p>我们首先在查询按钮的点击事件里面调用了 SQLiteDatabase 的 query () 方法查询数据。这里的 query () 方法非常简单，只使用了第一个参数指明查询 Book 表，后面的参数全部为 null。这就表示希望查询这张表中的所有数据，虽然这张表中目前只剩下一条数据了。查询完之后就得到了一个 Cursor 对象，接着我们调用它的 moveToFirst () 方法，将数据的指针移动到第一行的位置，然后进入一个循环当中，去遍历查询到的每一行数据。在这个循环中可以通过 Cursor 的 getColumnIndex () 方法获取某一列在表中对应的位置索引，然后将这个索引传入相应的取值方法中，就可以得到从数据库中读取到的数据了。接着我们使用 Log 将取出的数据打印出来，借此检查读取工作有没有成功完成。最后别忘了调用 close () 方法来关闭 Cursor。</p>\n</li>\n</ul>\n<h4 id=\"使用sql操作数据库\"><a class=\"markdownIt-Anchor\" href=\"#使用sql操作数据库\">#</a> 使用 SQL 操作数据库</h4>\n<ul>\n<li>\n<p>添加数据</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>db<span class=\"token punctuation\">.</span><span class=\"token function\">execSQL</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"insert into Book (name, author, pages, price) values(?, ?, ?, ?)\"</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">arrayOf</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"The Da Vinci Code\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Dan Brown\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"454\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"16.96\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>db<span class=\"token punctuation\">.</span><span class=\"token function\">execSQL</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"insert into Book (name, author, pages, price) values(?, ?, ?, ?)\"</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">arrayOf</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"The Lost Symbol\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Dan Brown\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"510\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"19.95\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">24</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>删除数据</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>db<span class=\"token punctuation\">.</span><span class=\"token function\">execSQL</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"delete from Book where pages > ?\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token function\">arrayOf</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"500\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">25</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"运行时权限\"><a class=\"markdownIt-Anchor\" href=\"#运行时权限\">#</a> 运行时权限</h2>\n<h3 id=\"android权限机制详解\"><a class=\"markdownIt-Anchor\" href=\"#android权限机制详解\">#</a> Android 权限机制详解</h3>\n<ul>\n<li>\n<p>首先回顾一下过去 Android 的权限机制。我们在第 6 章写 BroadcastTest 项目的时候第一次接触了 Android 权限相关的内容，当时为了要监听开机广播，我们在 AndroidManifest.xml 文件中添加了这样一句权限声明：</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>manifest</span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>android</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schemas.android.com/apk/res/android<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token attr-name\">package</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.example.broadcasttest<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>uses-permission</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>android.permission.RECEIVE_BOOT_COMPLETED<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    ...</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>manifest</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"><div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">  - 因为监听开机广播涉及了用户设备的安全，因此必须在AndroidManifest.xml中加入权限声明，否则我们的程序就会崩溃。</span><br><span class=\"line\"></span><br><span class=\"line\">- 那么现在问题来了，加入了这句权限声明后，对于用户来说到底有什么影响呢？为什么这样就可以保护用户设备的安全了呢？</span><br><span class=\"line\"></span><br><span class=\"line\">- 其实用户主要在两个方面得到了保护。一方面，如果用户在低于Android 6.0系统的设备上安装该程序，会在安装界面给出如图8.1所示的提醒。这样用户就可以清楚地知晓该程序一共申请了哪些权限，从而决定是否要安装这个程序。</span><br><span class=\"line\"></span><br><span class=\"line\">  - ![image-20210925162855446](http://tuchuang.wenhe9.cn/image-20210925162855446.png)</span><br><span class=\"line\"></span><br><span class=\"line\">- 另一方面，用户可以随时在应用程序管理界面查看任意一个程序的权限申请情况，如图8.2所示。这样该程序申请的所有权限就尽收眼底，什么都瞒不过用户的眼睛，以此保证应用程序不会出现各种滥用权限的情况。</span><br><span class=\"line\">  - ![image-20210925162918467](http://tuchuang.wenhe9.cn/image-20210925162918467.png)</span><br><span class=\"line\">- 这种权限机制的设计思路其实非常简单，就是用户如果认可你所申请的权限，就会安装你的程序，如果不认可你所申请的权限，那么拒绝安装就可以了。</span><br><span class=\"line\">- 但是理想是美好的，现实却很残酷。很多我们离不开的常用软件普遍存在着滥用权限的情况，不管到底用不用得到，反正先把权限申请了再说。比如微信所申请的权限列表如图8.3所示。</span><br><span class=\"line\">  - ![image-20210925162959295](http://tuchuang.wenhe9.cn/image-20210925162959295.png)</span><br><span class=\"line\">- 这还只是微信所申请的一半左右的权限，因为权限太多，一屏截不全。其中有一些权限我并不认可，比如微信为什么要读取我手机的短信和彩信？但是不认可又能怎样，难道我拒绝安装微信？没错，这种例子比比皆是，一些软件在让用户产生依赖以后就会容易 “店大欺客”，反正这个权限我就是要了，你自己看着办吧！</span><br><span class=\"line\">- Android开发团队当然也意识到了这个问题，于是在Android 6.0系统中加入了运行时权限功能。也就是说，用户不需要在安装软件的时候一次性授权所有申请的权限，而是可以在软件的使用过程中再对某一项权限申请进行授权。比如一款相机应用在运行时申请了地理位置定位权限，就算我拒绝了这个权限，也应该可以使用这个应用的其他功能，而不是像之前那样直接无法安装它。</span><br><span class=\"line\">- 当然，并不是所有权限都需要在运行时申请，对于用户来说，不停地授权也很烦琐。Android现在将常用的权限大致归成了两类，一类是普通权限，一类是危险权限。准确地讲，其实还有一些特殊权限，不过这些权限使用得相对较少，因此不在本书的讨论范围之内。普通权限指的是那些不会直接威胁到用户的安全和隐私的权限，对于这部分权限申请，系统会自动帮我们进行授权，不需要用户手动操作，比如在BroadcastTest项目中申请的权限就是普通权限。危险权限则表示那些可能会触及用户隐私或者对设备安全性造成影响的权限，如获取设备联系人信息、定位设备的地理位置等，对于这部分权限申请，必须由用户手动授权才可以，否则程序就无法使用相应的功能。</span><br><span class=\"line\">- 但是Android中一共有上百种权限，我们怎么从中区分哪些是普通权限，哪些是危险权限呢？其实并没有那么难，因为危险权限总共就那么些，除了危险权限之外，剩下的大多就是普通权限了。表8.1列出了到Android 10系统为止所有的危险权限，一共是11组30个权限。</span><br><span class=\"line\">  - ![img](http://tuchuang.wenhe9.cn/epub_37683759_237)</span><br><span class=\"line\">- 这张表格你看起来可能并不会那么轻松，因为里面的权限全都是你没使用过的。不过没有关系，你并不需要了解表格中每个权限的作用，只要把它当成一个参照表来查看就行了。每当要使用一个权限时，可以先到这张表中查一下，如果是这张表中的权限，就需要进行运行时权限处理，否则，只需要在AndroidManifest.xml文件中添加一下权限声明就可以了。</span><br><span class=\"line\">- 另外注意，表格中每个危险权限都属于一个权限组，我们在进行运行时权限处理时使用的是权限名。原则上，用户一旦同意了某个权限申请之后，同组的其他权限也会被系统自动授权。但是请谨记，不要基于此规则来实现任何功能逻辑，因为Android系统随时有可能调整权限的分组。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">### 在程序运行时申请权限</span><br><span class=\"line\"></span><br><span class=\"line\">- ```kotlin</span><br><span class=\"line\">  package cn.wenhe9.testmenu</span><br><span class=\"line\">  </span><br><span class=\"line\">  import android.Manifest</span><br><span class=\"line\">  import android.content.Intent</span><br><span class=\"line\">  import android.content.pm.PackageManager</span><br><span class=\"line\">  import android.net.Uri</span><br><span class=\"line\">  import androidx.appcompat.app.AppCompatActivity</span><br><span class=\"line\">  import android.os.Bundle</span><br><span class=\"line\">  import android.widget.Toast</span><br><span class=\"line\">  import androidx.core.app.ActivityCompat</span><br><span class=\"line\">  import androidx.core.content.ContextCompat</span><br><span class=\"line\">  import cn.wenhe9.testmenu.databinding.ActivityForthBinding</span><br><span class=\"line\">  import cn.wenhe9.testmenu.databinding.ActivityMainBinding</span><br><span class=\"line\">  </span><br><span class=\"line\">  class ForthActivity : AppCompatActivity() &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">      private lateinit var binding : ActivityForthBinding</span><br><span class=\"line\">  </span><br><span class=\"line\">      override fun onCreate(savedInstanceState: Bundle?) &#123;</span><br><span class=\"line\">          super.onCreate(savedInstanceState)</span><br><span class=\"line\">          binding = ActivityForthBinding.inflate(layoutInflater)</span><br><span class=\"line\">          setContentView(binding.root)</span><br><span class=\"line\">  </span><br><span class=\"line\">          binding.callPhone.setOnClickListener &#123;</span><br><span class=\"line\">              if (ContextCompat.checkSelfPermission(this, Manifest.permission.CALL_PHONE) != PackageManager.PERMISSION_GRANTED)&#123;</span><br><span class=\"line\">                  ActivityCompat.requestPermissions(this, arrayOf(Manifest.permission.CALL_PHONE), 1)</span><br><span class=\"line\">              &#125;else &#123;</span><br><span class=\"line\">                  call()</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">      override fun onRequestPermissionsResult(requestCode: Int, permissions: Array&lt;out String&gt;, grantResults: IntArray) &#123;</span><br><span class=\"line\">          super.onRequestPermissionsResult(requestCode, permissions, grantResults)</span><br><span class=\"line\">          when (requestCode)&#123;</span><br><span class=\"line\">              1 -&gt; &#123;</span><br><span class=\"line\">                  if (grantResults.isNotEmpty() &amp;&amp; grantResults[0] == PackageManager.PERMISSION_GRANTED)&#123;</span><br><span class=\"line\">                      call()</span><br><span class=\"line\">                  &#125; else &#123;</span><br><span class=\"line\">                      Toast.makeText(this, &quot;you denied the permission&quot;, Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">      fun call()&#123;</span><br><span class=\"line\">          val intent = Intent(Intent.ACTION_VIEW)</span><br><span class=\"line\">          intent.data = Uri.parse(&quot;tel:10086&quot;)</span><br><span class=\"line\">          startActivity(intent)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></div></div></span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>上面的代码覆盖了运行时权限的完整流程，下面我们具体解析一下。说白了，运行时权限的核心就是在程序运行过程中由用户授权我们去执行某些危险操作，程序是不可以擅自做主去执行这些危险操作的。因此，第一步就是要先判断用户是不是已经给过我们授权了，借助的是 <code>ContextCompat.checkSelfPermission()</code>  方法。 <code>checkSelfPermission()</code>  方法接收两个参数：第一个参数是 Context，这个没什么好说的；第二个参数是具体的权限名，比如打电话的权限名就是 <code>Manifest.permission.CALL_PHONE</code> 。然后我们使用方法的返回值和 <code>PackageManager.PERMISSION_GRANTED</code>  做比较，相等就说明用户已经授权，不等就表示用户没有授权。</p>\n</li>\n<li>\n<p>如果已经授权的话就简单了，直接执行拨打电话的逻辑操作就可以了，这里我们把拨打电话的逻辑封装到了 call () 方法当中。如果没有授权的话，则需要调用 <code>ActivityCompat.requestPermissions()</code>  方法向用户申请授权。 <code>requestPermissions()</code>  方法接收 3 个参数：第一个参数要求是 Activity 的实例；第二个参数是一个 String 数组，我们把要申请的权限名放在数组中即可；第三个参数是请求码，只要是唯一值就可以了，这里传入了 1。</p>\n</li>\n<li>\n<p>调用完 <code>requestPermissions()</code>  方法之后，系统会弹出一个权限申请的对话框，用户可以选择同意或拒绝我们的权限申请。不论是哪种结果，最终都会回调到 <code>onRequestPermissionsResult()</code>  方法中，而授权的结果则会封装在 <code>grantResults</code>  参数当中。这里我们只需要判断一下最后的授权结果：如果用户同意的话，就调用 call () 方法拨打电话；如果用户拒绝的话，我们只能放弃操作，并且弹出一条失败提示。</p>\n</li>\n</ul>\n<h2 id=\"contentprovider\"><a class=\"markdownIt-Anchor\" href=\"#contentprovider\">#</a> ContentProvider</h2>\n<ul>\n<li>主要用于在不同的应用程序之间实现数据共享的功能，它提供可一套完整的机制，允许一个程序访问另一个程序中的数据，同时还能保证被访问数据的安全性。目前使用 <code>ContentProvier</code>  是 Android 实跨程序共享数据的标准方式</li>\n<li>不同于文件存储和 SharedPreferences 存储中的两种全局可读写啊哦做模式，ContentProvider 可以选择只对哪一部分数据进行共享，从而保证我们程序中的隐私数据不会有泄露的风险</li>\n</ul>\n<h3 id=\"访问其他程序中的数据\"><a class=\"markdownIt-Anchor\" href=\"#访问其他程序中的数据\">#</a> 访问其他程序中的数据</h3>\n<ul>\n<li>ContentProvider 的用法一般有两种：\n<ul>\n<li>使用现有的 ContentProvider 读取和操作相应程序中的数据</li>\n<li>另一种是创建自己的 ContentProvider，给程序的数据提供外部访问接口</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"contentresolver的基本用法\"><a class=\"markdownIt-Anchor\" href=\"#contentresolver的基本用法\">#</a> ContentResolver 的基本用法</h3>\n<ul>\n<li>\n<p>对于每一个应用程序来说，如果想要访问 ContentProvider 中共享的数据，就一定要借助 <code>ContentResolver</code>  类，可以通过 Context 中的 <code>getContentResolver()</code>  方法获取该类的实例， <code>ContentResolver</code>  中提供了一系列的方法用于对数据进行增删改查操作，其中 <code>insert()</code>  方法用于添加数据， <code>update()</code>  方法用于更新数据， <code>delete()</code>  方法用于删除数据， <code>query()</code>  用于查询数据</p>\n</li>\n<li>\n<p>不同于 SQLiteDatabase，ContentResolver 中的增删改查方法都是不接收表名参数的，而是使用一个 Uri 参数代替，这个参数被称为内容 URI。内容 URI 给 ContentProvider 中的数据建立了唯一标识符，它主要由两部分组成： <code>authority</code>  和 <code>path</code> 。 <code>authority</code>  是用于对不同的应用程序做区分的，一般为了避免冲突，会采用应用包名的方式进行命名。比如某个应用的包名是 <code>com.example.app</code> ，那么该应用对应的 <code>authority</code>  就可以命名为 <code>com.example.app.provider</code> 。 <code>path</code>  则是用于对同一应用程序中不同的表做区分的，通常会添加到 <code>authority</code>  的后面。比如某个应用的数据库里存在两张表 table1 和 table2，这时就可以将 <code>path</code>  分别命名为 /table1 和 /table2，然后把 <code>authority</code>  和 <code>path</code>  进行组合，内容 URI 就变成了 <code>com.example.app.provider/table1</code>  和 <code>com.example.app.provider/table2</code> 。不过，目前还很难辨认出这两个字符串就是两个内容 URI，我们还需要在字符串的头部加上协议声明，因此，内容 URI 最标准的格式如下：</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>content<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span>provider<span class=\"token operator\">/</span>table1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>content<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span>provider<span class=\"token operator\">/</span>table2</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">27</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n<li>\n<p>只需要调用 <code>Uri.parse()</code>  方法，就可以将内容 URI 字符串解析成 Uri 对象了</p>\n</li>\n</ul>\n</li>\n<li>\n<p>然后既可以使用这个 Uri 对象查询 table1 表中的数据了</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> cursor <span class=\"token operator\">=</span> contentResolver<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\turi<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    projection<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    selection<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    selectionArgs<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    sortOrder</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">28</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>添加数据</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> values <span class=\"token operator\">=</span> <span class=\"token function\">contentValuesof</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"column1\"</span></span> <span class=\"token keyword\">to</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"text\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>contentResolver<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>uri<span class=\"token punctuation\">,</span> values<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">29</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>删除数据</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>contentResolver<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>uri<span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"id = ?\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token function\">arrayOf</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"1\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">30</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n<li>\n<p><code>onCreate()</code> ，初始化 ContentProvider 的时候调用，通常会在这里完成对数据库的创建和升级等操作，返回 true 表示 ContentProvider 初始化成功，返回 false 则表示失败</p>\n</li>\n<li>\n<p><code>query()</code> ，从 ContentProvider 中查询数据</p>\n<ul>\n<li><code>uri</code>  参数用于确定查询哪张表，</li>\n<li><code>projection</code>  参数用于确定查询哪些列</li>\n<li><code>selection</code>  和 <code>selectionArgs</code>  参数用于约定查询哪些行</li>\n<li><code>sortOrder</code>  参数用于对结果进行排序</li>\n<li>查询的结果存放在 Cursor 对象中返回</li>\n</ul>\n</li>\n<li>\n<p><code>insert()</code></p>\n<ul>\n<li>向 ContentProvider 中添加一条数据，uri 参数用于确定要添加的表，待添加的数据保存在 values 参数中，待添加完成后，返回一个用于表示这条新纪录的 URI</li>\n</ul>\n</li>\n<li>\n<p><code>update()</code></p>\n<ul>\n<li>更新 ContentProvider 中已有的数据，uri 参数用于确定更新哪一张表中的数据，新数据保存在 values 参数中，selelction 和 selectionArgs 参数用于约束更新哪些行，受影响的行数将作为返回值返回</li>\n</ul>\n</li>\n<li>\n<p><code>delete()</code></p>\n<ul>\n<li>从 ContentProvider 中删除数据，uri 参数用于确定删除哪一行中的数据，selection 和 selectionArgs 参数用于约束删除哪些行，被删除的行数将作为返回值返回</li>\n</ul>\n</li>\n<li>\n<p><code>getType()</code></p>\n<ul>\n<li>根据传入的内容 URI 返回相应的 MINE 类型</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>一个标准的 URI 写法是</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>content<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span>provider<span class=\"token operator\">/</span>table1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">31</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n<li>\n<p>这就表示调用方期望访问的是 <code>com.example.app</code>  这个应用的 table1 表中 id 为 1 的数据</p>\n</li>\n</ul>\n</li>\n<li>\n<p>内容 URI 的格式主要就只有以上两种</p>\n<ul>\n<li>以路径结尾表示期望访问该表中的所有数据</li>\n<li>以 id 结尾表示期望访问该表中拥有相应 id 的数据</li>\n</ul>\n</li>\n<li>\n<p>可以使用通配符分别匹配这两种格式的内容 URI，规则如下：</p>\n<ul>\n<li><code>*</code>  表示匹配任意长度的字符串</li>\n<li><code>#</code> 表示匹配任意长度的数字</li>\n</ul>\n</li>\n<li>\n<p>所以，一个能够匹配人意表的内容的 URI 格式就可以写成</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>content<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span>provider<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 一个能够匹配table1表中任意一行数据的内容URI格式就可以写成：</span><br><span class=\"line\"></span><br><span class=\"line\">  - ```kotlin</span><br><span class=\"line\">    content://com.example.app.provider/table1/#</span><br></pre></td></tr></table></figure></div></div></span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>接着，我们再借助 <code>UriMatcher</code>  这个类就可以轻松地实现匹配内容 URI 的功能</p>\n</li>\n<li>\n<p><code>UriMathcer</code>  中提供了一个 <code>addUri()</code>  方法，这个方法接收 3 个参数，可以分别把 <code>authority</code> 、 <code>path</code> 、和一个自定义代码传进去。这样当调用 <code>UriMatcher</code>  的 <code>match()</code>  方法的时候，就可以将一个 Uri 对象传入，返回值是某一个能够匹配这个 Uri 对象所对应的自定义代码，利用这个代码，我们就可以判断出调用方期望访问的是哪张表中的数据了</p>\n</li>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> MyProvider <span class=\"token operator\">:</span> <span class=\"token function\">ContentProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> table1Dir <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> table1Item <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> table2Dir <span class=\"token operator\">=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> table2Item <span class=\"token operator\">=</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> uriMatcher <span class=\"token operator\">=</span> <span class=\"token function\">UriMatcher</span><span class=\"token punctuation\">(</span>UriMatcher<span class=\"token punctuation\">.</span>NO_MATCH<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">init</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        uriMatcher<span class=\"token punctuation\">.</span><span class=\"token function\">addURI</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"com.example.app.provider\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"table1\"</span></span><span class=\"token punctuation\">,</span> table1Dir<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        uriMatcher<span class=\"token punctuation\">.</span><span class=\"token function\">addURI</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"com.example.app.provider \"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"table1/#\"</span></span><span class=\"token punctuation\">,</span> table1Item<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        uriMatcher<span class=\"token punctuation\">.</span><span class=\"token function\">addURI</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"com.example.app.provider \"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"table2\"</span></span><span class=\"token punctuation\">,</span> table2Dir<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        uriMatcher<span class=\"token punctuation\">.</span><span class=\"token function\">addURI</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"com.example.app.provider \"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"table2/#\"</span></span><span class=\"token punctuation\">,</span> table2Item<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span>uri<span class=\"token operator\">:</span> Uri<span class=\"token punctuation\">,</span> projection<span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> selection<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            selectionArgs<span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> sortOrder<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Cursor<span class=\"token operator\">?</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">when</span> <span class=\"token punctuation\">(</span>uriMatcher<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>uri<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            table1Dir <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token comment\">// 查询 table1 表中的所有数据</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            table1Item <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token comment\">// 查询 table1 表中的单条数据</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            table2Dir <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token comment\">// 查询 table2 表中的所有数据</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            table2Item <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token comment\">// 查询 table2 表中的单条数据</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">33</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n<li>\n<p>所以 <code>getType()</code>  方法就可以这么写：</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> MyProvider <span class=\"token operator\">:</span> <span class=\"token function\">ContentProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">getType</span><span class=\"token punctuation\">(</span>uri<span class=\"token operator\">:</span> Uri<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">when</span> <span class=\"token punctuation\">(</span>uriMatcher<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>uri<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        table1Dir <span class=\"token operator\">-></span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"vnd.android.cursor.dir/vnd.com.example.app.provider.table1\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        table1Item <span class=\"token operator\">-></span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"vnd.android.cursor.item/vnd.com.example.app.provider.table1\"</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        table2Dir <span class=\"token operator\">-></span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"vnd.android.cursor.dir/vnd.com.example.app.provider.table2\"</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        table2Item <span class=\"token operator\">-></span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"vnd.android.cursor.item/vnd.com.example.app.provider.table2\"</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">34</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n<li>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">35</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"解析异步消息处理机制\"><a class=\"markdownIt-Anchor\" href=\"#解析异步消息处理机制\">#</a> 解析异步消息处理机制</h4>\n<ul>\n<li>Message\n<ul>\n<li>Message 是在多线程之间传递的消息，他可以在内部携带少量的信息，用于在不同的线程之间传递数据，除了上面使用的 <code>what</code>  字段，还可以使用 <code>arg1</code>  和 <code>arg2</code>  字段来携带一些整型，使用 <code>obj</code>  字段携带一个 Object 对象</li>\n</ul>\n</li>\n<li>Handler\n<ul>\n<li>Handler 顾名思义就是处理者的意思，它主要用于发送和处理消息，发送消息一般是使用 Handler 的 <code>sendMessage()</code>  方法、 <code>post()</code>  方法等，而发出的消息经过一系列的辗转处理后，最终会传递到 Handelr 的 <code>handleMessage()</code>  方法中</li>\n</ul>\n</li>\n<li>MessageQueue\n<ul>\n<li>MessageQueue 是消息队列的意思，它主要用于存放所有通过 Handelr 发送的消息，这部分消息会一直存放在消息队列中，等待被处理，每隔线程中只会有一个 MessageQueue 对象</li>\n</ul>\n</li>\n<li>Looper\n<ul>\n<li>Looper 是每个线程中的 MessageQueue 的管家，调用 Looper 的 loop () 方法后，就会进入一个无限循环中，然后每当发现 MessageQueue 中存在一条消息时，就回将它取出，并传递到 Handler 的 <code>handleMessage()</code>  方法中，每个线程中只会有一个 Looper 对象</li>\n</ul>\n</li>\n<li>首先需要在主线程当中创建一个 Handler 对象，并重写 handleMessage () 方法。然后当子线程中需要进行 UI 操作时，就创建一个 Message 对象，并通过 Handler 将这条消息发送出去。之后这条消息会被添加到 MessageQueue 的队列中等待被处理，而 Looper 则会一直尝试从 MessageQueue 中取出待处理消息，最后分发回 Handler 的 handleMessage () 方法中。由于 Handler 的构造函数中我们传入了 Looper.getMainLooper ()，所以此时 handleMessage () 方法中的代码也会在主线程中运行，于是我们在这里就可以安心地进行 UI 操作了</li>\n<li><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20210926173456241.png\"\n                      alt=\"image-20210926173456241\"\n                ></li>\n</ul>\n<h4 id=\"使用asynctask\"><a class=\"markdownIt-Anchor\" href=\"#使用asynctask\">#</a> 使用 AsyncTask</h4>\n<ul>\n<li>\n<p>被弃用了</p>\n</li>\n<li>\n<p>首先来看一下 AsyncTask 的基本用法。由于 AsyncTask 是一个抽象类，所以如果我们想使用它，就必须创建一个子类去继承它。在继承时我们可以为 AsyncTask 类指定 3 个泛型参数，这 3 个参数的用途如下</p>\n</li>\n<li>\n<p>Params。在执行 AsyncTask 时需要传入的参数，可用于在后台任务中使用。</p>\n</li>\n<li>\n<p>Progress。在后台任务执行时，如果需要在界面上显示当前的进度，则使用这里指定的泛型作为进度单位。</p>\n</li>\n<li>\n<p>Result。当任务执行完毕后，如果需要对结果进行返回，则使用这里指定的泛型作为返回值类型。</p>\n</li>\n<li>\n<p>因此，一个最简单的自定义 AsyncTask 就可以写成如下形式：</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> DownloadTask <span class=\"token operator\">:</span> AsyncTask<span class=\"token operator\">&lt;</span>Unit<span class=\"token punctuation\">,</span> Int<span class=\"token punctuation\">,</span> Boolean<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">36</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"service基本用法\"><a class=\"markdownIt-Anchor\" href=\"#service基本用法\">#</a> Service 基本用法</h3>\n<ul>\n<li>新建一个类继承 Service 类，重写相应的方法\n<ul>\n<li><code>onBind()</code>\n<ul>\n<li>必须在子类中实现</li>\n</ul>\n</li>\n<li><code>onCreate()</code>\n<ul>\n<li>在 Service 创建的时候调用</li>\n</ul>\n</li>\n<li><code>onStartCommand()</code>\n<ul>\n<li>会在每次 Service 启动的时候调用</li>\n<li>如果希望 Service 一旦启动就立刻执行某个动作</li>\n</ul>\n</li>\n<li><code>onDestory()</code>\n<ul>\n<li>会在 Service 销毁的时候调用</li>\n<li>回收那些不再使用的资源</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"启动和停止service\"><a class=\"markdownIt-Anchor\" href=\"#启动和停止service\">#</a> 启动和停止 Service</h4>\n<ul>\n<li>\n<p>启动和挺值得方法也是借助 <code>Intent</code>  实现的</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> cn<span class=\"token punctuation\">.</span>wenhe9<span class=\"token punctuation\">.</span>testmenu</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> android<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span>Intent</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> androidx<span class=\"token punctuation\">.</span>appcompat<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span>AppCompatActivity</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> android<span class=\"token punctuation\">.</span>os<span class=\"token punctuation\">.</span>Bundle</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> cn<span class=\"token punctuation\">.</span>wenhe9<span class=\"token punctuation\">.</span>testmenu<span class=\"token punctuation\">.</span>databinding<span class=\"token punctuation\">.</span>ActivityTestServiceBinding</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> TestService <span class=\"token operator\">:</span> <span class=\"token function\">AppCompatActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> binding <span class=\"token operator\">:</span> ActivityTestServiceBinding</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        binding <span class=\"token operator\">=</span> ActivityTestServiceBinding<span class=\"token punctuation\">.</span><span class=\"token function\">inflate</span><span class=\"token punctuation\">(</span>layoutInflater<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span>binding<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        binding<span class=\"token punctuation\">.</span>startService<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">val</span> intent <span class=\"token operator\">=</span> <span class=\"token function\">Intent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> MyService<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token function\">startService</span><span class=\"token punctuation\">(</span>intent<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        binding<span class=\"token punctuation\">.</span>stopService<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">val</span> intent <span class=\"token operator\">=</span> <span class=\"token function\">Intent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> MyService<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token function\">stopService</span><span class=\"token punctuation\">(</span>intent<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">37</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> cn<span class=\"token punctuation\">.</span>wenhe9<span class=\"token punctuation\">.</span>testmenu</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> android<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span>ComponentName</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> android<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span>Context</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> android<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span>Intent</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> android<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span>ServiceConnection</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> androidx<span class=\"token punctuation\">.</span>appcompat<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span>AppCompatActivity</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> android<span class=\"token punctuation\">.</span>os<span class=\"token punctuation\">.</span>Bundle</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> android<span class=\"token punctuation\">.</span>os<span class=\"token punctuation\">.</span>IBinder</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> cn<span class=\"token punctuation\">.</span>wenhe9<span class=\"token punctuation\">.</span>testmenu<span class=\"token punctuation\">.</span>databinding<span class=\"token punctuation\">.</span>ActivityTestServiceBinding</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">class</span> TestService <span class=\"token operator\">:</span> <span class=\"token function\">AppCompatActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> binding <span class=\"token operator\">:</span> ActivityTestServiceBinding</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> downloadBinder <span class=\"token operator\">:</span> MyService<span class=\"token punctuation\">.</span>DownLoadBinder</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> connection <span class=\"token operator\">=</span> <span class=\"token keyword\">object</span> <span class=\"token operator\">:</span> ServiceConnection<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onServiceConnected</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> ComponentName<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> service<span class=\"token operator\">:</span> IBinder<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            downloadBinder <span class=\"token operator\">=</span> service <span class=\"token keyword\">as</span> MyService<span class=\"token punctuation\">.</span>DownLoadBinder</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            downloadBinder<span class=\"token punctuation\">.</span><span class=\"token function\">startDownload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            downloadBinder<span class=\"token punctuation\">.</span><span class=\"token function\">getProgess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onServiceDisconnected</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> ComponentName<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Not yet implemented\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        binding <span class=\"token operator\">=</span> ActivityTestServiceBinding<span class=\"token punctuation\">.</span><span class=\"token function\">inflate</span><span class=\"token punctuation\">(</span>layoutInflater<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span>binding<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        binding<span class=\"token punctuation\">.</span>startService<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token keyword\">val</span> intent <span class=\"token operator\">=</span> <span class=\"token function\">Intent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> MyService<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token function\">startService</span><span class=\"token punctuation\">(</span>intent<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        binding<span class=\"token punctuation\">.</span>stopService<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token keyword\">val</span> intent <span class=\"token operator\">=</span> <span class=\"token function\">Intent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> MyService<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token function\">stopService</span><span class=\"token punctuation\">(</span>intent<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        binding<span class=\"token punctuation\">.</span>bindServiceBtn<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token keyword\">val</span> intent <span class=\"token operator\">=</span> <span class=\"token function\">Intent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> MyService<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token function\">bindService</span><span class=\"token punctuation\">(</span>intent<span class=\"token punctuation\">,</span> connection<span class=\"token punctuation\">,</span> Context<span class=\"token punctuation\">.</span>BIND_AUTO_CREATE<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        binding<span class=\"token punctuation\">.</span>unBindServiceBtn<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token function\">unbindService</span><span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">38</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token operator\">-</span> 可以看到这就是使用的通知的写法，只是在租后没有使用``<span class=\"token function\">notigy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>``将通知显示出来，而是使用``<span class=\"token function\">startForeground</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>``方法，这方法接收两个参数：</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  <span class=\"token operator\">-</span> 第一个参数是通知的id，类似与``<span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>``方法的第一个参数，唯一即可</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  <span class=\"token operator\">-</span> 第二个参数则是构建的``Notification``对象</pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token operator\">-</span> 调用``<span class=\"token function\">startForeground</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>``方法后就会让MyService变成一个前台Service，并在系统状态栏显示出来</pre></td></tr></table></figure></div></li>\n<li>\n<p>另外从 Android 9.0 系统开始，使用前台 Service 必须在 AndroidManifest.xml 文件中进行权限声明才行：</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>manifest</span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>android</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schemas.android.com/apk/res/android<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>          <span class=\"token attr-name\">package</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.example.servicetest<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>uses-permission</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>android.permission.FOREGROUND_SERVICE<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    ...</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>manifest</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"><div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#### 使用IntentService</span><br><span class=\"line\"></span><br><span class=\"line\">- 在一开始我们就知道，Service中的代码都是默认运行在主线程当中的，如果直接在Service里处理一些耗时的逻辑，就很容易出现ANR（Application Not Responding）的情况</span><br><span class=\"line\"></span><br><span class=\"line\">- 所以这个后就需要用到Android多线程的技术了，我们应该在Service的每隔具体的方法里开启一个子线程，然后在这里处理那些耗时的的逻辑，因此一个标准的Service就可以携程如下形式：</span><br><span class=\"line\"></span><br><span class=\"line\">  - ```kotlin</span><br><span class=\"line\">    class MyService : Service() &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        override fun onStartCommand(intent: Intent, flags: Int, startId: Int): Int &#123;</span><br><span class=\"line\">            thread &#123;</span><br><span class=\"line\">                // 处理具体的逻辑</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return super.onStartCommand(intent, flags, startId)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div></div></span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>但是，这种 Service 一旦启动，就会一直处于运行状态，必须调用 <code>stopService()</code>  或 <code>stioSelf()</code>  方法或者被系统回收，Service 才会停止，所以，如果想要实现让一个 Service 在执行完毕后自动停止的，就可以这样写：</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> MyService <span class=\"token operator\">:</span> <span class=\"token function\">Service</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onStartCommand</span><span class=\"token punctuation\">(</span>intent<span class=\"token operator\">:</span> Intent<span class=\"token punctuation\">,</span> flags<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> startId<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Int <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        thread <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token comment\">// 处理具体的逻辑</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token function\">stopSelf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onStartCommand</span><span class=\"token punctuation\">(</span>intent<span class=\"token punctuation\">,</span> flags<span class=\"token punctuation\">,</span> startId<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">40</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>这里首先要求必须先调用父类的构造函数，并传入一个字符串，这个字符串可以随意指定，只在调试的时候有用。然后要在子类中实现 <code>onHandleIntent()</code>  这个抽象方法，这个方法中可以处理一些耗时的逻辑，而不用担心 ANR 的问题，因为这个方法已经是在子线程中运行的了。这里为了证实一下，我们在 <code>onHandleIntent()</code>  方法中打印了当前线程名。另外，根据 IntentService 的特性，这个 Service 在运行结束后应该是会自动停止的，所以我们又重写了 <code>onDestroy()</code>  方法，在这里也打印了一行日志，以证实 Service 是不是停止了。</p>\n</li>\n</ul>\n<h2 id=\"多媒体\"><a class=\"markdownIt-Anchor\" href=\"#多媒体\">#</a> 多媒体</h2>\n<h3 id=\"使用通知\"><a class=\"markdownIt-Anchor\" href=\"#使用通知\">#</a> 使用通知</h3>\n<ul>\n<li>通知 (notification) 是 anndroid 系统中比较有特色的一个功能，当某个应用程序希望向用户发出一些提示信息，而该应用程序又不在前台运行时，就可以借助通知来实现，发出一条通知后，手机最上方的状态栏中会显示一个通知的图标，下拉状态栏后可以看到通知的详细内容</li>\n</ul>\n<h4 id=\"创建通知渠道\"><a class=\"markdownIt-Anchor\" href=\"#创建通知渠道\">#</a> 创建通知渠道</h4>\n<ul>\n<li>\n<p>什么是通知渠道</p>\n<ul>\n<li>就是每一条通知都要属于一个对应的渠道，每个应用程序都可以自由的创建当前应用拥有哪些通知渠道，但是这些通知渠道的控制权是掌握在用户手上的，用户可以自由的选择这些同志渠道的重要程度，是否响铃、是否震动或者是否要关闭这个渠道的通知</li>\n</ul>\n</li>\n<li>\n<p>创建通知渠道的步骤</p>\n<ul>\n<li>\n<p>首先需要一个 <code>NotificationManager</code>  对通知进行管理，可以通过调用 <code>Cotnext</code>  的 <code>getSystemService()</code>  方法获取。 <code>getSystemService()</code>  方法接收一个字符串参数用于确定获取系统的哪个服务，这里我们传入 <code>Contxt.NOTIFICATION_SERCICE</code>  即可，因此，获取 <code>NotificationManager</code>  的实例既可以写成：</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> manager <span class=\"token function\">getSystenService</span><span class=\"token punctuation\">(</span>Context<span class=\"token punctuation\">.</span>NOTIFICATION_SERICE<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> NotificationManager</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">41</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>创建一个通知渠道至少需要渠道 ID、渠道名称以及重要等级这三个参数</p>\n<ul>\n<li>渠道 ID 可以随便定义，只要保证全局唯一性就可以</li>\n<li>渠道名称是给用户看的，需要清楚地表达这个渠道的用途</li>\n<li>通知的重要等级主要 <code>IMPORTANCE_HIGH</code> 、 <code>IMPORTANCE_DEFAULT</code> 、 <code>IMPORTANCE_LOW</code> 、 <code>IMPORTANCE_MIN</code>  这几种，对应的重要程度依次从高到低，不同的重要等机会决定通知的不同行为，当然这里只是初始状态下的重要等级，用户可以随时手动更改某个通知渠道的重要等级，开发者是无法干预的</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"通知的基本用法\"><a class=\"markdownIt-Anchor\" href=\"#通知的基本用法\">#</a> 通知的基本用法</h4>\n<ul>\n<li>\n<p>通知 的用法还是比较灵活的，既可以在 Activity 里创建，也可以在 BroadcastRecevier 中床架你，当然还可以在 Service 里创建，相比于 BroadcastReceiver 和 Service，在 Activity 里创建通知的场景是比较少的，因为一般只有程序进入后台的时候才需要使用通知</p>\n</li>\n<li>\n<p>创建通知的步骤：</p>\n<ul>\n<li>\n<p>首先需要使用一个 Builder 构造器来创建 <code>Notification</code>  对象，但问题在于，Android 系统的没有个版本都会对通知功能进行或多或少的修改，API 不稳定的问题在通知上凸显的尤为严重，解决办法就是使用 AndroidX 库中提供的兼容 API，AndroidX 库中提供了一个 <code>NotificationCompat</code>  类，使用这个类的构造器创建 <code>Notificatin</code>  对象，就可以保证我们的程序在所有 Android 系统版本上都能正常工作了，代码如下：</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> notification <span class=\"token operator\">=</span> NotificationCompat<span class=\"token punctuation\">.</span><span class=\"token function\">Builder</span><span class=\"token punctuation\">(</span>contxext<span class=\"token punctuation\">,</span> channelId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">42</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">-</span> ``<span class=\"token function\">setContentTitle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>``方法用于指定通知的标题内容，下拉系统状态来就可以看到这部分内容</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">-</span> ``<span class=\"token function\">setConentText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>``方法用于指定通知的正文内容，同样下来系统装天蓝就可以看到这部分内容</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">-</span> ``<span class=\"token function\">setSmallIcon</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>``方法用于设置通知的小图标，注意，只能使用<span class=\"token operator\">*</span><span class=\"token operator\">*</span>纯aplha<span class=\"token operator\">*</span><span class=\"token operator\">*</span>图层的图片进行设置，小图标会显示在系统状态栏</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">-</span> ``<span class=\"token function\">setlargeIcon</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>``方法用于设置通知的大图标，当下拉系统状态栏就可以看到设置的大图标了</pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>最后只需要调用 <code>NotificationManager</code>  的 <code>notify()</code>  方法就可以让通知显示出来了， <code>notify()</code>  方法接收这两个参数：</p>\n<ul>\n<li>\n<p>第一个参数是 Id，要保证为每个通知指定的 id 都是不同的</p>\n</li>\n<li>\n<p>第二个参数则是 Notification 对昂，这里直接将创建好的 Notification 对象传入即可</p>\n</li>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>manager<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> notification<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">43</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>此时，可以看到，虽然跳转界面了，但是系统状态栏的通知图标还没有消息，这是因为我们没有在代码中对该同志进行取消，他就会一直显示在系统的状态栏上，解决方法有两种</p>\n<ul>\n<li>\n<p>一种是在 <code>NotificationCompat.Builder()</code>  中再连缀一个 <code>setAutoCancel()</code>  方法、</p>\n</li>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> notification <span class=\"token operator\">=</span> NotificationCompat<span class=\"token punctuation\">.</span><span class=\"token function\">Builder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"normal\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">setAutoCancel</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">44</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n<li>\n<p>注意，在 <code>cancel()</code>  方法中传入了 1，这个 1 是我么在创建通知的时候给每条通知指定的 id，取消哪条通知，在 <code>cancel()</code>  方法中传入该通知的 id 就可以了</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>PendingIntent</code>  和 <code>Intent</code>  的区别和联系</p>\n<ul>\n<li>联系\n<ul>\n<li>他们都可以指明某一个 “意图”，都可以用于启动 Activity、启动 Service 以及发送广播</li>\n</ul>\n</li>\n<li>区别\n<ul>\n<li><code>Intent</code>  倾向于立即执行某个动作</li>\n<li>而 <code>PendingIntent</code>  倾向于某个合适的时机执行某个动作</li>\n</ul>\n</li>\n<li>所以，也可以把 <code>PendintIntent</code>  简单地理解为延迟执行的 <code>Intent</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"通知的进阶技巧\"><a class=\"markdownIt-Anchor\" href=\"#通知的进阶技巧\">#</a> 通知的进阶技巧</h4>\n<ul>\n<li>\n<p><code>setStyle()</code></p>\n<ul>\n<li>\n<p>这个方法允许我们构造出富文本的内容，也就是说，通知中不光可以有文字和图标，还可以包含更多的东西， <code>setStyle()</code>  方法接收一个 <code>NotificationCompat.style</code>  参数，这个参数就是用来构造具体的富文本信息的，如文字、图片</p>\n</li>\n<li>\n<p>在通知中显示一段长文</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> notification <span class=\"token operator\">=</span> NotificationCompat<span class=\"token punctuation\">.</span><span class=\"token function\">Builder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"test_notify\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token function\">setStyle</span><span class=\"token punctuation\">(</span>NotificationCompat<span class=\"token punctuation\">.</span><span class=\"token function\">BigTextStyle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">bigText</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"nihaodadjiaosjdklasjdlkajskldjakldjialjdklajdkljaskldjlkasjdklasjdkljaskldjaljdklasjdkljakjdakljl\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">45</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>不同重要的顶级的通知渠道对通知的行为具体有什么影响</p>\n<ul>\n<li>其实简单来讲，就是通知渠道的重要等级越高，发出的通知就越容易获得用户的注意。比如高重要等级的通知渠道发出的通知可以弹出横幅、发出声音，而低重要等级的通知渠道发出的通知不仅可能会在某些情况下被隐藏，而且可能会被改变显示的顺序，将其排在更重要的通知之后。</li>\n<li>但需要注意的是，开发者只能在创建通知渠道的时候为它指定初始的重要等级，如果用户不认可这个重要等级的话，可以随时进行修改，开发者对此无权再进行调整和变更，因为通知渠道一旦创建就不能再通过代码修改了。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"调用摄像头和相册\"><a class=\"markdownIt-Anchor\" href=\"#调用摄像头和相册\">#</a> 调用摄像头和相册</h3>\n<ul>\n<li>\n<p>调用摄像头拍照</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> MainActivity <span class=\"token operator\">:</span> <span class=\"token function\">AppCompatActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">val</span> takePhoto <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> imageUri<span class=\"token operator\">:</span> Uri</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> outputImage<span class=\"token operator\">:</span> File</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>activity_main<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        takePhotoBtn<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token comment\">// 创建 File 对象，用于存储拍照后的图片</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            outputImage <span class=\"token operator\">=</span> <span class=\"token function\">File</span><span class=\"token punctuation\">(</span>externalCacheDir<span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"output_image.jpg\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>outputImage<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                outputImage<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            outputImage<span class=\"token punctuation\">.</span><span class=\"token function\">createNewFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            imageUri <span class=\"token operator\">=</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Build<span class=\"token punctuation\">.</span>VERSION<span class=\"token punctuation\">.</span>SDK_INT <span class=\"token operator\">>=</span> Build<span class=\"token punctuation\">.</span>VERSION_CODES<span class=\"token punctuation\">.</span>N<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                FileProvider<span class=\"token punctuation\">.</span><span class=\"token function\">getUriForFile</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> \"com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>cameraalbumtest<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    fileprovider\"<span class=\"token punctuation\">,</span> outputImage<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                Uri<span class=\"token punctuation\">.</span><span class=\"token function\">fromFile</span><span class=\"token punctuation\">(</span>outputImage<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">// 启动相机程序</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">val</span> intent <span class=\"token operator\">=</span> <span class=\"token function\">Intent</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"android.media.action.IMAGE_CAPTURE\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            intent<span class=\"token punctuation\">.</span><span class=\"token function\">putExtra</span><span class=\"token punctuation\">(</span>MediaStore<span class=\"token punctuation\">.</span>EXTRA_OUTPUT<span class=\"token punctuation\">,</span> imageUri<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token function\">startActivityForResult</span><span class=\"token punctuation\">(</span>intent<span class=\"token punctuation\">,</span> takePhoto<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onActivityResult</span><span class=\"token punctuation\">(</span>requestCode<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> resultCode<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> <span class=\"token keyword\">data</span><span class=\"token operator\">:</span> Intent<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onActivityResult</span><span class=\"token punctuation\">(</span>requestCode<span class=\"token punctuation\">,</span> resultCode<span class=\"token punctuation\">,</span> <span class=\"token keyword\">data</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">when</span> <span class=\"token punctuation\">(</span>requestCode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            takePhoto <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>resultCode <span class=\"token operator\">==</span> Activity<span class=\"token punctuation\">.</span>RESULT_OK<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                    <span class=\"token comment\">// 将拍摄的照片显示出来</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                    <span class=\"token keyword\">val</span> bitmap <span class=\"token operator\">=</span> BitmapFactory<span class=\"token punctuation\">.</span><span class=\"token function\">decodeStream</span><span class=\"token punctuation\">(</span>contentResolver<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                        <span class=\"token function\">openInputStream</span><span class=\"token punctuation\">(</span>imageUri<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                    imageView<span class=\"token punctuation\">.</span><span class=\"token function\">setImageBitmap</span><span class=\"token punctuation\">(</span><span class=\"token function\">rotateIfRequired</span><span class=\"token punctuation\">(</span>bitmap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">rotateIfRequired</span><span class=\"token punctuation\">(</span>bitmap<span class=\"token operator\">:</span> Bitmap<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Bitmap <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">val</span> exif <span class=\"token operator\">=</span> <span class=\"token function\">ExifInterface</span><span class=\"token punctuation\">(</span>outputImage<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">val</span> orientation <span class=\"token operator\">=</span> exif<span class=\"token punctuation\">.</span><span class=\"token function\">getAttributeInt</span><span class=\"token punctuation\">(</span>ExifInterface<span class=\"token punctuation\">.</span>TAG_ORIENTATION<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            ExifInterface<span class=\"token punctuation\">.</span>ORIENTATION_NORMAL<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">when</span> <span class=\"token punctuation\">(</span>orientation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            ExifInterface<span class=\"token punctuation\">.</span>ORIENTATION_ROTATE_90 <span class=\"token operator\">-></span> <span class=\"token function\">rotateBitmap</span><span class=\"token punctuation\">(</span>bitmap<span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            ExifInterface<span class=\"token punctuation\">.</span>ORIENTATION_ROTATE_180 <span class=\"token operator\">-></span> <span class=\"token function\">rotateBitmap</span><span class=\"token punctuation\">(</span>bitmap<span class=\"token punctuation\">,</span> <span class=\"token number\">180</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            ExifInterface<span class=\"token punctuation\">.</span>ORIENTATION_ROTATE_270 <span class=\"token operator\">-></span> <span class=\"token function\">rotateBitmap</span><span class=\"token punctuation\">(</span>bitmap<span class=\"token punctuation\">,</span> <span class=\"token number\">270</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token keyword\">else</span> <span class=\"token operator\">-></span> bitmap</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">rotateBitmap</span><span class=\"token punctuation\">(</span>bitmap<span class=\"token operator\">:</span> Bitmap<span class=\"token punctuation\">,</span> degree<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Bitmap <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">val</span> matrix <span class=\"token operator\">=</span> <span class=\"token function\">Matrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        matrix<span class=\"token punctuation\">.</span><span class=\"token function\">postRotate</span><span class=\"token punctuation\">(</span>degree<span class=\"token punctuation\">.</span><span class=\"token function\">toFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token keyword\">val</span> rotatedBitmap <span class=\"token operator\">=</span> Bitmap<span class=\"token punctuation\">.</span><span class=\"token function\">createBitmap</span><span class=\"token punctuation\">(</span>bitmap<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> bitmap<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> bitmap<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            matrix<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        bitmap<span class=\"token punctuation\">.</span><span class=\"token function\">recycle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 将不再需要的 Bitmap 对象回收</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token keyword\">return</span> rotatedBitmap</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">46</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n<li>\n<p>android:name 属性的值是固定的，而 android:authorities 属性的值必须和刚才 FileProvider.getUriForFile () 方法中的第二个参数一致。另外，这里还在<provider>标签的内部使用<meta-data>指定 Uri 的共享路径，并引用了一个 @xml/file_paths 资源。当然，这个资源现在还是不存在的，下面我们就来创建它。</p>\n</li>\n<li>\n<p>右击 res 目录→New→Directory，创建一个 xml 目录，接着右击 xml 目录→New→File，创建一个 file_paths.xml 文件。然后修改 file_paths.xml 文件中的内容，如下所示：</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>paths</span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>android</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schemas.android.com/apk/res/android<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>external-path</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>my_images<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>paths</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"><div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">  - external-path就是用来指定Uri共享路径的，name属性的值可以随便填，path属性的值表示共享的具体路径。这里使用一个单斜线表示将整个SD卡进行共享，当然你也可以仅共享存放output_image.jpg这张图片的路径。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">- 从相册中获取图片</span><br><span class=\"line\"></span><br><span class=\"line\">  - ```kotlin</span><br><span class=\"line\">    class MainActivity : AppCompatActivity() &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        val fromAlbum = 2</span><br><span class=\"line\">    </span><br><span class=\"line\">        override fun onCreate(savedInstanceState: Bundle?) &#123;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">            fromAlbumBtn.setOnClickListener &#123;</span><br><span class=\"line\">                // 打开文件选择器</span><br><span class=\"line\">                val intent = Intent(Intent.ACTION_OPEN_DOCUMENT)</span><br><span class=\"line\">                intent.addCategory(Intent.CATEGORY_OPENABLE)</span><br><span class=\"line\">                // 指定只显示图片</span><br><span class=\"line\">                intent.type = &quot;image/ *&quot;</span><br><span class=\"line\">                startActivityForResult(intent, fromAlbum)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) &#123;</span><br><span class=\"line\">            super.onActivityResult(requestCode, resultCode, data)</span><br><span class=\"line\">            when (requestCode) &#123;</span><br><span class=\"line\">                ...</span><br><span class=\"line\">                fromAlbum -&gt; &#123;</span><br><span class=\"line\">                    if (resultCode == Activity.RESULT_OK &amp;&amp; data != null) &#123;</span><br><span class=\"line\">                        data.data?.let &#123; uri -&gt;</span><br><span class=\"line\">                            // 将选择的图片显示</span><br><span class=\"line\">                            val bitmap = getBitmapFromUri(uri)</span><br><span class=\"line\">                            imageView.setImageBitmap(bitmap)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        private fun getBitmapFromUri(uri: Uri) = contentResolver</span><br><span class=\"line\">            .openFileDescriptor(uri, &quot;r&quot;)?.use &#123;</span><br><span class=\"line\">            BitmapFactory.decodeFileDescriptor(it.fileDescriptor)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div></div></span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"播放多媒体文件\"><a class=\"markdownIt-Anchor\" href=\"#播放多媒体文件\">#</a> 播放多媒体文件</h3>\n<ul>\n<li>\n<p>播放音频</p>\n<ul>\n<li><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20210926164542810.png\"\n                      alt=\"image-20210926164542810\"\n                ></li>\n</ul>\n</li>\n<li>\n<p>Android Studio 允许我们在项目工程中创建一个 assets 目录，并在这个目录下存放任意文件和子目录，这些文件和子目录在项目打包时会一并被打包到安装文件中，然后我们在程序中就可以借助 AssetManager 这个类提供的接口对 assets 目录下的文件进行读取。</p>\n</li>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> MainActivity <span class=\"token operator\">:</span> <span class=\"token function\">AppCompatActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> mediaPlayer <span class=\"token operator\">=</span> <span class=\"token function\">MediaPlayer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>activity_main<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">initMediaPlayer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        play<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>mediaPlayer<span class=\"token punctuation\">.</span>isPlaying<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                mediaPlayer<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 开始播放</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        pause<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mediaPlayer<span class=\"token punctuation\">.</span>isPlaying<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                mediaPlayer<span class=\"token punctuation\">.</span><span class=\"token function\">pause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 暂停播放</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        stop<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mediaPlayer<span class=\"token punctuation\">.</span>isPlaying<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                mediaPlayer<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 停止播放</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token function\">initMediaPlayer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">initMediaPlayer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">val</span> assetManager <span class=\"token operator\">=</span> assets</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">val</span> fd <span class=\"token operator\">=</span> assetManager<span class=\"token punctuation\">.</span><span class=\"token function\">openFd</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"music.mp3\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        mediaPlayer<span class=\"token punctuation\">.</span><span class=\"token function\">setDataSource</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">.</span>fileDescriptor<span class=\"token punctuation\">,</span> fd<span class=\"token punctuation\">.</span>startOffset<span class=\"token punctuation\">,</span> fd<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        mediaPlayer<span class=\"token punctuation\">.</span><span class=\"token function\">prepare</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        mediaPlayer<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        mediaPlayer<span class=\"token punctuation\">.</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">48</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n<h2 id=\"网络技术\"><a class=\"markdownIt-Anchor\" href=\"#网络技术\">#</a> 网络技术</h2>\n<h3 id=\"webview的用法\"><a class=\"markdownIt-Anchor\" href=\"#webview的用法\">#</a> WebView 的用法</h3>\n<ul>\n<li>\n<p>当我们的应用程序需要展示一些网页，除了使用系统浏览器外，我们还可以使用 Android 提供的 <code>WebView</code>  控件，借助它实现在自己的应用程序里嵌入一个浏览器</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>LinearLayout</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>android</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schemas.android.com/apk/res/android<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>orientation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>vertical<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>WebView</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@+id/webView<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>LinearLayout</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"><div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- ```kotlin</span><br><span class=\"line\">  package cn.wenhe9.testmenu</span><br><span class=\"line\">  </span><br><span class=\"line\">  import androidx.appcompat.app.AppCompatActivity</span><br><span class=\"line\">  import android.os.Bundle</span><br><span class=\"line\">  import android.webkit.WebView</span><br><span class=\"line\">  import android.webkit.WebViewClient</span><br><span class=\"line\">  import cn.wenhe9.testmenu.databinding.ActivityTestWebViewBinding</span><br><span class=\"line\">  </span><br><span class=\"line\">  class TestWebView : AppCompatActivity() &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">      private lateinit var binding : ActivityTestWebViewBinding</span><br><span class=\"line\">  </span><br><span class=\"line\">      override fun onCreate(savedInstanceState: Bundle?) &#123;</span><br><span class=\"line\">          super.onCreate(savedInstanceState)</span><br><span class=\"line\">          binding = ActivityTestWebViewBinding.inflate(layoutInflater)</span><br><span class=\"line\">          setContentView(binding.root)</span><br><span class=\"line\">  </span><br><span class=\"line\">          val webView = binding.webView as WebView</span><br><span class=\"line\">  </span><br><span class=\"line\">          webView.settings.javaScriptEnabled = true</span><br><span class=\"line\">          webView.webViewClient = WebViewClient()</span><br><span class=\"line\">          webView.loadUrl(&quot;https://www.baidu.com&quot;)</span><br><span class=\"line\">  </span><br><span class=\"line\">  //        webView.apply &#123;</span><br><span class=\"line\">  //            settings.javaScriptEnabled = true</span><br><span class=\"line\">  //            webViewClient = WebViewClient()</span><br><span class=\"line\">  //            webView.loadUrl(&quot;https://www.baidu.com&quot;)</span><br><span class=\"line\">  //        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></div></div></span></pre></td></tr></table></figure></li>\n<li>\n<p>调用 <code>setJavaScriptEnabled()</code>  方法，让 webView 支持 JavaScript 脚本</p>\n</li>\n<li>\n<p>调用 webView 的 <code>setViewClient()</code>  方法，并传入了一个 <code>WebViewClient</code>  的实例，这段代码的作用是，当需要从一个网页跳转到另一个网页时，我们仍然在当前 webView 中显示，而不是打开系统浏览器</p>\n</li>\n<li>\n<p>最后一步调用 webView 的 <code>loadUrl()</code>  方法，并将网址传入，即可展示相应网页的内容</p>\n</li>\n<li>\n<p>最最后，值得注意的是，我们使用了网络功能，而访问网络是需要声明权限的，因此我们还得修改 <code>AndroidManifest.xml</code>  文件，加入权限声明:</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>manifest</span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>android</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schemas.android.com/apk/res/android<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token attr-name\">package</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.example.webviewtest<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>uses-permission</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>android.permission.INTERNET<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    ...</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>manifest</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"><div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">      </span><br><span class=\"line\"></span><br><span class=\"line\">### 使用HTTP访问网络</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">- **注意**</span><br><span class=\"line\">  - **使用Android虚拟机访问本机服务器时，需要使用本机的ip地址，而不是``127.0.0.1``**</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#### 使用HttpURLConnection</span><br><span class=\"line\"></span><br><span class=\"line\">- 在过去，Android上发送HTTP请求一般有两种方式：HttpURLConnection和HttpClient。不过由于HttpClient存在API数量过多、扩展困难等缺点，Android团队越来越不建议我们使用这种方式。终于在Android 6.0系统中，HttpClient的功能被完全移除了，标志着此功能被正式弃用</span><br><span class=\"line\"></span><br><span class=\"line\">- HttpURLConnection的用法</span><br><span class=\"line\"></span><br><span class=\"line\">  - 首先需要获取HttpURLConnection的实例，一般只需要创建一个URL对象，并传入目标的网络地址，然后调用一下``openConnection()``方法即可,如下所示：</span><br><span class=\"line\"></span><br><span class=\"line\">    - ```kotlin</span><br><span class=\"line\">      val url = URL(&quot;https://www.baidu.com&quot;)</span><br><span class=\"line\">      val connection = url.openConnection() as HttpURLConnection</span><br></pre></td></tr></table></figure></div></div></span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>在得到了 HttpURLConnection 的实例之后，我们可以设置一下 HTTP 请求所使用的方法，常用的方法主要有两个： <code>GET</code>  和 <code>POST</code> 。</p>\n<ul>\n<li>\n<p><code>GET</code>  表示希望从服务器那里获取数据</p>\n</li>\n<li>\n<p><code>POST</code>  表示希望提交数据给服务器</p>\n</li>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>connection<span class=\"token punctuation\">.</span>requestMethod <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"GET\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">51</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>之后再调用 <code>getInputStream()</code>  方法就可以获取到服务器的输入流了，剩下的任务就是对输入流进行读取</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> input <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span>inputStream</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">52</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>而如果想要提交数据给服务器的话，只需要将 http 请求的方法改成 POST，并在获取输入流之前把要提交的数据写出即可</p>\n<ul>\n<li>\n<p>注意：</p>\n<ul>\n<li>\n<p>每条数据都要以键值对的形式存在，数据与数据之间用 <code>&amp;</code>  符号隔开，比如我们想要向服务器提交用户名和密码，就可以这样写：</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>connection<span class=\"token punctuation\">.</span>requestMethod <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"POST\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">val</span> output <span class=\"token operator\">=</span> <span class=\"token function\">DataOutputStream</span><span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">.</span>outputStream<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>output<span class=\"token punctuation\">.</span><span class=\"token function\">writeBytes</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"username=admin&amp;password=123456\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">53</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>具体用法：</p>\n<ul>\n<li>\n<p>创建一个 <code>OkHttpClient</code>  的实例</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> client <span class=\"token operator\">=</span> <span class=\"token function\">OkHttpClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">54</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>当然上述代码只是创建了一个空的 <code>Request</code>  对象，并没有什么实际用处，我们可以在最终的 <code>build()</code>  方法之前连缀很多其他方法来丰富这个 <code>Request</code>  对象，比如可以通过 <code>url()</code>  方法来设置目标的网络地址</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> request <span class=\"token operator\">=</span> Request<span class=\"token punctuation\">.</span><span class=\"token function\">Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"https://www.baidu.com\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">55</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p><code>Response</code>  对象就是服务器返回的数据了，我们可以使用如下写法来得到返回的具体内容:</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> responseData <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>body<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">56</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>然后在 <code>Request.Builder</code>  中调用一下 <code>post()</code>  方法，并将 <code>RequestBody</code>  对象传入:</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> request <span class=\"token operator\">=</span> Request<span class=\"token punctuation\">.</span><span class=\"token function\">Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"https://www.baidu.com\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>requestBody<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">57</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> cn<span class=\"token punctuation\">.</span>wenhe9<span class=\"token punctuation\">.</span>testmenu</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> androidx<span class=\"token punctuation\">.</span>appcompat<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span>AppCompatActivity</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> android<span class=\"token punctuation\">.</span>os<span class=\"token punctuation\">.</span>Bundle</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> cn<span class=\"token punctuation\">.</span>wenhe9<span class=\"token punctuation\">.</span>testmenu<span class=\"token punctuation\">.</span>databinding<span class=\"token punctuation\">.</span>ActivityTestOkHttpClientBinding</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> okhttp3<span class=\"token punctuation\">.</span>FormBody</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> okhttp3<span class=\"token punctuation\">.</span>OkHttpClient</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> okhttp3<span class=\"token punctuation\">.</span>Request</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> kotlin<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>thread</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> TestOkHttpClient <span class=\"token operator\">:</span> <span class=\"token function\">AppCompatActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> binding <span class=\"token operator\">:</span> ActivityTestOkHttpClientBinding</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        binding <span class=\"token operator\">=</span> ActivityTestOkHttpClientBinding<span class=\"token punctuation\">.</span><span class=\"token function\">inflate</span><span class=\"token punctuation\">(</span>layoutInflater<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span>binding<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        binding<span class=\"token punctuation\">.</span>sendRequestBtn<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            thread <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token keyword\">val</span> client <span class=\"token operator\">=</span> <span class=\"token function\">OkHttpClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token keyword\">val</span> body <span class=\"token operator\">=</span> FormBody<span class=\"token punctuation\">.</span><span class=\"token function\">Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                    <span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"username\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"admin\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                    <span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"password\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"123456\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                    <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token keyword\">val</span> request <span class=\"token operator\">=</span> Request<span class=\"token punctuation\">.</span><span class=\"token function\">Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    <span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"https://www.baidu.com\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    <span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token keyword\">val</span> response <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">newCall</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token function\">updateUI</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>body<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">updateUI</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">data</span> <span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        runOnUiThread <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            binding<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token keyword\">data</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">58</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>下面就来仔细看下 <code>parseXMLWithPull()</code>  方法中的代码吧。这里首先要创建一个 X <code>mlPullParserFactory</code>  的实例，并借助这个实例得到 <code>XmlPullParser</code>  对象，然后调用 <code>XmlPullParser</code>  的 <code>setInput()</code>  方法将服务器返回的 XML 数据设置进去，之后就可以开始解析了。解析的过程也非常简单，通过 <code>getEventType()</code>  可以得到当前的解析事件，然后在一个 while 循环中不断地进行解析，如果当前的解析事件不等于 <code>XmlPullParser.END_DOCUMENT</code> ，说明解析工作还没完成，调用 <code>next()</code>  方法后可以获取下一个解析事件。</p>\n</li>\n<li>\n<p>在 while 循环中，我们通过 <code>getName()</code>  方法得到了当前节点的名字。如果发现节点名等于 id、name 或 version，就调用 <code>nextText()</code>  方法来获取节点内具体的内容，每当解析完一个 app 节点，就将获取到的内容打印出来。</p>\n</li>\n<li>\n<p>不过在程序运行之前还得再进行一项额外的配置。从 Android 9.0 系统开始，应用程序默认只允许使用 HTTPS 类型的网络请求，HTTP 类型的网络请求因为有安全隐患默认不再被支持</p>\n</li>\n<li>\n<p>那么为了能让程序使用 HTTP，我们还要进行如下配置才可以。右击 res 目录→New→Directory，创建一个 xml 目录，接着右击 xml 目录→New→File，创建一个 network_config.xml 文件。然后修改 network_config.xml 文件中的内容，如下所示：</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>network-security-config</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>base-config</span> <span class=\"token attr-name\">cleartextTrafficPermitted</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>trust-anchors</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>certificates</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>system<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>trust-anchors</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>base-config</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>network-security-config</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"><div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">  - 这段配置文件的意思就是允许我们以明文的方式在网络上传输数据，而HTTP使用的就是明文传输方式。</span><br><span class=\"line\"></span><br><span class=\"line\">- 接下来修改AndroidManifest.xml中的代码来启用我们刚才创建的配置文件：</span><br><span class=\"line\"></span><br><span class=\"line\">  - ```xml</span><br><span class=\"line\">    &lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class=\"line\">        package=&quot;com.example.networktest&quot;&gt;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        &lt;application</span><br><span class=\"line\">            android:allowBackup=&quot;true&quot;</span><br><span class=\"line\">            android:icon=&quot;@mipmap/ic_launcher&quot;</span><br><span class=\"line\">            android:label=&quot;@string/app_name&quot;</span><br><span class=\"line\">            android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;</span><br><span class=\"line\">            android:supportsRtl=&quot;true&quot;</span><br><span class=\"line\">            android:theme=&quot;@style/AppTheme&quot;</span><br><span class=\"line\">            android:networkSecurityConfig=&quot;@xml/network_config&quot;&gt;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &lt;/application&gt;</span><br><span class=\"line\">    &lt;/manifest&gt;</span><br></pre></td></tr></table></figure></div></div></span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"sax解析方式\"><a class=\"markdownIt-Anchor\" href=\"#sax解析方式\">#</a> SAX 解析方式</h4>\n<ul>\n<li>\n<p>yaoshiyongSAX 解析，通常情况下，我们会新建一个类继承自 <code>DefaultHandler</code> ，并重写父类的 5 个方法：</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> cn<span class=\"token punctuation\">.</span>wenhe9<span class=\"token punctuation\">.</span>testmenu</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>xml<span class=\"token punctuation\">.</span>sax<span class=\"token punctuation\">.</span>Attributes</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>xml<span class=\"token punctuation\">.</span>sax<span class=\"token punctuation\">.</span>helpers<span class=\"token punctuation\">.</span>DefaultHandler</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *@author DuJinliang</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *2021/9/28</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">class</span> MyHandler <span class=\"token operator\">:</span> <span class=\"token function\">DefaultHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">startDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">startDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">startElement</span><span class=\"token punctuation\">(</span>uri<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> localName<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> qName<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> attributes<span class=\"token operator\">:</span> Attributes<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">startElement</span><span class=\"token punctuation\">(</span>uri<span class=\"token punctuation\">,</span> localName<span class=\"token punctuation\">,</span> qName<span class=\"token punctuation\">,</span> attributes<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">characters</span><span class=\"token punctuation\">(</span>ch<span class=\"token operator\">:</span> CharArray<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> start<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> length<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">characters</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">endElement</span><span class=\"token punctuation\">(</span>uri<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> localName<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> qName<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">endElement</span><span class=\"token punctuation\">(</span>uri<span class=\"token punctuation\">,</span> localName<span class=\"token punctuation\">,</span> qName<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">endDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">endDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">60</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n<li>\n<p>注意，因为内容中的回车和换行符也会被解析，所以需要在最后使用 <code>trim()</code>  方法</p>\n</li>\n</ul>\n</li>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">parseXMLWithSAX</span><span class=\"token punctuation\">(</span>xmlData <span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token keyword\">val</span> factory <span class=\"token operator\">=</span> SAXParserFactory<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">val</span> xmlReader <span class=\"token operator\">=</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">newSAXParser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>xmlReader</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">val</span> handler <span class=\"token operator\">=</span> <span class=\"token function\">ContentHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            xmlReader<span class=\"token punctuation\">.</span>contentHandler <span class=\"token operator\">=</span> handler</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            xmlReader<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token function\">InputSource</span><span class=\"token punctuation\">(</span><span class=\"token function\">StringReader</span><span class=\"token punctuation\">(</span>xmlData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">:</span> Exception<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">61</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token operator\">-</span> 由于我们在服务器中定义的是一个JSON数组，因此这里首先将服务器返回的数据传入一个JSONArray对象中。然后循环遍历这个JSONArray，从中取出的每一个元素都是一个JSONObject对象，每个JSONObject对象中又会包含id、name和version这些数据。接下来只需要调用<span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>方法将这些数据取出，并打印出来即可</pre></td></tr></table></figure></div></li>\n</ul>\n<h4 id=\"使用gson\"><a class=\"markdownIt-Anchor\" href=\"#使用gson\">#</a> 使用 GSON</h4>\n<ul>\n<li>\n<p>GSON 可以将一段 JSON 格式的字符串自动映射成一个对象，从而不需要我们再手动编写代码进行解析</p>\n</li>\n<li>\n<p>比如这样一段 JSON 格式的数据</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Json\"><figure class=\"iseeu highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"username” : \"</span>马尔扎哈<span class=\"token string\">\", \"</span>password<span class=\"token string\">\" : \"</span><span class=\"token number\">12346</span>\"<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>&lt;!--code￼<span class=\"token number\">62</span>--></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>如果需要解析的是一段 JSON 数组，会稍微麻烦一点，比如如下格式：</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Json\"><figure class=\"iseeu highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"username” : \"</span>马尔扎哈<span class=\"token string\">\", \"</span>password<span class=\"token string\">\" : \"</span><span class=\"token number\">12346</span><span class=\"token string\">\"&#125;, &#123;\"</span>username” <span class=\"token operator\">:</span> <span class=\"token string\">\"马尔扎哈\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"password\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"12346\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"username” : \"</span>马尔扎哈<span class=\"token string\">\", \"</span>password<span class=\"token string\">\" : \"</span><span class=\"token number\">12346</span>\"<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>&lt;!--code￼<span class=\"token number\">63</span>--></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">parseJSONWithGson</span><span class=\"token punctuation\">(</span>jsonData <span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token keyword\">val</span> gson <span class=\"token operator\">=</span> <span class=\"token function\">Gson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">val</span> typeOf <span class=\"token operator\">=</span> <span class=\"token keyword\">object</span> <span class=\"token operator\">:</span> TypeToken<span class=\"token operator\">&lt;</span>List<span class=\"token operator\">&lt;</span>User<span class=\"token operator\">></span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span>type</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">val</span> people <span class=\"token operator\">=</span> gson<span class=\"token punctuation\">.</span>fromJson<span class=\"token operator\">&lt;</span>List<span class=\"token operator\">&lt;</span>User<span class=\"token operator\">></span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>jsonData<span class=\"token punctuation\">,</span> typeOf<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>item <span class=\"token keyword\">in</span> <span class=\"token number\">0</span> until  people<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                Log<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"TestJson\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"people is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token expression\">people<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span></span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">:</span> Exception<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">64</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n<li>\n<p>以后每当需要发起一条 HTTP 请求的时候，就可以这样写:</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> address <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"https://www.baidu.com\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">val</span> response <span class=\"token operator\">=</span> HttpUtil<span class=\"token punctuation\">.</span><span class=\"token function\">sendHttpRequest</span><span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">65</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>可有看到，我们在接口中定义了两个方法</p>\n<ul>\n<li><code>onFinish(response : String)</code>  方法表示当服务器成功相应我们请求的时候调用，其中的参数代表服务器返回的数据</li>\n<li><code>onError(e : Exception)</code>  方法表示当进行网络操作出现错误时调用，其中得到参数记录着错误的详细信息</li>\n</ul>\n</li>\n<li>\n<p>修改 <code>HttpUtil</code>  中的代码，如下所示:</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> cn<span class=\"token punctuation\">.</span>wenhe9<span class=\"token punctuation\">.</span>testmenu</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>BufferedReader</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>InputStreamReader</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>Exception</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span>HttpURLConnection</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span>URL</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> kotlin<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>thread</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> *@author DuJinliang</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> *2021/9/28</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">object</span> HttpUtil <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">fun</span> <span class=\"token function\">sendHttpRequest</span><span class=\"token punctuation\">(</span>address <span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> listener <span class=\"token operator\">:</span> HttpCallbackListener<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        thread <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">var</span> connection <span class=\"token operator\">:</span> HttpURLConnection<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token keyword\">val</span> response <span class=\"token operator\">=</span> <span class=\"token function\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token keyword\">val</span> url <span class=\"token operator\">=</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                connection <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">openConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                        <span class=\"token keyword\">as</span> HttpURLConnection</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                connection<span class=\"token punctuation\">.</span>connectTimeout <span class=\"token operator\">=</span> <span class=\"token number\">8000</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                connection<span class=\"token punctuation\">.</span>readTimeout <span class=\"token operator\">=</span> <span class=\"token number\">8000</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token keyword\">val</span> input <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span>inputStream</pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token keyword\">val</span> reader <span class=\"token operator\">=</span> <span class=\"token function\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token function\">InputStreamReader</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                reader<span class=\"token punctuation\">.</span><span class=\"token function\">use</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                    reader<span class=\"token punctuation\">.</span><span class=\"token function\">forEachLine</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                        response<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                listener<span class=\"token punctuation\">.</span><span class=\"token function\">onFinish</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">:</span> Exception<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                listener<span class=\"token punctuation\">.</span><span class=\"token function\">onError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                connection<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">disconnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">66</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>这样当服务器成功响应的时候，我们就可以在 <code>onFinish()</code>  方法里对响应数据进行处理了。类似地，如果出现了异常，就可以在 <code>onError()</code>  方法里对异常情况进行处理。如此一来，我们就巧妙地利用回调机制将响应数据成功返回给调用方了。</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">fun</span> <span class=\"token function\">sendOkHttpRequest</span><span class=\"token punctuation\">(</span>address <span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> callback <span class=\"token operator\">:</span> okhttp3<span class=\"token punctuation\">.</span>Callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">val</span> client <span class=\"token operator\">=</span> <span class=\"token function\">OkHttpClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">val</span> request <span class=\"token operator\">=</span> Request<span class=\"token punctuation\">.</span><span class=\"token function\">Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    client<span class=\"token punctuation\">.</span><span class=\"token function\">newCall</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">67</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>另外，需要注意的是，不管是使用 HttpURLConnection 还是 OkHttp，最终的回调接口都还是在子线程中运行的，因此我们不可以在这里执行任何的 UI 操作，除非借助 <code>runOnUiThread()</code>  方法来进行线程转换。</p>\n</li>\n</ul>\n<h3 id=\"网络库retrofit\"><a class=\"markdownIt-Anchor\" href=\"#网络库retrofit\">#</a> 网络库 Retrofit</h3>\n<h4 id=\"retrofit的基本用法\"><a class=\"markdownIt-Anchor\" href=\"#retrofit的基本用法\">#</a> Retrofit 的基本用法</h4>\n<ul>\n<li>\n<p>Retrofit 的基本设计思想</p>\n<ul>\n<li>同一款应用程序中所发起的网络请求绝大多数指向的是同一个服务器域名，这个很好理解，因为任何公司的产品，客户端和服务器都是配套的，很难想象一个客户端一会去这个服务器获取数据，一会又要去另外一个服务器获取数据吧？</li>\n<li>另外，服务器提供的接口通常是可以根据功能来归类的，比如新增用户、修改用户数据、查询用户数据这几个接口就可以归为一类，上架新书、销售图书、查询可供销售图书这几个接口也可以归为一类。将服务器接口合理归类能够让代码结构变得更加合理，从而提高可阅读性和可维护性</li>\n<li>最后，开发者肯定更加习惯于 “调用一个借口，获取他的返回值” 这样的编码方式，但当调用的是服务器接口时，却很难想象该如何使用这样的编码方式，其实大多数人并不关心网络的具体通信细节，但是传统网络库的用法却需要编写太多网络相关的代码</li>\n<li>而 Retrofit 的用法就是基于以上几点来设计的，首先我们可以配置好一个根路径，然后在指定服务器接口地址时只需要使用相对路径即可，这样就不用每次都指定完整的 URL 地址了</li>\n<li>另外，Retrofit 允许我们对服务器接口进行匪类，将功能同属一类的服务器接口定义到同一个接口文件当中，从而让代码结构变得更加合理</li>\n<li>最后，我们也完全不用关心网络通信细节，只需要在接口文件中声明一系列的方法和返回值，然后通过注解的方式指定该方法对应哪个服务器接口， 以及需要提供哪些参数，当我们在程序中调用该方法时，并将相应的数据解析成返回值声明的类型，这就使得我们可以使用更加面向对象的思维来进行网络操作</li>\n</ul>\n</li>\n<li>\n<p>要想使用 Retrofit，我们需要在项目中添加必要的依赖库</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Groovy\"><figure class=\"iseeu highlight groovy\"><figcaption data-lang=\"groovy\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>dependencies <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    implementation <span class=\"token string\">'com.squareup.retrofit2:converter-gson:2.9.0'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    implementation <span class=\"token string\">'com.squareup.retrofit2:retrofit:2.9.0'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">68</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>接下来，我们可以根据服务器接口的功能进行归类，创建不同种类的接口文件，并在其中定义对应具体服务器接口的方法，不过由于我们本机的服务器上其实只有一个获取 JSON 数据的接口，因此这里只需要定义一个接口文件，并包含一个方法即可，新建 <code>UserService</code>  接口，代码如下所示：</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> UserService <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation builtin\">@GEt</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"get_data.json\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">fun</span> <span class=\"token function\">getUserData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> Call<span class=\"token operator\">&lt;</span>List<span class=\"token operator\">&lt;</span>User<span class=\"token operator\">></span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">69</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n<li>\n<p>可以看到，在 “Get App Data” 按钮的点击事件当中，首先使用了 <code>Retrofit.Builder</code>  来构建一个 Retrofit 对象，其中 baseUrl () 方法用于指定所有 Retrofit 请求的根路径， <code>addConverterFactory()</code>  方法用于指定 Retrofit 在解析数据时所使用的转换库，这里指定成 <code>GsonConverterFactory</code> 。注意这两个方法都是必须调用的。</p>\n</li>\n<li>\n<p>有了 Retrofit 对象之后，我们就可以调用它的 create () 方法，并传入具体 Service 接口所对应的 Class 类型，创建一个该接口的动态代理对象。如果你并不熟悉什么是动态代理也没有关系，你只需要知道有了动态代理对象之后，我们就可以随意调用接口中定义的所有方法，而 Retrofit 会自动执行具体的处理就可以了。</p>\n</li>\n<li>\n<p>对应到上述的代码当中，当调用了 AppService 的 getAppData () 方法时，会返回一个 <code>Call&lt;List&lt;App&gt;&gt;</code>  对象，这时我们再调用一下它的 <code>enqueue()</code>  方法，Retrofit 就会根据注解中配置的服务器接口地址去进行网络请求了，服务器响应的数据会回调到 enqueue () 方法中传入的 Callback 实现里面。需要注意的是，当发起请求的时候，Retrofit 会自动在内部开启子线程，当数据回调到 Callback 中之后，Retrofit 又会自动切换回主线程，整个操作过程中我们都不用考虑线程切换问题。在 Callback 的 <code>onResponse()</code>  方法中，调用 <code>response.body()</code>  方法将会得到 Retrofit 解析后的对象，也就是 List<App>类型的数据，最后遍历 List，将其中的数据打印出来即可。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>需要注意的是，和之前一样，这里也需要对网络安全进行配置才行</p>\n</li>\n</ul>\n<h4 id=\"处理复杂的接口地址类型\"><a class=\"markdownIt-Anchor\" href=\"#处理复杂的接口地址类型\">#</a> 处理复杂的接口地址类型</h4>\n<ul>\n<li>\n<p>大多数情况下，服务器不可能总是给我们提供静态类型的接口，在很多情境下，接口地址中的部分内容可能会是动态变化的，比如如下的接口地址：</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>GET http://example.com/<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>page</span><span class=\"token punctuation\">></span></span>/get_data.json</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"><div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 这个接口中，``&lt;page&gt;``代表页数，我们传入不同的页数，服务器返回的数据也会不同，这种接口地址对应到Retrofit当中应该怎么写呢？</span><br><span class=\"line\"></span><br><span class=\"line\">  - ```kotlin</span><br><span class=\"line\">    interface EamlpeService&#123;</span><br><span class=\"line\">        @GET(&quot;&#123;page&#125;/get_data.json&quot;)</span><br><span class=\"line\">        fun getData(@Path(&quot;page&quot;) page : Int) : Call&lt;Data&gt;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div></div></span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>在 <code>@GET</code>  注解指定的接口地址当中，这里使用了 <code>{page}</code>  的占位符，然后又在 <code>getData()</code>  方法中添加一个 page 参数，并使用 <code>@Path(&quot;page&quot;)</code>  注解来声明这个参数，这样当调用 <code>getData()</code>  方法发起请求时，Retrofit 就会自动将 page 参数的值替换到占位符的位置，从而组成一个合法的请求地址</p>\n</li>\n<li>\n<p>另外，很多服务器接口还有要求我们传入一系列的参数，格式如下：</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>GET http<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>example<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>get_data<span class=\"token punctuation\">.</span>json<span class=\"token operator\">?</span>u<span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span>user<span class=\"token operator\">></span>&amp;t<span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span>token<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">71</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>这里在 getData () 方法中添加了 user 和 token 这两个参数，并使用 <code>@Query</code>  注解对它们进行声明。这样当发起网络请求的时候，Retrofit 就会自动按照带参数 GET 请求的格式将这两个参数构建到请求地址当中。</p>\n</li>\n<li>\n<p>HTTP 并不是只有 GET 请求这一种类型，而是有很多种，其中比较常用的有 GET、POST、PUT、PATCH、DELETE 这几种。它们之间的分工也很明确，简单概括的话，GET 请求用于从服务器获取数据，POST 请求用于向服务器提交数据，PUT 和 PATCH 请求用于修改服务器上的数据，DELETE 请求用于删除服务器上的数据。</p>\n</li>\n<li>\n<p>而 Retrofit 对所有常用的 HTTP 请求类型都进行了支持，使用 <code>@GET、@POST、@PUT、@PATCH、@DELETE</code>  注解，就可以让 Retrofit 发出相应类型的请求了。</p>\n</li>\n<li>\n<p>比如服务器提供了如下接口地址：</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>DELETE http<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>example<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span><span class=\"token keyword\">data</span><span class=\"token operator\">/</span><span class=\"token operator\">&lt;</span>id<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">72</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>这里使用了 <code>@DELETE</code>  注解来发出 DELETE 类型的请求，并使用了 <code>@Path</code>  注解来动态指定 id，这些都很好理解。但是在返回值声明的时候，我们将 Call 的泛型指定成了 ResponseBody，这是什么意思呢？</p>\n</li>\n<li>\n<p>由于 POST、PUT 、PATCH、DELETE 这几种请求类型与 GET 请求不同，它们更多是用于操作服务器上的数据，而不是获取服务器上的数据，所以通常它们对于服务器响应的数据并不关心。这个时候就可以使用 ResponseBody，表示 Retrofit 能够接收任意类型的响应数据，并且不会对响应数据进行解析。</p>\n</li>\n<li>\n<p>那么如果我们需要向服务器提交数据该怎么写呢？比如如下的接口地址：</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>POST http<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>example<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span><span class=\"token keyword\">data</span><span class=\"token operator\">/</span>create</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"id\"</span></span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"content\"</span></span><span class=\"token operator\">:</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"The description for this data.\"</span></span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">73</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>可以看到，这里我们在 createData () 方法中声明了一个 Data 类型的参数，并给它加上了 <code>@Body</code>  注解。这样当 Retrofit 发出 POST 请求时，就会自动将 Data 对象中的数据转换成 JSON 格式的文本，并放到 HTTP 请求的 body 部分，服务器在收到请求之后只需要从 body 中将这部分数据解析出来即可。这种写法同样也可以用来给 PUT、PATCH、DELETE 类型的请求提交数据。</p>\n</li>\n<li>\n<p>最后，有些服务器接口还可能会要求我们在 HTTP 请求的 header 中指定参数，比如：</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>GET http<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>example<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>get_data<span class=\"token punctuation\">.</span>json</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>User<span class=\"token operator\">-</span>Agent<span class=\"token operator\">:</span> okhttp</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Cache<span class=\"token operator\">-</span>Control<span class=\"token operator\">:</span> max<span class=\"token operator\">-</span>age<span class=\"token operator\">=</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">74</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>但是这种写法只能进行静态 header 声明，如果想要动态指定 header 的值，则需要使用 <code>@Header</code>  注解，如下所示：</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> ExampleService <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation builtin\">@GET</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"get_data.json\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">fun</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token annotation builtin\">@Header</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"User-Agent\"</span></span><span class=\"token punctuation\">)</span> userAgent<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token annotation builtin\">@Header</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Cache-Control\"</span></span><span class=\"token punctuation\">)</span> cacheControl<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Call<span class=\"token operator\">&lt;</span>Data<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">75</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"material-design\"><a class=\"markdownIt-Anchor\" href=\"#material-design\">#</a> Material Design</h2>\n<ul>\n<li>这块笔记算了，网址<a class=\"link\"   href=\"https://weread.qq.com/web/reader/73532150723f022f73516a6kc7432af0210c74d97b01b1c\" >第一行代码 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n</ul>\n<h3 id=\"toolbar\"><a class=\"markdownIt-Anchor\" href=\"#toolbar\">#</a> Toolbar</h3>\n<ul>\n<li>\n<p>ActionBar 由于其设计的原因，被限定只能位于 Activity 的顶部，从而不能实现一些 MaterialDesign 的效果，因此官方现在已经不再建议使用 ActionBar 了</p>\n</li>\n<li>\n<p>Toolbar 的强大之处在于，它不仅继承了 ActionBar 的所有功能，而且灵活性很高，可以配合其他控件完成一些 Material Design 的效果</p>\n</li>\n<li>\n<p>首先你要知道，任何一个新建的项目，默认都是会显示 ActionBar 的，这个想必你已经见识过太多次了。那么这个 ActionBar 到底是从哪里来的呢？其实这是根据项目中指定的主题来显示的。打开 AndroidManifest.xml 文件看一下，如下所示：</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>application</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>allowBackup</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>icon</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@mipmap/ic_launcher<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@string/app_name<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>roundIcon</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@mipmap/ic_launcher_round<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>supportsRtl</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>theme</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@style/AppTheme<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    ...</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>application</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"><div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 可以看到，这里使用android:theme属性指定了一个AppTheme的主题。那么这个AppTheme又是在哪里定义的呢？打开``res/values/styles.xml``文件，代码如下所示：</span><br><span class=\"line\"></span><br><span class=\"line\">  - ```kotlin</span><br><span class=\"line\">    &lt;resources&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">        &lt;!-- Base application theme. --&gt;</span><br><span class=\"line\">        &lt;style name=&quot;AppTheme&quot; parent=&quot;Theme.AppCompat.Light.DarkActionBar&quot;&gt;</span><br><span class=\"line\">            &lt;!-- Customize your theme here. --&gt;</span><br><span class=\"line\">            &lt;item name=&quot;colorPrimary&quot;&gt;@color/colorPrimary&lt;/item&gt;</span><br><span class=\"line\">            &lt;item name=&quot;colorPrimaryDark&quot;&gt;@color/colorPrimaryDark&lt;/item&gt;</span><br><span class=\"line\">            &lt;item name=&quot;colorAccent&quot;&gt;@color/colorAccent&lt;/item&gt;</span><br><span class=\"line\">        &lt;/style&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;/resources&gt;</span><br></pre></td></tr></table></figure></div></div></span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>这里定义了一个叫 AppTheme 的主题，然后指定它的 parent 主题是 Theme.AppCompat.Light.DarkActionBar。这个 DarkActionBar 是一个深色的 ActionBar 主题，我们之前所有的项目中自带的 ActionBar 就是因为指定了这个主题才出现的。</p>\n</li>\n<li>\n<p>而现在我们准备使用 Toolbar 来替代 ActionBar，因此需要指定一个不带 ActionBar 的主题，通常有 <code>Theme.AppCompat.NoActionBar </code> 和 <code>Theme.AppCompat.Light.NoActionBar</code>  这两种主题可选。</p>\n<ul>\n<li>\n<p><code>Theme.AppCompat.NoActionBar</code>  表示深色主题，它会将界面的主体颜色设成深色，陪衬颜色设成浅色。</p>\n</li>\n<li>\n<p><code>Theme.AppCompat.Light.NoActionBar</code>  表示浅色主题，它会将界面的主体颜色设成浅色，陪衬颜色设成深色。</p>\n</li>\n<li>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>resources</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">&lt;!-- Base application theme. --></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>AppTheme<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">parent</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Theme.AppCompat.Light.NoActionBar<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">&lt;!-- Customize your theme here. --></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>item</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>colorPrimary<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>@color/colorPrimary<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>item</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>item</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>colorPrimaryDark<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>@color/colorPrimaryDark<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>item</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>item</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>colorAccent<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>@color/colorAccent<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>item</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>resources</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"><div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 观察一下AppTheme中的属性重写，这里重写了``colorPrimary``、``colorPrimaryDark``和``colorAccent``这3个属性的颜色。那么这3个属性分别代表什么位置的颜色呢？我用语言比较难描述清楚，还是通过一张图来理解一下吧，如图所示</span><br><span class=\"line\"></span><br><span class=\"line\">  - ![image-20210929184212315](http://tuchuang.wenhe9.cn/image-20210929184212315.png)</span><br><span class=\"line\"></span><br><span class=\"line\">- 除了上述3个属性之外，我们还可以通过``textColorPrimary``、``windowBackground``和``navigationBarColor``等属性控制更多位置的颜色。不过唯独``colorAccent``这个属性比较难理解，它不只是用来指定这样一个按钮的颜色，而是更多表达了一种强调的意思，比如一些控件的选中状态也会使用``colorAccent``的颜色。</span><br><span class=\"line\"></span><br><span class=\"line\">- 现在我们已经将ActionBar隐藏起来了，那么接下来看一看如何使用Toolbar来替代ActionBar。修改activity_main.xml中的代码，如下所示：</span><br><span class=\"line\"></span><br><span class=\"line\">  - ```xml</span><br><span class=\"line\">    &lt;FrameLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class=\"line\">        xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</span><br><span class=\"line\">        android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_height=&quot;match_parent&quot;&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">        &lt;androidx.appcompat.widget.Toolbar</span><br><span class=\"line\">            android:id=&quot;@+id/toolbar&quot;</span><br><span class=\"line\">            android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">            android:layout_height=&quot;?attr/actionBarSize&quot;</span><br><span class=\"line\">            android:background=&quot;@color/colorPrimary&quot;</span><br><span class=\"line\">            android:theme=&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;</span><br><span class=\"line\">            app:popupTheme=&quot;@style/ThemeOverlay.AppCompat.Light&quot; /&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;/FrameLayout&gt;</span><br></pre></td></tr></table></figure></div></div></span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>虽然这段代码不长，但是里面着实有不少技术点是需要我们仔细琢磨一下的。首先看一下第 2 行，这里使用 xmlns:app 指定了一个新的命名空间。思考一下，正是由于每个布局文件都会使用 xmlns:android 来指定一个命名空间，我们才能一直使用 android:id、android: layout_width 等写法。这里指定了 xmlns:app，也就是说现在可以使用 app:attribute 这样的写法了。但是为什么这里要指定一个 xmlns:app 的命名空间呢？这是由于许多 Material 属性是在新系统中新增的，老系统中并不存在，那么为了能够兼容老系统，我们就不能使用 android:attribute 这样的写法了，而是应该使用 app:attribute。</p>\n</li>\n<li>\n<p>接下来定义了一个 Toolbar 控件，这个控件是由 appcompat 库提供的。这里我们给 Toolbar 指定了一个 id，将它的宽度设置为 match_parent，高度设置为 actionBar 的高度，背景色设置为 colorPrimary。不过下面的部分就稍微有点难理解了，由于我们刚才在 styles.xml 中将程序的主题指定成了浅色主题，因此 Toolbar 现在也是浅色主题，那么 Toolbar 上面的各种元素就会自动使用深色系，从而和主体颜色区别开。但是之前使用 ActionBar 时文字都是白色的，现在变成黑色的会很难看。那么为了能让 Toolbar 单独使用深色主题，这里我们使用了 android:theme 属性，将 Toolbar 的主题指定成了 ThemeOverlay.AppCompat.Dark.ActionBar。但是这样指定之后又会出现新的问题，如果 Toolbar 中有菜单按钮（我们在 3.2.5 小节中学过），那么弹出的菜单项也会变成深色主题，这样就再次变得十分难看了，于是这里又使用了 app:popupTheme 属性，单独将弹出的菜单项指定成了浅色主题。</p>\n</li>\n<li>\n<p>写完了布局，接下来我们修改 MainActivity，代码如下所示：</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> MainActivity <span class=\"token operator\">:</span> <span class=\"token function\">AppCompatActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>activity_main<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">setSupportActionBar</span><span class=\"token punctuation\">(</span>toolbar<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">78</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>这里给 activity 增加了一个 android:label 属性，用于指定在 Toolbar 中显示的文字内容，如果没有指定的话，会默认使用 application 中指定的 label 内容，也就是我们的应用名称。</p>\n</li>\n<li>\n<p>不过只有一个标题的 Toolbar 看起来太单调了，我们还可以再添加一些 action 按钮来让 Toolbar 更加丰富一些。这里我提前准备了几张图片作为按钮的图标，将它们放在了 drawable-xxhdpi 目录下（资源下载方式见前言）。现在右击 res 目录→New→Directory，创建一个 menu 文件夹。然后右击 menu 文件夹→New→Menu resource file，创建一个 toolbar.xml 文件，并编写如下代码：</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>menu</span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>android</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schemas.android.com/apk/res/android<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>app</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schemas.android.com/apk/res-auto<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>item</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@+id/backup<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>icon</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@drawable/ic_backup<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Backup<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token attr-name\"><span class=\"token namespace\">app:</span>showAsAction</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>always<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>item</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@+id/delete<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>icon</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@drawable/ic_delete<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Delete<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token attr-name\"><span class=\"token namespace\">app:</span>showAsAction</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ifRoom<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>item</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@+id/settings<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>icon</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@drawable/ic_settings<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Settings<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token attr-name\"><span class=\"token namespace\">app:</span>showAsAction</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>never<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>menu</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"><div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 可以看到，我们通过&lt;item&gt;标签来定义action按钮，android:id用于指定按钮的id，android:icon用于指定按钮的图标，android:title用于指定按钮的文字。</span><br><span class=\"line\"></span><br><span class=\"line\">- 接着使用app:showAsAction来指定按钮的显示位置，这里之所以再次使用了app命名空间，同样是为了能够兼容低版本的系统。showAsAction主要有以下几种值可选：always表示永远显示在Toolbar中，如果屏幕空间不够则不显示；ifRoom表示屏幕空间足够的情况下显示在Toolbar中，不够的话就显示在菜单当中；never则表示永远显示在菜单当中。注意，Toolbar中的action按钮只会显示图标，菜单中的action按钮只会显示文字。</span><br><span class=\"line\"></span><br><span class=\"line\">  - ```kotlin</span><br><span class=\"line\">    class MainActivity : AppCompatActivity() &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        override fun onCreateOptionsMenu(menu: Menu?): Boolean &#123;</span><br><span class=\"line\">            menuInflater.inflate(R.menu.toolbar, menu)</span><br><span class=\"line\">            return true</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        override fun onOptionsItemSelected(item: MenuItem): Boolean &#123;</span><br><span class=\"line\">            when (item.itemId) &#123;</span><br><span class=\"line\">                R.id.backup -&gt; Toast.makeText(this, &quot;You clicked Backup&quot;,</span><br><span class=\"line\">                                   Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">                R.id.delete -&gt; Toast.makeText(this, &quot;You clicked Delete&quot;,</span><br><span class=\"line\">                                   Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">                R.id.settings -&gt; Toast.makeText(this, &quot;You clicked Settings&quot;,</span><br><span class=\"line\">                                     Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return true</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div></div></span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>非常简单，我们在 onCreateOptionsMenu () 方法中加载了 toolbar.xml 这个菜单文件，然后在 onOptionsItemSelected () 方法中处理各个按钮的点击事件。现在重新运行一下程序，效果如图所示</p>\n<ul>\n<li><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20210929190303212.png\"\n                      alt=\"image-20210929190303212\"\n                ></li>\n</ul>\n</li>\n<li>\n<p>可以看到，Toolbar 上现在显示了两个 action 按钮，这是因为 Backup 按钮指定的显示位置是 always，Delete 按钮指定的显示位置是 ifRoom，而现在屏幕空间很充足，因此两个按钮都会显示在 Toolbar 中。另外一个 Settings 按钮由于指定的显示位置是 never，所以不会显示在 Toolbar 中，点击一下最右边的菜单按钮来展开菜单项，你就能找到 Settings 按钮了。另外，这些 action 按钮都是可以响应点击事件的</p>\n</li>\n</ul>\n<h3 id=\"drawerlayout\"><a class=\"markdownIt-Anchor\" href=\"#drawerlayout\">#</a> DrawerLayout</h3>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">androidx.drawerlayout.widget.DrawerLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/drawerLayout&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;match_parent&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">FrameLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;match_parent&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">androidx.appcompat.widget.Toolbar</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/toolbar&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;?attr/actionBarSize&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:background</span>=<span class=\"string\">&quot;@color/colorPrimary&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:theme</span>=<span class=\"string\">&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">app:popupTheme</span>=<span class=\"string\">&quot;@style/ThemeOverlay.AppCompat.Light&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">FrameLayout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">&quot;start&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:background</span>=<span class=\"string\">&quot;#FFF&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:text</span>=<span class=\"string\">&quot;This is menu&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:textSize</span>=<span class=\"string\">&quot;30sp&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">androidx.drawerlayout.widget.DrawerLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> : <span class=\"type\">AppCompatActivity</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        setContentView(R.layout.activity_main)</span><br><span class=\"line\">        setSupportActionBar(toolbar)</span><br><span class=\"line\">        supportActionBar?.let &#123;</span><br><span class=\"line\">            it.setDisplayHomeAsUpEnabled(<span class=\"literal\">true</span>)</span><br><span class=\"line\">            it.setHomeAsUpIndicator(R.drawable.ic_menu)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onOptionsItemSelected</span><span class=\"params\">(item: <span class=\"type\">MenuItem</span>)</span></span>: <span class=\"built_in\">Boolean</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">when</span> (item.itemId) &#123;</span><br><span class=\"line\">            android.R.id.home -&gt; drawerLayout.openDrawer(GravityCompat.START)</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"navigationview\"><a class=\"markdownIt-Anchor\" href=\"#navigationview\">#</a> NavigationView</h3>\n<div class=\"highlight-container\" data-rel=\"Groovy\"><figure class=\"iseeu highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    implementation <span class=\"string\">&#x27;com.google.android.material:material:1.1.0&#x27;</span></span><br><span class=\"line\">    implementation <span class=\"string\">&#x27;de.hdodenhof:circleimageview:3.0.1&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">menu</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">group</span> <span class=\"attr\">android:checkableBehavior</span>=<span class=\"string\">&quot;single&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/navCall&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:icon</span>=<span class=\"string\">&quot;@drawable/nav_call&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:title</span>=<span class=\"string\">&quot;Call&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/navFriends&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:icon</span>=<span class=\"string\">&quot;@drawable/nav_friends&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:title</span>=<span class=\"string\">&quot;Friends&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/navLocation&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:icon</span>=<span class=\"string\">&quot;@drawable/nav_location&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:title</span>=<span class=\"string\">&quot;Location&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/navMail&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:icon</span>=<span class=\"string\">&quot;@drawable/nav_mail&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:title</span>=<span class=\"string\">&quot;Mail&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/navTask&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:icon</span>=<span class=\"string\">&quot;@drawable/nav_task&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:title</span>=<span class=\"string\">&quot;Tasks&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">group</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">menu</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;180dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:padding</span>=<span class=\"string\">&quot;10dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:background</span>=<span class=\"string\">&quot;@color/colorPrimary&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">de.hdodenhof.circleimageview.CircleImageView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/iconImage&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;70dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;70dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:src</span>=<span class=\"string\">&quot;@drawable/nav_icon&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_centerInParent</span>=<span class=\"string\">&quot;true&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/mailText&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_alignParentBottom</span>=<span class=\"string\">&quot;true&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:text</span>=<span class=\"string\">&quot;tonygreendev@gmail.com&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:textColor</span>=<span class=\"string\">&quot;#FFF&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:textSize</span>=<span class=\"string\">&quot;14sp&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/userText&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_above</span>=<span class=\"string\">&quot;@id/mailText&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:text</span>=<span class=\"string\">&quot;Tony Green&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:textColor</span>=<span class=\"string\">&quot;#FFF&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:textSize</span>=<span class=\"string\">&quot;14sp&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">androidx.drawerlayout.widget.DrawerLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/drawerLayout&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;match_parent&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">FrameLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;match_parent&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">androidx.appcompat.widget.Toolbar</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/toolbar&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;?attr/actionBarSize&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:background</span>=<span class=\"string\">&quot;@color/colorPrimary&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:theme</span>=<span class=\"string\">&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">app:popupTheme</span>=<span class=\"string\">&quot;@style/ThemeOverlay.AppCompat.Light&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">FrameLayout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">com.google.android.material.navigation.NavigationView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/navView&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">&quot;start&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:menu</span>=<span class=\"string\">&quot;@menu/nav_menu&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:headerLayout</span>=<span class=\"string\">&quot;@layout/nav_header&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">androidx.drawerlayout.widget.DrawerLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> : <span class=\"type\">AppCompatActivity</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        setContentView(R.layout.activity_main)</span><br><span class=\"line\">        setSupportActionBar(toolbar)</span><br><span class=\"line\">        supportActionBar?.let &#123;</span><br><span class=\"line\">            it.setDisplayHomeAsUpEnabled(<span class=\"literal\">true</span>)</span><br><span class=\"line\">            it.setHomeAsUpIndicator(R.drawable.ic_menu)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        navView.setCheckedItem(R.id.navCall)</span><br><span class=\"line\">        navView.setNavigationItemSelectedListener &#123;</span><br><span class=\"line\">            drawerLayout.closeDrawers()</span><br><span class=\"line\">            <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"floatingactionbutton\"><a class=\"markdownIt-Anchor\" href=\"#floatingactionbutton\">#</a> FloatingActionButton</h3>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">androidx.drawerlayout.widget.DrawerLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/drawerLayout&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;match_parent&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">FrameLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;match_parent&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">androidx.appcompat.widget.Toolbar</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/toolbar&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;?attr/actionBarSize&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:background</span>=<span class=\"string\">&quot;@color/colorPrimary&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:theme</span>=<span class=\"string\">&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">app:popupTheme</span>=<span class=\"string\">&quot;@style/ThemeOverlay.AppCompat.Light&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">com.google.android.material.floatingactionbutton.FloatingActionButton</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/fab&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">&quot;bottom|end&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">&quot;16dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:src</span>=<span class=\"string\">&quot;@drawable/ic_done&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">FrameLayout</span>&gt;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">androidx.drawerlayout.widget.DrawerLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">com.google.android.material.floatingactionbutton.FloatingActionButton</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/fab&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">&quot;bottom|end&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">&quot;16dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:src</span>=<span class=\"string\">&quot;@drawable/ic_done&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">app:elevation</span>=<span class=\"string\">&quot;8dp&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> : <span class=\"type\">AppCompatActivity</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        setContentView(R.layout.activity_main)</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        fab.setOnClickListener &#123;</span><br><span class=\"line\">            Toast.makeText(<span class=\"keyword\">this</span>, <span class=\"string\">&quot;FAB clicked&quot;</span>, Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"snackbar\"><a class=\"markdownIt-Anchor\" href=\"#snackbar\">#</a> Snackbar</h3>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> : <span class=\"type\">AppCompatActivity</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        setContentView(R.layout.activity_main)</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        fab.setOnClickListener &#123; view -&gt;</span><br><span class=\"line\">            Snackbar.make(view, <span class=\"string\">&quot;Data deleted&quot;</span>, Snackbar.LENGTH_SHORT)</span><br><span class=\"line\">                .setAction(<span class=\"string\">&quot;Undo&quot;</span>) &#123;</span><br><span class=\"line\">                    Toast.makeText(<span class=\"keyword\">this</span>, <span class=\"string\">&quot;Data restored&quot;</span>, Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                .show()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"coordinatorlayout\"><a class=\"markdownIt-Anchor\" href=\"#coordinatorlayout\">#</a> CoordinatorLayout</h3>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">androidx.drawerlayout.widget.DrawerLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/drawerLayout&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;match_parent&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">androidx.coordinatorlayout.widget.CoordinatorLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;match_parent&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">androidx.appcompat.widget.Toolbar</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/toolbar&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;?attr/actionBarSize&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:background</span>=<span class=\"string\">&quot;@color/colorPrimary&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:theme</span>=<span class=\"string\">&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">app:popupTheme</span>=<span class=\"string\">&quot;@style/ThemeOverlay.AppCompat.Light&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">com.google.android.material.floatingactionbutton.FloatingActionButton</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/fab&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">&quot;bottom|end&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">&quot;16dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:src</span>=<span class=\"string\">&quot;@drawable/ic_done&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">androidx.coordinatorlayout.widget.CoordinatorLayout</span>&gt;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">androidx.drawerlayout.widget.DrawerLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n<h3 id=\"卡片式布局\"><a class=\"markdownIt-Anchor\" href=\"#卡片式布局\">#</a> 卡片式布局</h3>\n<h4 id=\"materialcardview\"><a class=\"markdownIt-Anchor\" href=\"#materialcardview\">#</a> MaterialCardView</h4>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">com.google.android.material.card.MaterialCardView</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">app:cardCornerRadius</span>=<span class=\"string\">&quot;4dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">app:elevation</span>=<span class=\"string\">&quot;5dp&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/infoText&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">com.google.android.material.card.MaterialCardView</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n<h4 id=\"appbarlayout\"><a class=\"markdownIt-Anchor\" href=\"#appbarlayout\">#</a> AppBarLayout</h4>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">androidx.drawerlayout.widget.DrawerLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/drawerLayout&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;match_parent&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">androidx.coordinatorlayout.widget.CoordinatorLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;match_parent&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">com.google.android.material.appbar.AppBarLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">androidx.appcompat.widget.Toolbar</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/toolbar&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;?attr/actionBarSize&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:background</span>=<span class=\"string\">&quot;@color/colorPrimary&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:theme</span>=<span class=\"string\">&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:popupTheme</span>=<span class=\"string\">&quot;@style/ThemeOverlay.AppCompat.Light&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:layout_scrollFlags</span>=<span class=\"string\">&quot;scroll|enterAlways|snap&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">com.google.android.material.appbar.AppBarLayout</span>&gt;</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">androidx.coordinatorlayout.widget.CoordinatorLayout</span>&gt;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">androidx.drawerlayout.widget.DrawerLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n<h3 id=\"下拉刷新\"><a class=\"markdownIt-Anchor\" href=\"#下拉刷新\">#</a> 下拉刷新</h3>\n<h4 id=\"swiperrefreshlayout\"><a class=\"markdownIt-Anchor\" href=\"#swiperrefreshlayout\">#</a> SwiperRefreshLayout</h4>\n<div class=\"highlight-container\" data-rel=\"Groovy\"><figure class=\"iseeu highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">implementation?<span class=\"string\">&quot;androidx.swiperefreshlayout:swiperefreshlayout:1.0.0&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">androidx.drawerlayout.widget.DrawerLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/drawerLayout&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;match_parent&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">androidx.coordinatorlayout.widget.CoordinatorLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;match_parent&quot;</span>&gt;</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">androidx.swiperefreshlayout.widget.SwipeRefreshLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/swipeRefresh&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">app:layout_behavior</span>=<span class=\"string\">&quot;@string/appbar_scrolling_view_behavior&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">androidx.recyclerview.widget.RecyclerView</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/recyclerView&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:layout_behavior</span>=<span class=\"string\">&quot;@string/appbar_scrolling_view_behavior&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">androidx.swiperefreshlayout.widget.SwipeRefreshLayout</span>&gt;</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">androidx.coordinatorlayout.widget.CoordinatorLayout</span>&gt;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">androidx.drawerlayout.widget.DrawerLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MainActivity</span> : <span class=\"type\">AppCompatActivity</span>() &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        setContentView(R.layout.activity_main)</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        swipeRefresh.setColorSchemeResources(R.color.colorPrimary)</span><br><span class=\"line\">        swipeRefresh.setOnRefreshListener &#123;</span><br><span class=\"line\">            refreshFruits(adapter)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">refreshFruits</span><span class=\"params\">(adapter: <span class=\"type\">FruitAdapter</span>)</span></span> &#123;</span><br><span class=\"line\">        thread &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">2000</span>)</span><br><span class=\"line\">            runOnUiThread &#123;</span><br><span class=\"line\">                initFruits()</span><br><span class=\"line\">                adapter.notifyDataSetChanged()</span><br><span class=\"line\">                swipeRefresh.isRefreshing = <span class=\"literal\">false</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"可折叠式标题栏\"><a class=\"markdownIt-Anchor\" href=\"#可折叠式标题栏\">#</a> 可折叠式标题栏</h3>\n<h4 id=\"collapsingtoolbarlayout\"><a class=\"markdownIt-Anchor\" href=\"#collapsingtoolbarlayout\">#</a> CollapsingToolbarLayout</h4>\n<h4 id=\"充分利用系统状态栏空间\"><a class=\"markdownIt-Anchor\" href=\"#充分利用系统状态栏空间\">#</a> 充分利用系统状态栏空间</h4>\n<h2 id=\"jetpack\"><a class=\"markdownIt-Anchor\" href=\"#jetpack\">#</a> Jetpack</h2>\n<ul>\n<li>Jetpack 是一个开发组件工具集，它的主要目的是帮助我们编写出更加简洁的代码，并简化我们的开发过程。Jetpack 中的组件有一个特点，它们大部分不依赖于任何 Android 系统版本，这意味着这些组件通常是定义在 AndroidX 库当中的，并且拥有非常好的向下兼容性。</li>\n</ul>\n<h3 id=\"viewmodel\"><a class=\"markdownIt-Anchor\" href=\"#viewmodel\">#</a> ViewModel</h3>\n<ul>\n<li>\n<p>ViewModel 应该可以算是 Jetpack 中最重要的组件之一了。其实 Android 平台上之所以会出现诸如 MVP、MVVM 之类的项目架构，就是因为在传统的开发模式下，Activity 的任务实在是太重了，既要负责逻辑处理，又要控制 UI 展示，甚至还得处理网络回调，等等。在一个小型项目中这样写或许没有什么问题，但是如果在大型项目中仍然使用这种写法的话，那么这个项目将会变得非常臃肿并且难以维护，因为没有任何架构上的划分。</p>\n</li>\n<li>\n<p>而 ViewModel 的一个重要作用就是可以帮助 Activity 分担一部分工作，它是专门用于存放与界面相关的数据的。也就是说，只要是界面上能看得到的数据，它的相关变量都应该存放在 ViewModel 中，而不是 Activity 中，这样可以在一定程度上减少 Activity 中的逻辑。</p>\n</li>\n<li>\n<p>另外，ViewModel 还有一个非常重要的特性。我们都知道，当手机发生横竖屏旋转的时候，Activity 会被重新创建，同时存放在 Activity 中的数据也会丢失。而 ViewModel 的生命周期和 Activity 不同，它可以保证在手机屏幕发生旋转的时候不会被重新创建，只有当 Activity 退出的时候才会跟着 Activity 一起销毁。因此，将与界面相关的变量存放在 ViewModel 当中，这样即使旋转手机屏幕，界面上显示的数据也不会丢失。ViewModel 的生命周期如图所示</p>\n<ul>\n<li><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20210929195306031.png\"\n                      alt=\"image-20210929195306031\"\n                ></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"viewmodel的基本用法\"><a class=\"markdownIt-Anchor\" href=\"#viewmodel的基本用法\">#</a> ViewModel 的基本用法</h4>\n<ul>\n<li>\n<p>由于 Jetpack 中的组件通常是以 AndroidX 库的形式发布的，因此一些常用的 Jetpack 组件会在创建 Android 项目时自动被包含进去。不过如果我们想要使用 ViewModel 组件，还需要在 app/build.gradle 文件中添加如下依赖：</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Groovy\"><figure class=\"iseeu highlight groovy\"><figcaption data-lang=\"groovy\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>dependencies <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    implementation <span class=\"token interpolation-string\"><span class=\"token string\">\"androidx.lifecycle:lifecycle-extensions:2.2.0\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">97</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>在 <code>MainActivity</code>  中的使用</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> cn<span class=\"token punctuation\">.</span>wenhe9<span class=\"token punctuation\">.</span>testmenu</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> androidx<span class=\"token punctuation\">.</span>appcompat<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span>AppCompatActivity</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> android<span class=\"token punctuation\">.</span>os<span class=\"token punctuation\">.</span>Bundle</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> androidx<span class=\"token punctuation\">.</span>lifecycle<span class=\"token punctuation\">.</span>ViewModelProvider</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> cn<span class=\"token punctuation\">.</span>wenhe9<span class=\"token punctuation\">.</span>testmenu<span class=\"token punctuation\">.</span>databinding<span class=\"token punctuation\">.</span>ActivityTestViewModelBinding</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> TestViewModel <span class=\"token operator\">:</span> <span class=\"token function\">AppCompatActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> viewModel<span class=\"token operator\">:</span> MainViewModel</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> binding <span class=\"token operator\">:</span> ActivityTestViewModelBinding</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        binding <span class=\"token operator\">=</span> ActivityTestViewModelBinding<span class=\"token punctuation\">.</span><span class=\"token function\">inflate</span><span class=\"token punctuation\">(</span>layoutInflater<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span>binding<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        viewModel <span class=\"token operator\">=</span>  <span class=\"token function\">ViewModelProvider</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>MainViewModel<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        binding<span class=\"token punctuation\">.</span>testViewModel<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            viewModel<span class=\"token punctuation\">.</span>counter<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token function\">refreshCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token function\">refreshCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">refreshCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        binding<span class=\"token punctuation\">.</span>infoText<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> viewModel<span class=\"token punctuation\">.</span>counter<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">98</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>之所以这样，是因为 <code>ViewModel</code>  有其独立的生命周期，并且其生命周期要长于 Activity，如果我们在 <code>onCreate()</code>  方法中创建爱你 ViewModel 的实例，那么每次 <code>onCreate()</code>  方法执行的时候，ViewModel 都会创建一个新的实例，这样当手机屏幕发生旋转的时候，就无法保留其中的的数据了</p>\n</li>\n</ul>\n<h4 id=\"向viewmodel传递参数\"><a class=\"markdownIt-Anchor\" href=\"#向viewmodel传递参数\">#</a> 向 ViewModel 传递参数</h4>\n<ul>\n<li>\n<p>上一小节中创建的 MainViewModel 的构造函数中没有任何参数，但是思考一下，如果我们确实需要通过构造函数来传递一些参数，应该怎么办呢？由于所有 ViewModel 的实例都是通过 ViewModelProvider 来获取的，因此我们没有任何地方可以向 ViewModel 的构造函数中传递参数。</p>\n</li>\n<li>\n<p>当然，这个问题也不难解决，只需要借助 ViewModelProvider.Factory 就可以实现了</p>\n</li>\n<li>\n<p>现在的计数器虽然在屏幕旋转的时候不会丢失数据，但是如果退出程序之后再重新打开，那么之前的计数就会被清零了。接下来我们就对这一功能进行升级，保证即使在退出程序后又重新打开的情况下，数据仍然不会丢失。</p>\n</li>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> cn<span class=\"token punctuation\">.</span>wenhe9<span class=\"token punctuation\">.</span>testmenu</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> androidx<span class=\"token punctuation\">.</span>lifecycle<span class=\"token punctuation\">.</span>ViewModel</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *@author DuJinliang</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *2021/9/29</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token function\">MainViewModel</span><span class=\"token punctuation\">(</span>countReserved <span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">ViewModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">var</span> counter <span class=\"token operator\">=</span> countReserved</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">99</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> cn<span class=\"token punctuation\">.</span>wenhe9<span class=\"token punctuation\">.</span>testmenu</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> androidx<span class=\"token punctuation\">.</span>lifecycle<span class=\"token punctuation\">.</span>ViewModel</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> androidx<span class=\"token punctuation\">.</span>lifecycle<span class=\"token punctuation\">.</span>ViewModelProvider</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *@author DuJinliang</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *2021/9/29</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token function\">MainViewModelFactory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> countReserved <span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> ViewModelProvider<span class=\"token punctuation\">.</span><span class=\"token function\">Factory</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>T <span class=\"token operator\">:</span> ViewModel<span class=\"token operator\">?</span><span class=\"token operator\">></span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>modelClass<span class=\"token operator\">:</span> Class<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> T <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">MainViewModel</span><span class=\"token punctuation\">(</span>countReserved<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> T</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">100</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token operator\">-</span> 在<span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>方法中，我们首先获取了SharedPreferences的实例，然后读取之前保存的计数值，如果没有读到的话，就使用<span class=\"token number\">0</span>作为默认值。接下来在ViewModelProvider中，额外传入了一个MainViewModelFactory参数，这里将读取到的计数值传给了MainViewModelFactory的构造函数。注意，这一步是非常重要的，只有用这种写法才能将计数值最终传递给MainViewModel的构造函数。</pre></td></tr></table></figure></div></li>\n</ul>\n<h3 id=\"lifecycles\"><a class=\"markdownIt-Anchor\" href=\"#lifecycles\">#</a> LifeCycles</h3>\n<ul>\n<li>\n<p>在编写 Android 应用程序的时候，可能会经常遇到需要感知 Activity 生命周期的情况。比如说，某个界面中发起了一条网络请求，但是当请求得到响应的时候，界面或许已经关闭了，这个时候就不应该继续对响应的结果进行处理。因此，我们需要能够时刻感知到 Activity 的生命周期，以便在适当的时候进行相应的逻辑控制。</p>\n</li>\n<li>\n<p>问题在于，在一个 Activity 中去感知它的生命周期非常简单，而如果要在一个非 Activity 的类中去感知 Activity 的生命周期，应该怎么办呢？</p>\n</li>\n<li>\n<p>而 Lifecycles 组件就是为了解决这个问题而出现的，它可以让任何一个类都能轻松感知到 Activity 的生命周期，同时又不需要在 Activity 中编写大量的逻辑处理。</p>\n</li>\n<li>\n<p>那么下面我们就通过具体的例子来学习 Lifecycles 组件的用法。新建一个 MyObserver 类，并让它实现 LifecycleObserver 接口，代码如下所示：</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> MyObserver <span class=\"token operator\">:</span> LifecycleObserver <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">101</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>可以看到，我们在方法上使用了 @OnLifecycleEvent 注解，并传入了一种生命周期事件。生命周期事件的类型一共有 7 种： <code>ON_CREATE</code> 、 <code>ON_START</code> 、 <code>ON_RESUME</code> 、 <code>ON_PAUSE</code> 、 <code>ON_STOP</code>  和 <code>ON_DESTROY</code>  分别匹配 Activity 中相应的生命周期回调；另外还有一种 <code>ON_ANY</code>  类型，表示可以匹配 Activity 的任何生命周期回调。</p>\n</li>\n<li>\n<p>因此，上述代码中的 activityStart () 和 activityStop () 方法就应该分别在 Activity 的 onStart () 和 onStop () 触发的时候执行。</p>\n</li>\n<li>\n<p>但是代码写到这里还是无法正常工作的，因为当 Activity 的生命周期发生变化的时候并没有人去通知 MyObserver，而我们又不想像刚才一样在 Activity 中去一个个手动通知。</p>\n</li>\n<li>\n<p>这个时候就得借助 <code>LifecycleOwner</code>  这个好帮手了，它可以使用如下的语法结构让 MyObserver 得到通知：</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>lifecyclerOwner<span class=\"token punctuation\">.</span>lifecycle<span class=\"token punctuation\">.</span><span class=\"token function\">addObserver</span><span class=\"token punctuation\">(</span><span class=\"token function\">MyObserver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">102</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>这些就是 Lifecycles 组件最常见的用法了。不过目前 MyObserver 虽然能够感知到 Activity 的生命周期发生了变化，却没有办法主动获知当前的生命周期状态。要解决这个问题也不难，只需要在 MyObserver 的构造函数中将 Lifecycle 对象传进来即可，如下所示</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token function\">MyObserver</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> lifecycle<span class=\"token operator\">:</span> Lifecycle<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> LifecycleObserver <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">103</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>这里我们将 counter 变量修改成了一个 <code>MutableLiveData</code>  对象，并指定它的泛型为 Int，表示它包含的是整型数据。 <code>MutableLiveData</code>  是一种可变的 LiveData，它的用法很简单，主要有 3 种读写数据的方法，分别是 <code>getValue()</code> 、 <code>setValue()</code>  和 <code>postValue()</code>  方法。</p>\n<ul>\n<li>``getValue ()` 方法用于获取 LiveData 中包含的数据；</li>\n<li><code>setValue()</code>  方法用于给 LiveData 设置数据，但是只能在主线程中调用；</li>\n<li><code>postValue()</code>  方法用于在非主线程中给 LiveData 设置数据。</li>\n<li>而上述代码其实就是调用 <code>getValue()</code>  和 <code>setValue()</code>  方法对应的语法糖写法。</li>\n</ul>\n</li>\n<li>\n<p>可以看到，这里在 init 结构体中给 counter 设置数据，这样之前保存的计数值就可以在初始化的时候得到恢复。接下来我们新增了 plusOne () 和 clear () 这两个方法，分别用于给计数加 1 以及将计数清零。plusOne () 方法中的逻辑是先获取 counter 中包含的数据，然后给它加 1，再重新设置到 counter 当中。注意调用 LiveData 的 getValue () 方法所获得的数据是可能为空的，因此这里使用了一个？: 操作符，当获取到的数据为空时，就用 0 来作为默认计数。</p>\n</li>\n<li>\n<p>这样我们就借助 LiveData 将 MainViewModel 的写法改造完了，接下来开始改造 MainActivity，代码如下所示：</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> cn<span class=\"token punctuation\">.</span>wenhe9<span class=\"token punctuation\">.</span>testmenu</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> android<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span>Context</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> android<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span>SharedPreferences</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> androidx<span class=\"token punctuation\">.</span>appcompat<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span>AppCompatActivity</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> android<span class=\"token punctuation\">.</span>os<span class=\"token punctuation\">.</span>Bundle</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> androidx<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span>edit</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> androidx<span class=\"token punctuation\">.</span>lifecycle<span class=\"token punctuation\">.</span>Observer</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> androidx<span class=\"token punctuation\">.</span>lifecycle<span class=\"token punctuation\">.</span>ViewModelProvider</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> cn<span class=\"token punctuation\">.</span>wenhe9<span class=\"token punctuation\">.</span>testmenu<span class=\"token punctuation\">.</span>databinding<span class=\"token punctuation\">.</span>ActivityTestViewModelBinding</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">class</span> TestViewModel <span class=\"token operator\">:</span> <span class=\"token function\">AppCompatActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> viewModel<span class=\"token operator\">:</span> MainViewModel</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> binding <span class=\"token operator\">:</span> ActivityTestViewModelBinding</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> sp <span class=\"token operator\">:</span> SharedPreferences</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        binding <span class=\"token operator\">=</span> ActivityTestViewModelBinding<span class=\"token punctuation\">.</span><span class=\"token function\">inflate</span><span class=\"token punctuation\">(</span>layoutInflater<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span>binding<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        sp <span class=\"token operator\">=</span> <span class=\"token function\">getPreferences</span><span class=\"token punctuation\">(</span>Context<span class=\"token punctuation\">.</span>MODE_PRIVATE<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">val</span> contReserved <span class=\"token operator\">=</span> sp<span class=\"token punctuation\">.</span><span class=\"token function\">getInt</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"count\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        viewModel <span class=\"token operator\">=</span>  <span class=\"token function\">MainViewModelFactory</span><span class=\"token punctuation\">(</span>contReserved<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>MainViewModel<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        viewModel<span class=\"token punctuation\">.</span>counter<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> Observer<span class=\"token punctuation\">&#123;</span> count <span class=\"token operator\">-></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            binding<span class=\"token punctuation\">.</span>infoText<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> count<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        binding<span class=\"token punctuation\">.</span>testViewModel<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            viewModel<span class=\"token punctuation\">.</span><span class=\"token function\">plusOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onPause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onPause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        sp<span class=\"token punctuation\">.</span><span class=\"token function\">edit</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token function\">putInt</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"count\"</span></span><span class=\"token punctuation\">,</span> viewModel<span class=\"token punctuation\">.</span>counter<span class=\"token punctuation\">.</span>value<span class=\"token operator\">?:</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">104</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>然后就可以使用如下语法结构的 observe () 方法了：</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>viewModel<span class=\"token punctuation\">.</span>counter<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> count <span class=\"token operator\">-></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    infoText<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> count<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">105</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>可以看到，这里先将原来的 counter 变量改名为 <code>_counter</code>  变量，并给它加上 private 修饰符，这样 <code>_counter</code>  变量对于外部就是不可见的了。然后我们又新定义了一个 counter 变量，将它的类型声明为不可变的 LiveData，并在它的 get () 属性方法中返回 <code>_counter</code>  变量。</p>\n</li>\n<li>\n<p>这样，当外部调用 counter 变量时，实际上获得的就是 <code>_counter</code>  的实例，但是无法给 counter 设置数据，从而保证了 ViewModel 的数据封装性</p>\n</li>\n</ul>\n<h4 id=\"map和switchmap\"><a class=\"markdownIt-Anchor\" href=\"#map和switchmap\">#</a> map 和 switchMap</h4>\n<ul>\n<li>\n<p>LiveData 的基本用法虽说可以满足大部分的开发需求，但是当项目变得复杂之后，可能会出现一些更加特殊的需求。LiveData 为了能够应对各种不同的需求场景，提供了两种转换方法： <code>map()</code>  和 <code>switchMap()</code>  方法</p>\n</li>\n<li>\n<p>先来看 map () 方法，这个方法的作用是将实际包含数据的 LiveData 和仅用于观察数据的 LiveData 进行转换。那么什么情况下会用到这个方法呢？下面我来举一个例子。</p>\n</li>\n<li>\n<p>比如说有一个 User 类，User 中包含用户的姓名和年龄，定义如下：</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">data</span> <span class=\"token keyword\">class</span> <span class=\"token function\">User</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> firstName<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token keyword\">var</span> lastName<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token keyword\">var</span> age<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">106</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>到目前为止，这和我们在上一小节中学习的内容并没有什么区别。可是如果 MainActivity 中明确只会显示用户的姓名，而完全不关心用户的年龄，那么这个时候还将整个 User 类型的 LiveData 暴露给外部，就显得不那么合适了。</p>\n</li>\n<li>\n<p>而 map () 方法就是专门用于解决这种问题的，它可以将 User 类型的 LiveData 自由地转型成任意其他类型的 LiveData，下面我们来看一下具体的用法：</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token function\">MainViewModel</span><span class=\"token punctuation\">(</span>countReserved<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">ViewModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> userLiveData <span class=\"token operator\">=</span> MutableLiveData<span class=\"token operator\">&lt;</span>User<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">val</span> userName<span class=\"token operator\">:</span> LiveData<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> <span class=\"token operator\">=</span> Transformations<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>userLiveData<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> user <span class=\"token operator\">-></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token string-literal singleline\"><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token expression\">user<span class=\"token punctuation\">.</span>firstName</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token expression\">user<span class=\"token punctuation\">.</span>lastName</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">107</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>这里我们在 Repository 类中添加了一个 <code>getUser()</code>  方法，这个方法接收一个 userId 参数，按照正常的编码逻辑，我们应该传入的 userId 参数去服务器请求或者到数据库中查找相应的 User 对象，但是这里只是模拟实例，因此每次将传入的 userId 当做用户名来创建一个新的 User 对象即可</p>\n</li>\n<li>\n<p>需要注意的是， <code>getUser()</code>  方法返回的是一个包含 User 数据的 LiveData 对象，而且每次调用 <code>getUser()</code>  方法都会返回一个新的 LiveData 实例</p>\n</li>\n<li>\n<p>然后我们在 MainViewModel 中也定义一个 <code>getUser()</code>  方法，并且让他调用 Repository 的 <code>getUser()</code>  方法来获取 LiveData 对象</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token function\">MainViewModel</span><span class=\"token punctuation\">(</span>countReserved <span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">ViewModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">fun</span> <span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span>userId <span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> LiveData<span class=\"token operator\">&lt;</span>User<span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> Repositroy<span class=\"token punctuation\">.</span><span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">108</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>请注意，这么做是完全错误的，因为每次调用 <code>getUser()</code>  方法返回的都是一个新的 LiveData 实例，而上述写法会一直观察老的 LiveData 实例，从而根本无法观察到数据的变化，你会发现这种情况下的 LiveData 是不可观察的</p>\n</li>\n<li>\n<p>这个时候 <code>switchMap()</code>  方法就可以派上用场了，正如前面所说，他的使用场景非常固定：如果 ViewModel 中的某个 LiveData 对象是调用另外的方法获取的，那么我们就可以借助 <code>switchMap</code>  方法将这个 LiveData 对象转换成另外一个可观察的 LiveData</p>\n</li>\n<li>\n<p>修改 MainViewModel 中的代码，如下所示：</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token function\">MainViewModel</span><span class=\"token punctuation\">(</span>countReserved <span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">ViewModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> userIdLiveData <span class=\"token operator\">=</span> MutableLiveData<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">val</span> user<span class=\"token operator\">:</span> LiveData<span class=\"token operator\">&lt;</span>User<span class=\"token operator\">></span> <span class=\"token operator\">=</span> Transformations<span class=\"token punctuation\">.</span><span class=\"token function\">switchMap</span><span class=\"token punctuation\">(</span>userIdLiveData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> userId <span class=\"token operator\">-></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>               Repositroy<span class=\"token punctuation\">.</span><span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span>                   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">fun</span> <span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span>userId <span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        userIdLiveData<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> userId</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">109</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>具体的用法就是这样了，我们在 “Get User” 按钮的点击事件中使用随机函数生成了一个 userId，然后调用 MainViewModel 的 <code>getUser()</code>  方法来获取用户数据，但是这个方法现在不会有任何返回值了。等数据获取完成之后，可观察 LiveData 对象的 observe () 方法将会得到通知，我们在这里将获取的用户名显示到界面上。</p>\n</li>\n<li>\n<p>最后再介绍一个我当初学习 switchMap () 方法时产生疑惑的地方。在刚才的例子当中，我们调用 MainViewModel 的 getUser () 方法时传入了一个 userId 参数，为了能够观察这个参数的数据变化，又构建了一个 userIdLiveData，然后在 switchMap () 方法中再去观察这个 LiveData 对象就可以了。但是 ViewModel 中某个获取数据的方法有可能是没有参数的，这个时候代码应该怎么写呢？</p>\n</li>\n<li>\n<p>其实这个问题并没有想象中复杂，写法基本上和原来是相同的，只是在没有可观察数据的情况下，我们需要创建一个空的 LiveData 对象，示例写法如下：</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> MyViewModel <span class=\"token operator\">:</span> <span class=\"token function\">ViewModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> refreshLiveData <span class=\"token operator\">=</span> MutableLiveData<span class=\"token operator\">&lt;</span>Any<span class=\"token operator\">?</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">val</span> refreshResult <span class=\"token operator\">=</span> Transformations<span class=\"token punctuation\">.</span><span class=\"token function\">switchMap</span><span class=\"token punctuation\">(</span>refreshLiveData<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        Repository<span class=\"token punctuation\">.</span><span class=\"token function\">refresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 假设 Repository 中已经定义了 refresh () 方法</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">fun</span> <span class=\"token function\">refresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        refreshLiveData<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> refreshLiveData<span class=\"token punctuation\">.</span>value</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">110</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>这里新增了一个 <code>kotlin-kapt</code>  插件，同时在 <code>dependencies</code>  闭包中添加了两个 Room 的依赖库，由于 Room 会根据我们在项目中声明的注解来动态生成代码，因此这里一定要使用 kapt 引入 Romm 的编译时注解库，而用编译时注解功能则一定一定要先添加 kotlin-kapt 插件，注意，kapt 只能在 Kotlin 项目中使用，如果是 Java 项目的话，使用 <code>anitationProcessor</code>  即可</p>\n</li>\n<li>\n<p>下面我们就按照刚擦介绍的 Room 的三个组成部分一一来进行实现，首先是定义 Entity，也就是实体类</p>\n</li>\n<li>\n<p>一个良好的 数据库编程建议是，给每个实体类都添加一个 id 字段，并将这个字段设置为主键，于是我们对 User 类进行如下改造，并完成实体类的声明</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation builtin\">@Entity</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">data</span> <span class=\"token keyword\">class</span> <span class=\"token function\">User</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> firstName <span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token keyword\">val</span> lastName <span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token keyword\">var</span> age <span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation builtin\">@PrimaryKey</span><span class=\"token punctuation\">(</span>autoGenerate <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">var</span> id <span class=\"token operator\">:</span> Long <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">111</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>UserDao 接口的上面上用了一个 <code>@Dao</code>  注解，这样 Room 才能将他识别成一个 Dao，UserDao 的内部就是根据业务需求对各种数据库操作进行的封装，数据库操作通常有增删改查这四种，因此 Room 提供了 <code>@Insert</code> 、 <code>@Delete</code> 、 <code>@update</code> 、和 <code>@Query</code>  这四种相应的注解</p>\n</li>\n<li>\n<p>可以看到， <code>InsertUser()</code>  方法上面石宏了 <code>@Insert</code>  注解，表示会将参数中传入 User 对象插入数据库中，插入完成后还会将自动生成的主键 id 值返回， <code>updateUser()</code>  方法上面使用了 <code>@Update</code>  注解，表示会将参数中传入的 USer 对象更新到数据库当中， <code>delteUser()</code>  方法上面使用了 <code>@Delete</code>  注解，表示会将参数传入的 User 独享从数据库中删除</p>\n</li>\n<li>\n<p>但是如果想要从数据库中查询数据，或者使用非实体类参数来增删改查，那么就必须编写 SQL 语句了，比如说我们在 UserDao 接口重定义了一个 <code>loadAllUsers()</code>  方法，用于从数据库中查询所有的用户，如果只是用一个 <code>@Query</code>  注解，Room 将无法知道我们想要查询那些数据，因为此必须在 <code>@Query</code>  注解中编写出具体的 SQL 语句才行，我们还可以将方法中传入的参数指定到 SQL 语句道中，比如 <code>laodUsersOlderThan()</code>  方法就可以查询所有年龄大于指定参数的用户，另外，如果是使用非实体类的参数来增删改数据，那么也要编写 SQL 语句才行，而且这个时候不能使用 <code>@Insert</code> 、 <code>@Delete</code>  或 <code>@Update</code>  注解，而是都要使用 <code>@Query</code>  注解才行，参考 <code>deleteUserByLastName()</code>  方法的写法</p>\n</li>\n<li>\n<p>接下来我们进入最后一个环节，定义 Database，这部分内容 的写法是非常固定的，只需要定义好三个部分的内容，数据库的版本号，包含哪些实体类，以及提供 Dao 层的访问实例，新建一个 <code>AppDatabase.kt</code>  文件，代码如下所示:</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> cn<span class=\"token punctuation\">.</span>wenhe9<span class=\"token punctuation\">.</span>testmenu</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> android<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span>Context</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> androidx<span class=\"token punctuation\">.</span>room<span class=\"token punctuation\">.</span>Database</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> androidx<span class=\"token punctuation\">.</span>room<span class=\"token punctuation\">.</span>Room</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> androidx<span class=\"token punctuation\">.</span>room<span class=\"token punctuation\">.</span>RoomDatabase</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *@author DuJinliang</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> *2021/9/30</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token annotation builtin\">@Database</span><span class=\"token punctuation\">(</span>version <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> entities <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>User<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> AppDatabase <span class=\"token operator\">:</span> <span class=\"token function\">RoomDatabase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">userDao</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> UserDao</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">companion</span> <span class=\"token keyword\">object</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> instance <span class=\"token operator\">:</span> AppDatabase<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token annotation builtin\">@Synchronized</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">fun</span> <span class=\"token function\">getDatabase</span><span class=\"token punctuation\">(</span>context <span class=\"token operator\">:</span> Context<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> AppDatabase<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            instance<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">let</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token keyword\">return</span> it</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">return</span> Room<span class=\"token punctuation\">.</span><span class=\"token function\">databaseBuilder</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>applicationContext<span class=\"token punctuation\">,</span> AppDatabase<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"app_database\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                    instance <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">112</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>另外，由于数据库操作属于耗时操作，Room 默认是不允许在主线程中进行数据库操作的，因此上述代码中我们将增删改查的功能都放到了子线程中。不过为了方便测试，Room 还提供了一个更加简单的方法，如下所示：</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Room<span class=\"token punctuation\">.</span><span class=\"token function\">databaseBuilder</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>applicationContext<span class=\"token punctuation\">,</span> AppDatabase<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">,</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"app_database\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">allowMainThreadQueries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">113</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>在构建 AppDatabase 实例的时候，加入一个 fallbackToDestructiveMigration () 方法。这样只要数据库进行了升级，Room 就会将当前的数据库销毁，然后再重新创建，随之而来的副作用就是之前数据库中的所有数据就全部丢失了。</p>\n</li>\n<li>\n<p>假如产品还在开发和测试阶段，这个方法是可以使用的，但是一旦产品对外发布之后，如果造成了用户数据丢失，那可是严重的事故。因此接下来我们还是老老实实学习一下在 Room 中升级数据库的正规写法。</p>\n</li>\n<li>\n<p>随着业务逻辑的升级，现在我们打算在数据库中添加一张 Book 表，那么首先要做的就是创建一个 Book 的实体类，如下所示：</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation builtin\">@Entity</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">data</span> <span class=\"token keyword\">class</span> <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token keyword\">var</span> pages<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation builtin\">@PrimaryKey</span><span class=\"token punctuation\">(</span>autoGenerate <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">var</span> id<span class=\"token operator\">:</span> Long <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">114</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>接下来修改 AppDatabase 中的代码，在里面编写数据库升级的逻辑，如下所示：</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation builtin\">@Database</span><span class=\"token punctuation\">(</span>version <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> entities <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>User<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> Book<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> AppDatabase <span class=\"token operator\">:</span> <span class=\"token function\">RoomDatabase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">userDao</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> UserDao</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">bookDao</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> BookDao</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">companion</span> <span class=\"token keyword\">object</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">val</span> MIGRATION_1_2 <span class=\"token operator\">=</span> <span class=\"token keyword\">object</span> <span class=\"token operator\">:</span> <span class=\"token function\">Migration</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">migrate</span><span class=\"token punctuation\">(</span>database<span class=\"token operator\">:</span> SupportSQLiteDatabase<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                     database<span class=\"token punctuation\">.</span><span class=\"token function\">execSQL</span><span class=\"token punctuation\">(</span>\"create table <span class=\"token function\">Book</span> <span class=\"token punctuation\">(</span>id integer primary</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                         key autoincrement not <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> name text not <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                         pages integer not <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\"<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> instance<span class=\"token operator\">:</span> AppDatabase<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">fun</span> <span class=\"token function\">getDatabase</span><span class=\"token punctuation\">(</span>context<span class=\"token operator\">:</span> Context<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> AppDatabase <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            instance<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">let</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token keyword\">return</span> it</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">return</span> Room<span class=\"token punctuation\">.</span><span class=\"token function\">databaseBuilder</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>applicationContext<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                    AppDatabase<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"app_database\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">addMigrations</span><span class=\"token punctuation\">(</span>MIGRATION_1_2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                instance <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">115</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>既然实体类的字段发生了变动，那么对应的数据库表也必须升级了，所以这里修改 AppDatabase 中的代码，如下所示：</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation builtin\">@Database</span><span class=\"token punctuation\">(</span>version <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> entities <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>User<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> Book<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> AppDatabase <span class=\"token operator\">:</span> <span class=\"token function\">RoomDatabase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">companion</span> <span class=\"token keyword\">object</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">val</span> MIGRATION_2_3 <span class=\"token operator\">=</span> <span class=\"token keyword\">object</span> <span class=\"token operator\">:</span> <span class=\"token function\">Migration</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">migrate</span><span class=\"token punctuation\">(</span>database<span class=\"token operator\">:</span> SupportSQLiteDatabase<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                database<span class=\"token punctuation\">.</span><span class=\"token function\">execSQL</span><span class=\"token punctuation\">(</span>\"alter table Book add column author text not <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                    default 'unknown'\"<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> instance<span class=\"token operator\">:</span> AppDatabase<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">fun</span> <span class=\"token function\">getDatabase</span><span class=\"token punctuation\">(</span>context<span class=\"token operator\">:</span> Context<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> AppDatabase <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">return</span> Room<span class=\"token punctuation\">.</span><span class=\"token function\">databaseBuilder</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>applicationContext<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                AppDatabase<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"app_database\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">addMigrations</span><span class=\"token punctuation\">(</span>MIGRATION_1_2<span class=\"token punctuation\">,</span> MIGRATION_2_3<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                instance <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">116</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>WorkManager 的基本用法其实非常简单，主要分为以下三步</p>\n<ol>\n<li>定义一个后台任务，并实现具体的任务逻辑</li>\n<li>配置该后台任务的运行条件和约束信息，并构建后任务请求</li>\n<li>将该后台任务请求传入 WorkManager 的 <code>enqueue()</code>  方法，系统会在合适的时间运行</li>\n</ol>\n</li>\n<li>\n<p>第一步要定义一个后台任务，这里创建一个 SimpleWorker 类，代码如下所示：</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> cn<span class=\"token punctuation\">.</span>wenhe9<span class=\"token punctuation\">.</span>testmenu</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> android<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span>Context</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> android<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Log</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> androidx<span class=\"token punctuation\">.</span>work<span class=\"token punctuation\">.</span>Worker</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> androidx<span class=\"token punctuation\">.</span>work<span class=\"token punctuation\">.</span>WorkerParameters</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *@author DuJinliang</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> *2021/9/30</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token function\">SimpleWorker</span><span class=\"token punctuation\">(</span>context <span class=\"token operator\">:</span> Context<span class=\"token punctuation\">,</span> params <span class=\"token operator\">:</span> WorkerParameters<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">Worker</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">doWork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Result <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        Log<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"SimpleWorker\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"do work in SimpleWorker\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> Result<span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">117</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>可以看到，只需要把刚才创建的后台任务所对应的的 Class 对象传入 <code>OneTimeWorkRequest.Builder</code>  的构造函数中，然后调用 <code>build()</code>  方法即可完成构建</p>\n</li>\n<li>\n<p><code>OneTimeWorkRequest.Builder</code>  是 <code>WorkRequest.Builder</code>  的子类，用于构建单次运行的后台请求， <code>WorkRequest.Builder</code>  还有另外一个子类 <code>PeriodicWorkRequest.Builder</code> ，可用于构建周期性运行的后台任务请求，但是为了降低设备的性能消耗， <code>PeriodicWorkRequest.Builder</code>  构造函数中传入的运行周期补鞥呢短于 15 分钟，示例代码如下：</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> request <span class=\"token operator\">=</span> PeriodicWorkRequest<span class=\"token punctuation\">.</span><span class=\"token function\">Builder</span><span class=\"token punctuation\">(</span>SimpleWorker<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> TimeUnit<span class=\"token punctuation\">.</span>MINUTES<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">118</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> MainActivity <span class=\"token operator\">:</span> <span class=\"token function\">AppCompatActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        doWorkBtn<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">val</span> request <span class=\"token operator\">=</span> OneTimeWorkRequest<span class=\"token punctuation\">.</span><span class=\"token function\">Builder</span><span class=\"token punctuation\">(</span>SimpleWorker<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            WorkManager<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">119</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n<li>\n<p>这就表示我们希望让 SimpleWorker 这个后台任务在 5 分钟后运行。你可以自由选择时间的单位，毫秒、秒、分钟、小时、天都可以。</p>\n</li>\n<li>\n<p>可以控制运行时间之后，我们再增加一些别的功能，比如说给后台任务请求添加标签：</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> request <span class=\"token operator\">=</span> OneTimeWorkRequest<span class=\"token punctuation\">.</span><span class=\"token function\">Builder</span><span class=\"token punctuation\">(</span>SimpleWorker<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">addTag</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"simple\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">120</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>当然，即使没有标签，也可以通过 id 来取消后台任务请求：</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>WorkManager<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">cancelWorkById</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">121</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>另外，我们在上一小节中讲到，如果后台任务的 <code>doWork()</code>  方法中返回了 <code>Result.retry()</code> ，那么是可以结合 <code>setBackoffCriteria()</code>  方法来重新执行任务的，具体代码如下所示：</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> request <span class=\"token operator\">=</span> OneTimeWorkRequest<span class=\"token punctuation\">.</span><span class=\"token function\">Builder</span><span class=\"token punctuation\">(</span>SimpleWorker<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">setBackoffCriteria</span><span class=\"token punctuation\">(</span>BackoffPolicy<span class=\"token punctuation\">.</span>LINEAR<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> TimeUnit<span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">122</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>这里调用了 getWorkInfoByIdLiveData () 方法，并传入后台任务请求的 id，会返回一个 LiveData 对象。然后我们就可以调用 LiveData 对象的 observe () 方法来观察数据变化了，以此监听后台任务的运行结果。另外，你也可以调用 <code>getWorkInfosByTagLiveData()</code>  方法，监听同一标签名下所有后台任务请求的运行结果，用法是差不多的，这里就不再进行解释了。</p>\n</li>\n<li>\n<p>接下来，我们再来看一下 WorkManager 中比较有特色的一个功能 —— 链式任务。</p>\n</li>\n<li>\n<p>假设这里定义了 3 个独立的后台任务：同步数据、压缩数据和上传数据。现在我们想要实现先同步、再压缩、最后上传的功能，就可以借助链式任务来实现，代码示例如下：</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> sync <span class=\"token operator\">=</span> <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">val</span> compress <span class=\"token operator\">=</span> <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">val</span> upload <span class=\"token operator\">=</span> <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>WorkManager<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">beginWith</span><span class=\"token punctuation\">(</span>sync<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>compress<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>upload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">123</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"button\"><a class=\"markdownIt-Anchor\" href=\"#button\">#</a> Button</h3>\n<ul>\n<li>\n<p>按钮</p>\n</li>\n<li>\n<p>如果按钮的内容使用的是英文，那么运行后的显示会全部是大写字母，如果需要原样使用的话，则需要指定一个属性</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>android:textAllCaps=\"false\"</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"><div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">### EditText</span><br><span class=\"line\"></span><br><span class=\"line\">- 允许用户在控件里输入和编辑内容</span><br><span class=\"line\">- 可以使用``android:hint``来指定输入框默认显示的内容，类似``placeHolder``</span><br><span class=\"line\">- 可以使用``android:maxLines``来指定输入框的最大行数，当输入的内容超过两行时，文本就会像上滚动，EditText则不会继续拉伸</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">### ImageView</span><br><span class=\"line\"></span><br><span class=\"line\">- 用于在界面上展示图片</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">### ProgressBar</span><br><span class=\"line\"></span><br><span class=\"line\">- 用于在界面显示一个进度条</span><br><span class=\"line\"></span><br><span class=\"line\">- 可以通过``style``属性指定成水平进度条，在指定成水平进度条后，还可以使用``max``属性个进度条设置一个最大值，然后在代码中动态的更改进度条的进度</span><br><span class=\"line\"></span><br><span class=\"line\">  - ```xml</span><br><span class=\"line\">    &lt;Button</span><br><span class=\"line\">            android:id=&quot;@+id/addNum&quot;</span><br><span class=\"line\">            android:text=&quot;add Num&quot;</span><br><span class=\"line\">            android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">            android:layout_height=&quot;wrap_content&quot;/&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    binding.addNum.setOnClickListener &#123;</span><br><span class=\"line\">    \tbinding.progressBar.progress = binding.progressBar.progress + 10</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div></div></span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"alertdialog\"><a class=\"markdownIt-Anchor\" href=\"#alertdialog\">#</a> AlertDialog</h3>\n<ul>\n<li>\n<p>在当前界面弹出一个对话框，这个对话框是置顶于所有界面元素之上的，能够评比其他控件的交互能力，因此 AlertDialog 一般用于提示一些非常重要的内容或者警告信息</p>\n</li>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>binding<span class=\"token punctuation\">.</span>addNum<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">val</span> that <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    AlertDialog<span class=\"token punctuation\">.</span><span class=\"token function\">Builder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">setTitle</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"警告\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">setMessage</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"你确定要这么做吗\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">setCancelable</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">setPositiveButton</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"是的\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> dialog<span class=\"token punctuation\">,</span> which <span class=\"token operator\">-></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                                Toast<span class=\"token punctuation\">.</span><span class=\"token function\">makeText</span><span class=\"token punctuation\">(</span>that<span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"我不能原谅你\"</span></span><span class=\"token punctuation\">,</span> Toast<span class=\"token punctuation\">.</span>LENGTH_SHORT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                               <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">setNegativeButton</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"不了\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>dialog<span class=\"token punctuation\">,</span> which <span class=\"token operator\">-></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                                Toast<span class=\"token punctuation\">.</span><span class=\"token function\">makeText</span><span class=\"token punctuation\">(</span>that<span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"这不是真的\"</span></span><span class=\"token punctuation\">,</span> Toast<span class=\"token punctuation\">.</span>LENGTH_SHORT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                               <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">125</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n<h3 id=\"recyclerview\"><a class=\"markdownIt-Anchor\" href=\"#recyclerview\">#</a> RecyclerView</h3>\n<ul>\n<li>\n<p>引入 recyclerView 库</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Gradle\"><figure class=\"iseeu highlight gradle\"><figcaption data-lang=\"gradle\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">implementation</span> <span class=\"token string\">'androidx.recyclerview:recyclerview:1.2.0'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">126</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>准备适配器，继承自 <code>RecyclerView.Adapter</code> ，并将泛型指定为 <code>FruitAdapter.ViewHolder</code> ，其中 <code>ViewHolder</code>  是我们在 <code>FruitAdapter</code>  中定义的一个内部类</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token function\">FruitAdapter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> fruitList<span class=\"token operator\">:</span> List<span class=\"token operator\">&lt;</span>Fruit<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        RecyclerView<span class=\"token punctuation\">.</span>Adapter<span class=\"token operator\">&lt;</span>FruitAdapter<span class=\"token punctuation\">.</span>ViewHolder<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">inner</span> <span class=\"token keyword\">class</span> <span class=\"token function\">ViewHolder</span><span class=\"token punctuation\">(</span>view<span class=\"token operator\">:</span> View<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> RecyclerView<span class=\"token punctuation\">.</span><span class=\"token function\">ViewHolder</span><span class=\"token punctuation\">(</span>view<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">val</span> fruitImage<span class=\"token operator\">:</span> ImageView <span class=\"token operator\">=</span> view<span class=\"token punctuation\">.</span><span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>fruitImage<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">val</span> fruitName<span class=\"token operator\">:</span> TextView <span class=\"token operator\">=</span> view<span class=\"token punctuation\">.</span><span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>fruitName<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreateViewHolder</span><span class=\"token punctuation\">(</span>parent<span class=\"token operator\">:</span> ViewGroup<span class=\"token punctuation\">,</span> viewType<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ViewHolder <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">val</span> view <span class=\"token operator\">=</span> LayoutInflater<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">inflate</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>fruit_item<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">ViewHolder</span><span class=\"token punctuation\">(</span>view<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onBindViewHolder</span><span class=\"token punctuation\">(</span>holder<span class=\"token operator\">:</span> ViewHolder<span class=\"token punctuation\">,</span> position<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">val</span> fruit <span class=\"token operator\">=</span> fruitList<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        holder<span class=\"token punctuation\">.</span>fruitImage<span class=\"token punctuation\">.</span><span class=\"token function\">setImageResource</span><span class=\"token punctuation\">(</span>fruit<span class=\"token punctuation\">.</span>imageId<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        holder<span class=\"token punctuation\">.</span>fruitName<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> fruit<span class=\"token punctuation\">.</span>name</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">getItemCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> fruitList<span class=\"token punctuation\">.</span>size</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">127</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>如果需要制度能够为横向滚动的话，需要给 layoutManager 指定方向</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>layoutMangaer<span class=\"token punctuation\">.</span>orientation <span class=\"token operator\">=</span> LinearLayoutManager<span class=\"token punctuation\">.</span>HORIZONTAL</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">128</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">-</span> 第一个参数指定列数，第二个指定方向</pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>点击事件</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token function\">FruitAdapter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> fruitList<span class=\"token operator\">:</span> List<span class=\"token operator\">&lt;</span>Fruit<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        RecyclerView<span class=\"token punctuation\">.</span>Adapter<span class=\"token operator\">&lt;</span>FruitAdapter<span class=\"token punctuation\">.</span>ViewHolder<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreateViewHolder</span><span class=\"token punctuation\">(</span>parent<span class=\"token operator\">:</span> ViewGroup<span class=\"token punctuation\">,</span> viewType<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ViewHolder <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">val</span> view <span class=\"token operator\">=</span> LayoutInflater<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">inflate</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>fruit_item<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">val</span> viewHolder <span class=\"token operator\">=</span> <span class=\"token function\">ViewHolder</span><span class=\"token punctuation\">(</span>view<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        viewHolder<span class=\"token punctuation\">.</span>itemView<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">val</span> position <span class=\"token operator\">=</span> viewHolder<span class=\"token punctuation\">.</span>adapterPosition</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">val</span> fruit <span class=\"token operator\">=</span> fruitList<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            Toast<span class=\"token punctuation\">.</span><span class=\"token function\">makeText</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"you clicked view </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token expression\">fruit<span class=\"token punctuation\">.</span>name</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                Toast<span class=\"token punctuation\">.</span>LENGTH_SHORT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        viewHolder<span class=\"token punctuation\">.</span>fruitImage<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">val</span> position <span class=\"token operator\">=</span> viewHolder<span class=\"token punctuation\">.</span>adapterPosition</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">val</span> fruit <span class=\"token operator\">=</span> fruitList<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            Toast<span class=\"token punctuation\">.</span><span class=\"token function\">makeText</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"you clicked image </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token expression\">fruit<span class=\"token punctuation\">.</span>name</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                Toast<span class=\"token punctuation\">.</span>LENGTH_SHORT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> viewHolder</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">129</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>由于手机屏幕的空间一般比较小，有些时候过多的内容一屏是显示不下的，借助 ScrollView 控件，我们就可以以滚动的形式查看屏幕外的内容</p>\n</li>\n</ul>\n<h2 id=\"需要注意的属性\"><a class=\"markdownIt-Anchor\" href=\"#需要注意的属性\">#</a> 需要注意的属性</h2>\n<h3 id=\"visibility\"><a class=\"markdownIt-Anchor\" href=\"#visibility\">#</a>  <code>visibility</code></h3>\n<ul>\n<li>这个属性可以指定控件的可见性</li>\n<li>他的可选属性有以下三种\n<ul>\n<li><code>visible</code>\n<ul>\n<li>View.VISIBLE</li>\n<li>表示控件可见</li>\n</ul>\n</li>\n<li><code>invisible</code>\n<ul>\n<li>View.INVISIBLE</li>\n<li>表示控件不可见，但是占据着原来的大小和位置</li>\n</ul>\n</li>\n<li><code>gone</code>\n<ul>\n<li>View.GONE</li>\n<li>表示空间不可见，而且不再占用任何屏幕空间</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"gravity-和-layout_gravity\"><a class=\"markdownIt-Anchor\" href=\"#gravity-和-layout_gravity\">#</a>  <code>gravity</code>  和  <code>layout_gravity</code></h3>\n<ul>\n<li><code>gravity</code>  是文字在控件内部的对齐方式</li>\n<li><code>layout_gravity</code>  是控件在布局内部的对齐方式</li>\n</ul>\n<h3 id=\"layout_weight\"><a class=\"markdownIt-Anchor\" href=\"#layout_weight\">#</a>  <code>layout_weight</code></h3>\n<ul>\n<li>系统会先把 Linearlayout 下所有空间指定的 <code>layout_weight</code>  值相加，得到一个总值，然后每个控件所占大小的比例就是使用该控件的 <code>layout_weight</code>  值除以刚才算出的总值</li>\n<li>需要注意的是，当 Linearlayout 使用的 <code>vertical</code>  时，水平方向上可以使用 <code>layout_weight</code> ，当使用的是 <code>horizontal</code>  时，垂直方向上可以使用 <code>layout_weight</code> ，另外所指定的方向的 width 或 height 需要指定为<strong> 0dp</strong></li>\n</ul>\n<h2 id=\"基本布局\"><a class=\"markdownIt-Anchor\" href=\"#基本布局\">#</a> 基本布局</h2>\n<ul>\n<li>布局是一种可用于放置很多控件的容器，它可以按照一定的规律调整内部控件的位置，从而编写出精美的界面。当然，布局的内部除了放置控件外，也可以放置布局，通过多层布局的嵌套，我们就能够完成一些比较复杂的界面实现\n<ul>\n<li><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20210924192053333.png\"\n                      alt=\"image-20210924192053333\"\n                ></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"linearlayout\"><a class=\"markdownIt-Anchor\" href=\"#linearlayout\">#</a> LinearLayout</h3>\n<ul>\n<li>Linearlayout 又称为线性布局，这个布局会将他所包含的控件在线性方向上依次排列。</li>\n<li>可以通过 <code>orientation</code>  指定布局的方向</li>\n</ul>\n<h3 id=\"relativelayout\"><a class=\"markdownIt-Anchor\" href=\"#relativelayout\">#</a> RelativeLayout</h3>\n<ul>\n<li>\n<p>相对布局，他可以通过相对定位的方式让控件出现在布局的任何位置</p>\n</li>\n<li>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>android:layout_alignParentLeft、android:layout_alignParentTop、android:layout_alignParentRight、android:layout_alignParentBottom、android:layout_centerInParent、</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>android:layout_above</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>android:layout_below</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>android:layout_toLeftOf</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>android:layout_toRightOf</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>android:layout_alignLeft</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>android:layout_alignRight</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>android:layout_alignTop</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>android:layout_alignBottom</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"><div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">### FrameLayout</span><br><span class=\"line\"></span><br><span class=\"line\">- 帧布局，所有的控件都会默认摆放在布局的左上角</span><br><span class=\"line\">- 可以使用``layout_gravity``指定对齐方式</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 小技巧</span><br><span class=\"line\"></span><br><span class=\"line\">### 隐藏系统自带的标题栏</span><br><span class=\"line\"></span><br><span class=\"line\">- ```kotlin</span><br><span class=\"line\">  class MainActivity : AppCompatActivity() &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">      override fun onCreate(savedInstanceState: Bundle?) &#123;</span><br><span class=\"line\">          super.onCreate(savedInstanceState)</span><br><span class=\"line\">          setContentView(R.layout.activity_main)</span><br><span class=\"line\">          supportActionBar?.hide()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></div></div></span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"动态加载布局\"><a class=\"markdownIt-Anchor\" href=\"#动态加载布局\">#</a> 动态加载布局</h3>\n<ul>\n<li>希望程序能够根据设备的分辨率或屏幕大小，在运行时决定加载哪个布局，这就涉及到 Android 中动态加载布局的技巧</li>\n</ul>\n<h4 id=\"使用限定符\"><a class=\"markdownIt-Anchor\" href=\"#使用限定符\">#</a> 使用限定符</h4>\n<ul>\n<li>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/image-20210924212049336.png\"\n                      alt=\"image-20210924212049336\"\n                ></p>\n</li>\n<li>\n<p>示例</p>\n<ul>\n<li>在 res 下建立一个 layout-large 的文件夹，将我们需要动态加载的布局在这个文件夹下新建一份，那么当屏幕大小满足 large 这个限定符的时候，就会动态的加载这里的布局文件</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"使用最小宽度限定符\"><a class=\"markdownIt-Anchor\" href=\"#使用最小宽度限定符\">#</a> 使用最小宽度限定符</h4>\n<ul>\n<li>虽然上面使用 large 很方便，但是 large 到底是多大呢？有时候我们希望可以更加灵活的为不同设备加载布局，不管他们是不是被系统认定为 large，这时就可以使用最小宽度限定符</li>\n<li>最小宽度限定符允许我们对屏幕的宽度制定一个最小值（以 dp 为单位），然后以这个最小值为临界点，屏幕宽度大于这个值的设备就在一个布局，屏幕宽度小于这个值的设备就加载另一个布局</li>\n<li>示例：\n<ul>\n<li>在 res 下建立一个 layout-sw600dp 文件夹，将我们需要动态加载的怒局在这个文件夹下新建一份，当程序运行在屏幕宽度大于等于 600dp 的设备上时，就会加载这个文件夹下的内容，当程序运行在小于 600dp 设备上时，则会加载默认的布局文件</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"加载图片的库\"><a class=\"markdownIt-Anchor\" href=\"#加载图片的库\">#</a> 加载图片的库</h3>\n<ul>\n<li>Glide</li>\n</ul>\n<h3 id=\"全局获取context的技巧\"><a class=\"markdownIt-Anchor\" href=\"#全局获取context的技巧\">#</a> 全局获取 Context 的技巧</h3>\n<ul>\n<li>\n<p>Android 提供了一个 Application 类，每当应用程序启动的时候，系统就会自动将这个类进行初始化。而我们可以定制一个自己的 Application 类，以便于管理程序内一些全局的状态信息，比如全局 Context。</p>\n</li>\n<li>\n<p>定制一个自己的 Application 其实并不复杂，首先需要创建一个 MyApplication 类继承自 Application，代码如下所示：</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> MyApplication <span class=\"token operator\">:</span> <span class=\"token function\">Application</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">companion</span> <span class=\"token keyword\">object</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> context<span class=\"token operator\">:</span> Context</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        context <span class=\"token operator\">=</span> applicationContext</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">131</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>接下来我们还需要告知系统，当程序启动的时候应该初始化 MyApplication 类，而不是默认的 Application 类。这一步也很简单，在 AndroidManifest.xml 文件的 <code>&lt;application&gt;</code>  标签下进行指定就可以了，代码如下所示：</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>manifest</span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>android</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schemas.android.com/apk/res/android<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>          <span class=\"token attr-name\">package</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.example.materialtest<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>application</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>.MyApplication<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>allowBackup</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>icon</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@mipmap/ic_launcher<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@string/app_name<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>roundIcon</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@mipmap/ic_launcher_round<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>supportsRtl</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>theme</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@style/AppTheme<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        ...</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>application</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>manifest</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"><div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 这样我们就实现了一种全局获取Context的机制，之后不管你想在项目的任何地方使用Context，只需要调用一下MyApplication.context就可以了。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">### 使用Intent传递对象</span><br><span class=\"line\"></span><br><span class=\"line\">#### Serializables方式</span><br><span class=\"line\"></span><br><span class=\"line\">- Serializable是序列化的意思，表示将一个对象转换成可存储或可传输的状态。序列化后的对象可以在网络上进行传输，也可以存储到本地。至于序列化的方法非常简单，只需要让一个类去实现Serializable这个接口就可以了。</span><br><span class=\"line\"></span><br><span class=\"line\">- 比如说有一个Person类，其中包含了name和age这两个字段，如果想要将它序列化，就可以这样写：</span><br><span class=\"line\"></span><br><span class=\"line\">  - ```kotlin</span><br><span class=\"line\">    class Person : Serializable &#123;</span><br><span class=\"line\">        var name = &quot;&quot;</span><br><span class=\"line\">        var age = 0</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div></div></span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>这里我们让 Person 类实现了 Serializable 接口，这样所有的 Person 对象都是可序列化的了。</p>\n</li>\n<li>\n<p>然后在 FirstActivity 中只需要这样写：</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">val</span> person <span class=\"token operator\">=</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>person<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Tom\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>person<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">val</span> intent <span class=\"token operator\">=</span> <span class=\"token function\">Intent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> SecondActivity<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>intent<span class=\"token punctuation\">.</span><span class=\"token function\">putExtra</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"person_data\"</span></span><span class=\"token punctuation\">,</span> person<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">startActivity</span><span class=\"token punctuation\">(</span>intent<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">133</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>这里调用了 Intent 的 getSerializableExtra () 方法来获取通过参数传递过来的序列化对象，接着再将它向下转型成 Person 对象，这样我们就成功实现了使用 Intent 传递对象的功能。</p>\n</li>\n<li>\n<p>需要注意的是，这种传递对象的工作原理是先将一个对象序列化成可存储或可传输的状态，传递给另外一个 Activity 后再将其反序列化成一个新的对象。虽然这两个对象中存储的数据完全一致，但是它们实际上是不同的对象，这一点希望你能了解清楚。</p>\n</li>\n</ul>\n<h4 id=\"parcelable方式\"><a class=\"markdownIt-Anchor\" href=\"#parcelable方式\">#</a> Parcelable 方式</h4>\n<ul>\n<li>\n<p>除了 Serializable 之外，使用 Parcelable 也可以实现相同的效果，不过不同于将对象进行序列化，Parcelable 方式的实现原理是将一个完整的对象进行分解，而分解后的每一部分都是 Intent 所支持的数据类型，这样就能实现传递对象的功能了。</p>\n</li>\n<li>\n<p>下面我们来看一下 Parcelable 的实现方式，修改 Person 中的代码，如下所示：</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> Person <span class=\"token operator\">:</span> Parcelable <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">var</span> age <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">writeToParcel</span><span class=\"token punctuation\">(</span>parcel<span class=\"token operator\">:</span> Parcel<span class=\"token punctuation\">,</span> flags<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        parcel<span class=\"token punctuation\">.</span><span class=\"token function\">writeString</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 写出 name</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        parcel<span class=\"token punctuation\">.</span><span class=\"token function\">writeInt</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 写出 age</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">describeContents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Int <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">companion</span> <span class=\"token keyword\">object</span> CREATOR <span class=\"token operator\">:</span> Parcelable<span class=\"token punctuation\">.</span>Creator<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">createFromParcel</span><span class=\"token punctuation\">(</span>parcel<span class=\"token operator\">:</span> Parcel<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Person <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">val</span> person <span class=\"token operator\">=</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            person<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> parcel<span class=\"token punctuation\">.</span><span class=\"token function\">readString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?:</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"\"</span></span> <span class=\"token comment\">// 读取 name</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            person<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> parcel<span class=\"token punctuation\">.</span><span class=\"token function\">readInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 读取 age</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">return</span> person</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">newArray</span><span class=\"token punctuation\">(</span>size<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">?</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">arrayOfNulls</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">134</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>注意，这里不再是调用 getSerializableExtra () 方法，而是调用 getParcelableExtra () 方法来获取传递过来的对象，其他的地方完全相同。</p>\n</li>\n<li>\n<p>不过，这种实现方式写起来确实比较复杂，为此 Kotlin 给我们提供了另外一种更加简便的用法，但前提是要传递的所有数据都必须封装在对象的主构造函数中才行。</p>\n</li>\n<li>\n<p>修改 Person 类中的代码，如下所示：</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation builtin\">@Parcelize</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token keyword\">var</span> age<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> Parcelable</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">135</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>可以看到，我们在 LogUtil 中首先定义了 VERBOSE、DEBUG、INFO、WARN、ERROR 这 5 个整型常量，并且它们对应的值都是递增的。然后又定义了一个静态变量 level，可以将它的值指定为上面 5 个常量中的任意一个。</p>\n</li>\n<li>\n<p>接下来，我们提供了 v ()、d ()、i ()、w ()、e () 这 5 个自定义的日志方法，在其内部分别调用了 Log.v ()、Log.d ()、Log.i ()、Log.w ()、Log.e () 这 5 个方法来打印日志，只不过在这些自定义的方法中都加入了一个 if 判断，只有当 level 的值小于或等于对应日志级别值的时候，才会将日志打印出来。</p>\n</li>\n<li>\n<p>这样就把一个自定义的日志工具创建好了，之后在项目里，我们可以像使用普通的日志工具一样使用 LogUtil。比如打印一行 DEBUG 级别的日志可以这样写：</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Kotlin\"><figure class=\"iseeu highlight kotlin\"><figcaption data-lang=\"kotlin\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>LogUtil<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"TAG\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"debug log\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">136</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>我们只需要通过修改 level 变量的值，就可以自由地控制日志的打印行为。比如让 level 等于 VERBOSE 就可以把所有的日志都打印出来，让 level 等于 ERROR 就可以只打印程序的错误日志。</p>\n</li>\n<li>\n<p>使用了这种方法之后，刚才所说的那个问题也就不复存在了，你只需要在开发阶段将 level 指定成 VERBOSE，当项目正式上线的时候将 level 指定成 ERROR 就可以了。</p>\n</li>\n</ul>\n",
            "tags": [
                "Android"
            ]
        }
    ]
}
{
    "version": "https://jsonfeed.org/version/1",
    "title": "玖忆 • All posts by \"mysql\" tag",
    "description": "我本微末凡尘、可也心向天空",
    "home_page_url": "https://wait-you.github.io",
    "items": [
        {
            "id": "https://wait-you.github.io/2023/09/02/MVCC%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/",
            "url": "https://wait-you.github.io/2023/09/02/MVCC%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/",
            "title": "MVCC底层原理",
            "date_published": "2023-09-01T23:29:21.000Z",
            "content_html": "<h1 id=\"mvcc底层原理\"><a class=\"markdownIt-Anchor\" href=\"#mvcc底层原理\">#</a> MVCC 底层原理</h1>\n<h2 id=\"概念\"><a class=\"markdownIt-Anchor\" href=\"#概念\">#</a> 概念</h2>\n<p>MVCC 是多版本并发控制</p>\n<p>它是由两部分组成的</p>\n<ul>\n<li>undo log 版本链\n<ul>\n<li>当事务中有操作对数据进行修改的时候，就会将原数据存放到 undo log 中，用于回滚或查询</li>\n<li>其中需要注意的是数据库中的数据表的每一条数据都有两个隐藏的字段\n<ul>\n<li>trx_id 更新该数据的事务 id</li>\n<li>roll_pointer 更新该数据的上一条原始数据的 id</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>read view 读视图\n<ul>\n<li>在查询数据时生成的数据</li>\n<li>由四部分组成\n<ul>\n<li>m_ids 当前活跃的事务 id，即未提交事务的 id 列表</li>\n<li>min_trx_id 未提交事务中最小的 id，即这些未提交事务操作的数据的最原始的数据行的操作事务 id</li>\n<li>max_trx_id 未提交事务中最大的事务 id+1，即下一个将要分配的事务 id</li>\n<li>creator_trx_id 创建该视图的事务 id</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"规则\"><a class=\"markdownIt-Anchor\" href=\"#规则\">#</a> 规则</h2>\n<ul>\n<li>一个事务只能看到第一次查询之前已经提交的事务以及当前事务的修改</li>\n<li>一个事务不能看到当前事务第一次查询之后创建的事务，以及未提交的事务的修改</li>\n</ul>\n<h2 id=\"读提交-rc\"><a class=\"markdownIt-Anchor\" href=\"#读提交-rc\">#</a> 读提交 RC</h2>\n<ol>\n<li>如下图所示，当事务的隔离级别位读提交时，每次查询数据时都会产生一个 read view</li>\n<li>当因为每次查询都会产生新的 read view，当前一次查询数据时，使用最小事务 id 获取到原始数据，过了一段时间后，该事务再次进行查询时，可能会因为之前活跃的事务中已经有事务进行了提交，导致最小事务 id 发生了变化，获取到了新的原始数据，导致两次查询到的数据不一致，就会导致幻读，即不可重复读现象的发生。</li>\n<li>因为每次查询时都产生新的 read view，所以每次的活跃事务和最小事务等都会随着其他事务的提交而发生变化，就会导致在该事务的不同阶段，查询的结果也会不断发生变化。</li>\n</ol>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202309011536015.png\"\n                      alt=\"image-20230901153026329\"\n                ></p>\n<h2 id=\"可重复读-rr\"><a class=\"markdownIt-Anchor\" href=\"#可重复读-rr\">#</a> 可重复读 RR</h2>\n<p>与读提交不同的是，他是在事务开启的时候，就会去创建一个 read view  之后的每一次查询都是复用之前创建的 read view</p>\n<p>如此的话，每次查询时，使用的都是同一个事务 id，故而从 undo log 中查询到的原始数据也是同一个了</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202309011656486.png\"\n                      alt=\"image-20230901165602351\"\n                ></p>\n<p>但是，RR 并不能完全解决不可重复读的问题，原因如下：</p>\n<p>在 mysql 的读操作中，分为两种类型</p>\n<ul>\n<li>\n<p>快照读 select 语句在不加锁的情况下就是 快照读</p>\n<ul>\n<li>\n<pre><code class=\"language-mysql\">select * from xxx_table where ...\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 当前读 加锁的 select ，或者对数据进行增删改都会进行 当前读</span><br><span class=\"line\"></span><br><span class=\"line\">  - ```mysql</span><br><span class=\"line\">    select * from xxx_table Lock In Share Mode;</span><br><span class=\"line\">    select * from xxx_table for update;</span><br><span class=\"line\">    insert into xxx_table...</span><br><span class=\"line\">    delete from xxx_table...</span><br><span class=\"line\">    update xxx_table...</span><br></pre></td></tr></table></figure></div>\n\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<p>当进行当前读的时候，会根据条件加 临键锁 (Next-Key Lock) ，当要操作的数据在临键锁的范围覆盖了其他事务的数据，那么将再次生成新的 read view 这时，可能会出现不可重复读的问题，如果要操作的数据不在临键锁的范围内，那么将复用一开始的 read view，则不会出现幻读。</p>\n<p>综上，<strong>在 RR 隔离级别下，快照读完全解决了幻读，当前读部分解决了幻读</strong>，因为当前读不是读的快照，而是直接读取的内存</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202309011714117.png\"\n                      alt=\"image-20230901171456013\"\n                ></p>\n",
            "tags": [
                "面试题",
                "mysql"
            ]
        }
    ]
}
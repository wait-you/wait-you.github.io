<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>玖忆 • Posts by &#34;mysql&#34; tag</title>
        <link>https://wait-you.github.io</link>
        <description>我本微末凡尘、可也心向天空</description>
        <language>zh-CN</language>
        <pubDate>Sat, 02 Sep 2023 07:29:21 +0800</pubDate>
        <lastBuildDate>Sat, 02 Sep 2023 07:29:21 +0800</lastBuildDate>
        <category>RabbitMQ</category>
        <category>Android</category>
        <category>Docker</category>
        <category>java</category>
        <category>git</category>
        <category>JVM</category>
        <category>es6</category>
        <category>Java</category>
        <category>JWT</category>
        <category>协程</category>
        <category>MyBatis</category>
        <category>Kotlin</category>
        <category>Node.js</category>
        <category>Python</category>
        <category>Service Mesh</category>
        <category>Vue</category>
        <category>Spring Security</category>
        <category>Spring Cloud</category>
        <category>分布式事务</category>
        <category>排序算法</category>
        <category>接口幂等性</category>
        <category>领域驱动设计</category>
        <category>设计模式</category>
        <category>Java 最佳实践</category>
        <category>面试题</category>
        <category>Hash</category>
        <category>redis</category>
        <category>mysql</category>
        <item>
            <guid isPermalink="true">https://wait-you.github.io/2023/09/02/MVCC%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</guid>
            <title>MVCC底层原理</title>
            <link>https://wait-you.github.io/2023/09/02/MVCC%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</link>
            <category>面试题</category>
            <category>mysql</category>
            <pubDate>Sat, 02 Sep 2023 07:29:21 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;mvcc底层原理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mvcc底层原理&#34;&gt;#&lt;/a&gt; MVCC 底层原理&lt;/h1&gt;
&lt;h2 id=&#34;概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#概念&#34;&gt;#&lt;/a&gt; 概念&lt;/h2&gt;
&lt;p&gt;MVCC 是多版本并发控制&lt;/p&gt;
&lt;p&gt;它是由两部分组成的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;undo log 版本链
&lt;ul&gt;
&lt;li&gt;当事务中有操作对数据进行修改的时候，就会将原数据存放到 undo log 中，用于回滚或查询&lt;/li&gt;
&lt;li&gt;其中需要注意的是数据库中的数据表的每一条数据都有两个隐藏的字段
&lt;ul&gt;
&lt;li&gt;trx_id 更新该数据的事务 id&lt;/li&gt;
&lt;li&gt;roll_pointer 更新该数据的上一条原始数据的 id&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;read view 读视图
&lt;ul&gt;
&lt;li&gt;在查询数据时生成的数据&lt;/li&gt;
&lt;li&gt;由四部分组成
&lt;ul&gt;
&lt;li&gt;m_ids 当前活跃的事务 id，即未提交事务的 id 列表&lt;/li&gt;
&lt;li&gt;min_trx_id 未提交事务中最小的 id，即这些未提交事务操作的数据的最原始的数据行的操作事务 id&lt;/li&gt;
&lt;li&gt;max_trx_id 未提交事务中最大的事务 id+1，即下一个将要分配的事务 id&lt;/li&gt;
&lt;li&gt;creator_trx_id 创建该视图的事务 id&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;规则&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#规则&#34;&gt;#&lt;/a&gt; 规则&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;一个事务只能看到第一次查询之前已经提交的事务以及当前事务的修改&lt;/li&gt;
&lt;li&gt;一个事务不能看到当前事务第一次查询之后创建的事务，以及未提交的事务的修改&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;读提交-rc&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#读提交-rc&#34;&gt;#&lt;/a&gt; 读提交 RC&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;如下图所示，当事务的隔离级别位读提交时，每次查询数据时都会产生一个 read view&lt;/li&gt;
&lt;li&gt;当因为每次查询都会产生新的 read view，当前一次查询数据时，使用最小事务 id 获取到原始数据，过了一段时间后，该事务再次进行查询时，可能会因为之前活跃的事务中已经有事务进行了提交，导致最小事务 id 发生了变化，获取到了新的原始数据，导致两次查询到的数据不一致，就会导致幻读，即不可重复读现象的发生。&lt;/li&gt;
&lt;li&gt;因为每次查询时都产生新的 read view，所以每次的活跃事务和最小事务等都会随着其他事务的提交而发生变化，就会导致在该事务的不同阶段，查询的结果也会不断发生变化。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img  
                     lazyload
                     src=&#34;/images/loading.svg&#34;
                     data-src=&#34;http://tuchuang.wenhe9.cn/img/202309011536015.png&#34;
                      alt=&#34;image-20230901153026329&#34;
                &gt;&lt;/p&gt;
&lt;h2 id=&#34;可重复读-rr&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#可重复读-rr&#34;&gt;#&lt;/a&gt; 可重复读 RR&lt;/h2&gt;
&lt;p&gt;与读提交不同的是，他是在事务开启的时候，就会去创建一个 read view  之后的每一次查询都是复用之前创建的 read view&lt;/p&gt;
&lt;p&gt;如此的话，每次查询时，使用的都是同一个事务 id，故而从 undo log 中查询到的原始数据也是同一个了&lt;/p&gt;
&lt;p&gt;&lt;img  
                     lazyload
                     src=&#34;/images/loading.svg&#34;
                     data-src=&#34;http://tuchuang.wenhe9.cn/img/202309011656486.png&#34;
                      alt=&#34;image-20230901165602351&#34;
                &gt;&lt;/p&gt;
&lt;p&gt;但是，RR 并不能完全解决不可重复读的问题，原因如下：&lt;/p&gt;
&lt;p&gt;在 mysql 的读操作中，分为两种类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;快照读 select 语句在不加锁的情况下就是 快照读&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;select * from xxx_table where ...
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Plaintext&#34;&gt;&lt;figure class=&#34;iseeu highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;- 当前读 加锁的 select ，或者对数据进行增删改都会进行 当前读&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  - ```mysql&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    select * from xxx_table Lock In Share Mode;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    select * from xxx_table for update;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    insert into xxx_table...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    delete from xxx_table...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    update xxx_table...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当进行当前读的时候，会根据条件加 临键锁 (Next-Key Lock) ，当要操作的数据在临键锁的范围覆盖了其他事务的数据，那么将再次生成新的 read view 这时，可能会出现不可重复读的问题，如果要操作的数据不在临键锁的范围内，那么将复用一开始的 read view，则不会出现幻读。&lt;/p&gt;
&lt;p&gt;综上，&lt;strong&gt;在 RR 隔离级别下，快照读完全解决了幻读，当前读部分解决了幻读&lt;/strong&gt;，因为当前读不是读的快照，而是直接读取的内存&lt;/p&gt;
&lt;p&gt;&lt;img  
                     lazyload
                     src=&#34;/images/loading.svg&#34;
                     data-src=&#34;http://tuchuang.wenhe9.cn/img/202309011714117.png&#34;
                      alt=&#34;image-20230901171456013&#34;
                &gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>

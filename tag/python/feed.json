{
    "version": "https://jsonfeed.org/version/1",
    "title": "玖忆 • All posts by \"python\" tag",
    "description": "我本微末凡尘、可也心向天空",
    "home_page_url": "https://wait-you.github.io",
    "items": [
        {
            "id": "https://wait-you.github.io/2023/06/06/Python/",
            "url": "https://wait-you.github.io/2023/06/06/Python/",
            "title": "Python",
            "date_published": "2023-06-06T01:03:36.000Z",
            "content_html": "<h1 id=\"python\"><a class=\"markdownIt-Anchor\" href=\"#python\">#</a> Python</h1>\n<h2 id=\"基础语法\"><a class=\"markdownIt-Anchor\" href=\"#基础语法\">#</a> 基础语法</h2>\n<h3 id=\"字面量\"><a class=\"markdownIt-Anchor\" href=\"#字面量\">#</a> 字面量</h3>\n<h4 id=\"什么是字面量\"><a class=\"markdownIt-Anchor\" href=\"#什么是字面量\">#</a> 什么是字面量</h4>\n<p>字面量：在代码中，被写下来的固定的值，称之为字面量</p>\n<h4 id=\"常见值类型\"><a class=\"markdownIt-Anchor\" href=\"#常见值类型\">#</a> 常见值类型</h4>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202210111425899.png\"\n                      alt=\"image-20221011142529705\"\n                ></p>\n<h4 id=\"字符串\"><a class=\"markdownIt-Anchor\" href=\"#字符串\">#</a> 字符串</h4>\n<p>字符串 (string)，又称文本，是由任意数量的字符如中文、英文、各类符号、数字组成的。所以叫做字符的串。</p>\n<h3 id=\"注释\"><a class=\"markdownIt-Anchor\" href=\"#注释\">#</a> 注释</h3>\n<h4 id=\"注释的概念\"><a class=\"markdownIt-Anchor\" href=\"#注释的概念\">#</a> 注释的概念</h4>\n<p>注释：在程序代码中对程序代码进行解释说明的文字</p>\n<p>作用：注释不是程序，不能被执行，只是对程序代码进行解释说明，让别人可以看懂程序代码的作用，能够大大增强程序的可读性。</p>\n<h4 id=\"注释的分类\"><a class=\"markdownIt-Anchor\" href=\"#注释的分类\">#</a> 注释的分类</h4>\n<p>单行注释：以  <code>#</code>  开头， <code>#</code>  右边的所有文字当做说明，而不是真正要执行的程序，起辅助说明作用</p>\n<ul>\n<li>注意：  <code>#</code> 号和注释内容一般建议以一个空格隔开</li>\n</ul>\n<p>多行注释：以一对 三个双引号引起来的 (“”&quot; 注释内容 “”) 来解释说明一段代码的作用使用方法</p>\n<h3 id=\"变量\"><a class=\"markdownIt-Anchor\" href=\"#变量\">#</a> 变量</h3>\n<p>变量：在程序运行时，能存储计算结果或能表示值的抽象概念</p>\n<p>简单来说，变量就是程序在运行时，记录数据用的</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202210111440457.png\"\n                      alt=\"image-20221011144030395\"\n                ></p>\n<h3 id=\"数据类型\"><a class=\"markdownIt-Anchor\" href=\"#数据类型\">#</a> 数据类型</h3>\n<p>使用 <code>type()</code>  查询数据的类型</p>\n<p>变量没有数据类型，但它所存储的数据有类型</p>\n<h3 id=\"数据类型转换\"><a class=\"markdownIt-Anchor\" href=\"#数据类型转换\">#</a> 数据类型转换</h3>\n<h4 id=\"常见的转换语句\"><a class=\"markdownIt-Anchor\" href=\"#常见的转换语句\">#</a> 常见的转换语句</h4>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202210111604356.png\"\n                      alt=\"image-20221011160411271\"\n                ></p>\n<h3 id=\"标识符\"><a class=\"markdownIt-Anchor\" href=\"#标识符\">#</a> 标识符</h3>\n<p>用户在编程的时候所使用一系列名字，用于给变量、类、方法等命名</p>\n<p>标识符的命名规则主要有三类：</p>\n<ul>\n<li>内容限定</li>\n<li>大小写敏感</li>\n<li>不可使用关键字</li>\n</ul>\n<p>标识符命名中，只允许出现：</p>\n<ul>\n<li>英文</li>\n<li>中文</li>\n<li>数字</li>\n<li>下划线 (_)</li>\n</ul>\n<p>不推荐使用中文</p>\n<p>数字不可以开头</p>\n<h3 id=\"运算符\"><a class=\"markdownIt-Anchor\" href=\"#运算符\">#</a> 运算符</h3>\n<h4 id=\"算术运算符\"><a class=\"markdownIt-Anchor\" href=\"#算术运算符\">#</a> 算术运算符</h4>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202210111622356.png\"\n                      alt=\"image-20221011162253269\"\n                ></p>\n<h4 id=\"赋值运算符\"><a class=\"markdownIt-Anchor\" href=\"#赋值运算符\">#</a> 赋值运算符</h4>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202210111626143.png\"\n                      alt=\"image-20221011162634027\"\n                ></p>\n<h3 id=\"字符串扩展\"><a class=\"markdownIt-Anchor\" href=\"#字符串扩展\">#</a> 字符串扩展</h3>\n<h4 id=\"字符串的三种定义方式\"><a class=\"markdownIt-Anchor\" href=\"#字符串的三种定义方式\">#</a> 字符串的三种定义方式</h4>\n<p>单引号定义法</p>\n<div class=\"highlight-container\" data-rel=\"Python\"><figure class=\"iseeu highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = <span class=\"string\">&#x27;hello world&#x27;</span></span><br></pre></td></tr></table></figure></div>\n<p>双引号定义法</p>\n<div class=\"highlight-container\" data-rel=\"Python\"><figure class=\"iseeu highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = <span class=\"string\">&quot;hello world&quot;</span></span><br></pre></td></tr></table></figure></div>\n<p>三引号定义法</p>\n<div class=\"highlight-container\" data-rel=\"Python\"><figure class=\"iseeu highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = <span class=\"string\">&quot;&quot;&quot;hello world&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></div>\n<p>三引号定义法，和多行注释写法一样，同样支持换行操作</p>\n<p>使用变量接受他，他就是字符串</p>\n<p>不使用变量接收他，就可以作为多行注释使用</p>\n<p>引号的嵌套：</p>\n<ul>\n<li>可以使用 <code>\\</code>  来进行转义</li>\n<li>单引号内可以使用双引号或双引号内可以写单引号</li>\n</ul>\n<h4 id=\"字符串拼接\"><a class=\"markdownIt-Anchor\" href=\"#字符串拼接\">#</a> 字符串拼接</h4>\n<ol>\n<li>使用两个字符串字面量、两个字符串变量之间的拼接 使用  <code>+</code>  号\n<ul>\n<li>无法和非字符串拼接</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"字符串格式化\"><a class=\"markdownIt-Anchor\" href=\"#字符串格式化\">#</a> 字符串格式化</h4>\n<p>使用 <code>%s</code>  的方式完成占位，实现字符串的拼接</p>\n<ul>\n<li>% 表示 占位</li>\n<li>s 表示将变量变成字符串放入占位的地方</li>\n</ul>\n<h4 id=\"数字精度控制\"><a class=\"markdownIt-Anchor\" href=\"#数字精度控制\">#</a> 数字精度控制</h4>\n<p>可以使用辅助符号 &quot;m.n&quot; 来控制数据的宽度和精度</p>\n<ul>\n<li>m ， 控制宽度，要求是数字，设置的宽度小于数字自身，不生效\n<ul>\n<li>小数点和小数部分也算入宽度计算</li>\n</ul>\n</li>\n<li>.n ， 控制小数点精度，要求是数字，会进行小数的四舍五入</li>\n</ul>\n<h4 id=\"快速写法\"><a class=\"markdownIt-Anchor\" href=\"#快速写法\">#</a> 快速写法</h4>\n<p>通过语法  <code>f&quot;内容{变量}&quot;</code>  的格式来快速格式化</p>\n<div class=\"highlight-container\" data-rel=\"Python\"><figure class=\"iseeu highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;hello <span class=\"subst\">&#123;<span class=\"built_in\">str</span>&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"数据输入\"><a class=\"markdownIt-Anchor\" href=\"#数据输入\">#</a> 数据输入</h3>\n<p><code>input()</code>  语句的功能是，获取键盘输入的数据</p>\n<p>可以使用 <code>input(提示信息)</code> ，用以在使用者输入内容之前显示提示内容</p>\n<p>要注意，无论键盘输入什么类型的数据，获取到的数据永远都是字符串类型</p>\n<h2 id=\"判断语句\"><a class=\"markdownIt-Anchor\" href=\"#判断语句\">#</a> 判断语句</h2>\n<h3 id=\"布尔类型和比较运算符\"><a class=\"markdownIt-Anchor\" href=\"#布尔类型和比较运算符\">#</a> 布尔类型和比较运算符</h3>\n<p>在 python 中可以表示真假的数据类型是：</p>\n<ul>\n<li>布尔类型，字面量 <code>True</code>  表示真，字面量 <code>Flase</code>  表示假</li>\n</ul>\n<p>除了布尔类型外，还可以通过比较运算得到布尔类型</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202210111921177.png\"\n                      alt=\"image-20221011192159062\"\n                ></p>\n<h3 id=\"if语句的基本格式\"><a class=\"markdownIt-Anchor\" href=\"#if语句的基本格式\">#</a> if 语句的基本格式</h3>\n<div class=\"highlight-container\" data-rel=\"Python\"><figure class=\"iseeu highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    num = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入一个数字\\n&quot;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> num &gt; <span class=\"number\">10</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;大于10&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> num == <span class=\"number\">10</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;刚好10&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;小于10&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;必须为数字&quot;</span>)</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"while循环\"><a class=\"markdownIt-Anchor\" href=\"#while循环\">#</a> while 循环</h3>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202210112007156.png\"\n                      alt=\"image-20221011200746081\"\n                ></p>\n<h3 id=\"for循环\"><a class=\"markdownIt-Anchor\" href=\"#for循环\">#</a> for 循环</h3>\n<h4 id=\"遍历字符串\"><a class=\"markdownIt-Anchor\" href=\"#遍历字符串\">#</a> 遍历字符串</h4>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202210112057435.png\"\n                      alt=\"image-20221011205711371\"\n                ></p>\n<h4 id=\"range语句\"><a class=\"markdownIt-Anchor\" href=\"#range语句\">#</a> range 语句</h4>\n<p>range 用来获取一个简单的数字序列</p>\n<ol>\n<li>语法 1\n<ul>\n<li>range(num)</li>\n<li>获取一个从 0 开始，到 num 结束的数字序列（不含 num 本身）</li>\n<li>如 range (5) 取得的数据是: [0, 1 ,2 , 3, 4]</li>\n</ul>\n</li>\n<li>语法 2\n<ul>\n<li>range(num1, num2)</li>\n<li>获得一个从 num1 开始，到 num2 结束的数字序列（不含 num2 本身）</li>\n<li>如 range (5, 10) 取得的数据是： [5, 6, 7, 8, 9]</li>\n</ul>\n</li>\n<li>语法 3\n<ul>\n<li>range(num1, num2, step)</li>\n<li>获得一个从 num1 开始，到 num2 结束的数字序列（不含 num2 本身）</li>\n<li>数字之间的步长，以 step 为基准（step 默认为 1）</li>\n<li>如 range (5, 10, 2) 取得的数据是: [5, 7, 9]</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"函数\"><a class=\"markdownIt-Anchor\" href=\"#函数\">#</a> 函数</h2>\n<h4 id=\"函数的概念\"><a class=\"markdownIt-Anchor\" href=\"#函数的概念\">#</a> 函数的概念</h4>\n<p>函数： 是组织好的、可重复使用的，用来实现特定功能的代码段</p>\n<p>好处：</p>\n<ul>\n<li>将功能封装在函数中，可供随时随地的重复使用</li>\n<li>提高代码的复用性，减少重复代码，提高开发效率</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202210112214421.png\"\n                      alt=\"image-20221011221401358\"\n                ></p>\n<h4 id=\"函数的传入参数\"><a class=\"markdownIt-Anchor\" href=\"#函数的传入参数\">#</a> 函数的传入参数</h4>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202210112221602.png\"\n                      alt=\"image-20221011222111504\"\n                ></p>\n<h4 id=\"none类型\"><a class=\"markdownIt-Anchor\" href=\"#none类型\">#</a> None 类型</h4>\n<p>None 是类型 <code>NoneType</code>  的字面量，用于表示：空的、无意义的</p>\n<p>不使用 return 语句即返回 None</p>\n<p>主动 return None</p>\n<p>使用场景</p>\n<ul>\n<li>函数返回值</li>\n<li>if 判断</li>\n<li>变量定义</li>\n</ul>\n<h4 id=\"变量在函数中的作用域\"><a class=\"markdownIt-Anchor\" href=\"#变量在函数中的作用域\">#</a> 变量在函数中的作用域</h4>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202210112254761.png\"\n                      alt=\"image-20221011225427693\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Python\"><figure class=\"iseeu highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num = <span class=\"number\">400</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_a</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(num)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_b</span>():</span><br><span class=\"line\">    <span class=\"keyword\">global</span> num</span><br><span class=\"line\">    num = <span class=\"number\">500</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(num)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">test_a()</span><br><span class=\"line\">test_b()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(num)</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"数据容器\"><a class=\"markdownIt-Anchor\" href=\"#数据容器\">#</a> 数据容器</h2>\n<h3 id=\"概念\"><a class=\"markdownIt-Anchor\" href=\"#概念\">#</a> 概念</h3>\n<p>数据容器：一种可以容纳多份数据的数据类型，容纳的每一份数据称之为 1 个元素，每一个元素可以是任意类型的数据，如字符串、数字、布尔等。</p>\n<p>数据容器根据特点的不同，如：</p>\n<ul>\n<li>是否支持重复元素</li>\n<li>是否可以修改</li>\n<li>是否有序，等</li>\n</ul>\n<p>分为 5 类，分别是：</p>\n<p>列表 (List)、元组 (Tuple)、字符串 (Str)、集合 (Set)、字典 (dict)</p>\n<h3 id=\"列表\"><a class=\"markdownIt-Anchor\" href=\"#列表\">#</a> 列表</h3>\n<ol>\n<li>\n<p>列表的定义语法</p>\n<ul>\n<li>\n<div class=\"highlight-container\" data-rel=\"Python\"><figure class=\"iseeu highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>元素<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> 元素<span class=\"token number\">2</span><span class=\"token punctuation\">,</span> 元素<span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure></div></li>\n</ul>\n</li>\n<li>\n<p>什么是元素</p>\n<ul>\n<li>数据容器内的每一份数据，都称之为元素</li>\n</ul>\n</li>\n<li>\n<p>元素的类型有限制吗</p>\n<ul>\n<li>元素的数据类型没有限制，甚至元素也可以是列表，这样就定义了嵌套列表</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"列表的下标索引\"><a class=\"markdownIt-Anchor\" href=\"#列表的下标索引\">#</a> 列表的下标索引</h4>\n<p>正向</p>\n<p>反向</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202210121056386.png\"\n                      alt=\"image-20221012105629230\"\n                ></p>\n<h4 id=\"列表的方法\"><a class=\"markdownIt-Anchor\" href=\"#列表的方法\">#</a> 列表的方法</h4>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202210121109655.png\"\n                      alt=\"image-20221012110958532\"\n                ></p>\n<h4 id=\"列表的特点\"><a class=\"markdownIt-Anchor\" href=\"#列表的特点\">#</a> 列表的特点</h4>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202210121111367.png\"\n                      alt=\"image-20221012111150309\"\n                ></p>\n<h3 id=\"元组\"><a class=\"markdownIt-Anchor\" href=\"#元组\">#</a> 元组</h3>\n<p>元组同列表一样，都是可以封装多个、不同类型的元素在内。</p>\n<p>但最大的不同点在于，元组一旦定义完成，就不可修改</p>\n<h4 id=\"元组的相关操作\"><a class=\"markdownIt-Anchor\" href=\"#元组的相关操作\">#</a> 元组的相关操作</h4>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202210121225178.png\"\n                      alt=\"image-20221012122549110\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202210121231496.png\"\n                      alt=\"image-20221012123101405\"\n                ></p>\n<h3 id=\"字符串-2\"><a class=\"markdownIt-Anchor\" href=\"#字符串-2\">#</a> 字符串</h3>\n<p>字符串可以看做是一个字符的容器，支持下标索引等特性</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202210121356277.png\"\n                      alt=\"image-20221012135626146\"\n                ></p>\n<p>字符串的特点</p>\n<ul>\n<li>只可以存储字符串</li>\n<li>长度任意（取决于内存大小）</li>\n<li>支持下标索引</li>\n<li>允许重复字符串存在</li>\n<li>不可以修改（增加或删除元素等）</li>\n<li>支持 for 循环</li>\n</ul>\n<h3 id=\"序列\"><a class=\"markdownIt-Anchor\" href=\"#序列\">#</a> 序列</h3>\n<p>序列是指：内容连续、有序、而是用下标索引的一类数据容器</p>\n<p>列表、元组、字符串均可以视为序列</p>\n<p>序列支持切片，即：列表、元组、字符串均支持进行切片操作</p>\n<p>切片：从一个序列中，取出一个子序列</p>\n<p>语法： 序列 [起始下标：结束下标：步长]</p>\n<p>表示从序列中，从指定位置开始，依次取出元素，到指定位置结束，得到一个新序列</p>\n<ul>\n<li>起始下标表示从何处开始，可以留空，留空视作从头开始</li>\n<li>结束下标（不含）表示何处结束，可以留空，留空视作截取到尾部</li>\n<li>步长表示，依次取元素的间隔\n<ul>\n<li>步长 1 表示，一个个取元素</li>\n<li>步长 2 表示，每次跳过一个元素取</li>\n<li>步长 N 表示，每次跳过 N-1 个元素取</li>\n<li>步长为负数表示，反向取（注意，起始下标和结束下标也要反向标记）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"集合\"><a class=\"markdownIt-Anchor\" href=\"#集合\">#</a> 集合</h3>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202210121448620.png\"\n                      alt=\"image-20221012144818453\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202210121448777.png\"\n                      alt=\"image-20221012144839711\"\n                ></p>\n<h3 id=\"字典\"><a class=\"markdownIt-Anchor\" href=\"#字典\">#</a> 字典</h3>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202210121504310.png\"\n                      alt=\"image-20221012150409214\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202210121544041.png\"\n                      alt=\"image-20221012154431936\"\n                ></p>\n<h3 id=\"数据容器特点的对比\"><a class=\"markdownIt-Anchor\" href=\"#数据容器特点的对比\">#</a> 数据容器特点的对比</h3>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202210121557610.png\"\n                      alt=\"image-20221012155704430\"\n                ></p>\n<h3 id=\"容器通用功能\"><a class=\"markdownIt-Anchor\" href=\"#容器通用功能\">#</a> 容器通用功能</h3>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202210121622353.png\"\n                      alt=\"image-20221012162202237\"\n                ></p>\n<h2 id=\"文件\"><a class=\"markdownIt-Anchor\" href=\"#文件\">#</a> 文件</h2>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"http://tuchuang.wenhe9.cn/img/202210121713744.png\"\n                      alt=\"image-20221012171348670\"\n                ></p>\n",
            "tags": [
                "Python"
            ]
        }
    ]
}
<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>玖忆 • Posts by &#34;service mesh&#34; tag</title>
        <link>https://wait-you.github.io</link>
        <description>我本微末凡尘、可也心向天空</description>
        <language>zh-CN</language>
        <pubDate>Tue, 06 Jun 2023 09:04:38 +0800</pubDate>
        <lastBuildDate>Tue, 06 Jun 2023 09:04:38 +0800</lastBuildDate>
        <category>RabbitMQ</category>
        <category>Android</category>
        <category>Docker</category>
        <category>java</category>
        <category>git</category>
        <category>JVM</category>
        <category>es6</category>
        <category>Java</category>
        <category>JWT</category>
        <category>协程</category>
        <category>MyBatis</category>
        <category>Kotlin</category>
        <category>Node.js</category>
        <category>Python</category>
        <category>Service Mesh</category>
        <category>Vue</category>
        <category>Spring Security</category>
        <category>Spring Cloud</category>
        <category>分布式事务</category>
        <category>排序算法</category>
        <category>接口幂等性</category>
        <category>领域驱动设计</category>
        <category>设计模式</category>
        <category>Java 最佳实践</category>
        <category>面试题</category>
        <category>Hash</category>
        <category>redis</category>
        <category>mysql</category>
        <item>
            <guid isPermalink="true">https://wait-you.github.io/2023/06/06/Service-Mesh/</guid>
            <title>Service Mesh</title>
            <link>https://wait-you.github.io/2023/06/06/Service-Mesh/</link>
            <category>Service Mesh</category>
            <pubDate>Tue, 06 Jun 2023 09:04:38 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;service-mesh&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#service-mesh&#34;&gt;#&lt;/a&gt; Service Mesh&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;下一代微服务技术&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;服务开发模式和service-mesh的演化过程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#服务开发模式和service-mesh的演化过程&#34;&gt;#&lt;/a&gt; 服务开发模式和 Service Mesh 的演化过程&lt;/h3&gt;
&lt;p&gt;时代 0：开发人员想象中，不同服务间通信的方式，抽象表示如下：&lt;/p&gt;
&lt;p&gt;&lt;img  
                     lazyload
                     src=&#34;/images/loading.svg&#34;
                     data-src=&#34;http://tuchuang.wenhe9.cn/img/202212052320689.png&#34;
                      alt=&#34;image-20221205232021596&#34;
                &gt;&lt;/p&gt;
&lt;p&gt;时代 1：原始通信时代&lt;/p&gt;
&lt;p&gt;然而现实远比想象的复杂，在实际情况中，通信需要底层能够传输字节码和电子信号的物理层来完成，在 TCP 协议出现之前，服务需要自己处理网络通信所面临的丢包、乱序、重试等一系列流控问题，因此服务实现中，除了业务逻辑外，还夹杂着对网络传输问题的处理逻辑。&lt;/p&gt;
&lt;p&gt;&lt;img  
                     lazyload
                     src=&#34;/images/loading.svg&#34;
                     data-src=&#34;http://tuchuang.wenhe9.cn/img/202212052320123.png&#34;
                      alt=&#34;image-20221205232053063&#34;
                &gt;&lt;/p&gt;
&lt;p&gt;时代 2：TCP 时代&lt;/p&gt;
&lt;p&gt;为了避免每个服务都需要自己实现一套相似的网络传输处理逻辑，TCP 协议出现了，它解决了网络传输中通用的流量控制问题，将技术栈下移，从服务的实现中抽离出来，成为操作系统网络层的一部分。&lt;img  
                     lazyload
                     src=&#34;/images/loading.svg&#34;
                     data-src=&#34;http://tuchuang.wenhe9.cn/img/202212052321899.png&#34;
                      alt=&#34;image-20221205232111840&#34;
                &gt;&lt;/p&gt;
&lt;p&gt;时代 3：第一代微服务&lt;/p&gt;
&lt;p&gt;在 TCP 出现之后，机器之间的网络通信不再是一个难题，以 GFS/BigTable/MapReduce 为代表的分布式系统得以蓬勃发展。这时，分布式系统特有的通信语义又出现了，如熔断策略、负载均衡、服务发现、认证和授权、quota 限制、trace 和监控等等，于是服务根据业务需求来实现一部分所需的通信语义。&lt;/p&gt;
&lt;p&gt;时代 4：第二代微服务&lt;/p&gt;
&lt;p&gt;为了避免每个服务都需要自己实现一套分布式系统通信的语义功能，随着技术的发展，一些面向微服务架构的开发框架出现了，如 Twitter 的 Finagle、Facebook 的 Proxygen 以及 Spring Cloud 等等，这些框架实现了分布式系统通信需要的各种通用语义功能：如负载均衡和服务发现等，因此一定程度上屏蔽了这些通信细节，使得开发人员使用较少的框架代码就能开发出健壮的分布式系统。&lt;img  
                     lazyload
                     src=&#34;/images/loading.svg&#34;
                     data-src=&#34;http://tuchuang.wenhe9.cn/img/202212052322328.png&#34;
                      alt=&#34;image-20221205232220241&#34;
                &gt;&lt;/p&gt;
&lt;p&gt;时代 5：第一代 Service Mesh&lt;/p&gt;
&lt;p&gt;第二代微服务模式看似完美，但开发人员很快又发现，它也存在一些本质问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;其一，虽然框架本身屏蔽了分布式系统通信的一些通用功能实现细节，但开发者却要花更多精力去掌握和管理复杂的框架本身，在实际应用中，去&lt;strong&gt;追踪和解决框架出现的问题&lt;/strong&gt;也绝非易事；&lt;/li&gt;
&lt;li&gt;其二，&lt;strong&gt;开发框架通常只支持一种或几种特定的语言&lt;/strong&gt;，回过头来看文章最开始对&lt;strong&gt;微服务的定义，一个重要的特性就是语言无关&lt;/strong&gt;，但那些没有框架支持的语言编写的服务，很难融入面向微服务的架构体系，想因地制宜的用多种语言实现架构体系中的不同模块也很难做到；&lt;/li&gt;
&lt;li&gt;其三，框架以 lib 库的形式和服务联编，&lt;strong&gt;复杂项目依赖时的库版本兼容问题&lt;/strong&gt;非常棘手，同时，框架库的升级也无法对服务透明，服务会因为和业务无关的 lib 库升级而被迫升级；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此以 Linkerd，Envoy，NginxMesh 为代表的代理模式（边车模式）应运而生，这就是第一代 Service Mesh，它将分布式服务的通信抽象为单独一层，在这一层中实现负载均衡、服务发现、认证授权、监控追踪、流量控制等分布式系统所需要的功能，作为一个和服务对等的代理服务，和服务部署在一起，接管服务的流量，通过代理之间的通信间接完成服务之间的通信请求，这样上边所说的三个问题也迎刃而解。&lt;/p&gt;
&lt;p&gt;&lt;img  
                     lazyload
                     src=&#34;/images/loading.svg&#34;
                     data-src=&#34;http://tuchuang.wenhe9.cn/img/202212052324688.png&#34;
                      alt=&#34;image-20221205232402606&#34;
                &gt;&lt;/p&gt;
&lt;p&gt;如果我们从一个全局视角来看，就会得到如下部署图：&lt;/p&gt;
&lt;p&gt;&lt;img  
                     lazyload
                     src=&#34;/images/loading.svg&#34;
                     data-src=&#34;http://tuchuang.wenhe9.cn/img/202212052324365.png&#34;
                      alt=&#34;image-20221205232415268&#34;
                &gt;&lt;/p&gt;
&lt;p&gt;如果我们暂时略去服务，只看 Service Mesh 的单机组件组成的网络：&lt;/p&gt;
&lt;p&gt;&lt;img  
                     lazyload
                     src=&#34;/images/loading.svg&#34;
                     data-src=&#34;http://tuchuang.wenhe9.cn/img/202212052324621.png&#34;
                      alt=&#34;image-20221205232426529&#34;
                &gt;&lt;/p&gt;
&lt;p&gt;所谓 Service Mesh，也就是服务网格。它看起来确实就像是一个由若干服务代理所组成的错综复杂的网格。&lt;/p&gt;
&lt;p&gt;时代 6：第二代 Service Mesh&lt;/p&gt;
&lt;p&gt;第一代 Service Mesh 由一系列独立运行的单机代理服务构成，为了提供统一的上层运维入口，演化出了集中式的控制面板，所有的单机代理组件通过和控制面板交互进行网络拓扑策略的更新和单机数据的汇报。这就是以 Istio 为代表的第二代 Service Mesh。&lt;/p&gt;
&lt;p&gt;&lt;img  
                     lazyload
                     src=&#34;/images/loading.svg&#34;
                     data-src=&#34;http://tuchuang.wenhe9.cn/img/202212052325344.png&#34;
                      alt=&#34;image-20221205232533256&#34;
                &gt;&lt;/p&gt;
&lt;p&gt;只看单机代理组件 (数据面板) 和控制面板的 Service Mesh 全局部署视图如下：&lt;img  
                     lazyload
                     src=&#34;/images/loading.svg&#34;
                     data-src=&#34;http://tuchuang.wenhe9.cn/img/202212052325162.png&#34;
                      alt=&#34;image-20221205232545075&#34;
                &gt;&lt;/p&gt;
&lt;p&gt;Service Mesh 的定义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;服务网格是一个&lt;em&gt;&lt;strong&gt;基础设施层&lt;/strong&gt;，用于处理服务间通信。云原生应用有着复杂的服务拓扑，服务网格保证&lt;/em&gt;&lt;em&gt;请求在这些拓扑中可靠地穿梭&lt;/em&gt; *。在实际应用当中，服务网格通常是由一系列轻量级的&lt;strong&gt;网络代理&lt;/strong&gt;组成的，它们与应用程序部署在一起，但&lt;strong&gt;对应用程序透明&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个定义中，有四个关键词：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;基础设施层&lt;/strong&gt;&lt;/em&gt; +&lt;em&gt;&lt;strong&gt; 请求在这些拓扑中可靠穿梭&lt;/strong&gt;&lt;/em&gt;：这两个词加起来描述了 Service Mesh 的定位和功能，是不是似曾相识？没错，你一定想到了 TCP；&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;网络代理&lt;/strong&gt;&lt;/em&gt;：这描述了 Service Mesh 的实现形态；&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;对应用透明&lt;/strong&gt;&lt;/em&gt;：这描述了 Service Mesh 的关键特点，正是由于这个特点，Service Mesh 能够解决以 Spring Cloud 为代表的第二代微服务框架所面临的三个本质问题；&lt;/p&gt;
&lt;p&gt;Service Mesh 优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;屏蔽分布式系统通信的复杂性 (负载均衡、服务发现、认证授权、监控追踪、流量控制等等)，服务只用关注业务逻辑；&lt;/li&gt;
&lt;li&gt;真正的语言无关，服务可以用任何语言编写，只需和 Service Mesh 通信即可；&lt;/li&gt;
&lt;li&gt;对应用透明，Service Mesh 组件可以单独升级；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Service Mesh 的挑战：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Service Mesh 组件以代理模式计算并转发请求，一定程度上会降低通信系统性能，并增加系统资源开销；&lt;/li&gt;
&lt;li&gt;Service Mesh 组件接管了网络流量，因此服务的整体稳定性依赖于 Service Mesh，同时额外引入的大量 Service Mesh 服务实例的运维和管理也是一个挑战；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;东西流量和南北流量&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#东西流量和南北流量&#34;&gt;#&lt;/a&gt; 东西流量和南北流量&lt;/h2&gt;
&lt;p&gt;南北流量（NORTH-SOUTH traffic）和东西流量（EAST-WEST traffic）是数据中心环境中的网络流量模式。&lt;/p&gt;
&lt;p&gt;假设我们尝试通过浏览器访问某些 Web 应用。Web 应用部署在位于某个数据中心的应用服务器中。在多层体系结构中，典型的数据中心不仅包含应用服务器，还包含其他服务器，如负载均衡器、数据库等，以及路由器和交换机等网络组件。假设应用服务器是负载均衡器的前端。&lt;/p&gt;
&lt;p&gt;当我们访问 web 应用时，会发生以下类型的网络流量：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户端（位于数据中心一侧的浏览器）与负载均衡器（位于数据中心）之间的网络流量&lt;/li&gt;
&lt;li&gt;负载均衡器、应用服务器、数据库等之间的网络流量，它们都位于数据中心。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img  
                     lazyload
                     src=&#34;/images/loading.svg&#34;
                     data-src=&#34;http://tuchuang.wenhe9.cn/img/202212052334033.png&#34;
                      alt=&#34;image-20221205233404891&#34;
                &gt;&lt;/p&gt;
&lt;h3 id=&#34;南北流量&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#南北流量&#34;&gt;#&lt;/a&gt; 南北流量&lt;/h3&gt;
&lt;p&gt;在这个例子中，前者即即客户端和服务器之间的流量被称为南北流量。简而言之，南北流量是 server-client 流量。&lt;/p&gt;
&lt;h3 id=&#34;东西流量&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#东西流量&#34;&gt;#&lt;/a&gt; 东西流量&lt;/h3&gt;
&lt;p&gt;第二种流量即不同服务器之间的流量与数据中心或不同数据中心之间的网络流被称为东西流量。简而言之，东西流量是 server-server 流量。&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>

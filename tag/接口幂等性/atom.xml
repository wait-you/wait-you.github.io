<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://wait-you.github.io</id>
    <title>玖忆 • Posts by &#34;接口幂等性&#34; tag</title>
    <link href="https://wait-you.github.io" />
    <updated>2023-06-06T01:09:49.000Z</updated>
    <category term="RabbitMQ" />
    <category term="Android" />
    <category term="Docker" />
    <category term="java" />
    <category term="git" />
    <category term="JVM" />
    <category term="es6" />
    <category term="Java" />
    <category term="JWT" />
    <category term="协程" />
    <category term="MyBatis" />
    <category term="Kotlin" />
    <category term="Node.js" />
    <category term="Python" />
    <category term="Service Mesh" />
    <category term="Vue" />
    <category term="Spring Security" />
    <category term="Spring Cloud" />
    <category term="分布式事务" />
    <category term="排序算法" />
    <category term="接口幂等性" />
    <category term="领域驱动设计" />
    <category term="设计模式" />
    <category term="Java 最佳实践" />
    <category term="面试题" />
    <category term="Hash" />
    <category term="redis" />
    <entry>
        <id>https://wait-you.github.io/2023/06/06/%E6%8E%A5%E5%8F%A3%E5%B9%82%E7%AD%89%E6%80%A7/</id>
        <title>接口幂等性</title>
        <link rel="alternate" href="https://wait-you.github.io/2023/06/06/%E6%8E%A5%E5%8F%A3%E5%B9%82%E7%AD%89%E6%80%A7/"/>
        <content type="html">&lt;h1 id=&#34;接口幂等性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#接口幂等性&#34;&gt;#&lt;/a&gt; 接口幂等性&lt;/h1&gt;
&lt;h2 id=&#34;什么是幂等性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什么是幂等性&#34;&gt;#&lt;/a&gt; 什么是幂等性&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;接口幂等性就是用户对于同一操作发起的一次请求或者多次请求的结果是一致的&lt;/strong&gt;，不会因为多次点击而产生副作用；比如说支付场景，用户购买了商品支付成功，但是返回结果的时候网络异常，此时钱已经扣了，用户再次点击按钮，此时会进行二次扣款，返回结果成功，用户查询语法发现多扣钱了，流水记录也变成了两条，这就是没有保证接口幂等性&lt;/p&gt;
&lt;h2 id=&#34;哪些情况需要防止&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#哪些情况需要防止&#34;&gt;#&lt;/a&gt; 哪些情况需要防止&lt;/h2&gt;
&lt;p&gt;用户多次点击按钮&lt;/p&gt;
&lt;p&gt;用户页面回退再次提交&lt;/p&gt;
&lt;p&gt;微服务互相调用，由于网络问题，导致请求失败，feign 触发重试机制&lt;/p&gt;
&lt;p&gt;其他业务情况&lt;/p&gt;
&lt;h2 id=&#34;幂等解决方案将&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#幂等解决方案将&#34;&gt;#&lt;/a&gt; 幂等解决方案将&lt;/h2&gt;
&lt;h3 id=&#34;token机制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#token机制&#34;&gt;#&lt;/a&gt; token 机制&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;服务端提供了发送 token 的接口，我们在分析业务的时候，哪些业务是存在幂等问题的，就必须在执行业务前，先去获取 token，服务器会把 token 保存都 redis 中&lt;/li&gt;
&lt;li&gt;然后调用业务接口请求时，把 token 携带过去，一般放在请求头部&lt;/li&gt;
&lt;li&gt;服务器判断 token 是否存在 redis 中，存在表示第一次请求，然后删除 token，继续执行业务&lt;/li&gt;
&lt;li&gt;如果 token 不存在 redis 中，就表示是重复操作，直接返回重复标记给 client，这样就保证了业务代码，不被重复执行&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;危险性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;先删除 token 还是后删除 token&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先删除可能导致业务确实没有执行，重试还带上之前的 token，由于放重涉及导致请求还是不能执行&lt;/li&gt;
&lt;li&gt;后删除可能导致业务处理成功，但是服务闪退，出现超时，没有删除 token，别人继续重试，导致业务被执行两遍&lt;/li&gt;
&lt;li&gt;我们最好设计为先删除 token，如果业务调用失败，就重新获取 token 再次请求&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Token 获取、比较和删除必须是原子操作&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;redis.get (token)、token.equals、redis.del (token)，如果这三个操作不是原子，可能导致高并发下，都 get 到同样的数据，判断都成功，继续业务执行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以在 redis 使用 lua 脚本完成这个操作&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34; data-rel=&#34;Lua&#34;&gt;&lt;figure class=&#34;iseeu highlight lua&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; redis.call(&lt;span class=&#34;string&#34;&gt;&amp;#x27;get&amp;#x27;&lt;/span&gt;, KEYS[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]==ARGV[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;])&lt;span class=&#34;keyword&#34;&gt;then&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; redis.call(&lt;span class=&#34;string&#34;&gt;&amp;#x27;del&amp;#x27;&lt;/span&gt;, KEYS[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;])&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;各种锁机制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#各种锁机制&#34;&gt;#&lt;/a&gt; 各种锁机制&lt;/h3&gt;
&lt;h4 id=&#34;数据库悲观锁&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数据库悲观锁&#34;&gt;#&lt;/a&gt; 数据库悲观锁&lt;/h4&gt;
&lt;p&gt;悲观锁使用时一般伴随事务一起使用，数据锁定时间可能会很长，需要根据实际情况选用，另外要注意的是，id 字段一定是主键或者唯一索引，不然很可能造成锁表的结果，处理起来会非常麻烦&lt;/p&gt;
&lt;h4 id=&#34;数据库乐观锁&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数据库乐观锁&#34;&gt;#&lt;/a&gt; 数据库乐观锁&lt;/h4&gt;
&lt;p&gt;这种方法适合在更新的场景中&lt;/p&gt;
&lt;p&gt;根据 version 版本，也就是在操作数据库前先获取当前商品的 version 版本号，然后操作的时候带上此 version 号&lt;/p&gt;
&lt;p&gt;乐观锁主要使用于处理读多写少的问题&lt;/p&gt;
&lt;h4 id=&#34;业务层分布式锁&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#业务层分布式锁&#34;&gt;#&lt;/a&gt; 业务层分布式锁&lt;/h4&gt;
&lt;p&gt;如果多个机器可能在同一时间同时处理相同的数据，比如多台机器定时任务都拿到了相同数据处理，我们就可以加分布式锁，锁定此数据，处理完成后释放锁，获取到锁的必须先判断这个数据是否被处理过&lt;/p&gt;
&lt;h3 id=&#34;各种唯一约束&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#各种唯一约束&#34;&gt;#&lt;/a&gt; 各种唯一约束&lt;/h3&gt;
&lt;h4 id=&#34;数据库唯一约束&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数据库唯一约束&#34;&gt;#&lt;/a&gt; 数据库唯一约束&lt;/h4&gt;
&lt;p&gt;插入数据，应该按照唯一索引进行插入，比如订单号，相同的订单号就不可能有两条记录插入&lt;/p&gt;
&lt;p&gt;这个机制是利用了数据库的主键唯一约束的特性，解决了在 insert 场景时幂等性问题，但主键的要求不能是自增的主键，这样就需要业务生成全局唯一 的主键&lt;/p&gt;
&lt;p&gt;如果是分库分表的场景下，路由规则要保证相同请求下，落地在同一个数据库和同一个表中，要不然数据库主键约束就不其效果了，因为是不同的数据库和表主键不相关&lt;/p&gt;
&lt;h4 id=&#34;redis-set防重&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#redis-set防重&#34;&gt;#&lt;/a&gt; redis set 防重&lt;/h4&gt;
&lt;p&gt;很多数据需要处理，只能被处理一次，比如我们可以计算数据的 MD5 将其放入 redis 的 set，每次处理数据，先看这个 MD5 是否已经存在，存在就不处理&lt;/p&gt;
&lt;h3 id=&#34;防重表&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#防重表&#34;&gt;#&lt;/a&gt; 防重表&lt;/h3&gt;
&lt;p&gt;使用订单号 orderNo 作为去重表的唯一索引，把唯一索引插入去重表，在进行业务操作，且他们在同一个事物中，这个保证了重复请求时，因为去重表有唯一约束，导致请求失败，避免了幂等性问题，这里要注意的是，去重表和业务表应该放在同一个库中，这样就保证了在同一个事务中，即使业务操作失败了，也会把去重表的数据回滚 ，这个很好的保证了数据的一致性&lt;/p&gt;
&lt;h3 id=&#34;全局请求唯一id&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#全局请求唯一id&#34;&gt;#&lt;/a&gt; 全局请求唯一 id&lt;/h3&gt;
&lt;p&gt;调用接口时，生成一个唯一的 id，redis 将数据保存到集合中（去重），存在即处理过&lt;/p&gt;
&lt;p&gt;可与使用 nginx 设置每一个请求的唯一 id&lt;/p&gt;
&lt;p&gt;proxy_set_header X-Rquest-Id $request_id;&lt;/p&gt;
</content>
        <category term="接口幂等性" />
        <updated>2023-06-06T01:09:49.000Z</updated>
    </entry>
</feed>

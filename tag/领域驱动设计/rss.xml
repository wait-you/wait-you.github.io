<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>玖忆 • Posts by &#34;领域驱动设计&#34; tag</title>
        <link>https://wait-you.github.io</link>
        <description>我本微末凡尘、可也心向天空</description>
        <language>zh-CN</language>
        <pubDate>Tue, 06 Jun 2023 09:10:51 +0800</pubDate>
        <lastBuildDate>Tue, 06 Jun 2023 09:10:51 +0800</lastBuildDate>
        <category>RabbitMQ</category>
        <category>Android</category>
        <category>Docker</category>
        <category>java</category>
        <category>git</category>
        <category>JVM</category>
        <category>es6</category>
        <category>Java</category>
        <category>JWT</category>
        <category>协程</category>
        <category>MyBatis</category>
        <category>Kotlin</category>
        <category>Node.js</category>
        <category>Python</category>
        <category>Service Mesh</category>
        <category>Vue</category>
        <category>Spring Security</category>
        <category>Spring Cloud</category>
        <category>分布式事务</category>
        <category>排序算法</category>
        <category>接口幂等性</category>
        <category>领域驱动设计</category>
        <category>设计模式</category>
        <category>Java 最佳实践</category>
        <category>面试题</category>
        <category>Hash</category>
        <category>redis</category>
        <category>mysql</category>
        <item>
            <guid isPermalink="true">https://wait-you.github.io/2023/06/06/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/</guid>
            <title>领域驱动设计</title>
            <link>https://wait-you.github.io/2023/06/06/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/</link>
            <category>领域驱动设计</category>
            <pubDate>Tue, 06 Jun 2023 09:10:51 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;领域驱动设计&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#领域驱动设计&#34;&gt;#&lt;/a&gt; 领域驱动设计&lt;/h1&gt;
&lt;h2 id=&#34;大型系统是如何变老的&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#大型系统是如何变老的&#34;&gt;#&lt;/a&gt; 大型系统是如何 &amp;quot;变老&amp;quot; 的&lt;/h2&gt;
&lt;h3 id=&#34;面临的问题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#面临的问题&#34;&gt;#&lt;/a&gt; 面临的问题&lt;/h3&gt;
&lt;p&gt;当一个项目使用过长，他的运行效率低、代码乱，需要重构的时候，需要面临一些问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;沟通难
&lt;ul&gt;
&lt;li&gt;产品提出一个问题，开发却要很久&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;开发难
&lt;ul&gt;
&lt;li&gt;代码膨胀，对于大型软件，一个旧的类可能有上千行，无法确定更改后的影响有多大&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;测试难
&lt;ul&gt;
&lt;li&gt;改了个需求，测试需要组织庞大的测试计划&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;创新难
&lt;ul&gt;
&lt;li&gt;系统背负的业务越来越重，已经基本丧失了对新技术的灵活敏感&lt;/li&gt;
&lt;li&gt;比如从 &lt;code&gt;orm&lt;/code&gt;  从 &lt;code&gt;hebernate&lt;/code&gt;  换到 &lt;code&gt;mybatis&lt;/code&gt; ，因为业务代码是耦合的，无法轻易的更换&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;微服务架构更在防止系统老化吗&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#微服务架构更在防止系统老化吗&#34;&gt;#&lt;/a&gt; 微服务架构更在防止系统 &amp;quot; 老化’&#39; 吗&lt;/h3&gt;
&lt;p&gt;&lt;img  
                     lazyload
                     src=&#34;/images/loading.svg&#34;
                     data-src=&#34;http://tuchuang.wenhe9.cn/img/202211051602718.png&#34;
                      alt=&#34;image-20221105160246592&#34;
                &gt;&lt;/p&gt;
&lt;p&gt;虽然在一开始将一个电商项目根据功能分成了若干个微服务，但是随着系统体量的不断增大，某一个或某几个微服务的功能可能也会变得无比庞大，导致系统 &amp;quot;老化&amp;quot;。所以微服务对于防止系统老化只是一个治标不治本的方式。&lt;/p&gt;
&lt;h3 id=&#34;ddd被认为是目前最理想的方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ddd被认为是目前最理想的方式&#34;&gt;#&lt;/a&gt; DDD 被认为是目前最理想的方式&lt;/h3&gt;
&lt;p&gt;&lt;img  
                     lazyload
                     src=&#34;/images/loading.svg&#34;
                     data-src=&#34;http://tuchuang.wenhe9.cn/img/202211051614128.png&#34;
                      alt=&#34;image-20221105161428086&#34;
                &gt;&lt;/p&gt;
&lt;p&gt;在业务上分成一个个的 &lt;code&gt;domain&lt;/code&gt;  领域，每个领域只针对自己业务上的属性，系统上不在以 &lt;code&gt;mvc&lt;/code&gt;  构建，而是以带有自己功能的领域来构成。这样在微服务进行拆分时，最理想的方式是可以随意按照领域拆分，这样子的话，项目就可以自由组合，结合微服务的体系，更好的体现微服务的能力，使得系统茁壮的成长。&lt;/p&gt;
&lt;h3 id=&#34;ddd的保证措施&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ddd的保证措施&#34;&gt;#&lt;/a&gt; DDD 的保证措施&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;DDD&lt;/code&gt;  使得一些工作经验不多的人可以对相关功能进行负责，但是需要一些保证措施。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mvc&lt;/code&gt;  架构的隐患&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据库
&lt;ul&gt;
&lt;li&gt;用户的模块发生变化，比如新增了一个字段等等，那么在代码层面可能都需要做一个修改&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;其他的微服务调用或者第三方 api
&lt;ul&gt;
&lt;li&gt;调用方式发生改变&lt;/li&gt;
&lt;li&gt;其他微服务或第三方 api 业务发生变化，比如校验码发生变化，那么在业务代码对获取到的校验码的判断也需要做出相应的修改&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;消息队列
&lt;ul&gt;
&lt;li&gt;当中间介更换的时候，调用的方式也需要进行变化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img  
                     lazyload
                     src=&#34;/images/loading.svg&#34;
                     data-src=&#34;http://tuchuang.wenhe9.cn/img/202211051626670.png&#34;
                      alt=&#34;&#34;
                &gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mvc&lt;/code&gt;  到 &lt;code&gt;ddd&lt;/code&gt;  的改造&lt;/p&gt;
&lt;p&gt;&lt;img  
                     lazyload
                     src=&#34;/images/loading.svg&#34;
                     data-src=&#34;http://tuchuang.wenhe9.cn/img/202211052014483.png&#34;
                      alt=&#34;image-20221105201437426&#34;
                &gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;将周边的所有的变化隔离开，留下自己的核心&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;数据库&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于数据库的操作不再是引入操作数据库的 &lt;code&gt;dao&lt;/code&gt; ，而是通过一个 &lt;code&gt;Repository&lt;/code&gt;  接口，这样子当数据源发生变化时，通过这样的一个接口隔离，这样子 &lt;code&gt;orm&lt;/code&gt;  的具体实现不会影响到业务，切换的时候只需要更换 &lt;code&gt;Repostory&lt;/code&gt;  的具体的实现类，整体的业务不需要变化&lt;/li&gt;
&lt;li&gt;使得业务只需要拿到数据即可，至于数据是从哪里来的，这个不用管&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实体&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;以往的实体 &lt;code&gt;pojo&lt;/code&gt;  只需要有一些属性，一些 &lt;code&gt;setter&lt;/code&gt; 、 &lt;code&gt;getter&lt;/code&gt; ，在 &lt;code&gt;ddd&lt;/code&gt;  中把实体和他的业务方法封装到一起，构成一个充血模型，以前的 &lt;code&gt;pojo&lt;/code&gt;  是一个贫血模型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;以前的 &lt;code&gt;pojo&lt;/code&gt;  实体会把所有属性放在一个大的实体类里，然后通过上层的 &lt;code&gt;service&lt;/code&gt;  来对这些属性做不同的操作，实现不同的业务，这样会造成&lt;strong&gt;贫血失忆症&lt;/strong&gt;的后果，即从这个实体上看不出他是要做什么事情的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;所以在充血模型，把业务方法上进来的好处就是，这个实体要做什么事情就会一目了然的&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;值对象&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;访问值对象必须通过实体来访问&lt;/li&gt;
&lt;li&gt;但也不是所有场景都必须通过实体类获取值对象，根据是否是业务来判断&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;业务&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DDD&lt;/code&gt;  业务指造成实体状态变化的过程，即使得实体的属性发生变化的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;防腐层&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;隔离外部服务
&lt;ul&gt;
&lt;li&gt;封装一个 &lt;code&gt;SafeService&lt;/code&gt;  接口，将其他微服务或第三方 api 的调用放到这个接口里，在这个接口里进行调用和返回结果的判断&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;隔离第三方组件
&lt;ul&gt;
&lt;li&gt;封装 &lt;code&gt;MessageProducer&lt;/code&gt;  和 &lt;code&gt;MessageConsumer&lt;/code&gt;  接口，在这个接口里指定对应的组件，并实现对应使用该组件的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;领域服务 隔离实体&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将修改实体状态而业务代码，也封装成一个接口，在接口的方法中调用实体的业务方法，这样子的好处是，以后再新增一些新的业务的时候，也不会说使得业务层类的代码过于庞大，并且因为使用接口组合的方式，业务的可扩展性也更好，耦合度更低&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;重新编排后的好处&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;业务逻辑清晰，数据流转与业务逻辑完全分离&lt;/li&gt;
&lt;li&gt;各个模块的功能都是相对独立的，没有外部依赖，可以单独测试&lt;/li&gt;
&lt;li&gt;原有的 &lt;code&gt;service&lt;/code&gt;  不再包含任何具体业务的逻辑，仅仅作为组件编排&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ddd四层架构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ddd四层架构&#34;&gt;#&lt;/a&gt; DDD 四层架构&lt;/h3&gt;
&lt;p&gt;&lt;img  
                     lazyload
                     src=&#34;/images/loading.svg&#34;
                     data-src=&#34;http://tuchuang.wenhe9.cn/img/202211052021437.png&#34;
                      alt=&#34;image-20221105202154385&#34;
                &gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
